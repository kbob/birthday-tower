#!/usr/bin/env python

from collections import namedtuple
from itertools import groupby
from queue import SimpleQueue, Empty
import re
import serial
import threading
import time
import tkinter as tk


# XXX on startup, we should read current param values from Teensy.


# Logging logs to the message area at the bottom of the window.

def log(message):
    try:
        app.message_area.append_message(message)
    except:
        # handle exceptions when I find out what they are
        raise


# Events pass between the Tk and Teensy threads via two queues.
# Teensy receives QuitEvent and ParamUpdateEvent events.
# Tk receives ConnectEvent and DisconnectEvent events.
#
# # The ConnectEvent includes the newly connected sketch's
# parameters as a list of Parameters.

teensy_to_tk = SimpleQueue()
tk_to_teensy = SimpleQueue()

class Parameter(namedtuple('Parameter',
        'group_member, min, max, default, units')):
    
    @property
    def group(self):
        return self.group_member.split('.')[0]
    
    @property
    def member(self):
        return self.group_member.split('.')[1]


class ConnectEvent(namedtuple('ConnectEvent', 'params')):
    pass

class DisconnectEvent:
    pass

class QuitEvent:
    pass

class ParamUpdateEvent(namedtuple('ParamUpdateEvent',
        'group_member new_value')):
    pass


# I love/hate regular expressions...
# Deconstruct a parameter description into a dictionary.
float_pattern = r'[-+]? (?: \d+(?:\.\d*)? | \.\d+ ) (?:[Ee][-+]?\d+)?'

param_pattern = rf'''(?x)    # verbose regex syntax
    (?P<group_member> \w+\.\w+) \s+
    (?P<min> {float_pattern}) \s+
    (?P<max> {float_pattern}) \s+
    (?P<default> {float_pattern}) \s+
    (?: (?P<units> \w+) )? \n
'''
param_match = re.compile(param_pattern).match


class TeensyThread(threading.Thread):
    
    """manage the Teensy's serial connection.
       Continually try to connect.  On connection, send Tk the
       Teensy's parameter descriptions.  While connected, wait
       for Tk to send parameter updates and forward them to the
       Teensy.
    """
    def __init__(self):
        super().__init__()

    def run(self):
        while True:

            # Open the Teensy serial port.
            try:
                port = serial.serial_for_url('hwgrep://16C0&n=2')
            except serial.serialutil.SerialException:
                time.sleep(1)
                continue
            time.sleep(0.2) # Wait for Teensy to finish setup.

            # Collect a list of parameters.
            port.write(b'list\n')
            params = []
            while True:
                line = port.readline()
                if line == b'-\n':
                    break
                param = self.parse_param(line)
                if param:
                    params.append(param)

            # Send the parameters to tkinter.
            teensy_to_tk.put(ConnectEvent(params))

            # Monitor the Teensy status, send parameters as needed.
            while True:
                
                # Get a parameter update.
                try:
                    event = tk_to_teensy.get(block=True, timeout=1)
                    if isinstance(event, QuitEvent):
                        return
                    elif isinstance(event, ParamUpdateEvent):
                        cmd = f'set {event.group_member} {event.new_value}\n'
                        port.write(cmd.encode('utf-8'))
                except Empty:
                    pass

                # Check that Teensy is connected.
                try:
                    port.cts
                except OSError as x:
                    # Teensy died.
                    del port
                    teensy_to_tk.put(DisconnectEvent())
                    time.sleep(5) # let Teensyduino run
                    break
    
    def parse_param(self, param):
        m = param_match(param.decode('utf-8'))
        if m:
            d = m.groupdict()
            d['min'] = int(d['min'])
            d['max'] = int(d['max'])
            d['default'] = int(d['default'])
            return Parameter(**d)


#### ### ## #   #   #   #  # # ## ### ###### ### ## #   #   #   #  # # ## ####


class SlideyBoy(tk.Frame):

    """a combined slider and text entry box for numeric input."""

    def __init__(self, parent, param):

        def entry_validate(reason, new_text):
            # print(f'validate({reason!r}, {new_text!r})')
            if reason != 'key':
                self.entry.select_range(0, tk.END)
            if reason == 'forced':
                # print('=> True')
                return True
            # if reason == 'key' and new_text == '':
            #     return True
            ok = new_text.isdigit() and param.min <= int(new_text) <= param.max
            if ok:
                # log(f'Setting Teensy's {param.group_member} = {new_text}')
                self.entry.after_idle(self.send_value)
            return ok

        def entry_invalid(*args):
            # print(f'invalid')
            # print(f'{self.slider.get()=!r}')
            last_valid = str(self.slider.get())
            self.var.set(last_valid)
            self.var.set(last_valid)
            # print('done')

        super().__init__(parent)
        self.param = param
        self.var = tk.StringVar(value=str(param.default))
        self.label = tk.Label(self, text=param.member)
        self.slider = tk.Scale(self,
            from_=param.max, to=param.min,
            showvalue=False,
            variable=self.var)
        self.entry = tk.Entry(self,
            width=6,
            justify=tk.RIGHT,
            textvariable=self.var)
        # add handlers after self.entry is assigned.
        self.entry.configure(
            validate='all',
            validatecommand=(self.register(entry_validate), '%V', '%P;'),
            invalidcommand=self.register(entry_invalid))
        def slider_command(value):
            self.send_value()
        self.slider.configure(command=slider_command)
        self.units = tk.Label(self, text=param.units or '')

        self.label.grid(column=0, row=0)
        self.slider.grid(column=0, row=1, sticky=tk.N + tk.S)
        self.entry.grid(column=0, row=2)
        self.units.grid(column=0, row=3)

    def enable(self):
        self.slider.configure(state=tk.NORMAL)
        self.entry.configure(state=tk.NORMAL)

    def disable(self):
        self.slider.configure(state=tk.DISABLED)
        self.entry.configure(state=tk.DISABLED)

    def get(self):
        return int(self.var.get())
    
    def set(self, value):
        self.var.set(str(value))

    def send_value(self):
        name = self.param.group_member
        value = self.get()
        log(f"Setting Teensy's {name} = {value!r}")
        tk_to_teensy.put(ParamUpdateEvent(name, value))


class GroupFrame(tk.LabelFrame):

    """a tkinter frame holding a group of related slidey boys."""

    def __init__(self, parent, group_name, params):
        super().__init__(parent, text=group_name)
        self.params = params
        self.slidey_boys = []
        for (column, param) in enumerate(params, start=1):
            sboy = SlideyBoy(self, param)
            sboy.grid(row=1, column=column)
            self.slidey_boys.append(sboy)
        self.reset = tk.Button(self, text='Reset', command=self.reset)
        self.reset.grid(row=2, column=len(self.slidey_boys))

    def reset(self):
        for param, sboy in zip(self.params, self.slidey_boys):
            sboy.set(param.default)
            sboy.send_value()


class SliderArea(tk.Frame):

    def __init__(self, parent):
        # super().__init__(parent, height=180, width=200)
        super().__init__(parent)
        self.unconfigured = tk.Label(self, text='No configuration.')
        # self.rowconfigure(1, minsize=180)
        self.columnconfigure(1, weight=1)
        self.unconfigured.grid(row=1, column=1)
        self.params = []
        self.group_frames = []
        self.slidey_boys = []

    def activate(self, params):
        self.unconfigured.destroy()
        if self.params_similar(params):
            log('Reusing configuration.')
            for sboy in self.slidey_boys:
                sboy.send_value()
                sboy.enable()
        else:
            log('Creating new configuration.')
            for group in self.group_frames:
                group.destroy()
            self.group_frames = []
            self.params = params
            self.create_param_groups(params)

    def deactivate(self):
        for  sboy in self.slidey_boys:
                sboy.disable()

    def params_similar(self, params):
        if len(self.params) != len(params):
            return False
        for (old, new) in zip(self.params, params):
            for field in ('group_member', 'min', 'max', 'units'):
                if getattr(old, field) != getattr(new, field):
                    return False
        return True

    def create_param_groups(self, params):
        self.group_frames = []
        self.slidey_boys = []
        for (group, members) in groupby(params, lambda p: p.group):
            # XXX
            members = list(members)
            group_frame = GroupFrame(self, group, members)
            group_frame.grid(row=1, column=len(self.group_frames))
            self.group_frames.append(group_frame)
            self.slidey_boys.extend(group_frame.slidey_boys)

    # def create_param_groups(self, params):
    #     group_frames = []
    #     slidey_boys = []
    #     for (group, members) in groupby(params, lambda p: p.group):
    #         members = list(members)
    #         frame = tk.LabelFrame(self, text=group)
    #         for (column, member) in enumerate(members, start=1):
    #             sb = SlideyBoy(frame, member)
    #             sb.grid(row=1, column=column)
    #             slidey_boys.append(sb)
    #         reset = tk.Button(frame, text='Reset')
    #         reset.grid(row=2, column=len(members))
    #         group_frames.append(frame)
    #         frame.grid(row=1, column=len(group_frames))
    #     self.group_frames = group_frames
    #     self.slidey_boys = slidey_boys


class MessageArea(tk.Frame):

    def __init__(self, parent):
        super().__init__(parent)
        self.xscroll = tk.Scrollbar(self, orient=tk.HORIZONTAL)
        self.yscroll = tk.Scrollbar(self, orient=tk.VERTICAL)
        self.text = tk.Text(self,
            height=10,
            wrap=tk.NONE,
            state=tk.DISABLED,
            xscrollcommand=self.xscroll.set,
            yscrollcommand=self.yscroll.set)
        self.xscroll.config(command=self.text.xview)
        self.yscroll.config(command=self.text.yview)
        
        self.text.grid(row=0, column=0, sticky=tk.NE + tk.SW)
        self.yscroll.grid(row=0, column=1, sticky=tk.N + tk.S)
        self.xscroll.grid(row=1, column=0, sticky=tk.E + tk.W)

    def append_message(self, msg):
        msg = msg.rstrip()
        self.text.configure(state=tk.NORMAL)
        end_was_visible = self.yscroll.get()[1] == 1.0
        self.text.insert(tk.END, '\n' + msg)
        if end_was_visible:
            self.text.see(tk.END)
        self.text.configure(state=tk.DISABLED)



# Static widget tree
#
# App
#   # Row 1
#   Label - window title
#   # Row 2
#   SliderArea
#       Label - no sketch
#   # Row 3
#   MessageArea
#       TextArea
#       Scrollbar - Vertical
#       Scrollbar - Horizontal
#   Row 4
#   Button - Quit

class App(tk.Tk):

    def __init__(self):
        super().__init__()
        self.title('Teensy Tweaker')
        self.title = tk.Label(self, text='Teensy Tweaker')
        self.slider_area = SliderArea(self)
        self.message_area = MessageArea(self)
        self.quit_button = tk.Button(text='Quit', command=self.destroy)

        self.title.grid(row=1, column=1)
        self.slider_area.grid(row=2, column=1, sticky=tk.E + tk.W)
        self.message_area.grid(row=3, column=1, sticky=tk.E + tk.W)
        self.quit_button.grid(row=4, column=1, sticky=tk.E, padx=30, pady=10)

        self.monitor_queue()
        self.teensy_thread = TeensyThread()
        self.teensy_thread.start()
        self.bind('<Destroy>', self.handle_destroy_event)

    def handle_destroy_event(self, event):
        if event.widget == self and self.teensy_thread.is_alive():
            tk_to_teensy.put(QuitEvent())
            self.teensy_thread.join()

    def set_text(self, text):
        self.text.delete('1.0', tk.END)
        self.text.insert(tk.END, text)

    def monitor_queue(self):
        self.after(200, self.monitor_queue)
        try:
            event = teensy_to_tk.get_nowait()
        except Empty:
            return
        if isinstance(event, DisconnectEvent):
            log('Teensy disconnected.')
            self.slider_area.deactivate()
        elif isinstance(event, ConnectEvent):
            log('Teensy connected.')
            self.slider_area.activate(event.params)


if __name__ == '__main__':
    app = App()
    app.mainloop()
