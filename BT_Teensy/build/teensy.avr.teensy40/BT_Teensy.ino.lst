
/private/var/folders/xz/m4ytl1d165jby0s5kbw0bddc0000gn/T/arduino/sketches/B815DB9698F1AA4BFA2C5043A2194FAD/BT_Teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20003ac0 	.word	0x20003ac0
6000142c:	20008740 	.word	0x20008740

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fa7a 	bl	60001938 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fa18 	bl	60001948 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fa84 	bl	60001a58 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc15 	bl	60001d90 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fbb8 	bl	60001d20 <analog_init>
	pwm_init();
600015b0:	f000 fc02 	bl	60001db8 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 fa7e 	bl	60001ab4 <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f9c0 	bl	6000193c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 fb0f 	bl	60001be4 <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f9b9 	bl	60001944 <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f9b5 	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fbd7 	bl	60001d88 <____libc_init_array_veneer>
	main();
600015da:	f000 fbf1 	bl	60001dc0 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00013fd8 	.word	0x00013fd8
600015ec:	600020a8 	.word	0x600020a8
600015f0:	00000000 	.word	0x00000000
600015f4:	20003ac0 	.word	0x20003ac0
600015f8:	60016084 	.word	0x60016084
600015fc:	20000000 	.word	0x20000000
60001600:	20003800 	.word	0x20003800
60001604:	0000c1d5 	.word	0x0000c1d5
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	0000b6e1 	.word	0x0000b6e1
60001618:	200086a4 	.word	0x200086a4
6000161c:	0000b6e5 	.word	0x0000b6e5
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	200086a8 	.word	0x200086a8
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaabf 	.word	0xaaaaaabf
60001668:	00200007 	.word	0x00200007
6000166c:	20068000 	.word	0x20068000

60001670 <set_audioClock(int, long, unsigned long, bool)>:
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
60001670:	b91b      	cbnz	r3, 6000167a <set_audioClock(int, long, unsigned long, bool)+0xa>
60001672:	4b12      	ldr	r3, [pc, #72]	; (600016bc <set_audioClock(int, long, unsigned long, bool)+0x4c>)
60001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
60001676:	049b      	lsls	r3, r3, #18
60001678:	d41e      	bmi.n	600016b8 <set_audioClock(int, long, unsigned long, bool)+0x48>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
6000167a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
6000167e:	4b0f      	ldr	r3, [pc, #60]	; (600016bc <set_audioClock(int, long, unsigned long, bool)+0x4c>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001680:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001684:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001688:	f440 1089 	orr.w	r0, r0, #1122304	; 0x112000
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
6000168c:	6718      	str	r0, [r3, #112]	; 0x70
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000168e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
60001696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
60001698:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
6000169c:	671a      	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
6000169e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
600016a0:	2a00      	cmp	r2, #0
600016a2:	dafc      	bge.n	6000169e <set_audioClock(int, long, unsigned long, bool)+0x2e>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600016a4:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
600016a8:	4a05      	ldr	r2, [pc, #20]	; (600016c0 <set_audioClock(int, long, unsigned long, bool)+0x50>)
600016aa:	400a      	ands	r2, r1
600016ac:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600016b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
600016b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
600016b6:	671a      	str	r2, [r3, #112]	; 0x70
}
600016b8:	4770      	bx	lr
600016ba:	bf00      	nop
600016bc:	400d8000 	.word	0x400d8000
600016c0:	ff7f7fff 	.word	0xff7f7fff

600016c4 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016c4:	6943      	ldr	r3, [r0, #20]
600016c6:	4a0a      	ldr	r2, [pc, #40]	; (600016f0 <TwoWire::configSDApin(unsigned char)+0x2c>)
600016c8:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016cc:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016ce:	7a03      	ldrb	r3, [r0, #8]
600016d0:	4c08      	ldr	r4, [pc, #32]	; (600016f4 <TwoWire::configSDApin(unsigned char)+0x30>)
600016d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016d6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016da:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016dc:	68c2      	ldr	r2, [r0, #12]
600016de:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016e0:	6903      	ldr	r3, [r0, #16]
600016e2:	b10b      	cbz	r3, 600016e8 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016e4:	6942      	ldr	r2, [r0, #20]
600016e6:	601a      	str	r2, [r3, #0]
	}
}
600016e8:	f85d 4b04 	ldr.w	r4, [sp], #4
600016ec:	4770      	bx	lr
600016ee:	bf00      	nop
600016f0:	20002678 	.word	0x20002678
600016f4:	0001f861 	.word	0x0001f861

600016f8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016f8:	6943      	ldr	r3, [r0, #20]
600016fa:	7e02      	ldrb	r2, [r0, #24]
600016fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001700:	f892 c008 	ldrb.w	ip, [r2, #8]
60001704:	458c      	cmp	ip, r1
60001706:	d01c      	beq.n	60001742 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001708:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000170a:	2aff      	cmp	r2, #255	; 0xff
6000170c:	d019      	beq.n	60001742 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
6000170e:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001710:	b510      	push	{r4, lr}
60001712:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
60001714:	d016      	beq.n	60001744 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
60001716:	7e1a      	ldrb	r2, [r3, #24]
60001718:	2aff      	cmp	r2, #255	; 0xff
6000171a:	d006      	beq.n	6000172a <TwoWire::setSDA(unsigned char)+0x32>
6000171c:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000171e:	e9d3 2300 	ldrd	r2, r3, [r3]
60001722:	6812      	ldr	r2, [r2, #0]
60001724:	421a      	tst	r2, r3
60001726:	d101      	bne.n	6000172c <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
60001728:	7621      	strb	r1, [r4, #24]
}
6000172a:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
6000172c:	4b06      	ldr	r3, [pc, #24]	; (60001748 <TwoWire::setSDA(unsigned char)+0x50>)
6000172e:	2205      	movs	r2, #5
		configSDApin(newindex);
60001730:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001732:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001736:	685b      	ldr	r3, [r3, #4]
60001738:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
6000173a:	f7ff ffc3 	bl	600016c4 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
6000173e:	7621      	strb	r1, [r4, #24]
60001740:	e7f3      	b.n	6000172a <TwoWire::setSDA(unsigned char)+0x32>
60001742:	4770      	bx	lr
		if (sda_pin == pin) break;
60001744:	2100      	movs	r1, #0
60001746:	e7ea      	b.n	6000171e <TwoWire::setSDA(unsigned char)+0x26>
60001748:	20002678 	.word	0x20002678

6000174c <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
6000174c:	6943      	ldr	r3, [r0, #20]
6000174e:	4a0a      	ldr	r2, [pc, #40]	; (60001778 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001750:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001754:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001756:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000175a:	4c08      	ldr	r4, [pc, #32]	; (6000177c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000175c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001760:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001764:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001766:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001768:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000176a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000176c:	b10b      	cbz	r3, 60001772 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000176e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001770:	601a      	str	r2, [r3, #0]
	}
}
60001772:	f85d 4b04 	ldr.w	r4, [sp], #4
60001776:	4770      	bx	lr
60001778:	20002678 	.word	0x20002678
6000177c:	0001f861 	.word	0x0001f861

60001780 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001780:	6943      	ldr	r3, [r0, #20]
60001782:	7e42      	ldrb	r2, [r0, #25]
60001784:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001788:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000178c:	458c      	cmp	ip, r1
6000178e:	d01e      	beq.n	600017ce <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001790:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001794:	2aff      	cmp	r2, #255	; 0xff
60001796:	d01a      	beq.n	600017ce <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001798:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000179a:	b510      	push	{r4, lr}
6000179c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000179e:	d017      	beq.n	600017d0 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
600017a0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
600017a4:	2aff      	cmp	r2, #255	; 0xff
600017a6:	d006      	beq.n	600017b6 <TwoWire::setSCL(unsigned char)+0x36>
600017a8:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
600017ae:	6812      	ldr	r2, [r2, #0]
600017b0:	421a      	tst	r2, r3
600017b2:	d101      	bne.n	600017b8 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
600017b4:	7661      	strb	r1, [r4, #25]
}
600017b6:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017b8:	4b06      	ldr	r3, [pc, #24]	; (600017d4 <TwoWire::setSCL(unsigned char)+0x54>)
600017ba:	2205      	movs	r2, #5
		configSCLpin(newindex);
600017bc:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017be:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600017c2:	685b      	ldr	r3, [r3, #4]
600017c4:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017c6:	f7ff ffc1 	bl	6000174c <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
600017ca:	7661      	strb	r1, [r4, #25]
600017cc:	e7f3      	b.n	600017b6 <TwoWire::setSCL(unsigned char)+0x36>
600017ce:	4770      	bx	lr
		if (scl_pin == pin) break;
600017d0:	2100      	movs	r1, #0
600017d2:	e7ea      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x2a>
600017d4:	20002678 	.word	0x20002678

600017d8 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017d8:	4916      	ldr	r1, [pc, #88]	; (60001834 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017dc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
600017de:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
600017e6:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017e8:	638b      	str	r3, [r1, #56]	; 0x38
{
600017ea:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ec:	4d12      	ldr	r5, [pc, #72]	; (60001838 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017ee:	e9d2 1300 	ldrd	r1, r3, [r2]
600017f2:	680a      	ldr	r2, [r1, #0]
600017f4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017f6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017f8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017fa:	2202      	movs	r2, #2
	port->MCR = 0;
600017fc:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017fe:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001800:	4a0e      	ldr	r2, [pc, #56]	; (6000183c <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001802:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001804:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
60001806:	2201      	movs	r2, #1
60001808:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000180a:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
6000180c:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
60001810:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
60001812:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
60001816:	6c9e      	ldr	r6, [r3, #72]	; 0x48
60001818:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
6000181a:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
6000181c:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
6000181e:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
60001820:	7e01      	ldrb	r1, [r0, #24]
60001822:	f7ff ff4f 	bl	600016c4 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
60001826:	7e61      	ldrb	r1, [r4, #25]
60001828:	4620      	mov	r0, r4
}
6000182a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
6000182e:	f7ff bf8d 	b.w	6000174c <TwoWire::configSCLpin(unsigned char)>
60001832:	bf00      	nop
60001834:	400fc000 	.word	0x400fc000
60001838:	05050bb8 	.word	0x05050bb8
6000183c:	1928373b 	.word	0x1928373b

60001840 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001840:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
{
60001844:	b5f0      	push	{r4, r5, r6, r7, lr}
60001846:	460e      	mov	r6, r1
60001848:	b08d      	sub	sp, #52	; 0x34
6000184a:	bf28      	it	cs
6000184c:	f44f 7660 	movcs.w	r6, #896	; 0x380
60001850:	460f      	mov	r7, r1
60001852:	4605      	mov	r5, r0
	__disable_irq();
60001854:	b672      	cpsid	i
	memory_pool = data;
60001856:	4b2e      	ldr	r3, [pc, #184]	; (60001910 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd0>)
	memory_pool_first_mask = 0;
60001858:	2400      	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000185a:	2270      	movs	r2, #112	; 0x70
	memory_pool = data;
6000185c:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
6000185e:	4621      	mov	r1, r4
	memory_pool_first_mask = 0;
60001860:	4b2c      	ldr	r3, [pc, #176]	; (60001914 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd4>)
		memory_pool_available_mask[i] = 0;
60001862:	482d      	ldr	r0, [pc, #180]	; (60001918 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd8>)
	memory_pool_first_mask = 0;
60001864:	801c      	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001866:	f000 fa8b 	bl	60001d80 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
6000186a:	b1cf      	cbz	r7, 600018a0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>
6000186c:	4621      	mov	r1, r4
6000186e:	482a      	ldr	r0, [pc, #168]	; (60001918 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd8>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001870:	f04f 0c01 	mov.w	ip, #1
60001874:	094a      	lsrs	r2, r1, #5
60001876:	f001 031f 	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
6000187a:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000187c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
60001880:	fa0c f303 	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001884:	428e      	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001886:	ea43 0304 	orr.w	r3, r3, r4
6000188a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
6000188e:	d8f1      	bhi.n	60001874 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x34>
60001890:	4628      	mov	r0, r5
60001892:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001894:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001896:	3301      	adds	r3, #1
60001898:	f500 7082 	add.w	r0, r0, #260	; 0x104
6000189c:	429e      	cmp	r6, r3
6000189e:	d8f9      	bhi.n	60001894 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x54>
	}
	if (update_scheduled == false) {
600018a0:	4c1e      	ldr	r4, [pc, #120]	; (6000191c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xdc>)
600018a2:	7825      	ldrb	r5, [r4, #0]
600018a4:	b115      	cbz	r5, 600018ac <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
600018a6:	b662      	cpsie	i
}
600018a8:	b00d      	add	sp, #52	; 0x34
600018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
600018ac:	2008      	movs	r0, #8
600018ae:	f000 fa77 	bl	60001da0 <___Znwj_veneer>
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
600018b2:	4b1b      	ldr	r3, [pc, #108]	; (60001920 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe0>)
// instances may be in use by libraries.
class IntervalTimer {
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
600018b4:	2280      	movs	r2, #128	; 0x80
600018b6:	4606      	mov	r6, r0
600018b8:	9300      	str	r3, [sp, #0]
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
600018ba:	a902      	add	r1, sp, #8
        vtable_ptr_{other.vtable_ptr_}
600018bc:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
600018be:	4b19      	ldr	r3, [pc, #100]	; (60001924 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe4>)
600018c0:	7102      	strb	r2, [r0, #4]
600018c2:	6005      	str	r5, [r0, #0]
        vtable_ptr_->copy_ptr(
600018c4:	a808      	add	r0, sp, #32
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
600018c6:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
600018c8:	f000 fa72 	bl	60001db0 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
600018cc:	a906      	add	r1, sp, #24
600018ce:	4a16      	ldr	r2, [pc, #88]	; (60001928 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe8>)
600018d0:	4630      	mov	r0, r6
600018d2:	f000 fa69 	bl	60001da8 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
600018d6:	9b06      	ldr	r3, [sp, #24]
600018d8:	a808      	add	r0, sp, #32
600018da:	68db      	ldr	r3, [r3, #12]
600018dc:	4798      	blx	r3
600018de:	9b00      	ldr	r3, [sp, #0]
600018e0:	a802      	add	r0, sp, #8
600018e2:	68db      	ldr	r3, [r3, #12]
600018e4:	4798      	blx	r3
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
600018e6:	7823      	ldrb	r3, [r4, #0]
600018e8:	2b00      	cmp	r3, #0
600018ea:	d1dc      	bne.n	600018a6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x66>


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018ec:	4b0f      	ldr	r3, [pc, #60]	; (6000192c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xec>)
600018ee:	4a10      	ldr	r2, [pc, #64]	; (60001930 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xf0>)
600018f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600018f4:	490f      	ldr	r1, [pc, #60]	; (60001934 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xf4>)
600018f6:	20d0      	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600018f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018fc:	2240      	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600018fe:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001902:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
60001906:	2301      	movs	r3, #1
60001908:	7023      	strb	r3, [r4, #0]
	__enable_irq();
6000190a:	b662      	cpsie	i
}
6000190c:	b00d      	add	sp, #52	; 0x34
6000190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001910:	20004748 	.word	0x20004748
60001914:	200086d8 	.word	0x200086d8
60001918:	20004750 	.word	0x20004750
6000191c:	200086f1 	.word	0x200086f1
60001920:	200023c4 	.word	0x200023c4
60001924:	0000b0f1 	.word	0x0000b0f1
60001928:	0001101b 	.word	0x0001101b
6000192c:	20003800 	.word	0x20003800
60001930:	0000b0fd 	.word	0x0000b0fd
60001934:	e000e400 	.word	0xe000e400

60001938 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001938:	4770      	bx	lr
6000193a:	bf00      	nop

6000193c <startup_default_middle_hook>:
6000193c:	4770      	bx	lr
6000193e:	bf00      	nop

60001940 <startup_default_late_hook>:
60001940:	4770      	bx	lr
60001942:	bf00      	nop

60001944 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001944:	bf00      	nop
60001946:	4770      	bx	lr

60001948 <configure_cache>:
{
60001948:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
6000194a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000194e:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001950:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001952:	4831      	ldr	r0, [pc, #196]	; (60001a18 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001954:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001958:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000195e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	482e      	ldr	r0, [pc, #184]	; (60001a1c <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001964:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000196a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	482c      	ldr	r0, [pc, #176]	; (60001a20 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001970:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001974:	4a2b      	ldr	r2, [pc, #172]	; (60001a24 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001976:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000197a:	4c2b      	ldr	r4, [pc, #172]	; (60001a28 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000197c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001980:	482a      	ldr	r0, [pc, #168]	; (60001a2c <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001982:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001986:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000198a:	4c29      	ldr	r4, [pc, #164]	; (60001a30 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000198c:	4829      	ldr	r0, [pc, #164]	; (60001a34 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000198e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001992:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	4c28      	ldr	r4, [pc, #160]	; (60001a38 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001998:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	4827      	ldr	r0, [pc, #156]	; (60001a3c <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000199e:	4a28      	ldr	r2, [pc, #160]	; (60001a40 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600019a0:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600019a4:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019ac:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019b0:	4c24      	ldr	r4, [pc, #144]	; (60001a44 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b4:	4824      	ldr	r0, [pc, #144]	; (60001a48 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019b6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019ba:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	4a23      	ldr	r2, [pc, #140]	; (60001a4c <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	4c22      	ldr	r4, [pc, #136]	; (60001a50 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019c6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019ce:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d2:	4820      	ldr	r0, [pc, #128]	; (60001a54 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019d4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d8:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019da:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019de:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019e2:	bf00      	nop
	asm("nop");
600019e4:	bf00      	nop
	asm("nop");
600019e6:	bf00      	nop
	asm("nop");
600019e8:	bf00      	nop
	asm("nop");
600019ea:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019ec:	2201      	movs	r2, #1
600019ee:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019f2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600019f6:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019fa:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001a02:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a06:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a0e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001a12:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001a16:	4770      	bx	lr
60001a18:	1000003f 	.word	0x1000003f
60001a1c:	07080025 	.word	0x07080025
60001a20:	00100009 	.word	0x00100009
60001a24:	20008740 	.word	0x20008740
60001a28:	00200013 	.word	0x00200013
60001a2c:	07020021 	.word	0x07020021
60001a30:	20000014 	.word	0x20000014
60001a34:	13080025 	.word	0x13080025
60001a38:	10000009 	.word	0x10000009
60001a3c:	20200016 	.word	0x20200016
60001a40:	130b0027 	.word	0x130b0027
60001a44:	40000017 	.word	0x40000017
60001a48:	60000018 	.word	0x60000018
60001a4c:	070b002f 	.word	0x070b002f
60001a50:	70000019 	.word	0x70000019
60001a54:	8000001a 	.word	0x8000001a

60001a58 <usb_pll_start>:
{
60001a58:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001a5a:	4a15      	ldr	r2, [pc, #84]	; (60001ab0 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001a5c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001a5e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001a62:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001a66:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001a6a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001a6e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001a72:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001a74:	f013 0f02 	tst.w	r3, #2
60001a78:	d10e      	bne.n	60001a98 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001a7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001a7e:	d00f      	beq.n	60001aa0 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001a80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001a84:	d00e      	beq.n	60001aa4 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001a86:	2b00      	cmp	r3, #0
60001a88:	daf3      	bge.n	60001a72 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001a8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001a8e:	d10b      	bne.n	60001aa8 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001a90:	065b      	lsls	r3, r3, #25
60001a92:	d50b      	bpl.n	60001aac <usb_pll_start+0x54>
}
60001a94:	bcf0      	pop	{r4, r5, r6, r7}
60001a96:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001a98:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001a9a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001a9c:	6190      	str	r0, [r2, #24]
			continue;
60001a9e:	e7e8      	b.n	60001a72 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aa0:	6155      	str	r5, [r2, #20]
			continue;
60001aa2:	e7e6      	b.n	60001a72 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aa4:	6156      	str	r6, [r2, #20]
			continue;
60001aa6:	e7e4      	b.n	60001a72 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001aa8:	6191      	str	r1, [r2, #24]
			continue;
60001aaa:	e7e2      	b.n	60001a72 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001aac:	6157      	str	r7, [r2, #20]
			continue;
60001aae:	e7e0      	b.n	60001a72 <usb_pll_start+0x1a>
60001ab0:	400d8000 	.word	0x400d8000

60001ab4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001ab4:	4a3f      	ldr	r2, [pc, #252]	; (60001bb4 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001ab6:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001ab8:	493f      	ldr	r1, [pc, #252]	; (60001bb8 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001aba:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001abe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001ac2:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ac6:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001bbc <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001aca:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ace:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001bc0 <tempmon_init+0x10c>
{
60001ad2:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001ad8:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001adc:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ae0:	4d38      	ldr	r5, [pc, #224]	; (60001bc4 <tempmon_init+0x110>)
60001ae2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ae4:	4c38      	ldr	r4, [pc, #224]	; (60001bc8 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ae6:	4839      	ldr	r0, [pc, #228]	; (60001bcc <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ae8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001aea:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001aee:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001af0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001af8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001afc:	ee07 1a10 	vmov	s14, r1
60001b00:	4b33      	ldr	r3, [pc, #204]	; (60001bd0 <tempmon_init+0x11c>)
60001b02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b06:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b0c:	4931      	ldr	r1, [pc, #196]	; (60001bd4 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b0e:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b12:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b16:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b1a:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b1e:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b22:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b26:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001b2a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b2e:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b32:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b36:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b3a:	4827      	ldr	r0, [pc, #156]	; (60001bd8 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b3c:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b40:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b44:	ee75 5a87 	vadd.f32	s11, s11, s14
60001b48:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001b50:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b54:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001b58:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b5c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b64:	ee16 3a10 	vmov	r3, s12
60001b68:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b70:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001b74:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b76:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b7a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001b82:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001b86:	430b      	orrs	r3, r1
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001b88:	4914      	ldr	r1, [pc, #80]	; (60001bdc <tempmon_init+0x128>)
60001b8a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001b8e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001b92:	f043 0302 	orr.w	r3, r3, #2
60001b96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001b9a:	4b11      	ldr	r3, [pc, #68]	; (60001be0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b9c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001ba0:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ba4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001ba8:	2201      	movs	r2, #1
}
60001baa:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001bac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001bb0:	4770      	bx	lr
60001bb2:	bf00      	nop
60001bb4:	400d8100 	.word	0x400d8100
60001bb8:	401f4400 	.word	0x401f4400
60001bbc:	42aa0000 	.word	0x42aa0000
60001bc0:	42b40000 	.word	0x42b40000
60001bc4:	200079fc 	.word	0x200079fc
60001bc8:	200079f8 	.word	0x200079f8
60001bcc:	20007a00 	.word	0x20007a00
60001bd0:	20007a04 	.word	0x20007a04
60001bd4:	0fff0000 	.word	0x0fff0000
60001bd8:	e000e400 	.word	0xe000e400
60001bdc:	20003800 	.word	0x20003800
60001be0:	0000c3c1 	.word	0x0000c3c1

60001be4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001be4:	4b31      	ldr	r3, [pc, #196]	; (60001cac <usb_init+0xc8>)
60001be6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001bea:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001bec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001bf0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001bf4:	f000 f8e8 	bl	60001dc8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001bf8:	4a2d      	ldr	r2, [pc, #180]	; (60001cb0 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001bfa:	492e      	ldr	r1, [pc, #184]	; (60001cb4 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001bfc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c00:	482d      	ldr	r0, [pc, #180]	; (60001cb8 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c02:	f043 0303 	orr.w	r3, r3, #3
60001c06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c0a:	4b2c      	ldr	r3, [pc, #176]	; (60001cbc <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c0c:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c10:	6802      	ldr	r2, [r0, #0]
60001c12:	421a      	tst	r2, r3
60001c14:	d103      	bne.n	60001c1e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c16:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001c1a:	079a      	lsls	r2, r3, #30
60001c1c:	d01b      	beq.n	60001c56 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001c1e:	4a25      	ldr	r2, [pc, #148]	; (60001cb4 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001c20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001c24:	4b24      	ldr	r3, [pc, #144]	; (60001cb8 <usb_init+0xd4>)
60001c26:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001c28:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001c2c:	f043 0302 	orr.w	r3, r3, #2
60001c30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001c34:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001c38:	079b      	lsls	r3, r3, #30
60001c3a:	d4fb      	bmi.n	60001c34 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001c3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001c40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001c44:	4b1c      	ldr	r3, [pc, #112]	; (60001cb8 <usb_init+0xd4>)
60001c46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001c4a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001c4e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001c50:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001c52:	f000 f8a1 	bl	60001d98 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001c56:	4a18      	ldr	r2, [pc, #96]	; (60001cb8 <usb_init+0xd4>)
60001c58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001c5c:	4c15      	ldr	r4, [pc, #84]	; (60001cb4 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001c5e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001c60:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001c62:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001c64:	4b16      	ldr	r3, [pc, #88]	; (60001cc0 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001c66:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001c68:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001c6c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001c70:	4618      	mov	r0, r3
60001c72:	f000 f885 	bl	60001d80 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001c76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001c7a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001c7c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001c80:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001c84:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001c86:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001c8a:	641a      	str	r2, [r3, #64]	; 0x40
60001c8c:	4b0d      	ldr	r3, [pc, #52]	; (60001cc4 <usb_init+0xe0>)
60001c8e:	4a0e      	ldr	r2, [pc, #56]	; (60001cc8 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001c90:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001c94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001c98:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001c9c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ca0:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ca2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001ca6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001caa:	bd10      	pop	{r4, pc}
60001cac:	400d8000 	.word	0x400d8000
60001cb0:	400fc000 	.word	0x400fc000
60001cb4:	402e0000 	.word	0x402e0000
60001cb8:	400d9000 	.word	0x400d9000
60001cbc:	001e1c00 	.word	0x001e1c00
60001cc0:	20000000 	.word	0x20000000
60001cc4:	20003800 	.word	0x20003800
60001cc8:	0000c5a9 	.word	0x0000c5a9

60001ccc <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001ccc:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001cce:	4b0e      	ldr	r3, [pc, #56]	; (60001d08 <_reboot_Teensyduino_+0x3c>)
60001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001cd2:	079b      	lsls	r3, r3, #30
60001cd4:	d400      	bmi.n	60001cd8 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001cd6:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001cd8:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001cda:	4b0c      	ldr	r3, [pc, #48]	; (60001d0c <_reboot_Teensyduino_+0x40>)
60001cdc:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001cde:	4a0c      	ldr	r2, [pc, #48]	; (60001d10 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001ce0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ce4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ce8:	490a      	ldr	r1, [pc, #40]	; (60001d14 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001cea:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001cee:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001cf0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001cf2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001cf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001cfa:	4807      	ldr	r0, [pc, #28]	; (60001d18 <_reboot_Teensyduino_+0x4c>)
60001cfc:	4a07      	ldr	r2, [pc, #28]	; (60001d1c <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001cfe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d00:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d02:	689b      	ldr	r3, [r3, #8]
60001d04:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d06:	bf00      	nop
60001d08:	401f4400 	.word	0x401f4400
60001d0c:	402e0000 	.word	0x402e0000
60001d10:	400ac000 	.word	0x400ac000
60001d14:	00200003 	.word	0x00200003
60001d18:	20208000 	.word	0x20208000
60001d1c:	eb120000 	.word	0xeb120000

60001d20 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001d20:	4b10      	ldr	r3, [pc, #64]	; (60001d64 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001d22:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001d24:	4a10      	ldr	r2, [pc, #64]	; (60001d68 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001d26:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001d28:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001d2c:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001d2e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001d30:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001d34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001d36:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001d3a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001d3c:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001d3e:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001d40:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001d42:	061b      	lsls	r3, r3, #24
60001d44:	d4fc      	bmi.n	60001d40 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001d46:	4a09      	ldr	r2, [pc, #36]	; (60001d6c <analog_init+0x4c>)
60001d48:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001d4c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001d4e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001d50:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001d52:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001d54:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001d58:	d1fb      	bne.n	60001d52 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001d5a:	4a05      	ldr	r2, [pc, #20]	; (60001d70 <analog_init+0x50>)
60001d5c:	7013      	strb	r3, [r2, #0]
}
60001d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001d62:	4770      	bx	lr
60001d64:	400fc000 	.word	0x400fc000
60001d68:	400c4000 	.word	0x400c4000
60001d6c:	400c8000 	.word	0x400c8000
60001d70:	200086f7 	.word	0x200086f7

60001d74 <_init>:
60001d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001d76:	bf00      	nop
60001d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001d7a:	bc08      	pop	{r3}
60001d7c:	469e      	mov	lr, r3
60001d7e:	4770      	bx	lr

60001d80 <__memset_veneer>:
60001d80:	f85f f000 	ldr.w	pc, [pc]	; 60001d84 <__memset_veneer+0x4>
60001d84:	0000e5a1 	.word	0x0000e5a1

60001d88 <____libc_init_array_veneer>:
60001d88:	f85f f000 	ldr.w	pc, [pc]	; 60001d8c <____libc_init_array_veneer+0x4>
60001d8c:	0000eafd 	.word	0x0000eafd

60001d90 <__set_arm_clock_veneer>:
60001d90:	f85f f000 	ldr.w	pc, [pc]	; 60001d94 <__set_arm_clock_veneer+0x4>
60001d94:	0000b9bd 	.word	0x0000b9bd

60001d98 <__delay_veneer>:
60001d98:	f85f f000 	ldr.w	pc, [pc]	; 60001d9c <__delay_veneer+0x4>
60001d9c:	0000bcad 	.word	0x0000bcad

60001da0 <___Znwj_veneer>:
60001da0:	f85f f000 	ldr.w	pc, [pc]	; 60001da4 <___Znwj_veneer+0x4>
60001da4:	0000bfd5 	.word	0x0000bfd5

60001da8 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>:
60001da8:	f85f f000 	ldr.w	pc, [pc]	; 60001dac <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer+0x4>
60001dac:	0000b7b9 	.word	0x0000b7b9

60001db0 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>:
60001db0:	f85f f000 	ldr.w	pc, [pc]	; 60001db4 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer+0x4>
60001db4:	0000b165 	.word	0x0000b165

60001db8 <__pwm_init_veneer>:
60001db8:	f85f f000 	ldr.w	pc, [pc]	; 60001dbc <__pwm_init_veneer+0x4>
60001dbc:	0000c0bd 	.word	0x0000c0bd

60001dc0 <__main_veneer>:
60001dc0:	f85f f000 	ldr.w	pc, [pc]	; 60001dc4 <__main_veneer+0x4>
60001dc4:	0000be91 	.word	0x0000be91

60001dc8 <__usb_init_serialnumber_veneer>:
60001dc8:	f85f f000 	ldr.w	pc, [pc]	; 60001dcc <__usb_init_serialnumber_veneer+0x4>
60001dcc:	0000cd21 	.word	0x0000cd21

60001dd0 <__frame_dummy_init_array_entry>:
60001dd0:	00000045 00000069 000003b5 000005b5     E...i...........
60001de0:	000007e9 00000c6d 000018b5 00001f91     ....m...........
60001df0:	00001fa9 00001fc1 00001fd9 00001ff1     ................
60001e00:	00002009 00002021 00002039 00002051     . ..! ..9 ..Q ..
60001e10:	00002069 00002081 00002615 0000262d     i ... ...&..-&..
60001e20:	00002645 0000265d 00002675 0000268d     E&..]&..u&...&..
60001e30:	000026a5 000026bd 000026f1 00002721     .&...&...&..!'..
60001e40:	00002739 00002751 00002769 00002781     9'..Q'..i'...'..
60001e50:	00003a35 0000b8bd                       5:......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
    }
    return ptr;
  }
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      *hs = highSurrogate(cp);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20003ac0 	.word	0x20003ac0
      3c:	20003ac0 	.word	0x20003ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  static const uint8_t UNSTABLE_STATE  = 0b00000010;
  static const uint8_t CHANGED_STATE   = 0b00000100;

private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
#include "fm_drum.h"

#ifndef AUDIO_SYNTH_MUTABLE_FM_DRUM_included
#define AUDIO_SYNTH_MUTABLE_FM_DRUM_included

class AudioSynthMutableFMDrum: public AudioStream, public Parameterized
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
		} else {
			num *= 4;
			drawBuffer[num+0] = color & 255;
			drawBuffer[num+1] = (color >> 8) & 255;
			drawBuffer[num+2] = (color >> 16) & 255;
			drawBuffer[num+3] = (color >> 24) & 255;
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
  }
}

void set_pixel_color(uint16_t index, uint32_t color) {
  leds.setPixelColor(index, color);
}
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
      60:	200078c4 	.word	0x200078c4
      64:	6001a800 	.word	0x6001a800

00000068 <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev>:
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      68:	b410      	push	{r4}
      6a:	4b15      	ldr	r3, [pc, #84]	; (c0 <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev+0x58>)
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	} else if (mult == MULTI_UNITYGAIN) {
		// unity gain, pass input to output without any change
		block = receiveReadOnly(0);
		if (block) {
			transmit(block);
			release(block);
      70:	4c14      	ldr	r4, [pc, #80]	; (c4 <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev+0x5c>)
		block = receiveReadOnly(0);
      72:	2200      	movs	r2, #0
      74:	4814      	ldr	r0, [pc, #80]	; (c8 <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev+0x60>)
      76:	601c      	str	r4, [r3, #0]
		if (block) release(block);
      78:	24fa      	movs	r4, #250	; 0xfa
      7a:	6459      	str	r1, [r3, #68]	; 0x44
			applyGain(block->data, mult);
			transmit(block);
			release(block);
		}
	}
}
      7c:	60dc      	str	r4, [r3, #12]
  }
  return true;

 fail:
  return false;
}
      7e:	4c13      	ldr	r4, [pc, #76]	; (cc <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev+0x64>)
  return true;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
  DirName_t* dn;
  size_t n = 0;
      80:	6118      	str	r0, [r3, #16]
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	615c      	str	r4, [r3, #20]
      84:	4c12      	ldr	r4, [pc, #72]	; (d0 <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev+0x68>)
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	6398      	str	r0, [r3, #56]	; 0x38
      88:	629c      	str	r4, [r3, #40]	; 0x28
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8a:	f240 2471 	movw	r4, #625	; 0x271
      8e:	641a      	str	r2, [r3, #64]	; 0x40
      90:	635c      	str	r4, [r3, #52]	; 0x34
      92:	4c10      	ldr	r4, [pc, #64]	; (d4 <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev+0x6c>)
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
      94:	64d8      	str	r0, [r3, #76]	; 0x4c
      96:	63dc      	str	r4, [r3, #60]	; 0x3c
  m_fatType = FAT_TYPE_EXFAT;
      98:	f44f 742f 	mov.w	r4, #700	; 0x2bc
      9c:	e9c3 2101 	strd	r2, r1, [r3, #4]
  return true;

 fail:
  return false;
}
      a0:	e9c3 2106 	strd	r2, r1, [r3, #24]
      a4:	e9c3 1008 	strd	r1, r0, [r3, #32]
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
  }
}
      a8:	e9c3 210b 	strd	r2, r1, [r3, #44]	; 0x2c
}
      ac:	e9c3 2115 	strd	r2, r1, [r3, #84]	; 0x54
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
      b0:	4909      	ldr	r1, [pc, #36]	; (d8 <_GLOBAL__sub_I__ZN24AudioEffectMutableReverbC2Ev+0x70>)
    setTone(new_value);
  }
  if (!strcmp(group_member, "bass.decay")) {
    setDecay(new_value);
  }
}
      b2:	649c      	str	r4, [r3, #72]	; 0x48
      b4:	6519      	str	r1, [r3, #80]	; 0x50
      b6:	f85d 4b04 	ldr.w	r4, [sp], #4
      ba:	e9c3 2017 	strd	r2, r0, [r3, #92]	; 0x5c
      be:	4770      	bx	lr
      c0:	2000464c 	.word	0x2000464c
      c4:	20000798 	.word	0x20000798
	dma.enable();

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	dma.attachInterrupt(isr);	
#endif	
}
      c8:	20000620 	.word	0x20000620
	I2S1_RCSR = 0;
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
#endif
}
      cc:	200007c0 	.word	0x200007c0
      d0:	200007cc 	.word	0x200007cc

	I2S2_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S2_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE;
	dma.attachInterrupt(isr);	

}
      d4:	200007e0 	.word	0x200007e0
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    if (!rmdir()) {
      d8:	200007f0 	.word	0x200007f0

000000dc <AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()>:
      dc:	4b05      	ldr	r3, [pc, #20]	; (f4 <AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()+0x18>)
      de:	f103 0218 	add.w	r2, r3, #24
      e2:	b510      	push	{r4, lr}
      e4:	4604      	mov	r4, r0
      e6:	6003      	str	r3, [r0, #0]
      e8:	f840 2f18 	str.w	r2, [r0, #24]!
      ec:	f000 fe4a 	bl	d84 <Parameterized::~Parameterized()>
      f0:	4620      	mov	r0, r4
      f2:	bd10      	pop	{r4, pc}
      f4:	2000215c 	.word	0x2000215c

000000f8 <non-virtual thunk to AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()>:
      f8:	4a06      	ldr	r2, [pc, #24]	; (114 <non-virtual thunk to AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()+0x1c>)
      fa:	b510      	push	{r4, lr}
      fc:	f102 0118 	add.w	r1, r2, #24
     100:	4604      	mov	r4, r0
     102:	f840 2c18 	str.w	r2, [r0, #-24]
     106:	f844 1918 	str.w	r1, [r4], #-24
     10a:	f000 fe3b 	bl	d84 <Parameterized::~Parameterized()>
     10e:	4620      	mov	r0, r4
     110:	bd10      	pop	{r4, pc}
     112:	bf00      	nop
     114:	2000215c 	.word	0x2000215c

00000118 <AudioEffectDelay::AudioEffectDelay()>:
#endif

class AudioEffectDelay : public AudioStream
{
public:
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
     118:	b510      	push	{r4, lr}
     11a:	f241 53cc 	movw	r3, #5580	; 0x15cc
     11e:	4604      	mov	r4, r0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     120:	4813      	ldr	r0, [pc, #76]	; (170 <AudioEffectDelay::AudioEffectDelay()+0x58>)
			active = false;
			destination_list = NULL;
     122:	2200      	movs	r2, #0
     124:	4423      	add	r3, r4
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     126:	4913      	ldr	r1, [pc, #76]	; (174 <AudioEffectDelay::AudioEffectDelay()+0x5c>)
		num_inputs(ninput), inputQueue(iqueue) {
     128:	6020      	str	r0, [r4, #0]
			active = false;
     12a:	f44f 7080 	mov.w	r0, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
     12e:	e9c4 2303 	strd	r2, r3, [r4, #12]
			active = false;
     132:	8120      	strh	r0, [r4, #8]
				inputQueue[i] = NULL;
     134:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
			if (first_update == NULL) {
     138:	680b      	ldr	r3, [r1, #0]
				inputQueue[i] = NULL;
     13a:	f8c0 25cc 	str.w	r2, [r0, #1484]	; 0x5cc
			if (first_update == NULL) {
     13e:	b1ab      	cbz	r3, 16c <AudioEffectDelay::AudioEffectDelay()+0x54>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     140:	461a      	mov	r2, r3
     142:	695b      	ldr	r3, [r3, #20]
     144:	2b00      	cmp	r3, #0
     146:	d1fb      	bne.n	140 <AudioEffectDelay::AudioEffectDelay()+0x28>
				p->next_update = this;
     148:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     14a:	2100      	movs	r1, #0
     14c:	4b0a      	ldr	r3, [pc, #40]	; (178 <AudioEffectDelay::AudioEffectDelay()+0x60>)
		activemask = 0;
		headindex = 0;
		tailindex = 0;
		maxblocks = 0;
		memset(queue, 0, sizeof(queue));
     14e:	f241 528c 	movw	r2, #5516	; 0x158c
     152:	f104 0040 	add.w	r0, r4, #64	; 0x40
     156:	6161      	str	r1, [r4, #20]
			cpu_cycles = 0;
     158:	6061      	str	r1, [r4, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
     15a:	72a1      	strb	r1, [r4, #10]
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
     15c:	6023      	str	r3, [r4, #0]
		activemask = 0;
     15e:	7621      	strb	r1, [r4, #24]
		headindex = 0;
     160:	8361      	strh	r1, [r4, #26]
		tailindex = 0;
     162:	61e1      	str	r1, [r4, #28]
		memset(queue, 0, sizeof(queue));
     164:	f00e fa1c 	bl	e5a0 <memset>
	}
     168:	4620      	mov	r0, r4
     16a:	bd10      	pop	{r4, pc}
				first_update = this;
     16c:	600c      	str	r4, [r1, #0]
     16e:	e7ec      	b.n	14a <AudioEffectDelay::AudioEffectDelay()+0x32>
     170:	20002084 	.word	0x20002084
     174:	2000474c 	.word	0x2000474c
     178:	2000209c 	.word	0x2000209c

0000017c <AudioMixer4::AudioMixer4()>:
			destination_list = NULL;
     17c:	2200      	movs	r2, #0
		num_inputs(ninput), inputQueue(iqueue) {
     17e:	4603      	mov	r3, r0
			if (first_update == NULL) {
     180:	4913      	ldr	r1, [pc, #76]	; (1d0 <AudioMixer4::AudioMixer4()+0x54>)
			active = false;
     182:	f44f 6c80 	mov.w	ip, #1024	; 0x400

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     186:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
     188:	4c12      	ldr	r4, [pc, #72]	; (1d4 <AudioMixer4::AudioMixer4()+0x58>)
     18a:	f843 4b28 	str.w	r4, [r3], #40
			active = false;
     18e:	f8a0 c008 	strh.w	ip, [r0, #8]
			destination_list = NULL;
     192:	e9c0 2303 	strd	r2, r3, [r0, #12]
			if (first_update == NULL) {
     196:	680b      	ldr	r3, [r1, #0]
				inputQueue[i] = NULL;
     198:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
     19c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
			if (first_update == NULL) {
     1a0:	b19b      	cbz	r3, 1ca <AudioMixer4::AudioMixer4()+0x4e>
				for (p=first_update; p->next_update; p = p->next_update) ;
     1a2:	461a      	mov	r2, r3
     1a4:	695b      	ldr	r3, [r3, #20]
     1a6:	2b00      	cmp	r3, #0
     1a8:	d1fb      	bne.n	1a2 <AudioMixer4::AudioMixer4()+0x26>
				p->next_update = this;
     1aa:	6150      	str	r0, [r2, #20]
			next_update = NULL;
     1ac:	2200      	movs	r2, #0
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     1ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     1b2:	4909      	ldr	r1, [pc, #36]	; (1d8 <AudioMixer4::AudioMixer4()+0x5c>)
	}
     1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
     1b8:	6142      	str	r2, [r0, #20]
			cpu_cycles = 0;
     1ba:	6042      	str	r2, [r0, #4]
			numConnections = 0;
     1bc:	7282      	strb	r2, [r0, #10]
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     1be:	6001      	str	r1, [r0, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     1c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
     1c4:	e9c0 3308 	strd	r3, r3, [r0, #32]
	}
     1c8:	4770      	bx	lr
				first_update = this;
     1ca:	6008      	str	r0, [r1, #0]
     1cc:	e7ee      	b.n	1ac <AudioMixer4::AudioMixer4()+0x30>
     1ce:	bf00      	nop
     1d0:	2000474c 	.word	0x2000474c
     1d4:	20002084 	.word	0x20002084
     1d8:	20002078 	.word	0x20002078

000001dc <AudioGraph::setup()>:
AudioConnection pc2(mixer4, 0, i2s1, 1);

AudioControlSGTL5000     sgtl5000_1;     //xy=706,445
// GUItool: end automatically generated code

void AudioGraph::setup() {
     1dc:	b510      	push	{r4, lr}
  AudioMemory(400);
     1de:	f44f 71c8 	mov.w	r1, #400	; 0x190
     1e2:	4847      	ldr	r0, [pc, #284]	; (300 <AudioGraph::setup()+0x124>)
     1e4:	f013 fee4 	bl	13fb0 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>

  sgtl5000_1.enable();
     1e8:	4846      	ldr	r0, [pc, #280]	; (304 <AudioGraph::setup()+0x128>)
     1ea:	f001 fca5 	bl	1b38 <AudioControlSGTL5000::enable()>
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
     1ee:	2140      	movs	r1, #64	; 0x40
     1f0:	4844      	ldr	r0, [pc, #272]	; (304 <AudioGraph::setup()+0x128>)
     1f2:	f001 fce7 	bl	1bc4 <AudioControlSGTL5000::volumeInteger(unsigned int)>
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
		if (gain > 32767.0f) gain = 32767.0f;
		else if (gain < -32767.0f) gain = -32767.0f;
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
     1f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     1fa:	4a43      	ldr	r2, [pc, #268]	; (308 <AudioGraph::setup()+0x12c>)
     1fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     200:	4942      	ldr	r1, [pc, #264]	; (30c <AudioGraph::setup()+0x130>)
     202:	4c43      	ldr	r4, [pc, #268]	; (310 <AudioGraph::setup()+0x134>)
     204:	e9c2 3306 	strd	r3, r3, [r2, #24]
     208:	e9c2 3308 	strd	r3, r3, [r2, #32]
		if (milliseconds < 0.0f) milliseconds = 0.0f;
		uint32_t n = (milliseconds*(AUDIO_SAMPLE_RATE_EXACT/1000.0f))+0.5f;
		uint32_t nmax = AUDIO_BLOCK_SAMPLES * (DELAY_QUEUE_SIZE-1);
		if (n > nmax) n = nmax;
		uint32_t blks = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
		if (!(activemask & (1<<channel))) {
     20c:	4a41      	ldr	r2, [pc, #260]	; (314 <AudioGraph::setup()+0x138>)
     20e:	f892 c018 	ldrb.w	ip, [r2, #24]
     212:	e9c1 3306 	strd	r3, r3, [r1, #24]
     216:	e9c1 3308 	strd	r3, r3, [r1, #32]
     21a:	f01c 0f01 	tst.w	ip, #1
     21e:	f04f 0300 	mov.w	r3, #0
     222:	493d      	ldr	r1, [pc, #244]	; (318 <AudioGraph::setup()+0x13c>)
     224:	e9c4 0306 	strd	r0, r3, [r4, #24]
     228:	6188      	str	r0, [r1, #24]
     22a:	61cb      	str	r3, [r1, #28]
     22c:	d12a      	bne.n	284 <AudioGraph::setup()+0xa8>
			// enabling a previously disabled channel
			position[channel] = n;
			if (blks > maxblocks) maxblocks = blks;
     22e:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
     230:	f241 113a 	movw	r1, #4410	; 0x113a
			if (blks > maxblocks) maxblocks = blks;
     234:	2b23      	cmp	r3, #35	; 0x23
			position[channel] = n;
     236:	6211      	str	r1, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
     238:	d913      	bls.n	262 <AudioGraph::setup()+0x86>
			activemask |= (1<<channel);
     23a:	f04c 0c01 	orr.w	ip, ip, #1
     23e:	f882 c018 	strb.w	ip, [r2, #24]
		if (!(activemask & (1<<channel))) {
     242:	4a36      	ldr	r2, [pc, #216]	; (31c <AudioGraph::setup()+0x140>)
     244:	7e10      	ldrb	r0, [r2, #24]
     246:	07c4      	lsls	r4, r0, #31
     248:	d40e      	bmi.n	268 <AudioGraph::setup()+0x8c>
			if (blks > maxblocks) maxblocks = blks;
     24a:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
     24c:	f241 113a 	movw	r1, #4410	; 0x113a
			if (blks > maxblocks) maxblocks = blks;
     250:	2b23      	cmp	r3, #35	; 0x23
			position[channel] = n;
     252:	6211      	str	r1, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
     254:	d801      	bhi.n	25a <AudioGraph::setup()+0x7e>
     256:	2324      	movs	r3, #36	; 0x24
     258:	83d3      	strh	r3, [r2, #30]
			activemask |= (1<<channel);
     25a:	f040 0001 	orr.w	r0, r0, #1
     25e:	7610      	strb	r0, [r2, #24]
  delay1.delay(0, 100);
  delay2.delay(0, 100);

  // reverb1.amount(0.2);
  // reverb1.time(0.2);
}
     260:	bd10      	pop	{r4, pc}
			if (blks > maxblocks) maxblocks = blks;
     262:	2324      	movs	r3, #36	; 0x24
     264:	83d3      	strh	r3, [r2, #30]
     266:	e7e8      	b.n	23a <AudioGraph::setup()+0x5e>
		} else {
			if (n > position[channel]) {
     268:	6a11      	ldr	r1, [r2, #32]
     26a:	f241 1339 	movw	r3, #4409	; 0x1139
     26e:	4299      	cmp	r1, r3
     270:	d82d      	bhi.n	2ce <AudioGraph::setup()+0xf2>
				// new delay is greater than previous setting
				if (blks > maxblocks) maxblocks = blks;
     272:	8bd3      	ldrh	r3, [r2, #30]
     274:	2b23      	cmp	r3, #35	; 0x23
     276:	d801      	bhi.n	27c <AudioGraph::setup()+0xa0>
     278:	2324      	movs	r3, #36	; 0x24
     27a:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
     27c:	f241 133a 	movw	r3, #4410	; 0x113a
     280:	6213      	str	r3, [r2, #32]
     282:	bd10      	pop	{r4, pc}
			if (n > position[channel]) {
     284:	6a10      	ldr	r0, [r2, #32]
     286:	f241 1139 	movw	r1, #4409	; 0x1139
     28a:	4288      	cmp	r0, r1
     28c:	d808      	bhi.n	2a0 <AudioGraph::setup()+0xc4>
				if (blks > maxblocks) maxblocks = blks;
     28e:	8bd3      	ldrh	r3, [r2, #30]
     290:	2b23      	cmp	r3, #35	; 0x23
     292:	d801      	bhi.n	298 <AudioGraph::setup()+0xbc>
     294:	2324      	movs	r3, #36	; 0x24
     296:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
     298:	f241 133a 	movw	r3, #4410	; 0x113a
     29c:	6213      	str	r3, [r2, #32]
     29e:	e7d0      	b.n	242 <AudioGraph::setup()+0x66>
			} else {
				// new delay is less than previous setting
				position[channel] = n;
     2a0:	f241 113a 	movw	r1, #4410	; 0x113a
     2a4:	4614      	mov	r4, r2
		recompute_maxblocks();
	}
	virtual void update(void);
private:
	void recompute_maxblocks(void) {
		uint32_t max=0;
     2a6:	4618      	mov	r0, r3
				position[channel] = n;
     2a8:	f844 1f20 	str.w	r1, [r4, #32]!
		uint32_t channel = 0;
		do {
			if (activemask & (1<<channel)) {
     2ac:	fa4c f103 	asr.w	r1, ip, r3
     2b0:	07c9      	lsls	r1, r1, #31
     2b2:	d507      	bpl.n	2c4 <AudioGraph::setup()+0xe8>
				uint32_t n = position[channel];
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
     2b4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
     2b8:	317f      	adds	r1, #127	; 0x7f
     2ba:	09c9      	lsrs	r1, r1, #7
     2bc:	3101      	adds	r1, #1
     2be:	4288      	cmp	r0, r1
     2c0:	bf38      	it	cc
     2c2:	4608      	movcc	r0, r1
				if (n > max) max = n;
			}
		} while(++channel < 8);
     2c4:	3301      	adds	r3, #1
     2c6:	2b08      	cmp	r3, #8
     2c8:	d1f0      	bne.n	2ac <AudioGraph::setup()+0xd0>
		maxblocks = max;
     2ca:	83d0      	strh	r0, [r2, #30]
	}
     2cc:	e7b9      	b.n	242 <AudioGraph::setup()+0x66>
		uint32_t channel = 0;
     2ce:	2300      	movs	r3, #0
				position[channel] = n;
     2d0:	f241 113a 	movw	r1, #4410	; 0x113a
     2d4:	4694      	mov	ip, r2
		uint32_t max=0;
     2d6:	461c      	mov	r4, r3
				position[channel] = n;
     2d8:	f84c 1f20 	str.w	r1, [ip, #32]!
			if (activemask & (1<<channel)) {
     2dc:	fa40 f103 	asr.w	r1, r0, r3
     2e0:	07c9      	lsls	r1, r1, #31
     2e2:	d507      	bpl.n	2f4 <AudioGraph::setup()+0x118>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
     2e4:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
     2e8:	317f      	adds	r1, #127	; 0x7f
     2ea:	09c9      	lsrs	r1, r1, #7
     2ec:	3101      	adds	r1, #1
     2ee:	428c      	cmp	r4, r1
     2f0:	bf38      	it	cc
     2f2:	460c      	movcc	r4, r1
		} while(++channel < 8);
     2f4:	3301      	adds	r3, #1
     2f6:	2b08      	cmp	r3, #8
     2f8:	d1f0      	bne.n	2dc <AudioGraph::setup()+0x100>
		maxblocks = max;
     2fa:	83d4      	strh	r4, [r2, #30]
     2fc:	bd10      	pop	{r4, pc}
     2fe:	bf00      	nop
     300:	20200000 	.word	0x20200000
     304:	20007a0c 	.word	0x20007a0c
     308:	2000781c 	.word	0x2000781c
     30c:	200077e4 	.word	0x200077e4
     310:	20007854 	.word	0x20007854
     314:	20004c10 	.word	0x20004c10
     318:	2000788c 	.word	0x2000788c
     31c:	200061e0 	.word	0x200061e0

00000320 <AudioGraph::loop()>:
     320:	4b0b      	ldr	r3, [pc, #44]	; (350 <AudioGraph::loop()+0x30>)

void AudioGraph::loop() {
     322:	b510      	push	{r4, lr}
  static uint32_t print_time;
  uint32_t now = millis();
  if (now - print_time > 1000) {
     324:	4c0b      	ldr	r4, [pc, #44]	; (354 <AudioGraph::loop()+0x34>)
     326:	681b      	ldr	r3, [r3, #0]
     328:	6822      	ldr	r2, [r4, #0]
     32a:	1a9b      	subs	r3, r3, r2
     32c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     330:	d800      	bhi.n	334 <AudioGraph::loop()+0x14>
    Serial.printf("Audio Memory: %d, max %d\n", AudioMemoryUsage(), AudioMemoryUsageMax());
    print_time += 1000;
  }

}
     332:	bd10      	pop	{r4, pc}
    Serial.printf("Audio Memory: %d, max %d\n", AudioMemoryUsage(), AudioMemoryUsageMax());
     334:	4b08      	ldr	r3, [pc, #32]	; (358 <AudioGraph::loop()+0x38>)
     336:	4a09      	ldr	r2, [pc, #36]	; (35c <AudioGraph::loop()+0x3c>)
     338:	881b      	ldrh	r3, [r3, #0]
     33a:	4909      	ldr	r1, [pc, #36]	; (360 <AudioGraph::loop()+0x40>)
     33c:	4809      	ldr	r0, [pc, #36]	; (364 <AudioGraph::loop()+0x44>)
     33e:	8812      	ldrh	r2, [r2, #0]
     340:	f00b faf8 	bl	b934 <Print::printf(char const*, ...)>
    print_time += 1000;
     344:	6823      	ldr	r3, [r4, #0]
     346:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
     34a:	6023      	str	r3, [r4, #0]
}
     34c:	bd10      	pop	{r4, pc}
     34e:	bf00      	nop
     350:	200086a8 	.word	0x200086a8
     354:	200048e4 	.word	0x200048e4
     358:	200086d2 	.word	0x200086d2
     35c:	200086d0 	.word	0x200086d0
     360:	200005f0 	.word	0x200005f0
     364:	20002b50 	.word	0x20002b50

00000368 <AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()>:
     368:	4b07      	ldr	r3, [pc, #28]	; (388 <AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()+0x20>)
     36a:	f103 0218 	add.w	r2, r3, #24
     36e:	b510      	push	{r4, lr}
     370:	4604      	mov	r4, r0
     372:	6003      	str	r3, [r0, #0]
     374:	f840 2f18 	str.w	r2, [r0, #24]!
     378:	f000 fd04 	bl	d84 <Parameterized::~Parameterized()>
     37c:	4620      	mov	r0, r4
     37e:	2160      	movs	r1, #96	; 0x60
     380:	f00b fe2a 	bl	bfd8 <operator delete(void*, unsigned int)>
     384:	4620      	mov	r0, r4
     386:	bd10      	pop	{r4, pc}
     388:	2000215c 	.word	0x2000215c

0000038c <non-virtual thunk to AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()>:
     38c:	4a08      	ldr	r2, [pc, #32]	; (3b0 <non-virtual thunk to AudioSynthMutableFMDrum::~AudioSynthMutableFMDrum()+0x24>)
     38e:	f102 0118 	add.w	r1, r2, #24
     392:	b510      	push	{r4, lr}
     394:	f1a0 0418 	sub.w	r4, r0, #24
     398:	f840 2c18 	str.w	r2, [r0, #-24]
     39c:	6001      	str	r1, [r0, #0]
     39e:	f000 fcf1 	bl	d84 <Parameterized::~Parameterized()>
     3a2:	4620      	mov	r0, r4
     3a4:	2160      	movs	r1, #96	; 0x60
     3a6:	f00b fe17 	bl	bfd8 <operator delete(void*, unsigned int)>
     3aa:	4620      	mov	r0, r4
     3ac:	bd10      	pop	{r4, pc}
     3ae:	bf00      	nop
     3b0:	2000215c 	.word	0x2000215c

000003b4 <_GLOBAL__sub_I_top1>:
     3b4:	b530      	push	{r4, r5, lr}
AudioSynthMutableFMDrum  top1;           //xy=75,40
     3b6:	4866      	ldr	r0, [pc, #408]	; (550 <_GLOBAL__sub_I_top1+0x19c>)
}
     3b8:	b083      	sub	sp, #12
AudioSynthMutableFMDrum  top1;           //xy=75,40
     3ba:	f000 f9d7 	bl	76c <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()>
     3be:	4a65      	ldr	r2, [pc, #404]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     3c0:	4965      	ldr	r1, [pc, #404]	; (558 <_GLOBAL__sub_I_top1+0x1a4>)
     3c2:	4863      	ldr	r0, [pc, #396]	; (550 <_GLOBAL__sub_I_top1+0x19c>)
     3c4:	f00d fa6a 	bl	d89c <__aeabi_atexit>
AudioMixer4              mixer1;         //xy=235,100
     3c8:	4864      	ldr	r0, [pc, #400]	; (55c <_GLOBAL__sub_I_top1+0x1a8>)
     3ca:	f7ff fed7 	bl	17c <AudioMixer4::AudioMixer4()>
AudioMixer4              mixer2;         //xy=235,430
     3ce:	4864      	ldr	r0, [pc, #400]	; (560 <_GLOBAL__sub_I_top1+0x1ac>)
     3d0:	f7ff fed4 	bl	17c <AudioMixer4::AudioMixer4()>
AudioMixer4              mixer3;         //xy=395,100
     3d4:	4863      	ldr	r0, [pc, #396]	; (564 <_GLOBAL__sub_I_top1+0x1b0>)
     3d6:	f7ff fed1 	bl	17c <AudioMixer4::AudioMixer4()>
AudioEffectDelay         delay1;         //xy=395,200
     3da:	4863      	ldr	r0, [pc, #396]	; (568 <_GLOBAL__sub_I_top1+0x1b4>)
     3dc:	f7ff fe9c 	bl	118 <AudioEffectDelay::AudioEffectDelay()>
AudioEffectDelay         delay2;         //xy=395,330
     3e0:	4862      	ldr	r0, [pc, #392]	; (56c <_GLOBAL__sub_I_top1+0x1b8>)
     3e2:	f7ff fe99 	bl	118 <AudioEffectDelay::AudioEffectDelay()>
AudioMixer4              mixer4;         //xy=395,430
     3e6:	4862      	ldr	r0, [pc, #392]	; (570 <_GLOBAL__sub_I_top1+0x1bc>)
     3e8:	f7ff fec8 	bl	17c <AudioMixer4::AudioMixer4()>
		num_inputs(ninput), inputQueue(iqueue) {
     3ec:	4a61      	ldr	r2, [pc, #388]	; (574 <_GLOBAL__sub_I_top1+0x1c0>)
			destination_list = NULL;
     3ee:	2300      	movs	r3, #0
		num_inputs(ninput), inputQueue(iqueue) {
     3f0:	4c61      	ldr	r4, [pc, #388]	; (578 <_GLOBAL__sub_I_top1+0x1c4>)
     3f2:	4611      	mov	r1, r2
			if (first_update == NULL) {
     3f4:	4861      	ldr	r0, [pc, #388]	; (57c <_GLOBAL__sub_I_top1+0x1c8>)
			destination_list = NULL;
     3f6:	60d3      	str	r3, [r2, #12]
		num_inputs(ninput), inputQueue(iqueue) {
     3f8:	f841 4b18 	str.w	r4, [r1], #24
			active = false;
     3fc:	f44f 7400 	mov.w	r4, #512	; 0x200
				inputQueue[i] = NULL;
     400:	6193      	str	r3, [r2, #24]
     402:	61d3      	str	r3, [r2, #28]
			if (first_update == NULL) {
     404:	6803      	ldr	r3, [r0, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     406:	6111      	str	r1, [r2, #16]
			active = false;
     408:	8114      	strh	r4, [r2, #8]
			if (first_update == NULL) {
     40a:	2b00      	cmp	r3, #0
     40c:	f000 809d 	beq.w	54a <_GLOBAL__sub_I_top1+0x196>
				for (p=first_update; p->next_update; p = p->next_update) ;
     410:	4619      	mov	r1, r3
     412:	695b      	ldr	r3, [r3, #20]
     414:	2b00      	cmp	r3, #0
     416:	d1fb      	bne.n	410 <_GLOBAL__sub_I_top1+0x5c>
				p->next_update = this;
     418:	614a      	str	r2, [r1, #20]
			next_update = NULL;
     41a:	2400      	movs	r4, #0
#if !defined(KINETISL)

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
     41c:	4b58      	ldr	r3, [pc, #352]	; (580 <_GLOBAL__sub_I_top1+0x1cc>)
     41e:	4855      	ldr	r0, [pc, #340]	; (574 <_GLOBAL__sub_I_top1+0x1c0>)
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
     420:	2501      	movs	r5, #1
			next_update = NULL;
     422:	6154      	str	r4, [r2, #20]
			cpu_cycles = 0;
     424:	6054      	str	r4, [r2, #4]
			numConnections = 0;
     426:	7294      	strb	r4, [r2, #10]
     428:	6013      	str	r3, [r2, #0]
     42a:	f002 f885 	bl	2538 <AudioOutputI2S::begin()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
     42e:	4855      	ldr	r0, [pc, #340]	; (584 <_GLOBAL__sub_I_top1+0x1d0>)
     430:	f00a ff74 	bl	b31c <AudioConnection::AudioConnection()>
     434:	4b49      	ldr	r3, [pc, #292]	; (55c <_GLOBAL__sub_I_top1+0x1a8>)
     436:	4622      	mov	r2, r4
     438:	4945      	ldr	r1, [pc, #276]	; (550 <_GLOBAL__sub_I_top1+0x19c>)
     43a:	9400      	str	r4, [sp, #0]
     43c:	4851      	ldr	r0, [pc, #324]	; (584 <_GLOBAL__sub_I_top1+0x1d0>)
     43e:	f00a ffe1 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord1(top1, 0, mixer1, 0);
     442:	4a44      	ldr	r2, [pc, #272]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     444:	4950      	ldr	r1, [pc, #320]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     446:	484f      	ldr	r0, [pc, #316]	; (584 <_GLOBAL__sub_I_top1+0x1d0>)
     448:	f00d fa28 	bl	d89c <__aeabi_atexit>
     44c:	484f      	ldr	r0, [pc, #316]	; (58c <_GLOBAL__sub_I_top1+0x1d8>)
     44e:	f00a ff65 	bl	b31c <AudioConnection::AudioConnection()>
     452:	4b44      	ldr	r3, [pc, #272]	; (564 <_GLOBAL__sub_I_top1+0x1b0>)
     454:	4622      	mov	r2, r4
     456:	4941      	ldr	r1, [pc, #260]	; (55c <_GLOBAL__sub_I_top1+0x1a8>)
     458:	9400      	str	r4, [sp, #0]
     45a:	484c      	ldr	r0, [pc, #304]	; (58c <_GLOBAL__sub_I_top1+0x1d8>)
     45c:	f00a ffd2 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord10(mixer1, 0, mixer3, 0);
     460:	4a3c      	ldr	r2, [pc, #240]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     462:	4949      	ldr	r1, [pc, #292]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     464:	4849      	ldr	r0, [pc, #292]	; (58c <_GLOBAL__sub_I_top1+0x1d8>)
     466:	f00d fa19 	bl	d89c <__aeabi_atexit>
     46a:	4849      	ldr	r0, [pc, #292]	; (590 <_GLOBAL__sub_I_top1+0x1dc>)
     46c:	f00a ff56 	bl	b31c <AudioConnection::AudioConnection()>
     470:	4b3f      	ldr	r3, [pc, #252]	; (570 <_GLOBAL__sub_I_top1+0x1bc>)
     472:	4622      	mov	r2, r4
     474:	493a      	ldr	r1, [pc, #232]	; (560 <_GLOBAL__sub_I_top1+0x1ac>)
     476:	9400      	str	r4, [sp, #0]
     478:	4845      	ldr	r0, [pc, #276]	; (590 <_GLOBAL__sub_I_top1+0x1dc>)
     47a:	f00a ffc3 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord11(mixer2, 0, mixer4, 0);
     47e:	4a35      	ldr	r2, [pc, #212]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     480:	4941      	ldr	r1, [pc, #260]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     482:	4843      	ldr	r0, [pc, #268]	; (590 <_GLOBAL__sub_I_top1+0x1dc>)
     484:	f00d fa0a 	bl	d89c <__aeabi_atexit>
		: AudioConnection() { connect(source,destination); }
     488:	4842      	ldr	r0, [pc, #264]	; (594 <_GLOBAL__sub_I_top1+0x1e0>)
     48a:	f00a ff47 	bl	b31c <AudioConnection::AudioConnection()>
	int connect(AudioStream &source, AudioStream &destination) {return connect(source,0,destination,0);};
     48e:	4b36      	ldr	r3, [pc, #216]	; (568 <_GLOBAL__sub_I_top1+0x1b4>)
     490:	4622      	mov	r2, r4
     492:	4934      	ldr	r1, [pc, #208]	; (564 <_GLOBAL__sub_I_top1+0x1b0>)
     494:	9400      	str	r4, [sp, #0]
     496:	483f      	ldr	r0, [pc, #252]	; (594 <_GLOBAL__sub_I_top1+0x1e0>)
     498:	f00a ffb4 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord13(mixer3, delay1);
     49c:	4a2d      	ldr	r2, [pc, #180]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     49e:	493a      	ldr	r1, [pc, #232]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     4a0:	483c      	ldr	r0, [pc, #240]	; (594 <_GLOBAL__sub_I_top1+0x1e0>)
     4a2:	f00d f9fb 	bl	d89c <__aeabi_atexit>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
     4a6:	483c      	ldr	r0, [pc, #240]	; (598 <_GLOBAL__sub_I_top1+0x1e4>)
     4a8:	f00a ff38 	bl	b31c <AudioConnection::AudioConnection()>
     4ac:	4b30      	ldr	r3, [pc, #192]	; (570 <_GLOBAL__sub_I_top1+0x1bc>)
     4ae:	4622      	mov	r2, r4
     4b0:	492d      	ldr	r1, [pc, #180]	; (568 <_GLOBAL__sub_I_top1+0x1b4>)
     4b2:	9500      	str	r5, [sp, #0]
     4b4:	4838      	ldr	r0, [pc, #224]	; (598 <_GLOBAL__sub_I_top1+0x1e4>)
     4b6:	f00a ffa5 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord14(delay1, 0, mixer4, 1);
     4ba:	4a26      	ldr	r2, [pc, #152]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     4bc:	4932      	ldr	r1, [pc, #200]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     4be:	4836      	ldr	r0, [pc, #216]	; (598 <_GLOBAL__sub_I_top1+0x1e4>)
     4c0:	f00d f9ec 	bl	d89c <__aeabi_atexit>
     4c4:	4835      	ldr	r0, [pc, #212]	; (59c <_GLOBAL__sub_I_top1+0x1e8>)
     4c6:	f00a ff29 	bl	b31c <AudioConnection::AudioConnection()>
     4ca:	4b26      	ldr	r3, [pc, #152]	; (564 <_GLOBAL__sub_I_top1+0x1b0>)
     4cc:	4622      	mov	r2, r4
     4ce:	4927      	ldr	r1, [pc, #156]	; (56c <_GLOBAL__sub_I_top1+0x1b8>)
     4d0:	9500      	str	r5, [sp, #0]
     4d2:	4832      	ldr	r0, [pc, #200]	; (59c <_GLOBAL__sub_I_top1+0x1e8>)
     4d4:	f00a ff96 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord15(delay2, 0, mixer3, 1);
     4d8:	4a1e      	ldr	r2, [pc, #120]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     4da:	492b      	ldr	r1, [pc, #172]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     4dc:	482f      	ldr	r0, [pc, #188]	; (59c <_GLOBAL__sub_I_top1+0x1e8>)
     4de:	f00d f9dd 	bl	d89c <__aeabi_atexit>
		: AudioConnection() { connect(source,destination); }
     4e2:	482f      	ldr	r0, [pc, #188]	; (5a0 <_GLOBAL__sub_I_top1+0x1ec>)
     4e4:	f00a ff1a 	bl	b31c <AudioConnection::AudioConnection()>
	int connect(AudioStream &source, AudioStream &destination) {return connect(source,0,destination,0);};
     4e8:	4b20      	ldr	r3, [pc, #128]	; (56c <_GLOBAL__sub_I_top1+0x1b8>)
     4ea:	4622      	mov	r2, r4
     4ec:	4920      	ldr	r1, [pc, #128]	; (570 <_GLOBAL__sub_I_top1+0x1bc>)
     4ee:	9400      	str	r4, [sp, #0]
     4f0:	482b      	ldr	r0, [pc, #172]	; (5a0 <_GLOBAL__sub_I_top1+0x1ec>)
     4f2:	f00a ff87 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord17(mixer4, delay2);
     4f6:	4a17      	ldr	r2, [pc, #92]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     4f8:	4923      	ldr	r1, [pc, #140]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     4fa:	4829      	ldr	r0, [pc, #164]	; (5a0 <_GLOBAL__sub_I_top1+0x1ec>)
     4fc:	f00d f9ce 	bl	d89c <__aeabi_atexit>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
     500:	4828      	ldr	r0, [pc, #160]	; (5a4 <_GLOBAL__sub_I_top1+0x1f0>)
     502:	f00a ff0b 	bl	b31c <AudioConnection::AudioConnection()>
     506:	4b1b      	ldr	r3, [pc, #108]	; (574 <_GLOBAL__sub_I_top1+0x1c0>)
     508:	4622      	mov	r2, r4
     50a:	4916      	ldr	r1, [pc, #88]	; (564 <_GLOBAL__sub_I_top1+0x1b0>)
     50c:	9400      	str	r4, [sp, #0]
     50e:	4825      	ldr	r0, [pc, #148]	; (5a4 <_GLOBAL__sub_I_top1+0x1f0>)
     510:	f00a ff78 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection pc1(mixer3, 0, i2s1, 0);
     514:	4a0f      	ldr	r2, [pc, #60]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     516:	491c      	ldr	r1, [pc, #112]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     518:	4822      	ldr	r0, [pc, #136]	; (5a4 <_GLOBAL__sub_I_top1+0x1f0>)
     51a:	f00d f9bf 	bl	d89c <__aeabi_atexit>
     51e:	4822      	ldr	r0, [pc, #136]	; (5a8 <_GLOBAL__sub_I_top1+0x1f4>)
     520:	f00a fefc 	bl	b31c <AudioConnection::AudioConnection()>
     524:	4b13      	ldr	r3, [pc, #76]	; (574 <_GLOBAL__sub_I_top1+0x1c0>)
     526:	4622      	mov	r2, r4
     528:	4911      	ldr	r1, [pc, #68]	; (570 <_GLOBAL__sub_I_top1+0x1bc>)
     52a:	9500      	str	r5, [sp, #0]
     52c:	481e      	ldr	r0, [pc, #120]	; (5a8 <_GLOBAL__sub_I_top1+0x1f4>)
     52e:	f00a ff69 	bl	b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection pc2(mixer4, 0, i2s1, 1);
     532:	4a08      	ldr	r2, [pc, #32]	; (554 <_GLOBAL__sub_I_top1+0x1a0>)
     534:	4914      	ldr	r1, [pc, #80]	; (588 <_GLOBAL__sub_I_top1+0x1d4>)
     536:	481c      	ldr	r0, [pc, #112]	; (5a8 <_GLOBAL__sub_I_top1+0x1f4>)
     538:	f00d f9b0 	bl	d89c <__aeabi_atexit>
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
     53c:	4b1b      	ldr	r3, [pc, #108]	; (5ac <_GLOBAL__sub_I_top1+0x1f8>)
     53e:	491c      	ldr	r1, [pc, #112]	; (5b0 <_GLOBAL__sub_I_top1+0x1fc>)
     540:	220a      	movs	r2, #10
     542:	6019      	str	r1, [r3, #0]
     544:	721a      	strb	r2, [r3, #8]
}
     546:	b003      	add	sp, #12
     548:	bd30      	pop	{r4, r5, pc}
				first_update = this;
     54a:	6002      	str	r2, [r0, #0]
     54c:	e765      	b.n	41a <_GLOBAL__sub_I_top1+0x66>
     54e:	bf00      	nop
     550:	20003e68 	.word	0x20003e68
     554:	20002f34 	.word	0x20002f34
     558:	000000dd 	.word	0x000000dd
     55c:	200077e4 	.word	0x200077e4
     560:	2000781c 	.word	0x2000781c
     564:	20007854 	.word	0x20007854
     568:	20004c10 	.word	0x20004c10
     56c:	200061e0 	.word	0x200061e0
     570:	2000788c 	.word	0x2000788c
     574:	200077c4 	.word	0x200077c4
     578:	20002084 	.word	0x20002084
     57c:	2000474c 	.word	0x2000474c
     580:	20002090 	.word	0x20002090
     584:	200078dc 	.word	0x200078dc
     588:	0000b4b9 	.word	0x0000b4b9
     58c:	200078f0 	.word	0x200078f0
     590:	20007904 	.word	0x20007904
     594:	20007918 	.word	0x20007918
     598:	2000792c 	.word	0x2000792c
     59c:	20007940 	.word	0x20007940
     5a0:	20007954 	.word	0x20007954
     5a4:	20007968 	.word	0x20007968
     5a8:	2000797c 	.word	0x2000797c
     5ac:	20007a0c 	.word	0x20007a0c
     5b0:	20002140 	.word	0x20002140

000005b4 <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev>:
    blocks_processed = 0;
  }
  __enable_irq();
  const float usec_per_block = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
  return cpu / (blks * usec_per_block);
}
     5b4:	b410      	push	{r4}
  const value_type max;
  const value_type default_;
  const char *units;

  Parameter(const char *gm, value_type mn, value_type mx, value_type df, const char *un = "")
  : group_member(gm),
     5b6:	4b12      	ldr	r3, [pc, #72]	; (600 <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev+0x4c>)
    min(mn),
    max(mx),
    default_(df),
     5b8:	2000      	movs	r0, #0
  : group_member(gm),
     5ba:	4c12      	ldr	r4, [pc, #72]	; (604 <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev+0x50>)
    max(mx),
     5bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    units(un)
     5c0:	4a11      	ldr	r2, [pc, #68]	; (608 <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev+0x54>)
  : group_member(gm),
     5c2:	601c      	str	r4, [r3, #0]
    min(mn),
     5c4:	4c11      	ldr	r4, [pc, #68]	; (60c <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev+0x58>)
     5c6:	6198      	str	r0, [r3, #24]
     5c8:	605c      	str	r4, [r3, #4]
    max(mx),
     5ca:	f647 74ff 	movw	r4, #32767	; 0x7fff
    min(mn),
     5ce:	62d8      	str	r0, [r3, #44]	; 0x2c
    max(mx),
     5d0:	609c      	str	r4, [r3, #8]
  : group_member(gm),
     5d2:	4c0f      	ldr	r4, [pc, #60]	; (610 <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev+0x5c>)
    min(mn),
     5d4:	6418      	str	r0, [r3, #64]	; 0x40
    max(mx),
     5d6:	6319      	str	r1, [r3, #48]	; 0x30
  : group_member(gm),
     5d8:	615c      	str	r4, [r3, #20]
    max(mx),
     5da:	6459      	str	r1, [r3, #68]	; 0x44
  : group_member(gm),
     5dc:	4c0d      	ldr	r4, [pc, #52]	; (614 <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev+0x60>)
    units(un)
     5de:	625a      	str	r2, [r3, #36]	; 0x24
  : group_member(gm),
     5e0:	629c      	str	r4, [r3, #40]	; 0x28
    units(un)
     5e2:	639a      	str	r2, [r3, #56]	; 0x38
     5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
     5e8:	e9c3 0203 	strd	r0, r2, [r3, #12]
    default_(df),
     5ec:	e9c3 1107 	strd	r1, r1, [r3, #28]
     5f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  : group_member(gm),
     5f4:	4908      	ldr	r1, [pc, #32]	; (618 <_GLOBAL__sub_I__ZN25AudioSynthMutableBassDrumC2Ev+0x64>)
    default_(df),
     5f6:	6358      	str	r0, [r3, #52]	; 0x34
  : group_member(gm),
     5f8:	63d9      	str	r1, [r3, #60]	; 0x3c
    units(un)
     5fa:	e9c3 0212 	strd	r0, r2, [r3, #72]	; 0x48
     5fe:	4770      	bx	lr
     600:	200045f8 	.word	0x200045f8
     604:	20000824 	.word	0x20000824
     608:	20000620 	.word	0x20000620
     60c:	ffff8000 	.word	0xffff8000
     610:	20000834 	.word	0x20000834
     614:	20000840 	.word	0x20000840
     618:	2000084c 	.word	0x2000084c

0000061c <AudioSynthMutableFMDrum::update()>:
{
  fm_drum.Init();
  Parameterized::init();
}

void AudioSynthMutableFMDrum::update(void) {
     61c:	b570      	push	{r4, r5, r6, lr}
     61e:	4604      	mov	r4, r0
class elapsedMicros
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
     620:	f00b fb98 	bl	bd54 <micros>
     624:	4606      	mov	r6, r0
  // Hack: [0..n) has a trigger; [1..n] has none.
  static const peaks::GateFlags gate_flags[AUDIO_BLOCK_SAMPLES + 1] = {
    peaks::GATE_FLAG_RISING,
  };

  audio_block_t *out = allocate();
     626:	f00a fda7 	bl	b178 <AudioStream::allocate()>
  if (!out) {
     62a:	b318      	cbz	r0, 674 <AudioSynthMutableFMDrum::update()+0x58>
    return;
  }
  fm_drum.Process(gate_flags + !note_on, out->data, AUDIO_BLOCK_SAMPLES);
     62c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
     630:	4605      	mov	r5, r0
     632:	4911      	ldr	r1, [pc, #68]	; (678 <AudioSynthMutableFMDrum::update()+0x5c>)
     634:	f104 0038 	add.w	r0, r4, #56	; 0x38
     638:	f083 0301 	eor.w	r3, r3, #1
     63c:	1d2a      	adds	r2, r5, #4
     63e:	4419      	add	r1, r3
     640:	2380      	movs	r3, #128	; 0x80
     642:	f000 fc3f 	bl	ec4 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)>
  note_on = false;
     646:	2200      	movs	r2, #0
  transmit(out, 0);
     648:	4629      	mov	r1, r5
     64a:	4620      	mov	r0, r4
  note_on = false;
     64c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  transmit(out, 0);
     650:	f00a fe10 	bl	b274 <AudioStream::transmit(audio_block_struct*, unsigned char)>
  release(out);
     654:	4628      	mov	r0, r5
     656:	f00a fde5 	bl	b224 <AudioStream::release(audio_block_struct*)>
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
     65a:	f00b fb7b 	bl	bd54 <micros>
     65e:	1b80      	subs	r0, r0, r6

  cpu_usec += elapsed;
  blocks_processed++;
     660:	6b22      	ldr	r2, [r4, #48]	; 0x30
  cpu_usec += elapsed;
     662:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
  blocks_processed++;
     666:	3201      	adds	r2, #1
  cpu_usec += elapsed;
     668:	181b      	adds	r3, r3, r0
  blocks_processed++;
     66a:	6322      	str	r2, [r4, #48]	; 0x30
  cpu_usec += elapsed;
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
}
     674:	bd70      	pop	{r4, r5, r6, pc}
     676:	bf00      	nop
     678:	20002340 	.word	0x20002340

0000067c <AudioSynthMutableFMDrum::set(char const*, int)>:

void AudioSynthMutableFMDrum::set(const char *group_member, Parameter::value_type new_value) {
     67c:	b570      	push	{r4, r5, r6, lr}
     67e:	4604      	mov	r4, r0
  if (!Parameterized::save_value(group_member, new_value)) {
     680:	3018      	adds	r0, #24
void AudioSynthMutableFMDrum::set(const char *group_member, Parameter::value_type new_value) {
     682:	460d      	mov	r5, r1
     684:	4616      	mov	r6, r2
  if (!Parameterized::save_value(group_member, new_value)) {
     686:	f000 fbed 	bl	e64 <Parameterized::save_value(char const*, int)>
     68a:	b330      	cbz	r0, 6da <AudioSynthMutableFMDrum::set(char const*, int)+0x5e>
    return;
  }
  if (!strcmp(group_member, "fm_drum.frequency")) {
     68c:	4931      	ldr	r1, [pc, #196]	; (754 <AudioSynthMutableFMDrum::set(char const*, int)+0xd8>)
     68e:	4628      	mov	r0, r5
     690:	f00e f8ca 	bl	e828 <strcmp>
     694:	b310      	cbz	r0, 6dc <AudioSynthMutableFMDrum::set(char const*, int)+0x60>
    setFrequency(new_value);
  }
  if (!strcmp(group_member, "fm_drum.fm_amount")) {
     696:	4930      	ldr	r1, [pc, #192]	; (758 <AudioSynthMutableFMDrum::set(char const*, int)+0xdc>)
     698:	4628      	mov	r0, r5
     69a:	f00e f8c5 	bl	e828 <strcmp>
     69e:	b920      	cbnz	r0, 6aa <AudioSynthMutableFMDrum::set(char const*, int)+0x2e>
  __enable_irq();
}


void AudioSynthMutableFMDrum::setFMAmount(int amount) {
  __disable_irq();
     6a0:	b672      	cpsid	i
    }
    frequency_ = (24 << 7) + ((72 << 7) * frequency >> 16);
  }
  
  inline void set_fm_amount(uint16_t fm_amount) {
    fm_amount_ = fm_amount >> 2;
     6a2:	f3c6 038d 	ubfx	r3, r6, #2, #14
     6a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  {
    fm_drum.set_fm_amount(amount);
  }
  __enable_irq();
     6a8:	b662      	cpsie	i
  if (!strcmp(group_member, "fm_drum.decay")) {
     6aa:	492c      	ldr	r1, [pc, #176]	; (75c <AudioSynthMutableFMDrum::set(char const*, int)+0xe0>)
     6ac:	4628      	mov	r0, r5
     6ae:	f00e f8bb 	bl	e828 <strcmp>
     6b2:	b968      	cbnz	r0, 6d0 <AudioSynthMutableFMDrum::set(char const*, int)+0x54>
}

void AudioSynthMutableFMDrum::setDecay(int decay) {
  __disable_irq();
     6b4:	b672      	cpsid	i
  }

  inline void set_decay(uint16_t decay) {
    am_decay_ = 16384 + (decay >> 1);
     6b6:	f3c6 024e 	ubfx	r2, r6, #1, #15
    fm_decay_ = 8192 + (decay >> 2);
     6ba:	f3c6 038d 	ubfx	r3, r6, #2, #14
    am_decay_ = 16384 + (decay >> 1);
     6be:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    fm_decay_ = 8192 + (decay >> 2);
     6c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    am_decay_ = 16384 + (decay >> 1);
     6c6:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    fm_decay_ = 8192 + (decay >> 2);
     6ca:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  {
    fm_drum.set_decay(decay);
  }
  __enable_irq();
     6ce:	b662      	cpsie	i
  if (!strcmp(group_member, "fm_drum.noise")) {
     6d0:	4923      	ldr	r1, [pc, #140]	; (760 <AudioSynthMutableFMDrum::set(char const*, int)+0xe4>)
     6d2:	4628      	mov	r0, r5
     6d4:	f00e f8a8 	bl	e828 <strcmp>
     6d8:	b1e0      	cbz	r0, 714 <AudioSynthMutableFMDrum::set(char const*, int)+0x98>
}
     6da:	bd70      	pop	{r4, r5, r6, pc}
  __disable_irq();
     6dc:	b672      	cpsid	i
    fm_drum.set_frequency(freq);
     6de:	b2b3      	uxth	r3, r6
    if (frequency <= 16384) {
     6e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     6e4:	d927      	bls.n	736 <AudioSynthMutableFMDrum::set(char const*, int)+0xba>
    } else if (frequency <= 32768) {
     6e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
     6ea:	d803      	bhi.n	6f4 <AudioSynthMutableFMDrum::set(char const*, int)+0x78>
      aux_envelope_strength_ = 2048 - (frequency >> 4);
     6ec:	091b      	lsrs	r3, r3, #4
     6ee:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
     6f2:	b298      	uxth	r0, r3
    frequency_ = (24 << 7) + ((72 << 7) * frequency >> 16);
     6f4:	b2b3      	uxth	r3, r6
      aux_envelope_strength_ = 1024;
     6f6:	8760      	strh	r0, [r4, #58]	; 0x3a
    frequency_ = (24 << 7) + ((72 << 7) * frequency >> 16);
     6f8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     6fc:	099b      	lsrs	r3, r3, #6
     6fe:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
     702:	87a3      	strh	r3, [r4, #60]	; 0x3c
  __enable_irq();
     704:	b662      	cpsie	i
  if (!strcmp(group_member, "fm_drum.fm_amount")) {
     706:	4914      	ldr	r1, [pc, #80]	; (758 <AudioSynthMutableFMDrum::set(char const*, int)+0xdc>)
     708:	4628      	mov	r0, r5
     70a:	f00e f88d 	bl	e828 <strcmp>
     70e:	2800      	cmp	r0, #0
     710:	d1cb      	bne.n	6aa <AudioSynthMutableFMDrum::set(char const*, int)+0x2e>
     712:	e7c5      	b.n	6a0 <AudioSynthMutableFMDrum::set(char const*, int)+0x24>
}

void AudioSynthMutableFMDrum::setNoise(int noise) {
  __disable_irq();
     714:	b672      	cpsid	i
  }
  
  inline void set_noise(uint16_t noise) {
    uint32_t n = noise;
    noise_ = noise >= 32768 ? ((n - 32768) * (n - 32768) >> 15) : 0;
     716:	0433      	lsls	r3, r6, #16
    uint32_t n = noise;
     718:	b2b2      	uxth	r2, r6
    noise_ = noise >= 32768 ? ((n - 32768) * (n - 32768) >> 15) : 0;
     71a:	d40f      	bmi.n	73c <AudioSynthMutableFMDrum::set(char const*, int)+0xc0>
    noise_ = (noise_ >> 2) * 5;
    overdrive_ = noise <= 32767 ? ((32767 - n) * (32767 - n) >> 14) : 0;
     71c:	f647 73ff 	movw	r3, #32767	; 0x7fff
     720:	1a9b      	subs	r3, r3, r2
     722:	fb03 f303 	mul.w	r3, r3, r3
     726:	f3c3 338f 	ubfx	r3, r3, #14, #16
     72a:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
     72e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  {
    fm_drum.set_noise(noise);
  }
  __enable_irq();
     732:	b662      	cpsie	i
}
     734:	bd70      	pop	{r4, r5, r6, pc}
     736:	f44f 6080 	mov.w	r0, #1024	; 0x400
     73a:	e7db      	b.n	6f4 <AudioSynthMutableFMDrum::set(char const*, int)+0x78>
    noise_ = noise >= 32768 ? ((n - 32768) * (n - 32768) >> 15) : 0;
     73c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    overdrive_ = noise <= 32767 ? ((32767 - n) * (32767 - n) >> 14) : 0;
     740:	4603      	mov	r3, r0
    noise_ = noise >= 32768 ? ((n - 32768) * (n - 32768) >> 15) : 0;
     742:	fb02 f202 	mul.w	r2, r2, r2
    noise_ = (noise_ >> 2) * 5;
     746:	f3c2 424d 	ubfx	r2, r2, #17, #14
     74a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     74e:	b290      	uxth	r0, r2
    overdrive_ = noise <= 32767 ? ((32767 - n) * (32767 - n) >> 14) : 0;
     750:	e7eb      	b.n	72a <AudioSynthMutableFMDrum::set(char const*, int)+0xae>
     752:	bf00      	nop
     754:	20000750 	.word	0x20000750
     758:	20000764 	.word	0x20000764
     75c:	20000778 	.word	0x20000778
     760:	20000788 	.word	0x20000788

00000764 <non-virtual thunk to AudioSynthMutableFMDrum::set(char const*, int)>:
public:
  AudioSynthMutableFMDrum();

  virtual void update(void);

  virtual void set(const char *group_member, Parameter::value_type value);
     764:	f1a0 0018 	sub.w	r0, r0, #24
     768:	f7ff bf88 	b.w	67c <AudioSynthMutableFMDrum::set(char const*, int)>

0000076c <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()>:
AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()
     76c:	b538      	push	{r3, r4, r5, lr}
		num_inputs(ninput), inputQueue(iqueue) {
     76e:	4602      	mov	r2, r0
     770:	4b18      	ldr	r3, [pc, #96]	; (7d4 <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x68>)
			if (first_update == NULL) {
     772:	4d19      	ldr	r5, [pc, #100]	; (7d8 <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x6c>)
			active = false;
     774:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
     776:	f842 3b28 	str.w	r3, [r2], #40
     77a:	4604      	mov	r4, r0
			if (first_update == NULL) {
     77c:	682b      	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     77e:	6102      	str	r2, [r0, #16]
			active = false;
     780:	8101      	strh	r1, [r0, #8]
			destination_list = NULL;
     782:	60c1      	str	r1, [r0, #12]
			if (first_update == NULL) {
     784:	b323      	cbz	r3, 7d0 <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x64>
				for (p=first_update; p->next_update; p = p->next_update) ;
     786:	461a      	mov	r2, r3
     788:	695b      	ldr	r3, [r3, #20]
     78a:	2b00      	cmp	r3, #0
     78c:	d1fb      	bne.n	786 <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x1a>
				p->next_update = this;
     78e:	6154      	str	r4, [r2, #20]
  note_on(false)
     790:	4a12      	ldr	r2, [pc, #72]	; (7dc <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x70>)
			next_update = NULL;
     792:	2300      	movs	r3, #0
  virtual Parameter::value_type get(const char *group_member) const;
  virtual void set(const char *group_member, Parameter::value_type new_value);

protected:
  Parameterized(const Parameter *params, Parameter::value_type *values, size_t count)
  : params(params), values(values), count(count)
     794:	4812      	ldr	r0, [pc, #72]	; (7e0 <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x74>)
     796:	2504      	movs	r5, #4
     798:	4912      	ldr	r1, [pc, #72]	; (7e4 <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x78>)
     79a:	6163      	str	r3, [r4, #20]
			cpu_cycles = 0;
     79c:	6063      	str	r3, [r4, #4]
			numConnections = 0;
     79e:	72a3      	strb	r3, [r4, #10]
     7a0:	6022      	str	r2, [r4, #0]
  blocks_processed(0),
     7a2:	6323      	str	r3, [r4, #48]	; 0x30
  note_on(false)
     7a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
     7a8:	6265      	str	r5, [r4, #36]	; 0x24
     7aa:	e9c4 0107 	strd	r0, r1, [r4, #28]
     7ae:	f102 0118 	add.w	r1, r2, #24
  cpu_usec(0),
     7b2:	2000      	movs	r0, #0
  note_on(false)
     7b4:	61a1      	str	r1, [r4, #24]
  cpu_usec(0),
     7b6:	2100      	movs	r1, #0
     7b8:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
  fm_drum.Init();
     7bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
     7c0:	f000 fb78 	bl	eb4 <peaks::FmDrum::Init()>
  Parameterized::init();
     7c4:	f104 0018 	add.w	r0, r4, #24
     7c8:	f000 fb0a 	bl	de0 <Parameterized::init()>
}
     7cc:	4620      	mov	r0, r4
     7ce:	bd38      	pop	{r3, r4, r5, pc}
				first_update = this;
     7d0:	6028      	str	r0, [r5, #0]
     7d2:	e7dd      	b.n	790 <AudioSynthMutableFMDrum::AudioSynthMutableFMDrum()+0x24>
     7d4:	20002084 	.word	0x20002084
     7d8:	2000474c 	.word	0x2000474c
     7dc:	2000215c 	.word	0x2000215c
     7e0:	200046b0 	.word	0x200046b0
     7e4:	20004700 	.word	0x20004700

000007e8 <_GLOBAL__sub_I__ZN23AudioSynthMutableFMDrumC2Ev>:
    blocks_processed = 0;
  }
  __enable_irq();
  const float usec_per_block = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
  return cpu / (blks * usec_per_block);
}
     7e8:	b430      	push	{r4, r5}
  : group_member(gm),
     7ea:	4b10      	ldr	r3, [pc, #64]	; (82c <_GLOBAL__sub_I__ZN23AudioSynthMutableFMDrumC2Ev+0x44>)
    min(mn),
     7ec:	2400      	movs	r4, #0
    max(mx),
     7ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
    default_(df),
     7f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    units(un)
     7f6:	4a0e      	ldr	r2, [pc, #56]	; (830 <_GLOBAL__sub_I__ZN23AudioSynthMutableFMDrumC2Ev+0x48>)
  : group_member(gm),
     7f8:	4d0e      	ldr	r5, [pc, #56]	; (834 <_GLOBAL__sub_I__ZN23AudioSynthMutableFMDrumC2Ev+0x4c>)
    units(un)
     7fa:	611a      	str	r2, [r3, #16]
     7fc:	639a      	str	r2, [r3, #56]	; 0x38
     7fe:	64da      	str	r2, [r3, #76]	; 0x4c
    min(mn),
     800:	62dc      	str	r4, [r3, #44]	; 0x2c
     802:	641c      	str	r4, [r3, #64]	; 0x40
    default_(df),
     804:	e9c3 0102 	strd	r0, r1, [r3, #8]
    max(mx),
     808:	e9c3 4006 	strd	r4, r0, [r3, #24]
    units(un)
     80c:	e9c3 1208 	strd	r1, r2, [r3, #32]
    default_(df),
     810:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
     814:	e9c3 0111 	strd	r0, r1, [r3, #68]	; 0x44
  : group_member(gm),
     818:	4a07      	ldr	r2, [pc, #28]	; (838 <_GLOBAL__sub_I__ZN23AudioSynthMutableFMDrumC2Ev+0x50>)
     81a:	4808      	ldr	r0, [pc, #32]	; (83c <_GLOBAL__sub_I__ZN23AudioSynthMutableFMDrumC2Ev+0x54>)
     81c:	4908      	ldr	r1, [pc, #32]	; (840 <_GLOBAL__sub_I__ZN23AudioSynthMutableFMDrumC2Ev+0x58>)
     81e:	6158      	str	r0, [r3, #20]
     820:	6299      	str	r1, [r3, #40]	; 0x28
     822:	63da      	str	r2, [r3, #60]	; 0x3c
    min(mn),
     824:	e9c3 5400 	strd	r5, r4, [r3]
     828:	bc30      	pop	{r4, r5}
     82a:	4770      	bx	lr
     82c:	200046b0 	.word	0x200046b0
     830:	20000620 	.word	0x20000620
     834:	20000750 	.word	0x20000750
     838:	20000788 	.word	0x20000788
     83c:	20000764 	.word	0x20000764
     840:	20000778 	.word	0x20000778

00000844 <Bounce::setPinMode(int, int)>:
	virtual bool readCurrentState() { return digitalRead(pin); }
	virtual void setPinMode(int pin, int mode) {
#if defined(ARDUINO_ARCH_STM32F1)
		pinMode(pin, (WiringPinMode)mode);
#else
		pinMode(pin, mode);
     844:	b2c8      	uxtb	r0, r1
     846:	b2d1      	uxtb	r1, r2
     848:	f00b baea 	b.w	be20 <pinMode>

0000084c <Bounce::readCurrentState()>:
	virtual bool readCurrentState() { return digitalRead(pin); }
     84c:	b508      	push	{r3, lr}
     84e:	7d00      	ldrb	r0, [r0, #20]
     850:	f00b fad4 	bl	bdfc <digitalRead>
     854:	3800      	subs	r0, #0
     856:	bf18      	it	ne
     858:	2001      	movne	r0, #1
     85a:	bd08      	pop	{r3, pc}

0000085c <Sparkler::light()>:
    }
  }

  // update all the LEDs
  void light() {
    for (size_t i = 0; i < spark_count; i++) {
     85c:	6842      	ldr	r2, [r0, #4]
     85e:	2a00      	cmp	r2, #0
     860:	f000 8092 	beq.w	988 <Sparkler::light()+0x12c>
     864:	2300      	movs	r3, #0
  void light() {
     866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     86a:	4606      	mov	r6, r0
     86c:	b087      	sub	sp, #28
		if (num >= numled) return;
     86e:	4d47      	ldr	r5, [pc, #284]	; (98c <Sparkler::light()+0x130>)
    byte *p = &LED_drawing_memory[3 * index];
     870:	f8df a11c 	ldr.w	sl, [pc, #284]	; 990 <Sparkler::light()+0x134>
     874:	e9cd 0304 	strd	r0, r3, [sp, #16]
      const spark *sp = &sparks[i];
      uint32_t index = sp->pos >> 16;
      uint32_t c0 = sp->color;
     878:	9904      	ldr	r1, [sp, #16]
      uint8_t r0 = c0 >> 16 & 0xFF, g0 = c0 >> 8 & 0xFF, b0 = c0 >> 0 & 0xFF;
      // If velocity is more than one pixel/tick, leave a contrail behind it.
      int abs_v, dir;
      if (sp->vel > 0) {
     87a:	e9d1 7304 	ldrd	r7, r3, [r1, #16]
      uint32_t index = sp->pos >> 16;
     87e:	89c9      	ldrh	r1, [r1, #14]
      if (sp->vel > 0) {
     880:	2f00      	cmp	r7, #0
      uint8_t r0 = c0 >> 16 & 0xFF, g0 = c0 >> 8 & 0xFF, b0 = c0 >> 0 & 0xFF;
     882:	ea4f 4013 	mov.w	r0, r3, lsr #16
     886:	ea4f 2413 	mov.w	r4, r3, lsr #8
      if (sp->vel > 0) {
     88a:	dd79      	ble.n	980 <Sparkler::light()+0x124>
        abs_v = sp->vel;
        dir = -1;
     88c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
      } else {
        abs_v = -sp->vel;
        dir = +1;
      }
      int n_pix = (abs_v + 65535) / 65536;
     890:	f507 477f 	add.w	r7, r7, #65280	; 0xff00
     894:	37ff      	adds	r7, #255	; 0xff
      for (int j = 0; j < n_pix; j++) {
     896:	143f      	asrs	r7, r7, #16
     898:	d066      	beq.n	968 <Sparkler::light()+0x10c>
        int j_index = index + dir * j;
        if (j_index < 0 || (uint32_t)j_index >= pixel_count)
          break;
        uint32_t c1 = get_pixel_color(j_index);
        uint8_t r = min(255u, r0 + (c1 >> 16 & 0xFF));
        uint8_t g = min(255u, g0 + (c1 >>  8 & 0xFF));
     89a:	b2e2      	uxtb	r2, r4
     89c:	9700      	str	r7, [sp, #0]
        uint8_t b = min(255u, b0 + (c1 >>  0 & 0xFF));
     89e:	b2db      	uxtb	r3, r3
      for (int j = 0; j < n_pix; j++) {
     8a0:	2400      	movs	r4, #0
        uint8_t g = min(255u, g0 + (c1 >>  8 & 0xFF));
     8a2:	9201      	str	r2, [sp, #4]
        uint8_t r = min(255u, r0 + (c1 >> 16 & 0xFF));
     8a4:	b2c2      	uxtb	r2, r0
        uint8_t b = min(255u, b0 + (c1 >>  0 & 0xFF));
     8a6:	9303      	str	r3, [sp, #12]
        uint8_t r = min(255u, r0 + (c1 >> 16 & 0xFF));
     8a8:	9202      	str	r2, [sp, #8]
     8aa:	e010      	b.n	8ce <Sparkler::light()+0x72>
			drawBuffer[num+0] = color & 255;
     8ac:	68aa      	ldr	r2, [r5, #8]
     8ae:	5413      	strb	r3, [r2, r0]
			drawBuffer[num+1] = (color >> 8) & 255;
     8b0:	68aa      	ldr	r2, [r5, #8]
     8b2:	4402      	add	r2, r0
     8b4:	f882 e001 	strb.w	lr, [r2, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
     8b8:	68aa      	ldr	r2, [r5, #8]
     8ba:	4402      	add	r2, r0
     8bc:	f882 c002 	strb.w	ip, [r2, #2]
      for (int j = 0; j < n_pix; j++) {
     8c0:	3401      	adds	r4, #1
     8c2:	9b00      	ldr	r3, [sp, #0]
     8c4:	42a3      	cmp	r3, r4
     8c6:	d04e      	beq.n	966 <Sparkler::light()+0x10a>
        if (j_index < 0 || (uint32_t)j_index >= pixel_count)
     8c8:	eb11 0109 	adds.w	r1, r1, r9
     8cc:	d44b      	bmi.n	966 <Sparkler::light()+0x10a>
     8ce:	6833      	ldr	r3, [r6, #0]
     8d0:	b28a      	uxth	r2, r1
     8d2:	428b      	cmp	r3, r1
    byte *p = &LED_drawing_memory[3 * index];
     8d4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
        if (j_index < 0 || (uint32_t)j_index >= pixel_count)
     8d8:	d945      	bls.n	966 <Sparkler::light()+0x10a>
		if (num >= numled) return;
     8da:	882b      	ldrh	r3, [r5, #0]
     8dc:	429a      	cmp	r2, r3
     8de:	d2ef      	bcs.n	8c0 <Sparkler::light()+0x64>
    byte *p = &LED_drawing_memory[3 * index];
     8e0:	eb0a 0300 	add.w	r3, sl, r0
        uint8_t b = min(255u, b0 + (c1 >>  0 & 0xFF));
     8e4:	f81a e000 	ldrb.w	lr, [sl, r0]
     8e8:	9f03      	ldr	r7, [sp, #12]
    return p[0] | p[1] << 8 | p[2] << 16;
     8ea:	f893 c002 	ldrb.w	ip, [r3, #2]
     8ee:	f893 8001 	ldrb.w	r8, [r3, #1]
        uint8_t b = min(255u, b0 + (c1 >>  0 & 0xFF));
     8f2:	44be      	add	lr, r7
        uint8_t r = min(255u, r0 + (c1 >> 16 & 0xFF));
     8f4:	9b02      	ldr	r3, [sp, #8]
		if (config < 6) {
     8f6:	f895 b003 	ldrb.w	fp, [r5, #3]
     8fa:	449c      	add	ip, r3
        uint8_t g = min(255u, g0 + (c1 >>  8 & 0xFF));
     8fc:	9b01      	ldr	r3, [sp, #4]
        set_pixel_color(j_index, (r << 16 | g << 8 | b << 0));
     8fe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
        uint8_t g = min(255u, g0 + (c1 >>  8 & 0xFF));
     902:	4498      	add	r8, r3
        set_pixel_color(j_index, (r << 16 | g << 8 | b << 0));
     904:	bf28      	it	cs
     906:	f04f 0cff 	movcs.w	ip, #255	; 0xff
     90a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
     90e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
     912:	bf28      	it	cs
     914:	f04f 08ff 	movcs.w	r8, #255	; 0xff
     918:	ea4c 2308 	orr.w	r3, ip, r8, lsl #8
     91c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
     920:	bf94      	ite	ls
     922:	ea43 030e 	orrls.w	r3, r3, lr
     926:	f043 03ff 	orrhi.w	r3, r3, #255	; 0xff
     92a:	f1bb 0f05 	cmp.w	fp, #5
			drawBuffer[num+1] = (color >> 8) & 255;
     92e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
			drawBuffer[num+2] = (color >> 16) & 255;
     932:	ea4f 4c13 	mov.w	ip, r3, lsr #16
		if (config < 6) {
     936:	d9b9      	bls.n	8ac <Sparkler::light()+0x50>
			drawBuffer[num+0] = color & 255;
     938:	68a8      	ldr	r0, [r5, #8]
      for (int j = 0; j < n_pix; j++) {
     93a:	3401      	adds	r4, #1
     93c:	f800 3022 	strb.w	r3, [r0, r2, lsl #2]
			drawBuffer[num+1] = (color >> 8) & 255;
     940:	68ab      	ldr	r3, [r5, #8]
     942:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     946:	f883 e001 	strb.w	lr, [r3, #1]
			drawBuffer[num+2] = (color >> 16) & 255;
     94a:	68ab      	ldr	r3, [r5, #8]
     94c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     950:	f883 c002 	strb.w	ip, [r3, #2]
			drawBuffer[num+3] = (color >> 24) & 255;
     954:	68ab      	ldr	r3, [r5, #8]
     956:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     95a:	f04f 0200 	mov.w	r2, #0
     95e:	70da      	strb	r2, [r3, #3]
     960:	9b00      	ldr	r3, [sp, #0]
     962:	42a3      	cmp	r3, r4
     964:	d1b0      	bne.n	8c8 <Sparkler::light()+0x6c>
     966:	6872      	ldr	r2, [r6, #4]
    for (size_t i = 0; i < spark_count; i++) {
     968:	9b05      	ldr	r3, [sp, #20]
     96a:	9904      	ldr	r1, [sp, #16]
     96c:	3301      	adds	r3, #1
     96e:	3110      	adds	r1, #16
     970:	429a      	cmp	r2, r3
     972:	9305      	str	r3, [sp, #20]
     974:	9104      	str	r1, [sp, #16]
     976:	f63f af7f 	bhi.w	878 <Sparkler::light()+0x1c>
        r /= 4; g /= 4; b /= 4;
      }
    }
  }
     97a:	b007      	add	sp, #28
     97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        abs_v = -sp->vel;
     980:	427f      	negs	r7, r7
        dir = +1;
     982:	f04f 0901 	mov.w	r9, #1
     986:	e783      	b.n	890 <Sparkler::light()+0x34>
     988:	4770      	bx	lr
     98a:	bf00      	nop
     98c:	200034d8 	.word	0x200034d8
     990:	20003ec8 	.word	0x20003ec8

00000994 <LEDManager::loop()>:
  return DMA_ERQ & (1 << dma->channel);
     994:	4863      	ldr	r0, [pc, #396]	; (b24 <LEDManager::loop()+0x190>)
     996:	2301      	movs	r3, #1
     998:	4a63      	ldr	r2, [pc, #396]	; (b28 <LEDManager::loop()+0x194>)
     99a:	68c1      	ldr	r1, [r0, #12]
public:
  static void setup() {
    leds.begin();
  }

  static void loop() {
     99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return DMA_ERQ & (1 << dma->channel);
     9a0:	7909      	ldrb	r1, [r1, #4]
  static void loop() {
     9a2:	b083      	sub	sp, #12
  return DMA_ERQ & (1 << dma->channel);
     9a4:	68d4      	ldr	r4, [r2, #12]
     9a6:	408b      	lsls	r3, r1
    if (!leds.busy()) {
     9a8:	401c      	ands	r4, r3
     9aa:	d002      	beq.n	9b2 <LEDManager::loop()+0x1e>
      } else {
        idle_started_msec = 0;
      }
      leds.show();
    }
  }
     9ac:	b003      	add	sp, #12
     9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	void setPixel(uint32_t num, uint8_t red, uint8_t green, uint8_t blue, uint8_t white) {
		setPixel(num, Color(red, green, blue, white));
	}
	void clear() {
		memset(drawBuffer, 0, numled * ((config < 6) ? 3 : 4));
     9b2:	78c2      	ldrb	r2, [r0, #3]
     9b4:	4621      	mov	r1, r4
     9b6:	8803      	ldrh	r3, [r0, #0]
     9b8:	2a06      	cmp	r2, #6
     9ba:	6880      	ldr	r0, [r0, #8]
      if (idle_started_msec && now - idle_started_msec >= IDLE_TIMEOUT_MSEC) {
     9bc:	4e5b      	ldr	r6, [pc, #364]	; (b2c <LEDManager::loop()+0x198>)
     9be:	bf34      	ite	cc
     9c0:	2203      	movcc	r2, #3
     9c2:	2204      	movcs	r2, #4
     9c4:	fb03 f202 	mul.w	r2, r3, r2
     9c8:	f00d fdea 	bl	e5a0 <memset>
     9cc:	4a58      	ldr	r2, [pc, #352]	; (b30 <LEDManager::loop()+0x19c>)
     9ce:	6833      	ldr	r3, [r6, #0]
     9d0:	6812      	ldr	r2, [r2, #0]
     9d2:	9201      	str	r2, [sp, #4]
     9d4:	2b00      	cmp	r3, #0
     9d6:	d168      	bne.n	aaa <LEDManager::loop()+0x116>
     9d8:	4d56      	ldr	r5, [pc, #344]	; (b34 <LEDManager::loop()+0x1a0>)
      sparkler.light();
     9da:	4856      	ldr	r0, [pc, #344]	; (b34 <LEDManager::loop()+0x1a0>)
     9dc:	f7ff ff3e 	bl	85c <Sparkler::light()>
    for (size_t i = 0; i < spark_count; i++) {
     9e0:	686c      	ldr	r4, [r5, #4]
     9e2:	2c00      	cmp	r4, #0
     9e4:	f000 8097 	beq.w	b16 <LEDManager::loop()+0x182>
      } else if (new_pos >= pixel_count << 16) {
     9e8:	682a      	ldr	r2, [r5, #0]
     9ea:	ea4f 1a04 	mov.w	sl, r4, lsl #4
     9ee:	4b51      	ldr	r3, [pc, #324]	; (b34 <LEDManager::loop()+0x1a0>)
     9f0:	eb05 1e04 	add.w	lr, r5, r4, lsl #4
     9f4:	ea4f 4802 	mov.w	r8, r2, lsl #16
        uint8_t r = (c >> 16 & 0xFF) / 3;
     9f8:	4f4f      	ldr	r7, [pc, #316]	; (b38 <LEDManager::loop()+0x1a4>)
        new_pos = (2 * pixel_count << 16) - new_pos;
     9fa:	ea4f 4942 	mov.w	r9, r2, lsl #17
     9fe:	e020      	b.n	a42 <LEDManager::loop()+0xae>
      } else if (new_pos >= pixel_count << 16) {
     a00:	4541      	cmp	r1, r8
      if (sp->vel < 0 && (uint32_t) -sp->vel > sp->pos) {
     a02:	f1c2 0000 	rsb	r0, r2, #0
      } else if (new_pos >= pixel_count << 16) {
     a06:	d317      	bcc.n	a38 <LEDManager::loop()+0xa4>
        new_pos = (2 * pixel_count << 16) - new_pos;
     a08:	eba9 0101 	sub.w	r1, r9, r1
        uint32_t c = sp->color;
     a0c:	695a      	ldr	r2, [r3, #20]
        sp->vel = -sp->vel;
     a0e:	6118      	str	r0, [r3, #16]
        uint8_t g = (c >>  8 & 0xFF) / 3;
     a10:	f3c2 2b07 	ubfx	fp, r2, #8, #8
        uint8_t r = (c >> 16 & 0xFF) / 3;
     a14:	f3c2 4c07 	ubfx	ip, r2, #16, #8
        uint8_t b = (c >>  0 & 0xFF) / 3;
     a18:	b2d0      	uxtb	r0, r2
        uint8_t g = (c >>  8 & 0xFF) / 3;
     a1a:	fba7 b20b 	umull	fp, r2, r7, fp
        uint8_t r = (c >> 16 & 0xFF) / 3;
     a1e:	fba7 bc0c 	umull	fp, ip, r7, ip
        uint8_t g = (c >>  8 & 0xFF) / 3;
     a22:	0852      	lsrs	r2, r2, #1
        uint8_t b = (c >>  0 & 0xFF) / 3;
     a24:	fba7 b000 	umull	fp, r0, r7, r0
        uint8_t r = (c >> 16 & 0xFF) / 3;
     a28:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        sp->color = r << 16 | g << 8 | b << 0;
     a2c:	0212      	lsls	r2, r2, #8
     a2e:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
     a32:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
     a36:	615a      	str	r2, [r3, #20]
    for (size_t i = 0; i < spark_count; i++) {
     a38:	3310      	adds	r3, #16
      sp->pos = new_pos;
     a3a:	f843 1c04 	str.w	r1, [r3, #-4]
    for (size_t i = 0; i < spark_count; i++) {
     a3e:	459e      	cmp	lr, r3
     a40:	d00b      	beq.n	a5a <LEDManager::loop()+0xc6>
      uint32_t new_pos = sp->pos + sp->vel;
     a42:	e9d3 c203 	ldrd	ip, r2, [r3, #12]
      if (sp->vel < 0 && (uint32_t) -sp->vel > sp->pos) {
     a46:	2a00      	cmp	r2, #0
     a48:	f1c2 0000 	rsb	r0, r2, #0
      uint32_t new_pos = sp->pos + sp->vel;
     a4c:	eb02 010c 	add.w	r1, r2, ip
      if (sp->vel < 0 && (uint32_t) -sp->vel > sp->pos) {
     a50:	dad6      	bge.n	a00 <LEDManager::loop()+0x6c>
     a52:	4584      	cmp	ip, r0
     a54:	d2d4      	bcs.n	a00 <LEDManager::loop()+0x6c>
        new_pos = ~new_pos + 1;
     a56:	4249      	negs	r1, r1
      if (bounced) {
     a58:	e7d8      	b.n	a0c <LEDManager::loop()+0x78>
    for (spark *sp = sparks; sp < sparks + spark_count; ) {
     a5a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; b3c <LEDManager::loop()+0x1a8>
     a5e:	44f2      	add	sl, lr
     a60:	45f2      	cmp	sl, lr
     a62:	d91a      	bls.n	a9a <LEDManager::loop()+0x106>
     a64:	4677      	mov	r7, lr
     a66:	e006      	b.n	a76 <LEDManager::loop()+0xe2>
     a68:	686c      	ldr	r4, [r5, #4]
        sp++;
     a6a:	3710      	adds	r7, #16
     a6c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    for (spark *sp = sparks; sp < sparks + spark_count; ) {
     a70:	44f4      	add	ip, lr
     a72:	4567      	cmp	r7, ip
     a74:	d20f      	bcs.n	a96 <LEDManager::loop()+0x102>
        *sp = sparks[--spark_count];
     a76:	3c01      	subs	r4, #1
      if (sp->color)
     a78:	68ba      	ldr	r2, [r7, #8]
        *sp = sparks[--spark_count];
     a7a:	eb05 1304 	add.w	r3, r5, r4, lsl #4
     a7e:	ea4f 1c04 	mov.w	ip, r4, lsl #4
      if (sp->color)
     a82:	2a00      	cmp	r2, #0
     a84:	d1f0      	bne.n	a68 <LEDManager::loop()+0xd4>
        *sp = sparks[--spark_count];
     a86:	330c      	adds	r3, #12
    for (spark *sp = sparks; sp < sparks + spark_count; ) {
     a88:	44f4      	add	ip, lr
        *sp = sparks[--spark_count];
     a8a:	606c      	str	r4, [r5, #4]
    for (spark *sp = sparks; sp < sparks + spark_count; ) {
     a8c:	4567      	cmp	r7, ip
        *sp = sparks[--spark_count];
     a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a90:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    for (spark *sp = sparks; sp < sparks + spark_count; ) {
     a94:	d3ef      	bcc.n	a76 <LEDManager::loop()+0xe2>
      if (sparkler.is_idle()) {
     a96:	2c00      	cmp	r4, #0
     a98:	d03d      	beq.n	b16 <LEDManager::loop()+0x182>
        idle_started_msec = 0;
     a9a:	2300      	movs	r3, #0
     a9c:	6033      	str	r3, [r6, #0]
      leds.show();
     a9e:	4821      	ldr	r0, [pc, #132]	; (b24 <LEDManager::loop()+0x190>)
  }
     aa0:	b003      	add	sp, #12
     aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      leds.show();
     aa6:	f000 bcc5 	b.w	1434 <WS2812Serial::show()>
      if (idle_started_msec && now - idle_started_msec >= IDLE_TIMEOUT_MSEC) {
     aaa:	9a01      	ldr	r2, [sp, #4]
     aac:	1ad3      	subs	r3, r2, r3
     aae:	f247 522f 	movw	r2, #29999	; 0x752f
     ab2:	4293      	cmp	r3, r2
     ab4:	d990      	bls.n	9d8 <LEDManager::loop()+0x44>
    int n_sparks = random(SPARKBURST_MAX - SPARKBURST_MIN) + SPARKBURST_MIN;
     ab6:	2019      	movs	r0, #25
     ab8:	4d1e      	ldr	r5, [pc, #120]	; (b34 <LEDManager::loop()+0x1a0>)
     aba:	f00a ff49 	bl	b950 <random(unsigned long)>
     abe:	1d47      	adds	r7, r0, #5
    for (int i = 0; i < n_sparks; i++) {
     ac0:	2f00      	cmp	r7, #0
     ac2:	dd25      	ble.n	b10 <LEDManager::loop()+0x17c>
      sp->pos = pos;
     ac4:	46a0      	mov	r8, r4
      uint32_t spark_speed = random(s - f) + f;
     ac6:	20a0      	movs	r0, #160	; 0xa0
    for (int i = 0; i < n_sparks; i++) {
     ac8:	3401      	adds	r4, #1
      uint32_t spark_speed = random(s - f) + f;
     aca:	f00a ff41 	bl	b950 <random(unsigned long)>
    uint32_t color = golden_color_RGB(color_index++, 65535, 65535);
     ace:	68ab      	ldr	r3, [r5, #8]
     ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
      uint32_t spark_speed = random(s - f) + f;
     ad4:	4681      	mov	r9, r0
    uint32_t color = golden_color_RGB(color_index++, 65535, 65535);
     ad6:	1c59      	adds	r1, r3, #1
     ad8:	4618      	mov	r0, r3
      uint32_t spark_speed = random(s - f) + f;
     ada:	f109 0928 	add.w	r9, r9, #40	; 0x28
    uint32_t color = golden_color_RGB(color_index++, 65535, 65535);
     ade:	60a9      	str	r1, [r5, #8]
     ae0:	4611      	mov	r1, r2
     ae2:	f000 f8d9 	bl	c98 <golden_color_RGB(unsigned long, unsigned short, unsigned short)>
    if (spark_count < MAX_SPARKS) {
     ae6:	686b      	ldr	r3, [r5, #4]
    int32_t vel = MAX_VEL / msec;
     ae8:	f44f 01c8 	mov.w	r1, #6553600	; 0x640000
    if (spark_count < MAX_SPARKS) {
     aec:	2bc7      	cmp	r3, #199	; 0xc7
      spark *sp = &sparks[spark_count++];
     aee:	f103 0201 	add.w	r2, r3, #1
      sp->pos = pos;
     af2:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    if (spark_count < MAX_SPARKS) {
     af6:	d809      	bhi.n	b0c <LEDManager::loop()+0x178>
      spark *sp = &sparks[spark_count++];
     af8:	606a      	str	r2, [r5, #4]
      sp->color = color;
     afa:	eb05 1202 	add.w	r2, r5, r2, lsl #4
    int32_t vel = MAX_VEL / msec;
     afe:	fbb1 f1f9 	udiv	r1, r1, r9
      sp->color = color;
     b02:	6050      	str	r0, [r2, #4]
      sp->has_sound = has_sound;
     b04:	f882 8008 	strb.w	r8, [r2, #8]
      sp->pos = pos;
     b08:	e9c3 8103 	strd	r8, r1, [r3, #12]
    for (int i = 0; i < n_sparks; i++) {
     b0c:	42a7      	cmp	r7, r4
     b0e:	d1da      	bne.n	ac6 <LEDManager::loop()+0x132>
        idle_started_msec = 0;
     b10:	2300      	movs	r3, #0
     b12:	6033      	str	r3, [r6, #0]
     b14:	e761      	b.n	9da <LEDManager::loop()+0x46>
        if (!idle_started_msec)
     b16:	6833      	ldr	r3, [r6, #0]
     b18:	2b00      	cmp	r3, #0
     b1a:	d1c0      	bne.n	a9e <LEDManager::loop()+0x10a>
        idle_started_msec = now;
     b1c:	9b01      	ldr	r3, [sp, #4]
     b1e:	6033      	str	r3, [r6, #0]
     b20:	e7bd      	b.n	a9e <LEDManager::loop()+0x10a>
     b22:	bf00      	nop
     b24:	200034d8 	.word	0x200034d8
     b28:	400e8000 	.word	0x400e8000
     b2c:	20002f28 	.word	0x20002f28
     b30:	200086a8 	.word	0x200086a8
     b34:	20007a18 	.word	0x20007a18
     b38:	aaaaaaab 	.word	0xaaaaaaab
     b3c:	20007a24 	.word	0x20007a24

00000b40 <setup>:

//// // // //   /   /   /   /   /   /   /   /   /   /   /   /   /   /   /
/// Arduino
//

void setup() {
     b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     b44:	4d1e      	ldr	r5, [pc, #120]	; (bc0 <setup+0x80>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     b46:	f240 28ee 	movw	r8, #750	; 0x2ee
     b4a:	4c1e      	ldr	r4, [pc, #120]	; (bc4 <setup+0x84>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b4c:	4f1e      	ldr	r7, [pc, #120]	; (bc8 <setup+0x88>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b4e:	f8df 9084 	ldr.w	r9, [pc, #132]	; bd4 <setup+0x94>
		uint32_t millis_begin = systick_millis_count;
     b52:	682e      	ldr	r6, [r5, #0]
		yield();
     b54:	f00c fe2c 	bl	d7b0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b58:	7823      	ldrb	r3, [r4, #0]
     b5a:	b31b      	cbz	r3, ba4 <setup+0x64>
     b5c:	783b      	ldrb	r3, [r7, #0]
     b5e:	07db      	lsls	r3, r3, #31
     b60:	d520      	bpl.n	ba4 <setup+0x64>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b62:	682b      	ldr	r3, [r5, #0]
     b64:	f8d9 2000 	ldr.w	r2, [r9]
     b68:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b6a:	2b0e      	cmp	r3, #14
     b6c:	d91a      	bls.n	ba4 <setup+0x64>
    button.attach(BUTTON_PIN, INPUT_PULLUP);
     b6e:	2202      	movs	r2, #2
     b70:	4c16      	ldr	r4, [pc, #88]	; (bcc <setup+0x8c>)
    @param    state
              The electrical state (HIGH/LOW) that corresponds to a physical press.

*/
   void setPressedState(bool state){
    stateForPressed = state;
     b72:	2500      	movs	r5, #0
     b74:	4611      	mov	r1, r2
     b76:	4620      	mov	r0, r4
     b78:	f000 fb68 	bl	124c <Bounce::attach(int, int)>
    button.interval(BUTTON_INTERVAL_MSEC);
     b7c:	4620      	mov	r0, r4
     b7e:	2105      	movs	r1, #5
     b80:	f000 fae8 	bl	1154 <Debouncer::interval(unsigned short)>
    pinMode(BUTTON_LED_PIN, OUTPUT);
     b84:	2003      	movs	r0, #3
     b86:	2101      	movs	r1, #1
     b88:	7565      	strb	r5, [r4, #21]
     b8a:	f00b f949 	bl	be20 <pinMode>
    digitalWrite(BUTTON_LED_PIN, LOW);
     b8e:	4629      	mov	r1, r5
     b90:	2003      	movs	r0, #3
     b92:	f00b f909 	bl	bda8 <digitalWrite>
    leds.begin();
     b96:	480e      	ldr	r0, [pc, #56]	; (bd0 <setup+0x90>)
     b98:	f000 fb76 	bl	1288 <WS2812Serial::begin()>
  // setup_button();
  // setup_LEDs();
  ButtonManager::setup();
  LEDManager::setup();
  AudioGraph::setup();
}
     b9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  AudioGraph::setup();
     ba0:	f7ff bb1c 	b.w	1dc <AudioGraph::setup()>
			uint32_t elapsed = systick_millis_count - millis_begin;
     ba4:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     ba6:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     ba8:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     baa:	b12a      	cbz	r2, bb8 <setup+0x78>
				if (elapsed > 2000) break;
     bac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     bb0:	d8dd      	bhi.n	b6e <setup+0x2e>
			yield();
     bb2:	f00c fdfd 	bl	d7b0 <yield>
     bb6:	e7cd      	b.n	b54 <setup+0x14>
				if (elapsed > 750) break;
     bb8:	4543      	cmp	r3, r8
     bba:	d9fa      	bls.n	bb2 <setup+0x72>
     bbc:	e7d7      	b.n	b6e <setup+0x2e>
     bbe:	bf00      	nop
     bc0:	200086a8 	.word	0x200086a8
     bc4:	20008704 	.word	0x20008704
     bc8:	20008703 	.word	0x20008703
     bcc:	20004bf8 	.word	0x20004bf8
     bd0:	200034d8 	.word	0x200034d8
     bd4:	200086c4 	.word	0x200086c4

00000bd8 <loop>:
//       sparkler.ignite(dur);
//     }
//   }
// }

void loop() {
     bd8:	b538      	push	{r3, r4, r5, lr}
    button.update();
     bda:	4c22      	ldr	r4, [pc, #136]	; (c64 <loop+0x8c>)
     bdc:	4620      	mov	r0, r4
     bde:	f000 fadd 	bl	119c <Debouncer::update()>
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
     be2:	7aa3      	ldrb	r3, [r4, #10]
    if (button.changed()) {
     be4:	075a      	lsls	r2, r3, #29
     be6:	d405      	bmi.n	bf4 <loop+0x1c>
  // uint32_t now = millis();
  // loop_button(now);
  ButtonManager::loop();
  LEDManager::loop();
     be8:	f7ff fed4 	bl	994 <LEDManager::loop()>
  AudioGraph::loop();
}
     bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AudioGraph::loop();
     bf0:	f7ff bb96 	b.w	320 <AudioGraph::loop()>

  /*!
  @brief Returns true if the button is currently physically pressed.
  */
  inline bool isPressed() {
    return read() == getPressedState();
     bf4:	4620      	mov	r0, r4
     bf6:	f000 fb17 	bl	1228 <Debouncer::read()>
      digitalWrite(BUTTON_LED_PIN, button.isPressed() ? HIGH : LOW);
     bfa:	7d63      	ldrb	r3, [r4, #21]
     bfc:	4601      	mov	r1, r0
     bfe:	2003      	movs	r0, #3
     c00:	1a59      	subs	r1, r3, r1
     c02:	fab1 f181 	clz	r1, r1
     c06:	0949      	lsrs	r1, r1, #5
     c08:	f00b f8ce 	bl	bda8 <digitalWrite>
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
     c0c:	7aa3      	ldrb	r3, [r4, #10]

        /*!
    @brief Returns true if the button was physically released          
*/
  inline bool released() {
    return  changed() && !isPressed();
     c0e:	075b      	lsls	r3, r3, #29
     c10:	d5ea      	bpl.n	be8 <loop+0x10>
    return read() == getPressedState();
     c12:	4620      	mov	r0, r4
     c14:	f000 fb08 	bl	1228 <Debouncer::read()>
    return  changed() && !isPressed();
     c18:	7d63      	ldrb	r3, [r4, #21]
     c1a:	4283      	cmp	r3, r0
     c1c:	d0e4      	beq.n	be8 <loop+0x10>
    uint32_t color = golden_color_RGB(color_index++, 65535, 65535);
     c1e:	4d12      	ldr	r5, [pc, #72]	; (c68 <loop+0x90>)
        uint32_t dur = button.previousDuration();
     c20:	4620      	mov	r0, r4
     c22:	f000 faff 	bl	1224 <Debouncer::previousDuration()>
    uint32_t color = golden_color_RGB(color_index++, 65535, 65535);
     c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
     c2a:	68ab      	ldr	r3, [r5, #8]
        uint32_t dur = button.previousDuration();
     c2c:	4604      	mov	r4, r0
    uint32_t color = golden_color_RGB(color_index++, 65535, 65535);
     c2e:	1c59      	adds	r1, r3, #1
     c30:	4618      	mov	r0, r3
     c32:	60a9      	str	r1, [r5, #8]
     c34:	4611      	mov	r1, r2
     c36:	f000 f82f 	bl	c98 <golden_color_RGB(unsigned long, unsigned short, unsigned short)>
    if (spark_count < MAX_SPARKS) {
     c3a:	686b      	ldr	r3, [r5, #4]
     c3c:	2bc7      	cmp	r3, #199	; 0xc7
     c3e:	d8d3      	bhi.n	be8 <loop+0x10>
      spark *sp = &sparks[spark_count++];
     c40:	1c5a      	adds	r2, r3, #1
      sp->pos = pos;
     c42:	eb05 1303 	add.w	r3, r5, r3, lsl #4
      spark *sp = &sparks[spark_count++];
     c46:	606a      	str	r2, [r5, #4]
      sp->color = color;
     c48:	eb05 1502 	add.w	r5, r5, r2, lsl #4
      sp->has_sound = has_sound;
     c4c:	2201      	movs	r2, #1
      sp->color = color;
     c4e:	6068      	str	r0, [r5, #4]
      sp->has_sound = has_sound;
     c50:	722a      	strb	r2, [r5, #8]
    int32_t vel = MAX_VEL / msec;
     c52:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
     c56:	fbb2 f2f4 	udiv	r2, r2, r4
      sp->vel = vel;
     c5a:	611a      	str	r2, [r3, #16]
      sp->pos = pos;
     c5c:	2200      	movs	r2, #0
     c5e:	60da      	str	r2, [r3, #12]
      sp->has_sound = has_sound;
     c60:	e7c2      	b.n	be8 <loop+0x10>
     c62:	bf00      	nop
     c64:	20004bf8 	.word	0x20004bf8
     c68:	20007a18 	.word	0x20007a18

00000c6c <_GLOBAL__sub_I_LED_drawing_memory>:
  : pixel_count(pixel_count),
     c6c:	4b07      	ldr	r3, [pc, #28]	; (c8c <_GLOBAL__sub_I_LED_drawing_memory+0x20>)
    spark_count(0),
     c6e:	2200      	movs	r2, #0
  : pixel_count(pixel_count),
     c70:	21c8      	movs	r1, #200	; 0xc8
}
     c72:	b510      	push	{r4, lr}
   Button(){ }
     c74:	4c06      	ldr	r4, [pc, #24]	; (c90 <_GLOBAL__sub_I_LED_drawing_memory+0x24>)
    color_index(0)
     c76:	609a      	str	r2, [r3, #8]
     c78:	4620      	mov	r0, r4
    spark_count(0),
     c7a:	e9c3 1200 	strd	r1, r2, [r3]
     c7e:	f000 fad7 	bl	1230 <Bounce::Bounce()>
     c82:	4a04      	ldr	r2, [pc, #16]	; (c94 <_GLOBAL__sub_I_LED_drawing_memory+0x28>)
     c84:	2301      	movs	r3, #1
     c86:	6022      	str	r2, [r4, #0]
     c88:	7563      	strb	r3, [r4, #21]
}
     c8a:	bd10      	pop	{r4, pc}
     c8c:	20007a18 	.word	0x20007a18
     c90:	20004bf8 	.word	0x20004bf8
     c94:	200021d0 	.word	0x200021d0

00000c98 <golden_color_RGB(unsigned long, unsigned short, unsigned short)>:
#include "GoldenColors.h"

#include <Arduino.h>

uint32_t golden_color_RGB(uint32_t index, uint16_t sat, uint16_t val)
{
     c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const uint64_t MAGIC = 243019;  // 6 * 65536 * (phi - 1)
  uint64_t x = MAGIC * (uint64_t)index;
     c9c:	4e35      	ldr	r6, [pc, #212]	; (d74 <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0xdc>)
  uint32_t h6 = x % (6 * 65536);
     c9e:	f04f 39aa 	mov.w	r9, #2863311530	; 0xaaaaaaaa
     ca2:	4f35      	ldr	r7, [pc, #212]	; (d78 <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0xe0>)
     ca4:	f64f 7eff 	movw	lr, #65535	; 0xffff
  uint64_t x = MAGIC * (uint64_t)index;
     ca8:	fba0 0606 	umull	r0, r6, r0, r6
  uint32_t h_i = h6 / 65536;
  uint32_t f = h6 - h_i * 65536;
  uint32_t s = sat;
  uint32_t v = val;
  uint32_t p = v * (65535 - s);
     cac:	ebae 0501 	sub.w	r5, lr, r1
  uint32_t h6 = x % (6 * 65536);
     cb0:	1983      	adds	r3, r0, r6
     cb2:	fa1f fc80 	uxth.w	ip, r0
  uint32_t p = v * (65535 - s);
     cb6:	fb02 f505 	mul.w	r5, r2, r5
  uint32_t h6 = x % (6 * 65536);
     cba:	f143 0300 	adc.w	r3, r3, #0
     cbe:	fba7 4a03 	umull	r4, sl, r7, r3
  uint32_t q = v * (65535 - f * s / 65535);
     cc2:	4c2e      	ldr	r4, [pc, #184]	; (d7c <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0xe4>)
  uint32_t h6 = x % (6 * 65536);
     cc4:	f02a 0801 	bic.w	r8, sl, #1
     cc8:	eb08 085a 	add.w	r8, r8, sl, lsr #1
     ccc:	eba3 0308 	sub.w	r3, r3, r8
     cd0:	1ac3      	subs	r3, r0, r3
     cd2:	f166 0800 	sbc.w	r8, r6, #0
     cd6:	fb09 f603 	mul.w	r6, r9, r3
     cda:	fb07 6608 	mla	r6, r7, r8, r6
     cde:	fba3 3707 	umull	r3, r7, r3, r7
     ce2:	443e      	add	r6, r7
     ce4:	0c5b      	lsrs	r3, r3, #17
     ce6:	ea43 33c6 	orr.w	r3, r3, r6, lsl #15
     cea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     cee:	eba0 4043 	sub.w	r0, r0, r3, lsl #17
  uint32_t t = v * (65535 - (65535 - f) * s / 65535);
     cf2:	ebae 030c 	sub.w	r3, lr, ip
  uint32_t q = v * (65535 - f * s / 65535);
     cf6:	fb01 fc0c 	mul.w	ip, r1, ip
  uint32_t t = v * (65535 - (65535 - f) * s / 65535);
     cfa:	fb01 f303 	mul.w	r3, r1, r3
  uint32_t h_i = h6 / 65536;
     cfe:	0c00      	lsrs	r0, r0, #16
  uint32_t q = v * (65535 - f * s / 65535);
     d00:	fba4 1c0c 	umull	r1, ip, r4, ip
  uint32_t t = v * (65535 - (65535 - f) * s / 65535);
     d04:	fba4 4303 	umull	r4, r3, r4, r3

  uint16_t red, green, blue;
  switch (h_i) {
     d08:	3801      	subs	r0, #1
  uint32_t q = v * (65535 - f * s / 65535);
     d0a:	ebae 3cdc 	sub.w	ip, lr, ip, lsr #15
  uint32_t t = v * (65535 - (65535 - f) * s / 65535);
     d0e:	ebae 3ed3 	sub.w	lr, lr, r3, lsr #15
  uint32_t q = v * (65535 - f * s / 65535);
     d12:	fb02 fc0c 	mul.w	ip, r2, ip
  uint32_t t = v * (65535 - (65535 - f) * s / 65535);
     d16:	fb02 fe0e 	mul.w	lr, r2, lr
  switch (h_i) {
     d1a:	2804      	cmp	r0, #4
     d1c:	d825      	bhi.n	d6a <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0xd2>
     d1e:	e8df f000 	tbb	[pc, r0]
     d22:	1510      	.short	0x1510
     d24:	1f1a      	.short	0x1f1a
     d26:	03          	.byte	0x03
     d27:	00          	.byte	0x00
    blue = v;
    break;

  case 5:
    red = v;
    green = p;
     d28:	b2a9      	uxth	r1, r5
    blue = q;
     d2a:	fa1f f08c 	uxth.w	r0, ip
    break;
  }

  return red / 256 << 16 | green / 256 << 8 | blue / 256 << 0;
     d2e:	4b14      	ldr	r3, [pc, #80]	; (d80 <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0xe8>)
     d30:	0a12      	lsrs	r2, r2, #8
     d32:	f3c0 200f 	ubfx	r0, r0, #8, #16
     d36:	400b      	ands	r3, r1
     d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
     d3c:	4318      	orrs	r0, r3
     d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    green = v;
     d42:	4611      	mov	r1, r2
    blue = p;
     d44:	b2a8      	uxth	r0, r5
    red = q;
     d46:	fa1f f28c 	uxth.w	r2, ip
    break;
     d4a:	e7f0      	b.n	d2e <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0x96>
    green = v;
     d4c:	4611      	mov	r1, r2
    blue = t;
     d4e:	fa1f f08e 	uxth.w	r0, lr
    red = p;
     d52:	b2aa      	uxth	r2, r5
    break;
     d54:	e7eb      	b.n	d2e <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0x96>
    blue = v;
     d56:	4610      	mov	r0, r2
    green = q;
     d58:	fa1f f18c 	uxth.w	r1, ip
    red = p;
     d5c:	b2aa      	uxth	r2, r5
    break;
     d5e:	e7e6      	b.n	d2e <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0x96>
    blue = v;
     d60:	4610      	mov	r0, r2
    green = p;
     d62:	b2a9      	uxth	r1, r5
    red = t;
     d64:	fa1f f28e 	uxth.w	r2, lr
    break;
     d68:	e7e1      	b.n	d2e <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0x96>
    green = t;
     d6a:	fa1f f18e 	uxth.w	r1, lr
    blue = p;
     d6e:	b2a8      	uxth	r0, r5
    break;
     d70:	e7dd      	b.n	d2e <golden_color_RGB(unsigned long, unsigned short, unsigned short)+0x96>
     d72:	bf00      	nop
     d74:	0003b54b 	.word	0x0003b54b
     d78:	aaaaaaab 	.word	0xaaaaaaab
     d7c:	80008001 	.word	0x80008001
     d80:	00ffff00 	.word	0x00ffff00

00000d84 <Parameterized::~Parameterized()>:
#include "Parameterized.h"

#include <string.h>

Parameterized::~Parameterized() {}
     d84:	4770      	bx	lr
     d86:	bf00      	nop

00000d88 <Parameterized::parameter_count() const>:

size_t Parameterized::parameter_count() const {
  return count;
}
     d88:	68c0      	ldr	r0, [r0, #12]
     d8a:	4770      	bx	lr

00000d8c <Parameterized::describe(unsigned int) const>:

const Parameter *Parameterized::describe(size_t index) const {
  if (index >= count) {
     d8c:	68c3      	ldr	r3, [r0, #12]
     d8e:	428b      	cmp	r3, r1
     d90:	d905      	bls.n	d9e <Parameterized::describe(unsigned int) const+0x12>
    return NULL;
  }
  return &params[index];
     d92:	eb01 0181 	add.w	r1, r1, r1, lsl #2
     d96:	6840      	ldr	r0, [r0, #4]
     d98:	eb00 0081 	add.w	r0, r0, r1, lsl #2
     d9c:	4770      	bx	lr
    return NULL;
     d9e:	2000      	movs	r0, #0
}
     da0:	4770      	bx	lr
     da2:	bf00      	nop

00000da4 <Parameterized::get(char const*) const>:

Parameter::value_type Parameterized::get(const char *group_member) const {
     da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (size_t i = 0; i < count; i++) {
     da8:	68c7      	ldr	r7, [r0, #12]
     daa:	b1a7      	cbz	r7, dd6 <Parameterized::get(char const*) const+0x32>
     dac:	4680      	mov	r8, r0
     dae:	460e      	mov	r6, r1
     db0:	6844      	ldr	r4, [r0, #4]
     db2:	2500      	movs	r5, #0
     db4:	e002      	b.n	dbc <Parameterized::get(char const*) const+0x18>
     db6:	3501      	adds	r5, #1
     db8:	42bd      	cmp	r5, r7
     dba:	d00c      	beq.n	dd6 <Parameterized::get(char const*) const+0x32>
    if (!strcmp(group_member, params[i].group_member)) {
     dbc:	6821      	ldr	r1, [r4, #0]
     dbe:	4630      	mov	r0, r6
  for (size_t i = 0; i < count; i++) {
     dc0:	3414      	adds	r4, #20
    if (!strcmp(group_member, params[i].group_member)) {
     dc2:	f00d fd31 	bl	e828 <strcmp>
     dc6:	2800      	cmp	r0, #0
     dc8:	d1f5      	bne.n	db6 <Parameterized::get(char const*) const+0x12>
      return values[i];
     dca:	f8d8 3008 	ldr.w	r3, [r8, #8]
     dce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    }
  }
  return -1;
}
     dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return -1;
     dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dde:	bf00      	nop

00000de0 <Parameterized::init()>:

#include <Arduino.h>

void Parameterized::init()
{
     de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     de4:	4606      	mov	r6, r0
     de6:	b083      	sub	sp, #12
  delay(1000);
     de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     dec:	f00a ff5e 	bl	bcac <delay>
  Serial.printf("Hello from Parameterized::init\n");
     df0:	4916      	ldr	r1, [pc, #88]	; (e4c <Parameterized::init()+0x6c>)
     df2:	4817      	ldr	r0, [pc, #92]	; (e50 <Parameterized::init()+0x70>)
     df4:	f00a fd9e 	bl	b934 <Print::printf(char const*, ...)>
  Serial.printf("    count = %d\n", count);
     df8:	68f2      	ldr	r2, [r6, #12]
     dfa:	4916      	ldr	r1, [pc, #88]	; (e54 <Parameterized::init()+0x74>)
     dfc:	4814      	ldr	r0, [pc, #80]	; (e50 <Parameterized::init()+0x70>)
     dfe:	f00a fd99 	bl	b934 <Print::printf(char const*, ...)>
  Serial.printf("    params = %p\n", params);
     e02:	6872      	ldr	r2, [r6, #4]
     e04:	4914      	ldr	r1, [pc, #80]	; (e58 <Parameterized::init()+0x78>)
     e06:	4812      	ldr	r0, [pc, #72]	; (e50 <Parameterized::init()+0x70>)
     e08:	f00a fd94 	bl	b934 <Print::printf(char const*, ...)>
  for (size_t i = 0; i < count; i++) {
     e0c:	68f3      	ldr	r3, [r6, #12]
     e0e:	b1b3      	cbz	r3, e3e <Parameterized::init()+0x5e>
     e10:	2400      	movs	r4, #0
    Serial.printf("    %d: \"%s\" %d\n", i, params[i].group_member, params[i].default_);
     e12:	f8df 804c 	ldr.w	r8, [pc, #76]	; e60 <Parameterized::init()+0x80>
     e16:	f8df 9038 	ldr.w	r9, [pc, #56]	; e50 <Parameterized::init()+0x70>
  for (size_t i = 0; i < count; i++) {
     e1a:	4625      	mov	r5, r4
    Serial.printf("    %d: \"%s\" %d\n", i, params[i].group_member, params[i].default_);
     e1c:	6873      	ldr	r3, [r6, #4]
     e1e:	462a      	mov	r2, r5
     e20:	4641      	mov	r1, r8
     e22:	4648      	mov	r0, r9
     e24:	eb03 0c04 	add.w	ip, r3, r4
     e28:	591b      	ldr	r3, [r3, r4]
  for (size_t i = 0; i < count; i++) {
     e2a:	3501      	adds	r5, #1
    Serial.printf("    %d: \"%s\" %d\n", i, params[i].group_member, params[i].default_);
     e2c:	3414      	adds	r4, #20
     e2e:	f8dc 700c 	ldr.w	r7, [ip, #12]
     e32:	9700      	str	r7, [sp, #0]
     e34:	f00a fd7e 	bl	b934 <Print::printf(char const*, ...)>
  for (size_t i = 0; i < count; i++) {
     e38:	68f3      	ldr	r3, [r6, #12]
     e3a:	42ab      	cmp	r3, r5
     e3c:	d8ee      	bhi.n	e1c <Parameterized::init()+0x3c>
    // set(params[i].group_member, params[i].default_);
  }
  Serial.printf("Goodbye from Parameterized::init\n");
     e3e:	4907      	ldr	r1, [pc, #28]	; (e5c <Parameterized::init()+0x7c>)
     e40:	4803      	ldr	r0, [pc, #12]	; (e50 <Parameterized::init()+0x70>)
}
     e42:	b003      	add	sp, #12
     e44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Serial.printf("Goodbye from Parameterized::init\n");
     e48:	f00a bd74 	b.w	b934 <Print::printf(char const*, ...)>
     e4c:	20000658 	.word	0x20000658
     e50:	20002b50 	.word	0x20002b50
     e54:	20000678 	.word	0x20000678
     e58:	20000688 	.word	0x20000688
     e5c:	200006b0 	.word	0x200006b0
     e60:	2000069c 	.word	0x2000069c

00000e64 <Parameterized::save_value(char const*, int)>:

bool
Parameterized::save_value(
  const char *group_member,
  Parameter::value_type new_value)
{
     e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for (size_t i = 0; i < count; i++) {
     e68:	68c7      	ldr	r7, [r0, #12]
     e6a:	b30f      	cbz	r7, eb0 <Parameterized::save_value(char const*, int)+0x4c>
     e6c:	4681      	mov	r9, r0
     e6e:	460e      	mov	r6, r1
     e70:	4690      	mov	r8, r2
     e72:	6844      	ldr	r4, [r0, #4]
     e74:	2500      	movs	r5, #0
     e76:	e003      	b.n	e80 <Parameterized::save_value(char const*, int)+0x1c>
     e78:	3501      	adds	r5, #1
     e7a:	3414      	adds	r4, #20
     e7c:	42af      	cmp	r7, r5
     e7e:	d00d      	beq.n	e9c <Parameterized::save_value(char const*, int)+0x38>
    const Parameter *p = &params[i];
    if (!strcmp(group_member, p->group_member)) {
     e80:	6821      	ldr	r1, [r4, #0]
     e82:	4630      	mov	r0, r6
     e84:	f00d fcd0 	bl	e828 <strcmp>
     e88:	2800      	cmp	r0, #0
     e8a:	d1f5      	bne.n	e78 <Parameterized::save_value(char const*, int)+0x14>
      if (new_value < p->min || new_value > p->max) {
     e8c:	6863      	ldr	r3, [r4, #4]
     e8e:	4543      	cmp	r3, r8
     e90:	dc02      	bgt.n	e98 <Parameterized::save_value(char const*, int)+0x34>
     e92:	68a3      	ldr	r3, [r4, #8]
     e94:	4543      	cmp	r3, r8
     e96:	da04      	bge.n	ea2 <Parameterized::save_value(char const*, int)+0x3e>
      values[i] = new_value;
      return true;
    }
  }
  return false;
     e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
     e9c:	2000      	movs	r0, #0
     e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      values[i] = new_value;
     ea2:	f8d9 3008 	ldr.w	r3, [r9, #8]
      return true;
     ea6:	2001      	movs	r0, #1
      values[i] = new_value;
     ea8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
     eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
     eb0:	4638      	mov	r0, r7
     eb2:	e7f1      	b.n	e98 <Parameterized::save_value(char const*, int)+0x34>

00000eb4 <peaks::FmDrum::Init()>:

using namespace stmlib;

void FmDrum::Init() {
  phase_ = 0;
  fm_envelope_phase_ = 0xffffffff;
     eb4:	2300      	movs	r3, #0
     eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  am_envelope_phase_ = 0xffffffff;
  previous_sample_ = 0;
     eba:	8203      	strh	r3, [r0, #16]
  am_envelope_phase_ = 0xffffffff;
     ebc:	61c2      	str	r2, [r0, #28]
  fm_envelope_phase_ = 0xffffffff;
     ebe:	e9c0 3205 	strd	r3, r2, [r0, #20]
}
     ec2:	4770      	bx	lr

00000ec4 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)>:
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
  phase_increment >>= num_shifts;
  return phase_increment;
}

void FmDrum::Process(const GateFlags* gate_flags, int16_t* out, size_t size) {
     ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t am_envelope_increment = ComputeEnvelopeIncrement(am_decay_);
     ec8:	8906      	ldrh	r6, [r0, #8]
void FmDrum::Process(const GateFlags* gate_flags, int16_t* out, size_t size) {
     eca:	b087      	sub	sp, #28
  uint32_t a = lut_env_increments[decay >> 8];
     ecc:	4d95      	ldr	r5, [pc, #596]	; (1124 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x260>)
  return a - ((a - b) * (decay & 0xff) >> 8);
     ece:	fa5f fc86 	uxtb.w	ip, r6
  uint32_t fm_envelope_increment = ComputeEnvelopeIncrement(fm_decay_);
     ed2:	8944      	ldrh	r4, [r0, #10]
void FmDrum::Process(const GateFlags* gate_flags, int16_t* out, size_t size) {
     ed4:	e9cd 1202 	strd	r1, r2, [sp, #8]
  uint32_t a = lut_env_increments[decay >> 8];
     ed8:	0a31      	lsrs	r1, r6, #8
  uint32_t phase = phase_;
     eda:	6942      	ldr	r2, [r0, #20]
  uint32_t a = lut_env_increments[decay >> 8];
     edc:	0a26      	lsrs	r6, r4, #8
  uint32_t b = lut_env_increments[(decay >> 8) + 1];
     ede:	f101 0e01 	add.w	lr, r1, #1
  uint32_t a = lut_env_increments[decay >> 8];
     ee2:	f855 7021 	ldr.w	r7, [r5, r1, lsl #2]
  return a - ((a - b) * (decay & 0xff) >> 8);
     ee6:	b2e4      	uxtb	r4, r4
     ee8:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
     eec:	1a79      	subs	r1, r7, r1
     eee:	fb0c f101 	mul.w	r1, ip, r1
     ef2:	eba7 2111 	sub.w	r1, r7, r1, lsr #8
     ef6:	9101      	str	r1, [sp, #4]
  uint32_t b = lut_env_increments[(decay >> 8) + 1];
     ef8:	1c71      	adds	r1, r6, #1
  uint32_t a = lut_env_increments[decay >> 8];
     efa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
  return a - ((a - b) * (decay & 0xff) >> 8);
     efe:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
     f02:	1a71      	subs	r1, r6, r1
     f04:	fb04 f101 	mul.w	r1, r4, r1
     f08:	eba6 2111 	sub.w	r1, r6, r1, lsr #8
  uint32_t fm_envelope_phase = fm_envelope_phase_;
  uint32_t am_envelope_phase = am_envelope_phase_;
     f0c:	e9d0 7406 	ldrd	r7, r4, [r0, #24]
  uint32_t aux_envelope_phase = aux_envelope_phase_;
  uint32_t phase_increment = phase_increment_;
     f10:	e9d0 6508 	ldrd	r6, r5, [r0, #32]
  return a - ((a - b) * (decay & 0xff) >> 8);
     f14:	9105      	str	r1, [sp, #20]
  while (size--) {
     f16:	2b00      	cmp	r3, #0
     f18:	f000 80e1 	beq.w	10de <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x21a>
     f1c:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
     f20:	f8df e22c 	ldr.w	lr, [pc, #556]	; 1150 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x28c>
}

inline uint16_t Interpolate824(const uint16_t* table, uint32_t phase) {
  uint32_t a = table[phase >> 24];
  uint32_t b = table[(phase >> 24) + 1];
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
     f24:	f64f 78ff 	movw	r8, #65535	; 0xffff
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
}

inline int16_t Interpolate1022(const int16_t* table, uint32_t phase) {
  int32_t a = table[phase >> 22];
  int32_t b = table[(phase >> 22) + 1];
     f28:	9600      	str	r6, [sp, #0]
     f2a:	9504      	str	r5, [sp, #16]
    GateFlags gate_flag = *gate_flags++;
    if (gate_flag & GATE_FLAG_RISING) {
     f2c:	9902      	ldr	r1, [sp, #8]
     f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
     f32:	079b      	lsls	r3, r3, #30
     f34:	9102      	str	r1, [sp, #8]
     f36:	f140 80da 	bpl.w	10ee <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x22a>
      fm_envelope_phase = 0;
      am_envelope_phase = 0;
      aux_envelope_phase = 0;
      phase = 0x3fff * fm_amount_ >> 16;
     f3a:	88c2      	ldrh	r2, [r0, #6]

    fm_envelope_phase += fm_envelope_increment;
    if (fm_envelope_phase < fm_envelope_increment) {
      fm_envelope_phase = 0xffffffff;
    }
    aux_envelope_phase += 4473924;
     f3c:	4b7a      	ldr	r3, [pc, #488]	; (1128 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x264>)
      phase = 0x3fff * fm_amount_ >> 16;
     f3e:	ebc2 3282 	rsb	r2, r2, r2, lsl #14
     f42:	9c01      	ldr	r4, [sp, #4]
  return a - ((a - b) * (decay & 0xff) >> 8);
     f44:	9f05      	ldr	r7, [sp, #20]
      phase = 0x3fff * fm_amount_ >> 16;
     f46:	1412      	asrs	r2, r2, #16
    aux_envelope_phase += 4473924;
     f48:	9300      	str	r3, [sp, #0]
    if (aux_envelope_phase < 4473924) {
      aux_envelope_phase = 0xffffffff;
    }
    if ((size & 3) == 0) {
     f4a:	f01c 0303 	ands.w	r3, ip, #3
     f4e:	d155      	bne.n	ffc <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x138>
  uint32_t a = table[phase >> 24];
     f50:	9900      	ldr	r1, [sp, #0]
     f52:	0e3d      	lsrs	r5, r7, #24
  uint32_t b = table[(phase >> 24) + 1];
     f54:	4e75      	ldr	r6, [pc, #468]	; (112c <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x268>)
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
     f56:	f3c7 2b0f 	ubfx	fp, r7, #8, #16
  uint32_t a = table[phase >> 24];
     f5a:	ea4f 6911 	mov.w	r9, r1, lsr #24
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
     f5e:	f3c1 2a0f 	ubfx	sl, r1, #8, #16
  uint32_t a = table[phase >> 24];
     f62:	f83e 1015 	ldrh.w	r1, [lr, r5, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
     f66:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
     f6a:	1a6d      	subs	r5, r5, r1
     f6c:	fb0b f505 	mul.w	r5, fp, r5
     f70:	eb01 4115 	add.w	r1, r1, r5, lsr #16
  uint32_t a = table[phase >> 24];
     f74:	f83e 5019 	ldrh.w	r5, [lr, r9, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
     f78:	f836 9019 	ldrh.w	r9, [r6, r9, lsl #1]
      uint32_t aux_envelope = 65535 - Interpolate824(
          lut_env_expo, aux_envelope_phase);
      uint32_t fm_envelope = 65535 - Interpolate824(
     f7c:	b289      	uxth	r1, r1
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
     f7e:	eba9 0905 	sub.w	r9, r9, r5
     f82:	eba8 0101 	sub.w	r1, r8, r1
     f86:	fb0a f909 	mul.w	r9, sl, r9
          lut_env_expo, fm_envelope_phase);
      phase_increment = ComputePhaseIncrement(
          frequency_ + \
          (fm_envelope * fm_amount_ >> 16) + \
          (aux_envelope * aux_envelope_strength_ >> 15) + \
          (previous_sample_ >> 6));
     f8a:	f9b0 a010 	ldrsh.w	sl, [r0, #16]
     f8e:	eb05 4519 	add.w	r5, r5, r9, lsr #16
          (fm_envelope * fm_amount_ >> 16) + \
     f92:	f8b0 9006 	ldrh.w	r9, [r0, #6]
     f96:	fb09 f901 	mul.w	r9, r9, r1
          (aux_envelope * aux_envelope_strength_ >> 15) + \
     f9a:	8881      	ldrh	r1, [r0, #4]
      uint32_t aux_envelope = 65535 - Interpolate824(
     f9c:	b2ad      	uxth	r5, r5
          (aux_envelope * aux_envelope_strength_ >> 15) + \
     f9e:	eb01 11aa 	add.w	r1, r1, sl, asr #6
      uint32_t aux_envelope = 65535 - Interpolate824(
     fa2:	eba8 0505 	sub.w	r5, r8, r5
          (aux_envelope * aux_envelope_strength_ >> 15) + \
     fa6:	eb01 4119 	add.w	r1, r1, r9, lsr #16
     faa:	f8b0 9002 	ldrh.w	r9, [r0, #2]
     fae:	fb09 f505 	mul.w	r5, r9, r5
     fb2:	eb01 31d5 	add.w	r1, r1, r5, lsr #15
  int32_t ref_pitch = midi_pitch;
     fb6:	f643 75ff 	movw	r5, #16383	; 0x3fff
     fba:	b209      	sxth	r1, r1
     fbc:	42a9      	cmp	r1, r5
     fbe:	bfa8      	it	ge
     fc0:	4629      	movge	r1, r5
  while (ref_pitch < 0) {
     fc2:	f5b1 5168 	subs.w	r1, r1, #14848	; 0x3a00
     fc6:	d506      	bpl.n	fd6 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x112>
     fc8:	9e00      	ldr	r6, [sp, #0]
     fca:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ++num_shifts;
     fce:	f103 0301 	add.w	r3, r3, #1
  while (ref_pitch < 0) {
     fd2:	d4fa      	bmi.n	fca <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x106>
     fd4:	9600      	str	r6, [sp, #0]
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
     fd6:	110d      	asrs	r5, r1, #4
     fd8:	4e55      	ldr	r6, [pc, #340]	; (1130 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x26c>)
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
     fda:	f001 010f 	and.w	r1, r1, #15
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
     fde:	f105 0901 	add.w	r9, r5, #1
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
     fe2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
     fe6:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
     fea:	eba9 0905 	sub.w	r9, r9, r5
     fee:	fb01 f909 	mul.w	r9, r1, r9
  uint32_t phase_increment = a + \
     ff2:	eb05 1529 	add.w	r5, r5, r9, asr #4
  phase_increment >>= num_shifts;
     ff6:	fa25 f303 	lsr.w	r3, r5, r3
     ffa:	9304      	str	r3, [sp, #16]
    }
    phase += phase_increment;
     ffc:	9b04      	ldr	r3, [sp, #16]
  int32_t a = table[phase >> 22];
     ffe:	494d      	ldr	r1, [pc, #308]	; (1134 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x270>)
    1000:	441a      	add	r2, r3
  int32_t b = table[(phase >> 22) + 1];
    1002:	4e4d      	ldr	r6, [pc, #308]	; (1138 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x274>)

    int16_t mix = Interpolate1022(wav_sine, phase);
    if (noise_) {
    1004:	f8b0 900c 	ldrh.w	r9, [r0, #12]
  int32_t a = table[phase >> 22];
    1008:	0d93      	lsrs	r3, r2, #22
  return a + ((b - a) * static_cast<int32_t>((phase >> 6) & 0xffff) >> 16);
    100a:	f3c2 1a8f 	ubfx	sl, r2, #6, #16
  int32_t a = table[phase >> 22];
    100e:	f931 1013 	ldrsh.w	r1, [r1, r3, lsl #1]
  int32_t b = table[(phase >> 22) + 1];
    1012:	f936 3013 	ldrsh.w	r3, [r6, r3, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 6) & 0xffff) >> 16);
    1016:	1a5b      	subs	r3, r3, r1
    1018:	fb0a f303 	mul.w	r3, sl, r3
    101c:	eb01 4123 	add.w	r1, r1, r3, asr #16
    1020:	b209      	sxth	r1, r1
    1022:	f1b9 0f00 	cmp.w	r9, #0
    1026:	d00f      	beq.n	1048 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x184>
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    1028:	4e44      	ldr	r6, [pc, #272]	; (113c <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x278>)
    102a:	4d45      	ldr	r5, [pc, #276]	; (1140 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x27c>)
    102c:	6833      	ldr	r3, [r6, #0]
    102e:	4e45      	ldr	r6, [pc, #276]	; (1144 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x280>)
    1030:	fb05 6303 	mla	r3, r5, r3, r6
    1034:	4e41      	ldr	r6, [pc, #260]	; (113c <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x278>)
    1036:	6033      	str	r3, [r6, #0]
  return (a * (65535 - balance) + b * balance) >> 16;
    1038:	141b      	asrs	r3, r3, #16
    103a:	fb09 f303 	mul.w	r3, r9, r3
    103e:	eba8 0909 	sub.w	r9, r8, r9
    1042:	fb01 3309 	mla	r3, r1, r9, r3
    1046:	1419      	asrs	r1, r3, #16
      mix = Mix(mix, Random::GetSample(), noise_);
    }

    am_envelope_phase += am_envelope_increment;
    if (am_envelope_phase < am_envelope_increment) {
    1048:	9b01      	ldr	r3, [sp, #4]
    104a:	42a3      	cmp	r3, r4
    104c:	d860      	bhi.n	1110 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x24c>
  uint32_t a = table[phase >> 24];
    104e:	0e23      	lsrs	r3, r4, #24
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
    1050:	f3c4 2a0f 	ubfx	sl, r4, #8, #16
  uint32_t a = table[phase >> 24];
    1054:	005b      	lsls	r3, r3, #1
  uint32_t b = table[(phase >> 24) + 1];
    1056:	f103 0902 	add.w	r9, r3, #2
  uint32_t a = table[phase >> 24];
    105a:	f83e 3003 	ldrh.w	r3, [lr, r3]
  uint32_t b = table[(phase >> 24) + 1];
    105e:	f83e 9009 	ldrh.w	r9, [lr, r9]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
    1062:	eba9 0903 	sub.w	r9, r9, r3
    1066:	fb0a f909 	mul.w	r9, sl, r9
      am_envelope_phase = 0xffffffff;
    }
    uint32_t am_envelope = 65535 - Interpolate824(
        lut_env_expo, am_envelope_phase);
    mix = mix * am_envelope >> 16;
    if (overdrive_) {
    106a:	f8b0 a00e 	ldrh.w	sl, [r0, #14]
    106e:	eb03 4919 	add.w	r9, r3, r9, lsr #16
    uint32_t am_envelope = 65535 - Interpolate824(
    1072:	fa1f f989 	uxth.w	r9, r9
    1076:	eba8 0909 	sub.w	r9, r8, r9
    mix = mix * am_envelope >> 16;
    107a:	fb01 f909 	mul.w	r9, r1, r9
    107e:	ea4f 4329 	mov.w	r3, r9, asr #16
    if (overdrive_) {
    1082:	f1ba 0f00 	cmp.w	sl, #0
    1086:	d01d      	beq.n	10c4 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x200>
      uint32_t phi = (static_cast<int32_t>(mix) << 16) + (1L << 31);
    1088:	492f      	ldr	r1, [pc, #188]	; (1148 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x284>)
  int32_t a = table[phase >> 22];
    108a:	4d30      	ldr	r5, [pc, #192]	; (114c <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x288>)
    108c:	ea09 0101 	and.w	r1, r9, r1
  return (a * (65535 - balance) + b * balance) >> 16;
    1090:	eba8 090a 	sub.w	r9, r8, sl
    1094:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    1098:	fb03 f309 	mul.w	r3, r3, r9
  int32_t a = table[phase >> 22];
    109c:	ea4f 5b91 	mov.w	fp, r1, lsr #22
  return a + ((b - a) * static_cast<int32_t>((phase >> 6) & 0xffff) >> 16);
    10a0:	0989      	lsrs	r1, r1, #6
  int32_t a = table[phase >> 22];
    10a2:	f935 901b 	ldrsh.w	r9, [r5, fp, lsl #1]
  int32_t b = table[(phase >> 22) + 1];
    10a6:	3502      	adds	r5, #2
  return a + ((b - a) * static_cast<int32_t>((phase >> 6) & 0xffff) >> 16);
    10a8:	b289      	uxth	r1, r1
  int32_t b = table[(phase >> 22) + 1];
    10aa:	f935 b01b 	ldrsh.w	fp, [r5, fp, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 6) & 0xffff) >> 16);
    10ae:	ebab 0b09 	sub.w	fp, fp, r9
    10b2:	fb01 fb0b 	mul.w	fp, r1, fp
    10b6:	eb09 492b 	add.w	r9, r9, fp, asr #16
  return (a * (65535 - balance) + b * balance) >> 16;
    10ba:	fa0f f989 	sxth.w	r9, r9
    10be:	fb0a 3309 	mla	r3, sl, r9, r3
    10c2:	141b      	asrs	r3, r3, #16
  while (size--) {
    10c4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      int16_t overdriven = Interpolate1022(wav_overdrive, phi);
      mix = Mix(mix, overdriven, overdrive_);
    }
    previous_sample_ = mix;
    *out++ = mix;
    10c8:	9903      	ldr	r1, [sp, #12]
    previous_sample_ = mix;
    10ca:	8203      	strh	r3, [r0, #16]
  while (size--) {
    10cc:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    *out++ = mix;
    10d0:	f821 3b02 	strh.w	r3, [r1], #2
    10d4:	9103      	str	r1, [sp, #12]
  while (size--) {
    10d6:	f47f af29 	bne.w	f2c <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x68>
    10da:	9e00      	ldr	r6, [sp, #0]
    10dc:	9d04      	ldr	r5, [sp, #16]
  }
  phase_ = phase;
  fm_envelope_phase_ = fm_envelope_phase;
  am_envelope_phase_ = am_envelope_phase;
  aux_envelope_phase_ = aux_envelope_phase;
  phase_increment_ = phase_increment;
    10de:	6245      	str	r5, [r0, #36]	; 0x24
  fm_envelope_phase_ = fm_envelope_phase;
    10e0:	e9c0 2705 	strd	r2, r7, [r0, #20]
  aux_envelope_phase_ = aux_envelope_phase;
    10e4:	e9c0 4607 	strd	r4, r6, [r0, #28]
}
    10e8:	b007      	add	sp, #28
    10ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      fm_envelope_phase = 0xffffffff;
    10ee:	9b05      	ldr	r3, [sp, #20]
    if (aux_envelope_phase < 4473924) {
    10f0:	9900      	ldr	r1, [sp, #0]
      fm_envelope_phase = 0xffffffff;
    10f2:	19df      	adds	r7, r3, r7
    if (aux_envelope_phase < 4473924) {
    10f4:	4b0c      	ldr	r3, [pc, #48]	; (1128 <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x264>)
      fm_envelope_phase = 0xffffffff;
    10f6:	bf28      	it	cs
    10f8:	f04f 37ff 	movcs.w	r7, #4294967295	; 0xffffffff
    if (aux_envelope_phase < 4473924) {
    10fc:	18cb      	adds	r3, r1, r3
    10fe:	9300      	str	r3, [sp, #0]
    am_envelope_phase += am_envelope_increment;
    1100:	9b01      	ldr	r3, [sp, #4]
    1102:	441c      	add	r4, r3
    if (aux_envelope_phase < 4473924) {
    1104:	f4ff af21 	bcc.w	f4a <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x86>
      aux_envelope_phase = 0xffffffff;
    1108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    110c:	9300      	str	r3, [sp, #0]
    110e:	e71c      	b.n	f4a <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x86>
    1110:	f64f 7aff 	movw	sl, #65535	; 0xffff
    1114:	f44f 7900 	mov.w	r9, #512	; 0x200
    1118:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
      am_envelope_phase = 0xffffffff;
    111c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    1120:	e79b      	b.n	105a <peaks::FmDrum::Process(unsigned char const*, short*, unsigned int)+0x196>
    1122:	bf00      	nop
    1124:	20001260 	.word	0x20001260
    1128:	00444444 	.word	0x00444444
    112c:	2000085a 	.word	0x2000085a
    1130:	20001664 	.word	0x20001664
    1134:	200017e8 	.word	0x200017e8
    1138:	200017ea 	.word	0x200017ea
    113c:	20002f24 	.word	0x20002f24
    1140:	0019660d 	.word	0x0019660d
    1144:	3c6ef35f 	.word	0x3c6ef35f
    1148:	ffff0000 	.word	0xffff0000
    114c:	20000a5c 	.word	0x20000a5c
    1150:	20000858 	.word	0x20000858

00001154 <Debouncer::interval(unsigned short)>:
    , interval_millis(10)
    , state(0) {}

void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
    1154:	8101      	strh	r1, [r0, #8]
}
    1156:	4770      	bx	lr

00001158 <Debouncer::begin()>:

void Debouncer::begin() {
	 state = 0;
    1158:	2100      	movs	r1, #0
    if (readCurrentState()) {
    115a:	6803      	ldr	r3, [r0, #0]
    115c:	4a0d      	ldr	r2, [pc, #52]	; (1194 <Debouncer::begin()+0x3c>)
void Debouncer::begin() {
    115e:	b510      	push	{r4, lr}
	 state = 0;
    1160:	7281      	strb	r1, [r0, #10]
void Debouncer::begin() {
    1162:	4604      	mov	r4, r0
    if (readCurrentState()) {
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	4293      	cmp	r3, r2
    1168:	d10b      	bne.n	1182 <Debouncer::begin()+0x2a>
	virtual bool readCurrentState() { return digitalRead(pin); }
    116a:	7d00      	ldrb	r0, [r0, #20]
    116c:	f00a fe46 	bl	bdfc <digitalRead>
    1170:	b118      	cbz	r0, 117a <Debouncer::begin()+0x22>
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
    1172:	7aa3      	ldrb	r3, [r4, #10]
    1174:	f043 0303 	orr.w	r3, r3, #3
    1178:	72a3      	strb	r3, [r4, #10]
    117a:	4b07      	ldr	r3, [pc, #28]	; (1198 <Debouncer::begin()+0x40>)
    117c:	681b      	ldr	r3, [r3, #0]
    }

	#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
    117e:	6063      	str	r3, [r4, #4]
#endif
}
    1180:	bd10      	pop	{r4, pc}
    if (readCurrentState()) {
    1182:	4798      	blx	r3
    1184:	2800      	cmp	r0, #0
    1186:	d0f8      	beq.n	117a <Debouncer::begin()+0x22>
    1188:	7aa3      	ldrb	r3, [r4, #10]
    118a:	f043 0303 	orr.w	r3, r3, #3
    118e:	72a3      	strb	r3, [r4, #10]
    1190:	e7f3      	b.n	117a <Debouncer::begin()+0x22>
    1192:	bf00      	nop
    1194:	0000084d 	.word	0x0000084d
    1198:	200086a8 	.word	0x200086a8

0000119c <Debouncer::update()>:

bool Debouncer::update()
{
    119c:	b538      	push	{r3, r4, r5, lr}
  inline void unsetStateFlag(const uint8_t flag)  {state &= ~flag;}
    119e:	7a83      	ldrb	r3, [r0, #10]
    11a0:	4604      	mov	r4, r0
    }
    
    
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = readCurrentState();
    11a2:	6801      	ldr	r1, [r0, #0]
    11a4:	f023 0304 	bic.w	r3, r3, #4
    11a8:	4a1c      	ldr	r2, [pc, #112]	; (121c <Debouncer::update()+0x80>)
    11aa:	7283      	strb	r3, [r0, #10]
    11ac:	680b      	ldr	r3, [r1, #0]
    11ae:	4293      	cmp	r3, r2
    11b0:	d131      	bne.n	1216 <Debouncer::update()+0x7a>
	virtual bool readCurrentState() { return digitalRead(pin); }
    11b2:	7d00      	ldrb	r0, [r0, #20]
    11b4:	f00a fe22 	bl	bdfc <digitalRead>
    11b8:	3800      	subs	r0, #0
    11ba:	bf18      	it	ne
    11bc:	2001      	movne	r0, #1
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
    11be:	7aa3      	ldrb	r3, [r4, #10]
    

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != getStateFlag(UNSTABLE_STATE) ) {
    11c0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    11c4:	4290      	cmp	r0, r2
    11c6:	d008      	beq.n	11da <Debouncer::update()+0x3e>
    11c8:	4a15      	ldr	r2, [pc, #84]	; (1220 <Debouncer::update()+0x84>)
  inline void toggleStateFlag(const uint8_t flag) {state ^= flag;}
    11ca:	f083 0302 	eor.w	r3, r3, #2
    11ce:	6812      	ldr	r2, [r2, #0]
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
    11d0:	f3c3 0080 	ubfx	r0, r3, #2, #1
  inline void toggleStateFlag(const uint8_t flag) {state ^= flag;}
    11d4:	72a3      	strb	r3, [r4, #10]
        previous_millis = millis();
    11d6:	6062      	str	r2, [r4, #4]
    
#endif

		return  changed(); 

}
    11d8:	bd38      	pop	{r3, r4, r5, pc}
    11da:	4911      	ldr	r1, [pc, #68]	; (1220 <Debouncer::update()+0x84>)
        if ( millis() - previous_millis >= interval_millis ) {
    11dc:	6865      	ldr	r5, [r4, #4]
    11de:	680a      	ldr	r2, [r1, #0]
    11e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    11e4:	1b52      	subs	r2, r2, r5
    11e6:	4562      	cmp	r2, ip
    11e8:	d312      	bcc.n	1210 <Debouncer::update()+0x74>
            if (currentState != getStateFlag(DEBOUNCED_STATE) ) {
    11ea:	f003 0201 	and.w	r2, r3, #1
    11ee:	4290      	cmp	r0, r2
    11f0:	d00e      	beq.n	1210 <Debouncer::update()+0x74>
    11f2:	6808      	ldr	r0, [r1, #0]
    11f4:	f083 0301 	eor.w	r3, r3, #1
    11f8:	680a      	ldr	r2, [r1, #0]
}

inline void Debouncer::changeState() {
	toggleStateFlag(DEBOUNCED_STATE);
	setStateFlag(CHANGED_STATE) ;
	durationOfPreviousState = millis() - stateChangeLastTime;
    11fa:	68e5      	ldr	r5, [r4, #12]
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
    11fc:	f043 0304 	orr.w	r3, r3, #4
    1200:	6809      	ldr	r1, [r1, #0]
    1202:	1b52      	subs	r2, r2, r5
                previous_millis = millis();
    1204:	6060      	str	r0, [r4, #4]
	stateChangeLastTime = millis();
    1206:	60e1      	str	r1, [r4, #12]
}
    1208:	2001      	movs	r0, #1
	durationOfPreviousState = millis() - stateChangeLastTime;
    120a:	6122      	str	r2, [r4, #16]
    120c:	72a3      	strb	r3, [r4, #10]
}
    120e:	bd38      	pop	{r3, r4, r5, pc}
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
    1210:	f3c3 0080 	ubfx	r0, r3, #2, #1
    1214:	bd38      	pop	{r3, r4, r5, pc}
    bool currentState = readCurrentState();
    1216:	4798      	blx	r3
    1218:	e7d1      	b.n	11be <Debouncer::update()+0x22>
    121a:	bf00      	nop
    121c:	0000084d 	.word	0x0000084d
    1220:	200086a8 	.word	0x200086a8

00001224 <Debouncer::previousDuration()>:
}
    1224:	6900      	ldr	r0, [r0, #16]
    1226:	4770      	bx	lr

00001228 <Debouncer::read()>:
    1228:	7a80      	ldrb	r0, [r0, #10]

bool Debouncer::read()
{
    return  getStateFlag(DEBOUNCED_STATE);
}
    122a:	f000 0001 	and.w	r0, r0, #1
    122e:	4770      	bx	lr

00001230 <Bounce::Bounce()>:
Debouncer::Debouncer():previous_millis(0)
    1230:	2200      	movs	r2, #0
    , interval_millis(10)
    1232:	f04f 0c0a 	mov.w	ip, #10
// BOUNCE //
////////////


Bounce::Bounce()
    : pin(0)
    1236:	4904      	ldr	r1, [pc, #16]	; (1248 <Bounce::Bounce()+0x18>)
Debouncer::Debouncer():previous_millis(0)
    1238:	6042      	str	r2, [r0, #4]
    , interval_millis(10)
    123a:	f8a0 c008 	strh.w	ip, [r0, #8]
    , state(0) {}
    123e:	7282      	strb	r2, [r0, #10]
    : pin(0)
    1240:	6001      	str	r1, [r0, #0]
    1242:	7502      	strb	r2, [r0, #20]
{}
    1244:	4770      	bx	lr
    1246:	bf00      	nop
    1248:	200021c0 	.word	0x200021c0

0000124c <Bounce::attach(int, int)>:
    
    // SET INITIAL STATE
    begin();
}

void Bounce::attach(int pin, int mode){
    124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    setPinMode(pin, mode);
    124e:	6806      	ldr	r6, [r0, #0]
void Bounce::attach(int pin, int mode){
    1250:	4605      	mov	r5, r0
    setPinMode(pin, mode);
    1252:	4f0c      	ldr	r7, [pc, #48]	; (1284 <Bounce::attach(int, int)+0x38>)
void Bounce::attach(int pin, int mode){
    1254:	460c      	mov	r4, r1
    setPinMode(pin, mode);
    1256:	6876      	ldr	r6, [r6, #4]
    1258:	42be      	cmp	r6, r7
    125a:	d10a      	bne.n	1272 <Bounce::attach(int, int)+0x26>
		pinMode(pin, mode);
    125c:	b2cc      	uxtb	r4, r1
    125e:	b2d1      	uxtb	r1, r2
    1260:	4620      	mov	r0, r4
    1262:	f00a fddd 	bl	be20 <pinMode>
    begin();
    1266:	4628      	mov	r0, r5
    this->pin = pin;
    1268:	752c      	strb	r4, [r5, #20]
    this->attach(pin);
}
    126a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    begin();
    126e:	f7ff bf73 	b.w	1158 <Debouncer::begin()>
    1272:	b2e4      	uxtb	r4, r4
    setPinMode(pin, mode);
    1274:	47b0      	blx	r6
    begin();
    1276:	4628      	mov	r0, r5
    this->pin = pin;
    1278:	752c      	strb	r4, [r5, #20]
}
    127a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    begin();
    127e:	f7ff bf6b 	b.w	1158 <Debouncer::begin()>
    1282:	bf00      	nop
    1284:	00000845 	.word	0x00000845

00001288 <WS2812Serial::begin()>:
*/

#include "WS2812Serial.h"

bool WS2812Serial::begin()
{
    1288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t hwtrigger;
#else	
	uint32_t divisor, portconfig, hwtrigger;
	KINETISK_UART_t *uart;
#endif
	switch (pin) {
    128a:	7881      	ldrb	r1, [r0, #2]
{
    128c:	4604      	mov	r4, r0
	switch (pin) {
    128e:	1e4b      	subs	r3, r1, #1
    1290:	2b26      	cmp	r3, #38	; 0x26
    1292:	d815      	bhi.n	12c0 <WS2812Serial::begin()+0x38>
    1294:	e8df f003 	tbb	[pc, r3]
    1298:	14141482 	.word	0x14141482
    129c:	8b141414 	.word	0x8b141414
    12a0:	14141414 	.word	0x14141414
    12a4:	14149414 	.word	0x14149414
    12a8:	1614149d 	.word	0x1614149d
    12ac:	64141414 	.word	0x64141414
    12b0:	14141414 	.word	0x14141414
    12b4:	14141479 	.word	0x14141479
    12b8:	14141414 	.word	0x14141414
    12bc:	1414      	.short	0x1414
    12be:	16          	.byte	0x16
    12bf:	00          	.byte	0x00
    12c0:	2000      	movs	r0, #0
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
	return true;
}
    12c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    12c4:	4a48      	ldr	r2, [pc, #288]	; (13e8 <WS2812Serial::begin()+0x160>)
		uart = &IMXRT_LPUART8; 
    12c6:	4849      	ldr	r0, [pc, #292]	; (13ec <WS2812Serial::begin()+0x164>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    12c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
		break;
    12cc:	4e48      	ldr	r6, [pc, #288]	; (13f0 <WS2812Serial::begin()+0x168>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    12ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
		uart = &IMXRT_LPUART8; 
    12d2:	61a0      	str	r0, [r4, #24]
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    12d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if (!dma) {
    12d8:	68e5      	ldr	r5, [r4, #12]
    12da:	2d00      	cmp	r5, #0
    12dc:	d04b      	beq.n	1376 <WS2812Serial::begin()+0xee>
	uart->CTRL = 0;	// clear everything
    12de:	69a3      	ldr	r3, [r4, #24]
    12e0:	2200      	movs	r2, #0
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
    12e2:	4844      	ldr	r0, [pc, #272]	; (13f4 <WS2812Serial::begin()+0x16c>)
	uart->CTRL = 0;	// clear everything
    12e4:	619a      	str	r2, [r3, #24]
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
    12e6:	6118      	str	r0, [r3, #16]
	uart->PINCFG = 0;
    12e8:	60da      	str	r2, [r3, #12]
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
    12ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12ec:	0892      	lsrs	r2, r2, #2
    12ee:	f002 021c 	and.w	r2, r2, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    12f2:	2a0f      	cmp	r2, #15
    12f4:	d876      	bhi.n	13e4 <WS2812Serial::begin()+0x15c>
    12f6:	0852      	lsrs	r2, r2, #1
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
    12f8:	f002 0202 	and.w	r2, r2, #2
    12fc:	62da      	str	r2, [r3, #44]	; 0x2c
	dma->destination((volatile uint8_t&)uart->DATA);
    12fe:	331c      	adds	r3, #28
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    1300:	4a3d      	ldr	r2, [pc, #244]	; (13f8 <WS2812Serial::begin()+0x170>)
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
    1302:	f8df c12c 	ldr.w	ip, [pc, #300]	; 1430 <WS2812Serial::begin()+0x1a8>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    1306:	eb02 1201 	add.w	r2, r2, r1, lsl #4
	uart->FIFO |= LPUART_FIFO_TXFE;
    130a:	68d9      	ldr	r1, [r3, #12]
    130c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	*(portConfigRegister(pin)) = pinmuxval;
    1310:	e9d2 0701 	ldrd	r0, r7, [r2, #4]
	uart->FIFO |= LPUART_FIFO_TXFE;
    1314:	60d9      	str	r1, [r3, #12]
	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1316:	2100      	movs	r1, #0
    1318:	682a      	ldr	r2, [r5, #0]
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
    131a:	f843 cc04 	str.w	ip, [r3, #-4]
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    131e:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    1322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    1326:	f8c7 c000 	str.w	ip, [r7]
	*(portConfigRegister(pin)) = pinmuxval;
    132a:	f04f 0702 	mov.w	r7, #2
    132e:	6007      	str	r7, [r0, #0]
		TCD->DADDR = &p;
    1330:	6113      	str	r3, [r2, #16]
		TCD->DOFF = 0;
    1332:	8291      	strh	r1, [r2, #20]
		TCD->ATTR_DST = 0;
    1334:	7191      	strb	r1, [r2, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    1336:	d301      	bcc.n	133c <WS2812Serial::begin()+0xb4>
    1338:	6893      	ldr	r3, [r2, #8]
    133a:	b90b      	cbnz	r3, 1340 <WS2812Serial::begin()+0xb8>
    133c:	2301      	movs	r3, #1
    133e:	6093      	str	r3, [r2, #8]
		TCD->DLASTSGA = 0;
    1340:	2100      	movs	r1, #0
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    1342:	4b2e      	ldr	r3, [pc, #184]	; (13fc <WS2812Serial::begin()+0x174>)
	memset(drawBuffer, 0, numled * 3);
    1344:	68a0      	ldr	r0, [r4, #8]
		TCD->DLASTSGA = 0;
    1346:	6191      	str	r1, [r2, #24]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    1348:	792a      	ldrb	r2, [r5, #4]
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    134e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1358:	f00d f922 	bl	e5a0 <memset>
	return true;
    135c:	2001      	movs	r0, #1
}
    135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    1360:	4a21      	ldr	r2, [pc, #132]	; (13e8 <WS2812Serial::begin()+0x160>)
		uart = &IMXRT_LPUART1; 
    1362:	4827      	ldr	r0, [pc, #156]	; (1400 <WS2812Serial::begin()+0x178>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    1364:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
	if (!dma) {
    1366:	68e5      	ldr	r5, [r4, #12]
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    1368:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART1; 
    136c:	61a0      	str	r0, [r4, #24]
		break;
    136e:	4e25      	ldr	r6, [pc, #148]	; (1404 <WS2812Serial::begin()+0x17c>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    1370:	67d3      	str	r3, [r2, #124]	; 0x7c
	if (!dma) {
    1372:	2d00      	cmp	r5, #0
    1374:	d1b3      	bne.n	12de <WS2812Serial::begin()+0x56>
		dma = new DMAChannel;
    1376:	2008      	movs	r0, #8
    1378:	f00a fe2c 	bl	bfd4 <operator new(unsigned int)>
    137c:	4605      	mov	r5, r0
		begin();
    137e:	2100      	movs	r1, #0
    1380:	f00a f8d6 	bl	b530 <DMAChannel::begin(bool)>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    1384:	78a1      	ldrb	r1, [r4, #2]
		dma = new DMAChannel;
    1386:	60e5      	str	r5, [r4, #12]
		if (!dma) return false; // unable to allocate DMA channel
    1388:	e7a9      	b.n	12de <WS2812Serial::begin()+0x56>
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    138a:	4a17      	ldr	r2, [pc, #92]	; (13e8 <WS2812Serial::begin()+0x160>)
		uart = &IMXRT_LPUART7; 
    138c:	481e      	ldr	r0, [pc, #120]	; (1408 <WS2812Serial::begin()+0x180>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    138e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		break;
    1390:	4e1e      	ldr	r6, [pc, #120]	; (140c <WS2812Serial::begin()+0x184>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    1392:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
		uart = &IMXRT_LPUART7; 
    1396:	61a0      	str	r0, [r4, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    1398:	67d3      	str	r3, [r2, #124]	; 0x7c
		break;
    139a:	e79d      	b.n	12d8 <WS2812Serial::begin()+0x50>
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    139c:	4a12      	ldr	r2, [pc, #72]	; (13e8 <WS2812Serial::begin()+0x160>)
		uart = &IMXRT_LPUART6; 
    139e:	481c      	ldr	r0, [pc, #112]	; (1410 <WS2812Serial::begin()+0x188>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    13a0:	6f53      	ldr	r3, [r2, #116]	; 0x74
		break;
    13a2:	4e1c      	ldr	r6, [pc, #112]	; (1414 <WS2812Serial::begin()+0x18c>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    13a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
		uart = &IMXRT_LPUART6; 
    13a8:	61a0      	str	r0, [r4, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    13aa:	6753      	str	r3, [r2, #116]	; 0x74
		break;
    13ac:	e794      	b.n	12d8 <WS2812Serial::begin()+0x50>
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    13ae:	4a0e      	ldr	r2, [pc, #56]	; (13e8 <WS2812Serial::begin()+0x160>)
		uart = &IMXRT_LPUART4; 
    13b0:	4819      	ldr	r0, [pc, #100]	; (1418 <WS2812Serial::begin()+0x190>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    13b2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
		break;
    13b4:	4e19      	ldr	r6, [pc, #100]	; (141c <WS2812Serial::begin()+0x194>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    13b6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART4; 
    13ba:	61a0      	str	r0, [r4, #24]
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    13bc:	66d3      	str	r3, [r2, #108]	; 0x6c
		break;
    13be:	e78b      	b.n	12d8 <WS2812Serial::begin()+0x50>
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    13c0:	4a09      	ldr	r2, [pc, #36]	; (13e8 <WS2812Serial::begin()+0x160>)
		uart = &IMXRT_LPUART2; 
    13c2:	4817      	ldr	r0, [pc, #92]	; (1420 <WS2812Serial::begin()+0x198>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    13c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
    13c6:	4e17      	ldr	r6, [pc, #92]	; (1424 <WS2812Serial::begin()+0x19c>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    13c8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
		uart = &IMXRT_LPUART2; 
    13cc:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    13ce:	6693      	str	r3, [r2, #104]	; 0x68
		break;
    13d0:	e782      	b.n	12d8 <WS2812Serial::begin()+0x50>
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    13d2:	4a05      	ldr	r2, [pc, #20]	; (13e8 <WS2812Serial::begin()+0x160>)
		uart = &IMXRT_LPUART3; 
    13d4:	4814      	ldr	r0, [pc, #80]	; (1428 <WS2812Serial::begin()+0x1a0>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    13d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
    13d8:	4e14      	ldr	r6, [pc, #80]	; (142c <WS2812Serial::begin()+0x1a4>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    13da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
		uart = &IMXRT_LPUART3; 
    13de:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    13e0:	6693      	str	r3, [r2, #104]	; 0x68
		break;
    13e2:	e779      	b.n	12d8 <WS2812Serial::begin()+0x50>
    13e4:	2203      	movs	r2, #3
    13e6:	e789      	b.n	12fc <WS2812Serial::begin()+0x74>
    13e8:	400fc000 	.word	0x400fc000
    13ec:	401a0000 	.word	0x401a0000
    13f0:	80000048 	.word	0x80000048
    13f4:	05800001 	.word	0x05800001
    13f8:	20002678 	.word	0x20002678
    13fc:	400ec000 	.word	0x400ec000
    1400:	40184000 	.word	0x40184000
    1404:	80000002 	.word	0x80000002
    1408:	4019c000 	.word	0x4019c000
    140c:	80000008 	.word	0x80000008
    1410:	40198000 	.word	0x40198000
    1414:	80000046 	.word	0x80000046
    1418:	40190000 	.word	0x40190000
    141c:	80000044 	.word	0x80000044
    1420:	40188000 	.word	0x40188000
    1424:	80000042 	.word	0x80000042
    1428:	4018c000 	.word	0x4018c000
    142c:	80000004 	.word	0x80000004
    1430:	10080000 	.word	0x10080000

00001434 <WS2812Serial::show()>:
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
    1434:	68c3      	ldr	r3, [r0, #12]
{
    1436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while ((DMA_ERQ & (1 << dma->channel))) {
    143a:	4eb1      	ldr	r6, [pc, #708]	; (1700 <WS2812Serial::show()+0x2cc>)
    143c:	2501      	movs	r5, #1
    143e:	791b      	ldrb	r3, [r3, #4]
{
    1440:	b083      	sub	sp, #12
	while ((DMA_ERQ & (1 << dma->channel))) {
    1442:	68f2      	ldr	r2, [r6, #12]
{
    1444:	4604      	mov	r4, r0
	while ((DMA_ERQ & (1 << dma->channel))) {
    1446:	fa05 f303 	lsl.w	r3, r5, r3
    144a:	4213      	tst	r3, r2
    144c:	d008      	beq.n	1460 <WS2812Serial::show()+0x2c>
		yield();
    144e:	f00c f9af 	bl	d7b0 <yield>
	while ((DMA_ERQ & (1 << dma->channel))) {
    1452:	68e3      	ldr	r3, [r4, #12]
    1454:	68f2      	ldr	r2, [r6, #12]
    1456:	791b      	ldrb	r3, [r3, #4]
    1458:	fa05 f303 	lsl.w	r3, r5, r3
    145c:	4213      	tst	r3, r2
    145e:	d1f6      	bne.n	144e <WS2812Serial::show()+0x1a>
	}
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
    1460:	78e0      	ldrb	r0, [r4, #3]
    1462:	2805      	cmp	r0, #5
    1464:	d826      	bhi.n	14b4 <WS2812Serial::show()+0x80>
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
    1466:	8823      	ldrh	r3, [r4, #0]
		const uint8_t *p = drawBuffer;
    1468:	68a6      	ldr	r6, [r4, #8]
		const uint8_t *end = p + (numled * 3);
    146a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
		uint8_t *fb = frameBuffer;
    146e:	6865      	ldr	r5, [r4, #4]
		const uint8_t *end = p + (numled * 3);
    1470:	4437      	add	r7, r6
		while (p < end) {
    1472:	42be      	cmp	r6, r7
    1474:	f080 820d 	bcs.w	1892 <WS2812Serial::show()+0x45e>
    1478:	3603      	adds	r6, #3
    147a:	350c      	adds	r5, #12
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
    147c:	7d21      	ldrb	r1, [r4, #20]
    147e:	f1a5 020c 	sub.w	r2, r5, #12
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
    1482:	f816 3c01 	ldrb.w	r3, [r6, #-1]
			b = (b * mult) >> 8;
    1486:	f816 ec03 	ldrb.w	lr, [r6, #-3]
			g = (g * mult) >> 8;
    148a:	f816 cc02 	ldrb.w	ip, [r6, #-2]
			b = (b * mult) >> 8;
    148e:	fb01 ee0e 	mla	lr, r1, lr, lr
			g = (g * mult) >> 8;
    1492:	fb01 cc0c 	mla	ip, r1, ip, ip
			r = (r * mult) >> 8;
    1496:	fb01 3103 	mla	r1, r1, r3, r3
			b = (b * mult) >> 8;
    149a:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
    149e:	ea4f 291c 	mov.w	r9, ip, lsr #8
			r = (r * mult) >> 8;
    14a2:	0a0b      	lsrs	r3, r1, #8
			uint32_t n=0;
			switch (config) {
    14a4:	2805      	cmp	r0, #5
    14a6:	f200 81fb 	bhi.w	18a0 <WS2812Serial::show()+0x46c>
    14aa:	e8df f000 	tbb	[pc, r0]
    14ae:	767d      	.short	0x767d
    14b0:	4662696f 	.word	0x4662696f
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
    14b4:	68a2      	ldr	r2, [r4, #8]
		const uint8_t *end = p + (numled * 4);
    14b6:	8823      	ldrh	r3, [r4, #0]
		uint8_t *fb = frameBuffer;
    14b8:	6861      	ldr	r1, [r4, #4]
		const uint8_t *end = p + (numled * 4);
    14ba:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
		while (p < end) {
    14be:	455a      	cmp	r2, fp
    14c0:	f080 81e4 	bcs.w	188c <WS2812Serial::show()+0x458>
    14c4:	f102 0c04 	add.w	ip, r2, #4
    14c8:	3110      	adds	r1, #16
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
    14ca:	7d23      	ldrb	r3, [r4, #20]
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
    14cc:	3806      	subs	r0, #6
			g = (g * mult) >> 8;
    14ce:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
    14d2:	f1a1 0210 	sub.w	r2, r1, #16
			b = (b * mult) >> 8;
    14d6:	f81c ec04 	ldrb.w	lr, [ip, #-4]
			r = (r * mult) >> 8;
    14da:	f81c 7c02 	ldrb.w	r7, [ip, #-2]
			g = (g * mult) >> 8;
    14de:	fb03 6606 	mla	r6, r3, r6, r6
			w = (w * mult) >> 8;
    14e2:	f81c 5c01 	ldrb.w	r5, [ip, #-1]
			b = (b * mult) >> 8;
    14e6:	fb03 ee0e 	mla	lr, r3, lr, lr
			r = (r * mult) >> 8;
    14ea:	fb03 7707 	mla	r7, r3, r7, r7
			w = (w * mult) >> 8;
    14ee:	fb03 5505 	mla	r5, r3, r5, r5
			g = (g * mult) >> 8;
    14f2:	0a33      	lsrs	r3, r6, #8
			b = (b * mult) >> 8;
    14f4:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
    14f8:	9301      	str	r3, [sp, #4]
			w = (w * mult) >> 8;
    14fa:	ea4f 2915 	mov.w	r9, r5, lsr #8
			r = (r * mult) >> 8;
    14fe:	0a3b      	lsrs	r3, r7, #8
			switch (config) {
    1500:	2817      	cmp	r0, #23
    1502:	f200 81cf 	bhi.w	18a4 <WS2812Serial::show()+0x470>
    1506:	e8df f010 	tbh	[pc, r0, lsl #1]
    150a:	01b5      	.short	0x01b5
    150c:	01a001ab 	.word	0x01a001ab
    1510:	018c0195 	.word	0x018c0195
    1514:	01790182 	.word	0x01790182
    1518:	0165016f 	.word	0x0165016f
    151c:	0151015b 	.word	0x0151015b
    1520:	013e0148 	.word	0x013e0148
    1524:	01280133 	.word	0x01280133
    1528:	0113011d 	.word	0x0113011d
    152c:	00ff010a 	.word	0x00ff010a
    1530:	00e700f1 	.word	0x00e700f1
    1534:	00d400dd 	.word	0x00d400dd
    1538:	00b3      	.short	0x00b3
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
    153a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    153e:	ea4c 4108 	orr.w	r1, ip, r8, lsl #16
    1542:	430b      	orrs	r3, r1
				if (!(n & 0x00800000)) x |= 0x07;
    1544:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    1548:	bf0c      	ite	eq
    154a:	210f      	moveq	r1, #15
    154c:	2108      	movne	r1, #8
				if (!(n & 0x00400000)) x |= 0xE0;
    154e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
				n <<= 2;
    1552:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x00400000)) x |= 0xE0;
    1556:	bf08      	it	eq
    1558:	f041 01e0 	orreq.w	r1, r1, #224	; 0xe0
				*fb++ = x;
    155c:	f802 1b01 	strb.w	r1, [r2], #1
			} while (fb < stop);
    1560:	42aa      	cmp	r2, r5
    1562:	d1ef      	bne.n	1544 <WS2812Serial::show()+0x110>
		while (p < end) {
    1564:	42b7      	cmp	r7, r6
    1566:	f102 050c 	add.w	r5, r2, #12
    156a:	d924      	bls.n	15b6 <WS2812Serial::show()+0x182>
			switch (config) {
    156c:	78e0      	ldrb	r0, [r4, #3]
    156e:	3603      	adds	r6, #3
    1570:	e784      	b.n	147c <WS2812Serial::show()+0x48>
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
    1572:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
    1576:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    157a:	ea43 0309 	orr.w	r3, r3, r9
    157e:	e7e1      	b.n	1544 <WS2812Serial::show()+0x110>
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
    1580:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
    1584:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
    1588:	430b      	orrs	r3, r1
    158a:	e7db      	b.n	1544 <WS2812Serial::show()+0x110>
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
    158c:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
    1590:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    1594:	ea43 0308 	orr.w	r3, r3, r8
    1598:	e7d4      	b.n	1544 <WS2812Serial::show()+0x110>
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
    159a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    159e:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
    15a2:	ea43 0309 	orr.w	r3, r3, r9
    15a6:	e7cd      	b.n	1544 <WS2812Serial::show()+0x110>
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
    15a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    15ac:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    15b0:	ea43 0308 	orr.w	r3, r3, r8
    15b4:	e7c6      	b.n	1544 <WS2812Serial::show()+0x110>
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    15b6:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 12;
    15b8:	260c      	movs	r6, #12
		microseconds_per_led = 30;
    15ba:	221e      	movs	r2, #30
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    15bc:	fb02 f303 	mul.w	r3, r2, r3
    15c0:	f503 7596 	add.w	r5, r3, #300	; 0x12c
    15c4:	e001      	b.n	15ca <WS2812Serial::show()+0x196>
	//if (min_elapsed < 2500) min_elapsed = 2500; // limit refresh to 400 Hz
	uint32_t m;
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
    15c6:	f00c f8f3 	bl	d7b0 <yield>
		m = micros();
    15ca:	f00a fbc3 	bl	bd54 <micros>
		if ((m - prior_micros) > min_elapsed) break;
    15ce:	6923      	ldr	r3, [r4, #16]
    15d0:	1ac3      	subs	r3, r0, r3
    15d2:	42ab      	cmp	r3, r5
    15d4:	d9f7      	bls.n	15c6 <WS2812Serial::show()+0x192>
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
    15d6:	6862      	ldr	r2, [r4, #4]
    15d8:	4b4a      	ldr	r3, [pc, #296]	; (1704 <WS2812Serial::show()+0x2d0>)
	prior_micros = m;
    15da:	6120      	str	r0, [r4, #16]
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
    15dc:	429a      	cmp	r2, r3
    15de:	d912      	bls.n	1606 <WS2812Serial::show()+0x1d2>
    15e0:	8821      	ldrh	r1, [r4, #0]
// typically used with special fields you will want to quickly access
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    15e2:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    15e6:	fb06 2201 	mla	r2, r6, r1, r2
	asm volatile("": : :"memory");
	asm("dsb");
    15ea:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
    15ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    15f2:	f8c1 3f68 	str.w	r3, [r1, #3944]	; 0xf68
		location += 32;
    15f6:	3320      	adds	r3, #32
	} while (location < end_addr);
    15f8:	429a      	cmp	r2, r3
    15fa:	d8fa      	bhi.n	15f2 <WS2812Serial::show()+0x1be>
	asm("dsb");
    15fc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1600:	f3bf 8f6f 	isb	sy
	
	dma->sourceBuffer(frameBuffer, numled * bytes_per_led);
    1604:	6862      	ldr	r2, [r4, #4]
    1606:	68e0      	ldr	r0, [r4, #12]
    1608:	8821      	ldrh	r1, [r4, #0]
		TCD->SADDR = p;
    160a:	6803      	ldr	r3, [r0, #0]
    160c:	fb06 f101 	mul.w	r1, r6, r1
		TCD->ATTR_SRC = 0;
    1610:	2600      	movs	r6, #0
		TCD->SADDR = p;
    1612:	601a      	str	r2, [r3, #0]
		TCD->SOFF = 1;
    1614:	2201      	movs	r2, #1
    1616:	6805      	ldr	r5, [r0, #0]
    1618:	809a      	strh	r2, [r3, #4]
		TCD->NBYTES = 1;
    161a:	609a      	str	r2, [r3, #8]
		TCD->SLAST = -len;
    161c:	424a      	negs	r2, r1
		TCD->ATTR_SRC = 0;
    161e:	71de      	strb	r6, [r3, #7]
		TCD->SLAST = -len;
    1620:	60da      	str	r2, [r3, #12]
		TCD->BITER = len;
    1622:	b28a      	uxth	r2, r1
    1624:	83da      	strh	r2, [r3, #30]
		TCD->CITER = len;
    1626:	82da      	strh	r2, [r3, #22]
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1628:	8bee      	ldrh	r6, [r5, #30]
    162a:	0436      	lsls	r6, r6, #16
    162c:	d412      	bmi.n	1654 <WS2812Serial::show()+0x220>
			if (len > 32767) return;
    162e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    1632:	d201      	bcs.n	1638 <WS2812Serial::show()+0x204>
			TCD->BITER = len;
    1634:	83ea      	strh	r2, [r5, #30]
			TCD->CITER = len;
    1636:	82ea      	strh	r2, [r5, #22]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1638:	8b9a      	ldrh	r2, [r3, #28]

	Serial.printf("SA:%x SO:%d AT:%x NB:%x SL:%d DA:%x DO: %d CI:%x DL:%x CS:%x BI:%x\n", (uint32_t)dma->TCD->SADDR,
	dma->TCD->SOFF, dma->TCD->ATTR, dma->TCD->NBYTES, dma->TCD->SLAST, (uint32_t)dma->TCD->DADDR, 
	dma->TCD->DOFF, dma->TCD->CITER, dma->TCD->DLASTSGA, dma->TCD->CSR, dma->TCD->BITER);
*/
	uart->STAT = 0;	// try clearing out the status
    163a:	69a1      	ldr	r1, [r4, #24]
    163c:	2400      	movs	r4, #0
    163e:	b292      	uxth	r2, r2
    1640:	f042 0208 	orr.w	r2, r2, #8
    1644:	839a      	strh	r2, [r3, #28]
    1646:	614c      	str	r4, [r1, #20]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1648:	4b2d      	ldr	r3, [pc, #180]	; (1700 <WS2812Serial::show()+0x2cc>)
    164a:	7902      	ldrb	r2, [r0, #4]
    164c:	76da      	strb	r2, [r3, #27]
	dma->enable();

#endif
}
    164e:	b003      	add	sp, #12
    1650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (len > 511) return;
    1654:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1658:	d2ee      	bcs.n	1638 <WS2812Serial::show()+0x204>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    165a:	8be9      	ldrh	r1, [r5, #30]
    165c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1660:	4311      	orrs	r1, r2
    1662:	83e9      	strh	r1, [r5, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1664:	8ae9      	ldrh	r1, [r5, #22]
    1666:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    166a:	430a      	orrs	r2, r1
    166c:	82ea      	strh	r2, [r5, #22]
    166e:	e7e3      	b.n	1638 <WS2812Serial::show()+0x204>
			  case WS2812_BGWR: n = (b << 24) | (g << 16) | (w << 8) | r; break;
    1670:	ea4f 6008 	mov.w	r0, r8, lsl #24
    1674:	9e01      	ldr	r6, [sp, #4]
    1676:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    167a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    167e:	4328      	orrs	r0, r5
    1680:	4303      	orrs	r3, r0
				if (!(n & 0x80000000)) x |= 0x07;
    1682:	2b00      	cmp	r3, #0
    1684:	bfb4      	ite	lt
    1686:	2008      	movlt	r0, #8
    1688:	200f      	movge	r0, #15
				if (!(n & 0x40000000)) x |= 0xE0;
    168a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
				n <<= 2;
    168e:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x40000000)) x |= 0xE0;
    1692:	bf08      	it	eq
    1694:	f040 00e0 	orreq.w	r0, r0, #224	; 0xe0
				*fb++ = x;
    1698:	f802 0b01 	strb.w	r0, [r2], #1
			} while (fb < stop);
    169c:	428a      	cmp	r2, r1
    169e:	d1f0      	bne.n	1682 <WS2812Serial::show()+0x24e>
		while (p < end) {
    16a0:	45e3      	cmp	fp, ip
    16a2:	f102 0110 	add.w	r1, r2, #16
    16a6:	f240 80f7 	bls.w	1898 <WS2812Serial::show()+0x464>
			switch (config) {
    16aa:	78e0      	ldrb	r0, [r4, #3]
    16ac:	f10c 0c04 	add.w	ip, ip, #4
    16b0:	e70b      	b.n	14ca <WS2812Serial::show()+0x96>
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
    16b2:	041b      	lsls	r3, r3, #16
    16b4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    16b8:	9801      	ldr	r0, [sp, #4]
    16ba:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    16be:	432b      	orrs	r3, r5
    16c0:	4303      	orrs	r3, r0
    16c2:	e7de      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
    16c4:	ea4f 4008 	mov.w	r0, r8, lsl #16
    16c8:	9e01      	ldr	r6, [sp, #4]
    16ca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    16ce:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
    16d2:	4328      	orrs	r0, r5
    16d4:	4303      	orrs	r3, r0
    16d6:	e7d4      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
    16d8:	041b      	lsls	r3, r3, #16
    16da:	9801      	ldr	r0, [sp, #4]
    16dc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    16e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    16e4:	432b      	orrs	r3, r5
    16e6:	ea43 0308 	orr.w	r3, r3, r8
    16ea:	e7ca      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
    16ec:	ea4f 4808 	mov.w	r8, r8, lsl #16
    16f0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    16f4:	9801      	ldr	r0, [sp, #4]
    16f6:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
    16fa:	432b      	orrs	r3, r5
    16fc:	4303      	orrs	r3, r0
    16fe:	e7c0      	b.n	1682 <WS2812Serial::show()+0x24e>
    1700:	400e8000 	.word	0x400e8000
    1704:	201fffff 	.word	0x201fffff
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
    1708:	9801      	ldr	r0, [sp, #4]
    170a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    170e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
    1712:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
    1716:	432b      	orrs	r3, r5
    1718:	ea43 0308 	orr.w	r3, r3, r8
    171c:	e7b1      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
    171e:	ea4f 4009 	mov.w	r0, r9, lsl #16
    1722:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    1726:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
    172a:	4330      	orrs	r0, r6
    172c:	4303      	orrs	r3, r0
    172e:	e7a8      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
    1730:	ea4f 4309 	mov.w	r3, r9, lsl #16
    1734:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    1738:	9801      	ldr	r0, [sp, #4]
    173a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    173e:	433b      	orrs	r3, r7
    1740:	4303      	orrs	r3, r0
    1742:	e79e      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
    1744:	ea4f 4009 	mov.w	r0, r9, lsl #16
    1748:	9d01      	ldr	r5, [sp, #4]
    174a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    174e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    1752:	ea40 000e 	orr.w	r0, r0, lr
    1756:	4303      	orrs	r3, r0
    1758:	e793      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
    175a:	ea4f 4309 	mov.w	r3, r9, lsl #16
    175e:	9801      	ldr	r0, [sp, #4]
    1760:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    1764:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    1768:	433b      	orrs	r3, r7
    176a:	ea43 0308 	orr.w	r3, r3, r8
    176e:	e788      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
    1770:	ea4f 4909 	mov.w	r9, r9, lsl #16
    1774:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    1778:	9801      	ldr	r0, [sp, #4]
    177a:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
    177e:	ea43 030e 	orr.w	r3, r3, lr
    1782:	4303      	orrs	r3, r0
    1784:	e77d      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
    1786:	ea4f 4909 	mov.w	r9, r9, lsl #16
    178a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    178e:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
    1792:	4333      	orrs	r3, r6
    1794:	ea43 0308 	orr.w	r3, r3, r8
    1798:	e773      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
    179a:	ea4f 4008 	mov.w	r0, r8, lsl #16
    179e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    17a2:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
    17a6:	4330      	orrs	r0, r6
    17a8:	4303      	orrs	r3, r0
    17aa:	e76a      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
    17ac:	ea4f 4308 	mov.w	r3, r8, lsl #16
    17b0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    17b4:	9801      	ldr	r0, [sp, #4]
    17b6:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    17ba:	433b      	orrs	r3, r7
    17bc:	4303      	orrs	r3, r0
    17be:	e760      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
    17c0:	9801      	ldr	r0, [sp, #4]
    17c2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    17c6:	0400      	lsls	r0, r0, #16
    17c8:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
    17cc:	ea40 000e 	orr.w	r0, r0, lr
    17d0:	4303      	orrs	r3, r0
    17d2:	e756      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
    17d4:	9b01      	ldr	r3, [sp, #4]
    17d6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    17da:	041b      	lsls	r3, r3, #16
    17dc:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    17e0:	433b      	orrs	r3, r7
    17e2:	ea43 0308 	orr.w	r3, r3, r8
    17e6:	e74c      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
    17e8:	041b      	lsls	r3, r3, #16
    17ea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    17ee:	9801      	ldr	r0, [sp, #4]
    17f0:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    17f4:	ea43 030e 	orr.w	r3, r3, lr
    17f8:	4303      	orrs	r3, r0
    17fa:	e742      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
    17fc:	041b      	lsls	r3, r3, #16
    17fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    1802:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    1806:	4333      	orrs	r3, r6
    1808:	ea43 0308 	orr.w	r3, r3, r8
    180c:	e739      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
    180e:	ea4f 4308 	mov.w	r3, r8, lsl #16
    1812:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    1816:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    181a:	433b      	orrs	r3, r7
    181c:	ea43 0309 	orr.w	r3, r3, r9
    1820:	e72f      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
    1822:	041b      	lsls	r3, r3, #16
    1824:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    1828:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    182c:	4333      	orrs	r3, r6
    182e:	ea43 0309 	orr.w	r3, r3, r9
    1832:	e726      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
    1834:	ea4f 4308 	mov.w	r3, r8, lsl #16
    1838:	9801      	ldr	r0, [sp, #4]
    183a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    183e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    1842:	433b      	orrs	r3, r7
    1844:	ea43 0309 	orr.w	r3, r3, r9
    1848:	e71b      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
    184a:	041b      	lsls	r3, r3, #16
    184c:	9801      	ldr	r0, [sp, #4]
    184e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    1852:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    1856:	ea43 030e 	orr.w	r3, r3, lr
    185a:	ea43 0309 	orr.w	r3, r3, r9
    185e:	e710      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
    1860:	ea4f 4808 	mov.w	r8, r8, lsl #16
    1864:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    1868:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
    186c:	4333      	orrs	r3, r6
    186e:	ea43 0309 	orr.w	r3, r3, r9
    1872:	e706      	b.n	1682 <WS2812Serial::show()+0x24e>
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
    1874:	9801      	ldr	r0, [sp, #4]
    1876:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    187a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
    187e:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
    1882:	ea43 030e 	orr.w	r3, r3, lr
    1886:	ea43 0309 	orr.w	r3, r3, r9
    188a:	e6fa      	b.n	1682 <WS2812Serial::show()+0x24e>
		bytes_per_led = 16;
    188c:	2610      	movs	r6, #16
		microseconds_per_led = 40;
    188e:	2228      	movs	r2, #40	; 0x28
    1890:	e694      	b.n	15bc <WS2812Serial::show()+0x188>
		bytes_per_led = 12;
    1892:	260c      	movs	r6, #12
		microseconds_per_led = 30;
    1894:	221e      	movs	r2, #30
    1896:	e691      	b.n	15bc <WS2812Serial::show()+0x188>
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    1898:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 16;
    189a:	2610      	movs	r6, #16
		microseconds_per_led = 40;
    189c:	2228      	movs	r2, #40	; 0x28
    189e:	e68d      	b.n	15bc <WS2812Serial::show()+0x188>
			switch (config) {
    18a0:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 12;
    18a2:	e64f      	b.n	1544 <WS2812Serial::show()+0x110>
			switch (config) {
    18a4:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 16;
    18a6:	e6ec      	b.n	1682 <WS2812Serial::show()+0x24e>

000018a8 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
    18a8:	b510      	push	{r4, lr}
    18aa:	4604      	mov	r4, r0
		release();
    18ac:	f009 fe9a 	bl	b5e4 <DMAChannel::release()>
	}
    18b0:	4620      	mov	r0, r4
    18b2:	bd10      	pop	{r4, pc}

000018b4 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    18b4:	4a02      	ldr	r2, [pc, #8]	; (18c0 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    18b6:	4903      	ldr	r1, [pc, #12]	; (18c4 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    18b8:	4803      	ldr	r0, [pc, #12]	; (18c8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    18ba:	f00b bfef 	b.w	d89c <__aeabi_atexit>
    18be:	bf00      	nop
    18c0:	20002f34 	.word	0x20002f34
    18c4:	000018a9 	.word	0x000018a9
    18c8:	200048d4 	.word	0x200048d4

000018cc <AudioControlSGTL5000::disable()>:
	bool disable(void) { return false; }
    18cc:	2000      	movs	r0, #0
    18ce:	4770      	bx	lr

000018d0 <AudioControlSGTL5000::inputLevel(float)>:
	bool inputLevel(float n) {return false;}
    18d0:	2000      	movs	r0, #0
    18d2:	4770      	bx	lr

000018d4 <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    18d6:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    18d8:	7a02      	ldrb	r2, [r0, #8]
    18da:	4c1e      	ldr	r4, [pc, #120]	; (1954 <AudioControlSGTL5000::read(unsigned int)+0x80>)
    18dc:	460d      	mov	r5, r1
    18de:	40ba      	lsls	r2, r7
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    18e0:	f3c1 2107 	ubfx	r1, r1, #8, #8
    18e4:	4606      	mov	r6, r0
    18e6:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    18e8:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
		transmitting = 1;
    18ec:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    18f0:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    18f4:	f009 f98c 	bl	ac10 <TwoWire::write(unsigned char)>
    18f8:	b2e9      	uxtb	r1, r5
    18fa:	4620      	mov	r0, r4
    18fc:	f009 f988 	bl	ac10 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    1900:	2100      	movs	r1, #0
    1902:	4620      	mov	r0, r4
    1904:	f009 fa5c 	bl	adc0 <TwoWire::endTransmission(unsigned char)>
    1908:	b108      	cbz	r0, 190e <AudioControlSGTL5000::read(unsigned int)+0x3a>
    190a:	2000      	movs	r0, #0
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
	val = Wire.read() << 8;
	val |= Wire.read();
	return val;
}
    190c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    190e:	463b      	mov	r3, r7
    1910:	2202      	movs	r2, #2
    1912:	7a31      	ldrb	r1, [r6, #8]
    1914:	4620      	mov	r0, r4
    1916:	f009 fad3 	bl	aec0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    191a:	2801      	cmp	r0, #1
    191c:	d9f5      	bls.n	190a <AudioControlSGTL5000::read(unsigned int)+0x36>
		if (rxBufferIndex >= rxBufferLength) return -1;
    191e:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
    1922:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    1926:	4282      	cmp	r2, r0
    1928:	d210      	bcs.n	194c <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    192a:	1c53      	adds	r3, r2, #1
    192c:	18a1      	adds	r1, r4, r2
    192e:	b2db      	uxtb	r3, r3
    1930:	7e89      	ldrb	r1, [r1, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    1932:	4298      	cmp	r0, r3
	val = Wire.read() << 8;
    1934:	ea4f 2101 	mov.w	r1, r1, lsl #8
		return rxBuffer[rxBufferIndex++];
    1938:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		if (rxBufferIndex >= rxBufferLength) return -1;
    193c:	d906      	bls.n	194c <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    193e:	4423      	add	r3, r4
    1940:	3202      	adds	r2, #2
    1942:	7e98      	ldrb	r0, [r3, #26]
    1944:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
	val |= Wire.read();
    1948:	4308      	orrs	r0, r1
}
    194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    194c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1952:	bf00      	nop
    1954:	20002b60 	.word	0x20002b60

00001958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		transmitting = 1;
    195a:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    195c:	7a03      	ldrb	r3, [r0, #8]
    195e:	4c14      	ldr	r4, [pc, #80]	; (19b0 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    1960:	2924      	cmp	r1, #36	; 0x24
    1962:	fa03 f307 	lsl.w	r3, r3, r7
{
    1966:	460d      	mov	r5, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    1968:	bf08      	it	eq
    196a:	80c2      	strheq	r2, [r0, #6]
{
    196c:	4616      	mov	r6, r2
		return write((uint8_t)n);
    196e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1972:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    1974:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		transmitting = 1;
    1978:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    197c:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    1980:	f009 f946 	bl	ac10 <TwoWire::write(unsigned char)>
    1984:	b2e9      	uxtb	r1, r5
    1986:	4620      	mov	r0, r4
    1988:	f009 f942 	bl	ac10 <TwoWire::write(unsigned char)>
    198c:	f3c6 2107 	ubfx	r1, r6, #8, #8
    1990:	4620      	mov	r0, r4
    1992:	f009 f93d 	bl	ac10 <TwoWire::write(unsigned char)>
    1996:	4620      	mov	r0, r4
    1998:	b2f1      	uxtb	r1, r6
    199a:	f009 f939 	bl	ac10 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    199e:	4639      	mov	r1, r7
    19a0:	4620      	mov	r0, r4
    19a2:	f009 fa0d 	bl	adc0 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    19a6:	fab0 f080 	clz	r0, r0
    19aa:	0940      	lsrs	r0, r0, #5
    19ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ae:	bf00      	nop
    19b0:	20002b60 	.word	0x20002b60

000019b4 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>:
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    19b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        muted = true;
    19b8:	f04f 0801 	mov.w	r8, #1
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    19bc:	460f      	mov	r7, r1
    19be:	4615      	mov	r5, r2
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    19c0:	2130      	movs	r1, #48	; 0x30
    19c2:	f244 0260 	movw	r2, #16480	; 0x4060
        muted = true;
    19c6:	f880 8004 	strb.w	r8, [r0, #4]
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    19ca:	4604      	mov	r4, r0
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    19cc:	f7ff ffc4 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    19d0:	4606      	mov	r6, r0
    19d2:	b910      	cbnz	r0, 19da <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x26>
}
    19d4:	4630      	mov	r0, r6
    19d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    19da:	226c      	movs	r2, #108	; 0x6c
    19dc:	2126      	movs	r1, #38	; 0x26
    19de:	4620      	mov	r0, r4
    19e0:	f7ff ffba 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    19e4:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    19e8:	2128      	movs	r1, #40	; 0x28
    19ea:	4620      	mov	r0, r4
    19ec:	f7ff ffb4 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    19f0:	f640 7222 	movw	r2, #3874	; 0xf22
    19f4:	212c      	movs	r1, #44	; 0x2c
    19f6:	4620      	mov	r0, r4
    19f8:	f7ff ffae 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    19fc:	f244 4246 	movw	r2, #17478	; 0x4446
    1a00:	213c      	movs	r1, #60	; 0x3c
    1a02:	4620      	mov	r0, r4
    1a04:	f7ff ffa8 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    1a08:	f240 1237 	movw	r2, #311	; 0x137
    1a0c:	2124      	movs	r1, #36	; 0x24
    1a0e:	4620      	mov	r0, r4
    1a10:	f7ff ffa2 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (extMCLK > 0) {
    1a14:	2f00      	cmp	r7, #0
    1a16:	d06b      	beq.n	1af0 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x13c>
		if (extMCLK > 17000000) {
    1a18:	4b45      	ldr	r3, [pc, #276]	; (1b30 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x17c>)
			write(CHIP_CLK_TOP_CTRL, 0);
    1a1a:	2134      	movs	r1, #52	; 0x34
    1a1c:	4620      	mov	r0, r4
		if (extMCLK > 17000000) {
    1a1e:	429f      	cmp	r7, r3
			write(CHIP_CLK_TOP_CTRL, 1);
    1a20:	bf8c      	ite	hi
    1a22:	4642      	movhi	r2, r8
			write(CHIP_CLK_TOP_CTRL, 0);
    1a24:	2200      	movls	r2, #0
    1a26:	f7ff ff97 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    1a2a:	ee07 5a90 	vmov	s15, r5
    1a2e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 1b34 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x180>
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    1a32:	2132      	movs	r1, #50	; 0x32
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    1a34:	eeb8 6a67 	vcvt.f32.u32	s12, s15
    1a38:	ee07 7a90 	vmov	s15, r7
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    1a3c:	4620      	mov	r0, r4
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    1a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    1a42:	fbb5 f2f7 	udiv	r2, r5, r7
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    1a46:	eec6 7a26 	vdiv.f32	s15, s12, s13
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    1a4a:	f002 021f 	and.w	r2, r2, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    1a4e:	ee06 2a90 	vmov	s13, r2
    1a52:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1a56:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
    1a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1a62:	ee17 3a90 	vmov	r3, s15
    1a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    1a6a:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
    1a6e:	f7ff ff73 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    1a72:	f244 52ff 	movw	r2, #17919	; 0x45ff
    1a76:	2130      	movs	r1, #48	; 0x30
    1a78:	4620      	mov	r0, r4
    1a7a:	f7ff ff6d 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    1a7e:	2273      	movs	r2, #115	; 0x73
    1a80:	2102      	movs	r1, #2
    1a82:	4620      	mov	r0, r4
    1a84:	f7ff ff68 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    1a88:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1a8c:	f00a f90e 	bl	bcac <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    1a90:	f641 521d 	movw	r2, #7453	; 0x1d1d
    1a94:	212e      	movs	r1, #46	; 0x2e
    1a96:	4620      	mov	r0, r4
    1a98:	f7ff ff5e 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    1a9c:	2207      	movs	r2, #7
    1a9e:	2104      	movs	r1, #4
    1aa0:	4620      	mov	r0, r4
    1aa2:	f7ff ff59 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    1aa6:	22b0      	movs	r2, #176	; 0xb0
    1aa8:	2106      	movs	r1, #6
    1aaa:	4620      	mov	r0, r4
    1aac:	f7ff ff54 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    1ab0:	2210      	movs	r2, #16
    1ab2:	210a      	movs	r1, #10
    1ab4:	4620      	mov	r0, r4
    1ab6:	f7ff ff4f 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    1aba:	2200      	movs	r2, #0
    1abc:	210e      	movs	r1, #14
    1abe:	4620      	mov	r0, r4
    1ac0:	f7ff ff4a 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    1ac4:	f643 423c 	movw	r2, #15420	; 0x3c3c
    1ac8:	2110      	movs	r1, #16
    1aca:	4620      	mov	r0, r4
    1acc:	f7ff ff44 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    1ad0:	f647 727f 	movw	r2, #32639	; 0x7f7f
    1ad4:	2122      	movs	r1, #34	; 0x22
    1ad6:	4620      	mov	r0, r4
    1ad8:	f7ff ff3e 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    1adc:	2236      	movs	r2, #54	; 0x36
    1ade:	2124      	movs	r1, #36	; 0x24
    1ae0:	4620      	mov	r0, r4
    1ae2:	f7ff ff39 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	semi_automated = true;
    1ae6:	2301      	movs	r3, #1
}
    1ae8:	4630      	mov	r0, r6
	semi_automated = true;
    1aea:	7263      	strb	r3, [r4, #9]
}
    1aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    1af0:	f244 02ff 	movw	r2, #16639	; 0x40ff
    1af4:	2130      	movs	r1, #48	; 0x30
    1af6:	4620      	mov	r0, r4
    1af8:	f7ff ff2e 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    1afc:	2273      	movs	r2, #115	; 0x73
    1afe:	2102      	movs	r1, #2
    1b00:	4620      	mov	r0, r4
    1b02:	f7ff ff29 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    1b06:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1b0a:	f00a f8cf 	bl	bcac <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    1b0e:	f641 521d 	movw	r2, #7453	; 0x1d1d
    1b12:	212e      	movs	r1, #46	; 0x2e
    1b14:	4620      	mov	r0, r4
    1b16:	f7ff ff1f 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    1b1a:	2204      	movs	r2, #4
    1b1c:	4620      	mov	r0, r4
    1b1e:	4611      	mov	r1, r2
    1b20:	f7ff ff1a 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    1b24:	2230      	movs	r2, #48	; 0x30
    1b26:	2106      	movs	r1, #6
    1b28:	4620      	mov	r0, r4
    1b2a:	f7ff ff15 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1b2e:	e7bf      	b.n	1ab0 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0xfc>
    1b30:	01036640 	.word	0x01036640
    1b34:	45000000 	.word	0x45000000

00001b38 <AudioControlSGTL5000::enable()>:
bool AudioControlSGTL5000::enable(void) {
    1b38:	b510      	push	{r4, lr}
    1b3a:	4604      	mov	r4, r0
	Wire.begin();
    1b3c:	4808      	ldr	r0, [pc, #32]	; (1b60 <AudioControlSGTL5000::enable()+0x28>)
    1b3e:	f012 fa3f 	bl	13fc0 <___ZN7TwoWire5beginEv_veneer>
	delay(5);
    1b42:	2005      	movs	r0, #5
    1b44:	f00a f8b2 	bl	bcac <delay>
	unsigned int n = read(CHIP_I2S_CTRL);
    1b48:	2106      	movs	r1, #6
    1b4a:	4620      	mov	r0, r4
    1b4c:	f7ff fec2 	bl	18d4 <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    1b50:	4620      	mov	r0, r4
    1b52:	4a04      	ldr	r2, [pc, #16]	; (1b64 <AudioControlSGTL5000::enable()+0x2c>)
    1b54:	2100      	movs	r1, #0
}
    1b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b5a:	f7ff bf2b 	b.w	19b4 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>
    1b5e:	bf00      	nop
    1b60:	20002b60 	.word	0x20002b60
    1b64:	0ac44000 	.word	0x0ac44000

00001b68 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    1b68:	b510      	push	{r4, lr}
    1b6a:	4604      	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    1b6c:	b1d1      	cbz	r1, 1ba4 <AudioControlSGTL5000::inputSelect(int)+0x3c>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    1b6e:	2901      	cmp	r1, #1
    1b70:	d001      	beq.n	1b76 <AudioControlSGTL5000::inputSelect(int)+0xe>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    1b72:	2000      	movs	r0, #0
    1b74:	bd10      	pop	{r4, pc}
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    1b76:	f240 1273 	movw	r2, #371	; 0x173
    1b7a:	212a      	movs	r1, #42	; 0x2a
    1b7c:	f7ff feec 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1b80:	2800      	cmp	r0, #0
    1b82:	d0f6      	beq.n	1b72 <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    1b84:	2288      	movs	r2, #136	; 0x88
    1b86:	2120      	movs	r1, #32
    1b88:	4620      	mov	r0, r4
    1b8a:	f7ff fee5 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1b8e:	2800      	cmp	r0, #0
    1b90:	d0ef      	beq.n	1b72 <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1b92:	88e2      	ldrh	r2, [r4, #6]
    1b94:	4620      	mov	r0, r4
    1b96:	2124      	movs	r1, #36	; 0x24
    1b98:	f022 0204 	bic.w	r2, r2, #4
	}
    1b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1ba0:	f7ff beda 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    1ba4:	2255      	movs	r2, #85	; 0x55
    1ba6:	2120      	movs	r1, #32
    1ba8:	f7ff fed6 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    1bac:	2800      	cmp	r0, #0
    1bae:	d0e0      	beq.n	1b72 <AudioControlSGTL5000::inputSelect(int)+0xa>
    1bb0:	88e2      	ldrh	r2, [r4, #6]
    1bb2:	4620      	mov	r0, r4
    1bb4:	2124      	movs	r1, #36	; 0x24
    1bb6:	f042 0204 	orr.w	r2, r2, #4
	}
    1bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    1bbe:	f7ff becb 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1bc2:	bf00      	nop

00001bc4 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    1bc4:	b538      	push	{r3, r4, r5, lr}
    1bc6:	4605      	mov	r5, r0
	if (n == 0) {
    1bc8:	b311      	cbz	r1, 1c10 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    1bca:	2980      	cmp	r1, #128	; 0x80
    1bcc:	d80c      	bhi.n	1be8 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x24>
		n = 0;
	} else {
		n = 0x80 - n;
    1bce:	f1c1 0480 	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    1bd2:	792b      	ldrb	r3, [r5, #4]
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
    1bd4:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    1bd8:	b953      	cbnz	r3, 1bf0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1bda:	4622      	mov	r2, r4
    1bdc:	4628      	mov	r0, r5
    1bde:	2122      	movs	r1, #34	; 0x22
}
    1be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1be4:	f7ff beb8 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    1be8:	792b      	ldrb	r3, [r5, #4]
    1bea:	2400      	movs	r4, #0
    1bec:	2b00      	cmp	r3, #0
    1bee:	d0f4      	beq.n	1bda <AudioControlSGTL5000::volumeInteger(unsigned int)+0x16>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    1bf0:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    1bf2:	2300      	movs	r3, #0
    1bf4:	2124      	movs	r1, #36	; 0x24
    1bf6:	4628      	mov	r0, r5
    1bf8:	f022 0210 	bic.w	r2, r2, #16
    1bfc:	712b      	strb	r3, [r5, #4]
    1bfe:	f7ff feab 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1c02:	4622      	mov	r2, r4
    1c04:	4628      	mov	r0, r5
    1c06:	2122      	movs	r1, #34	; 0x22
}
    1c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1c0c:	f7ff bea4 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    1c10:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    1c12:	f647 727f 	movw	r2, #32639	; 0x7f7f
    1c16:	2122      	movs	r1, #34	; 0x22
		muted = true;
    1c18:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    1c1a:	f7ff fe9d 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    1c1e:	88ea      	ldrh	r2, [r5, #6]
    1c20:	4628      	mov	r0, r5
    1c22:	2124      	movs	r1, #36	; 0x24
    1c24:	f042 0210 	orr.w	r2, r2, #16
}
    1c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1c2c:	f7ff be94 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

00001c30 <AudioControlSGTL5000::volume(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    1c30:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 1cb0 <AudioControlSGTL5000::volume(float)+0x80>
    1c34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1cb4 <AudioControlSGTL5000::volume(float)+0x84>
    1c38:	eee0 7a07 	vfma.f32	s15, s0, s14
    1c3c:	b538      	push	{r3, r4, r5, lr}
    1c3e:	4605      	mov	r5, r0
    1c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1c44:	ee17 4a90 	vmov	r4, s15
	if (n == 0) {
    1c48:	b314      	cbz	r4, 1c90 <AudioControlSGTL5000::volume(float)+0x60>
	} else if (n > 0x80) {
    1c4a:	2c80      	cmp	r4, #128	; 0x80
    1c4c:	d80c      	bhi.n	1c68 <AudioControlSGTL5000::volume(float)+0x38>
		n = 0x80 - n;
    1c4e:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (muted) {
    1c52:	792b      	ldrb	r3, [r5, #4]
	n = n | (n << 8);
    1c54:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    1c58:	b953      	cbnz	r3, 1c70 <AudioControlSGTL5000::volume(float)+0x40>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1c5a:	4622      	mov	r2, r4
    1c5c:	4628      	mov	r0, r5
    1c5e:	2122      	movs	r1, #34	; 0x22
    1c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1c64:	f7ff be78 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    1c68:	792b      	ldrb	r3, [r5, #4]
    1c6a:	2400      	movs	r4, #0
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d0f4      	beq.n	1c5a <AudioControlSGTL5000::volume(float)+0x2a>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    1c70:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    1c72:	2300      	movs	r3, #0
    1c74:	2124      	movs	r1, #36	; 0x24
    1c76:	4628      	mov	r0, r5
    1c78:	f022 0210 	bic.w	r2, r2, #16
    1c7c:	712b      	strb	r3, [r5, #4]
    1c7e:	f7ff fe6b 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1c82:	4622      	mov	r2, r4
    1c84:	4628      	mov	r0, r5
    1c86:	2122      	movs	r1, #34	; 0x22
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    1c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1c8c:	f7ff be64 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    1c90:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    1c92:	f647 727f 	movw	r2, #32639	; 0x7f7f
    1c96:	2122      	movs	r1, #34	; 0x22
		muted = true;
    1c98:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    1c9a:	f7ff fe5d 	bl	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    1c9e:	88ea      	ldrh	r2, [r5, #6]
    1ca0:	4628      	mov	r0, r5
    1ca2:	2124      	movs	r1, #36	; 0x24
    1ca4:	f042 0210 	orr.w	r2, r2, #16
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    1ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    1cac:	f7ff be54 	b.w	1958 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1cb0:	43010000 	.word	0x43010000
    1cb4:	3eff7cee 	.word	0x3eff7cee

00001cb8 <AudioEffectDelay::update()>:

#include <Arduino.h>
#include "effect_delay.h"

void AudioEffectDelay::update(void)
{
    1cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, tail, count, channel, index, prev, offset;
	const int16_t *src, *end;
	int16_t *dst;

	// grab incoming data and put it into the queue
	head = headindex;
    1cbc:	f8b0 801a 	ldrh.w	r8, [r0, #26]
	tail = tailindex;
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    1cc0:	f240 5362 	movw	r3, #1378	; 0x562
{
    1cc4:	4605      	mov	r5, r0
	tail = tailindex;
    1cc6:	8b86      	ldrh	r6, [r0, #28]
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    1cc8:	f108 0801 	add.w	r8, r8, #1
    1ccc:	4598      	cmp	r8, r3
    1cce:	f200 80b7 	bhi.w	1e40 <AudioEffectDelay::update()+0x188>
	if (head == tail) {
    1cd2:	45b0      	cmp	r8, r6
		if (queue[tail] != NULL) release(queue[tail]);
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
	}
	queue[head] = receiveReadOnly();
	headindex = head;
    1cd4:	fa1f f788 	uxth.w	r7, r8
		if (queue[tail] != NULL) release(queue[tail]);
    1cd8:	f108 0410 	add.w	r4, r8, #16
	if (head == tail) {
    1cdc:	f000 80b7 	beq.w	1e4e <AudioEffectDelay::update()+0x196>
	queue[head] = receiveReadOnly();
    1ce0:	2100      	movs	r1, #0
    1ce2:	4628      	mov	r0, r5
    1ce4:	f009 faea 	bl	b2bc <AudioStream::receiveReadOnly(unsigned int)>
	//		digitalWriteFast(2, LOW);
	//	}
	//}

	// discard unneeded blocks from the queue
	if (head >= tail) {
    1ce8:	45b0      	cmp	r8, r6
	queue[head] = receiveReadOnly();
    1cea:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	headindex = head;
    1cee:	836f      	strh	r7, [r5, #26]
	if (head >= tail) {
    1cf0:	f080 80c2 	bcs.w	1e78 <AudioEffectDelay::update()+0x1c0>
		count = head - tail;
	} else {
		count = DELAY_QUEUE_SIZE + head - tail;
    1cf4:	f208 5463 	addw	r4, r8, #1379	; 0x563
    1cf8:	1ba4      	subs	r4, r4, r6
	}
	if (count > maxblocks) {
    1cfa:	8beb      	ldrh	r3, [r5, #30]
    1cfc:	42a3      	cmp	r3, r4
    1cfe:	d212      	bcs.n	1d26 <AudioEffectDelay::update()+0x6e>
		count -= maxblocks;
    1d00:	1ae4      	subs	r4, r4, r3
		do {
			if (queue[tail] != NULL) {
				release(queue[tail]);
				queue[tail] = NULL;
    1d02:	f04f 0a00 	mov.w	sl, #0
			}
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1d06:	f240 5962 	movw	r9, #1378	; 0x562
				release(queue[tail]);
    1d0a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1d0e:	3601      	adds	r6, #1
			if (queue[tail] != NULL) {
    1d10:	6c38      	ldr	r0, [r7, #64]	; 0x40
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1d12:	454e      	cmp	r6, r9
    1d14:	bf88      	it	hi
    1d16:	2600      	movhi	r6, #0
			if (queue[tail] != NULL) {
    1d18:	b118      	cbz	r0, 1d22 <AudioEffectDelay::update()+0x6a>
				release(queue[tail]);
    1d1a:	f009 fa83 	bl	b224 <AudioStream::release(audio_block_struct*)>
				queue[tail] = NULL;
    1d1e:	f8c7 a040 	str.w	sl, [r7, #64]	; 0x40
		} while (--count > 0);
    1d22:	3c01      	subs	r4, #1
    1d24:	d1f1      	bne.n	1d0a <AudioEffectDelay::update()+0x52>
	}
	tailindex = tail;

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
    1d26:	2400      	movs	r4, #0
		if (!(activemask & (1<<channel))) continue;
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    1d28:	f105 0920 	add.w	r9, r5, #32
	tailindex = tail;
    1d2c:	83ae      	strh	r6, [r5, #28]
		if (!(activemask & (1<<channel))) continue;
    1d2e:	7e2b      	ldrb	r3, [r5, #24]
    1d30:	4123      	asrs	r3, r4
    1d32:	07db      	lsls	r3, r3, #31
    1d34:	d515      	bpl.n	1d62 <AudioEffectDelay::update()+0xaa>
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    1d36:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		offset = position[channel] % AUDIO_BLOCK_SAMPLES;
		if (head >= index) {
    1d3a:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
		offset = position[channel] % AUDIO_BLOCK_SAMPLES;
    1d3e:	f003 0a7f 	and.w	sl, r3, #127	; 0x7f
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    1d42:	ea4f 16d3 	mov.w	r6, r3, lsr #7
		if (head >= index) {
    1d46:	d311      	bcc.n	1d6c <AudioEffectDelay::update()+0xb4>
			index = head - index;
    1d48:	eba8 0606 	sub.w	r6, r8, r6
		} else {
			index = DELAY_QUEUE_SIZE + head - index;
		}
		if (offset == 0) {
    1d4c:	f1ba 0f00 	cmp.w	sl, #0
    1d50:	d112      	bne.n	1d78 <AudioEffectDelay::update()+0xc0>
			// delay falls on the block boundary
			if (queue[index]) {
    1d52:	3610      	adds	r6, #16
    1d54:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
    1d58:	b119      	cbz	r1, 1d62 <AudioEffectDelay::update()+0xaa>
				transmit(queue[index], channel);
    1d5a:	b2e2      	uxtb	r2, r4
    1d5c:	4628      	mov	r0, r5
    1d5e:	f009 fa89 	bl	b274 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	for (channel = 0; channel < 8; channel++) {
    1d62:	3401      	adds	r4, #1
    1d64:	2c08      	cmp	r4, #8
    1d66:	d1e2      	bne.n	1d2e <AudioEffectDelay::update()+0x76>
			transmit(output, channel);
			release(output);
		}
	}

}
    1d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			index = DELAY_QUEUE_SIZE + head - index;
    1d6c:	f208 5363 	addw	r3, r8, #1379	; 0x563
    1d70:	1b9e      	subs	r6, r3, r6
		if (offset == 0) {
    1d72:	f1ba 0f00 	cmp.w	sl, #0
    1d76:	d0ec      	beq.n	1d52 <AudioEffectDelay::update()+0x9a>
			output = allocate();
    1d78:	f009 f9fe 	bl	b178 <AudioStream::allocate()>
			if (!output) continue;
    1d7c:	4683      	mov	fp, r0
    1d7e:	2800      	cmp	r0, #0
    1d80:	d0ef      	beq.n	1d62 <AudioEffectDelay::update()+0xaa>
			dst = output->data;
    1d82:	1d07      	adds	r7, r0, #4
			if (index > 0) {
    1d84:	b396      	cbz	r6, 1dec <AudioEffectDelay::update()+0x134>
				prev = index - 1;
    1d86:	1e73      	subs	r3, r6, #1
			if (queue[prev]) {
    1d88:	3310      	adds	r3, #16
    1d8a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    1d8e:	b3a1      	cbz	r1, 1dfa <AudioEffectDelay::update()+0x142>
				end = queue[prev]->data + AUDIO_BLOCK_SAMPLES;
    1d90:	f501 7e82 	add.w	lr, r1, #260	; 0x104
				src = end - offset;
    1d94:	ebae 024a 	sub.w	r2, lr, sl, lsl #1
				while (src < end) {
    1d98:	4596      	cmp	lr, r2
    1d9a:	d90e      	bls.n	1dba <AudioEffectDelay::update()+0x102>
			dst = output->data;
    1d9c:	4638      	mov	r0, r7
				while (src < end) {
    1d9e:	4613      	mov	r3, r2
					*dst++ = *src++; // TODO: optimize
    1da0:	f933 cb02 	ldrsh.w	ip, [r3], #2
				while (src < end) {
    1da4:	459e      	cmp	lr, r3
					*dst++ = *src++; // TODO: optimize
    1da6:	f820 cb02 	strh.w	ip, [r0], #2
				while (src < end) {
    1daa:	d8f9      	bhi.n	1da0 <AudioEffectDelay::update()+0xe8>
					*dst++ = *src++; // TODO: optimize
    1dac:	f201 1303 	addw	r3, r1, #259	; 0x103
    1db0:	1a9b      	subs	r3, r3, r2
    1db2:	f023 0301 	bic.w	r3, r3, #1
    1db6:	3302      	adds	r3, #2
    1db8:	441f      	add	r7, r3
			if (queue[index]) {
    1dba:	3610      	adds	r6, #16
			end = output->data + AUDIO_BLOCK_SAMPLES;
    1dbc:	f50b 7282 	add.w	r2, fp, #260	; 0x104
			if (queue[index]) {
    1dc0:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
    1dc4:	b381      	cbz	r1, 1e28 <AudioEffectDelay::update()+0x170>
				while (dst < end) {
    1dc6:	4297      	cmp	r7, r2
				src = queue[index]->data;
    1dc8:	f101 0104 	add.w	r1, r1, #4
				while (dst < end) {
    1dcc:	d205      	bcs.n	1dda <AudioEffectDelay::update()+0x122>
					*dst++ = *src++; // TODO: optimize
    1dce:	f931 3b02 	ldrsh.w	r3, [r1], #2
    1dd2:	f827 3b02 	strh.w	r3, [r7], #2
				while (dst < end) {
    1dd6:	42ba      	cmp	r2, r7
    1dd8:	d8f9      	bhi.n	1dce <AudioEffectDelay::update()+0x116>
			transmit(output, channel);
    1dda:	4628      	mov	r0, r5
    1ddc:	b2e2      	uxtb	r2, r4
    1dde:	4659      	mov	r1, fp
    1de0:	f009 fa48 	bl	b274 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			release(output);
    1de4:	4658      	mov	r0, fp
    1de6:	f009 fa1d 	bl	b224 <AudioStream::release(audio_block_struct*)>
    1dea:	e7ba      	b.n	1d62 <AudioEffectDelay::update()+0xaa>
				prev = DELAY_QUEUE_SIZE-1;
    1dec:	f240 5362 	movw	r3, #1378	; 0x562
			if (queue[prev]) {
    1df0:	3310      	adds	r3, #16
    1df2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    1df6:	2900      	cmp	r1, #0
    1df8:	d1ca      	bne.n	1d90 <AudioEffectDelay::update()+0xd8>
				end = dst + offset;
    1dfa:	eb07 024a 	add.w	r2, r7, sl, lsl #1
				while (dst < end) {
    1dfe:	4297      	cmp	r7, r2
    1e00:	d2db      	bcs.n	1dba <AudioEffectDelay::update()+0x102>
					*dst++ = 0;
    1e02:	f06f 0304 	mvn.w	r3, #4
			if (queue[index]) {
    1e06:	3610      	adds	r6, #16
					*dst++ = 0;
    1e08:	4638      	mov	r0, r7
    1e0a:	eba3 030b 	sub.w	r3, r3, fp
    1e0e:	441a      	add	r2, r3
    1e10:	f022 0201 	bic.w	r2, r2, #1
    1e14:	3202      	adds	r2, #2
    1e16:	4417      	add	r7, r2
    1e18:	f00c fbc2 	bl	e5a0 <memset>
			if (queue[index]) {
    1e1c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
			end = output->data + AUDIO_BLOCK_SAMPLES;
    1e20:	f50b 7282 	add.w	r2, fp, #260	; 0x104
			if (queue[index]) {
    1e24:	2900      	cmp	r1, #0
    1e26:	d1ce      	bne.n	1dc6 <AudioEffectDelay::update()+0x10e>
				while (dst < end) {
    1e28:	4297      	cmp	r7, r2
    1e2a:	d2d6      	bcs.n	1dda <AudioEffectDelay::update()+0x122>
					*dst++ = 0;
    1e2c:	f20b 1203 	addw	r2, fp, #259	; 0x103
    1e30:	4638      	mov	r0, r7
    1e32:	1bd2      	subs	r2, r2, r7
    1e34:	f022 0201 	bic.w	r2, r2, #1
    1e38:	3202      	adds	r2, #2
    1e3a:	f00c fbb1 	bl	e5a0 <memset>
    1e3e:	e7cc      	b.n	1dda <AudioEffectDelay::update()+0x122>
    1e40:	2700      	movs	r7, #0
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    1e42:	46b8      	mov	r8, r7
	if (head == tail) {
    1e44:	45b0      	cmp	r8, r6
		if (queue[tail] != NULL) release(queue[tail]);
    1e46:	f108 0410 	add.w	r4, r8, #16
	if (head == tail) {
    1e4a:	f47f af49 	bne.w	1ce0 <AudioEffectDelay::update()+0x28>
		if (queue[tail] != NULL) release(queue[tail]);
    1e4e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    1e52:	b108      	cbz	r0, 1e58 <AudioEffectDelay::update()+0x1a0>
    1e54:	f009 f9e6 	bl	b224 <AudioStream::release(audio_block_struct*)>
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1e58:	3601      	adds	r6, #1
    1e5a:	f240 5363 	movw	r3, #1379	; 0x563
    1e5e:	429e      	cmp	r6, r3
    1e60:	f47f af3e 	bne.w	1ce0 <AudioEffectDelay::update()+0x28>
	queue[head] = receiveReadOnly();
    1e64:	2100      	movs	r1, #0
    1e66:	4628      	mov	r0, r5
    1e68:	f009 fa28 	bl	b2bc <AudioStream::receiveReadOnly(unsigned int)>
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1e6c:	2600      	movs	r6, #0
	queue[head] = receiveReadOnly();
    1e6e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	headindex = head;
    1e72:	4644      	mov	r4, r8
    1e74:	836f      	strh	r7, [r5, #26]
	if (head >= tail) {
    1e76:	e740      	b.n	1cfa <AudioEffectDelay::update()+0x42>
		count = head - tail;
    1e78:	eba8 0406 	sub.w	r4, r8, r6
    1e7c:	e73d      	b.n	1cfa <AudioEffectDelay::update()+0x42>
    1e7e:	bf00      	nop

00001e80 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    1e80:	b430      	push	{r4, r5}
    1e82:	b082      	sub	sp, #8
    1e84:	460c      	mov	r4, r1
    1e86:	ab02      	add	r3, sp, #8
    1e88:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1e8c:	7cc3      	ldrb	r3, [r0, #19]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d030      	beq.n	1ef4 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1e92:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1e94:	7cc3      	ldrb	r3, [r0, #19]
    1e96:	07da      	lsls	r2, r3, #31
    1e98:	d508      	bpl.n	1eac <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1e9a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1e9e:	6945      	ldr	r5, [r0, #20]
    1ea0:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    1ea4:	402a      	ands	r2, r5
    1ea6:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1ea8:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1eac:	079d      	lsls	r5, r3, #30
    1eae:	d508      	bpl.n	1ec2 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1eb0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1eb4:	6985      	ldr	r5, [r0, #24]
    1eb6:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    1eba:	402a      	ands	r2, r5
    1ebc:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1ebe:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1ec2:	0759      	lsls	r1, r3, #29
    1ec4:	d508      	bpl.n	1ed8 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1ec6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1eca:	69c5      	ldr	r5, [r0, #28]
    1ecc:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    1ed0:	402a      	ands	r2, r5
    1ed2:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1ed4:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1ed8:	071a      	lsls	r2, r3, #28
    1eda:	d508      	bpl.n	1eee <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1edc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1ee0:	6a05      	ldr	r5, [r0, #32]
    1ee2:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    1ee6:	402a      	ands	r2, r5
    1ee8:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1eea:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1eee:	06db      	lsls	r3, r3, #27
    1ef0:	d42f      	bmi.n	1f52 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1ef2:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1ef4:	6883      	ldr	r3, [r0, #8]
    1ef6:	429c      	cmp	r4, r3
    1ef8:	d035      	beq.n	1f66 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1efa:	4b22      	ldr	r3, [pc, #136]	; (1f84 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1efc:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1efe:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1f00:	4a21      	ldr	r2, [pc, #132]	; (1f88 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1f02:	f3c3 1101 	ubfx	r1, r3, #4, #2
    1f06:	f3c3 6382 	ubfx	r3, r3, #26, #3
    1f0a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1f0e:	3301      	adds	r3, #1
    1f10:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1f14:	b1cc      	cbz	r4, 1f4a <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1f16:	4294      	cmp	r4, r2
    1f18:	d827      	bhi.n	1f6a <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1f1a:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1f1e:	fbb2 f2f3 	udiv	r2, r2, r3
    1f22:	4294      	cmp	r4, r2
    1f24:	d32c      	bcc.n	1f80 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1f26:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1f2a:	d320      	bcc.n	1f6e <SPIClass::beginTransaction(SPISettings)+0xee>
    1f2c:	4c17      	ldr	r4, [pc, #92]	; (1f8c <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1f2e:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1f30:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1f32:	2203      	movs	r2, #3
		port().CR = 0;
    1f34:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    1f36:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    1f38:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1f3a:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1f3c:	2201      	movs	r2, #1
		port().CCR = _ccr;
    1f3e:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1f40:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1f42:	611a      	str	r2, [r3, #16]
	}
    1f44:	b002      	add	sp, #8
    1f46:	bc30      	pop	{r4, r5}
    1f48:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    1f4a:	4299      	cmp	r1, r3
    1f4c:	d3ef      	bcc.n	1f2e <SPIClass::beginTransaction(SPISettings)+0xae>
    1f4e:	1c53      	adds	r3, r2, #1
    1f50:	e7e9      	b.n	1f26 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1f52:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1f56:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1f58:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    1f5c:	400b      	ands	r3, r1
    1f5e:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1f60:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    1f64:	e7c5      	b.n	1ef2 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1f66:	68c4      	ldr	r4, [r0, #12]
    1f68:	e7e2      	b.n	1f30 <SPIClass::beginTransaction(SPISettings)+0xb0>
    1f6a:	2400      	movs	r4, #0
    1f6c:	e7df      	b.n	1f2e <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1f6e:	2b02      	cmp	r3, #2
    1f70:	d9fb      	bls.n	1f6a <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1f72:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1f74:	085a      	lsrs	r2, r3, #1
    1f76:	0214      	lsls	r4, r2, #8
    1f78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    1f7c:	431c      	orrs	r4, r3
    1f7e:	e7d6      	b.n	1f2e <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1f80:	461a      	mov	r2, r3
    1f82:	e7e4      	b.n	1f4e <SPIClass::beginTransaction(SPISettings)+0xce>
    1f84:	400fc000 	.word	0x400fc000
    1f88:	200023d4 	.word	0x200023d4
    1f8c:	007f7fff 	.word	0x007f7fff

00001f90 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    1f90:	4a02      	ldr	r2, [pc, #8]	; (1f9c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    1f92:	4903      	ldr	r1, [pc, #12]	; (1fa0 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    1f94:	4803      	ldr	r0, [pc, #12]	; (1fa4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    1f96:	f00b bc81 	b.w	d89c <__aeabi_atexit>
    1f9a:	bf00      	nop
    1f9c:	20002f34 	.word	0x20002f34
    1fa0:	000018a9 	.word	0x000018a9
    1fa4:	20004850 	.word	0x20004850

00001fa8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAChannel AudioInputI2S::dma(false);
    1fa8:	4a02      	ldr	r2, [pc, #8]	; (1fb4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1faa:	4903      	ldr	r1, [pc, #12]	; (1fb8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1fac:	4803      	ldr	r0, [pc, #12]	; (1fbc <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1fae:	f00b bc75 	b.w	d89c <__aeabi_atexit>
    1fb2:	bf00      	nop
    1fb4:	20002f34 	.word	0x20002f34
    1fb8:	000018a9 	.word	0x000018a9
    1fbc:	200047c8 	.word	0x200047c8

00001fc0 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1fc0:	4a02      	ldr	r2, [pc, #8]	; (1fcc <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1fc2:	4903      	ldr	r1, [pc, #12]	; (1fd0 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1fc4:	4803      	ldr	r0, [pc, #12]	; (1fd4 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    1fc6:	f00b bc69 	b.w	d89c <__aeabi_atexit>
    1fca:	bf00      	nop
    1fcc:	20002f34 	.word	0x20002f34
    1fd0:	000018a9 	.word	0x000018a9
    1fd4:	200047e0 	.word	0x200047e0

00001fd8 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1fd8:	4a02      	ldr	r2, [pc, #8]	; (1fe4 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1fda:	4903      	ldr	r1, [pc, #12]	; (1fe8 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1fdc:	4803      	ldr	r0, [pc, #12]	; (1fec <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    1fde:	f00b bc5d 	b.w	d89c <__aeabi_atexit>
    1fe2:	bf00      	nop
    1fe4:	20002f34 	.word	0x20002f34
    1fe8:	000018a9 	.word	0x000018a9
    1fec:	20004858 	.word	0x20004858

00001ff0 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    1ff0:	4a02      	ldr	r2, [pc, #8]	; (1ffc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    1ff2:	4903      	ldr	r1, [pc, #12]	; (2000 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1ff4:	4803      	ldr	r0, [pc, #12]	; (2004 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    1ff6:	f00b bc51 	b.w	d89c <__aeabi_atexit>
    1ffa:	bf00      	nop
    1ffc:	20002f34 	.word	0x20002f34
    2000:	000018a9 	.word	0x000018a9
    2004:	20004860 	.word	0x20004860

00002008 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    2008:	4a02      	ldr	r2, [pc, #8]	; (2014 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    200a:	4903      	ldr	r1, [pc, #12]	; (2018 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    200c:	4803      	ldr	r0, [pc, #12]	; (201c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    200e:	f00b bc45 	b.w	d89c <__aeabi_atexit>
    2012:	bf00      	nop
    2014:	20002f34 	.word	0x20002f34
    2018:	000018a9 	.word	0x000018a9
    201c:	20004878 	.word	0x20004878

00002020 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    2020:	4a02      	ldr	r2, [pc, #8]	; (202c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    2022:	4903      	ldr	r1, [pc, #12]	; (2030 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    2024:	4803      	ldr	r0, [pc, #12]	; (2034 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    2026:	f00b bc39 	b.w	d89c <__aeabi_atexit>
    202a:	bf00      	nop
    202c:	20002f34 	.word	0x20002f34
    2030:	000018a9 	.word	0x000018a9
    2034:	200047d0 	.word	0x200047d0

00002038 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    2038:	4a02      	ldr	r2, [pc, #8]	; (2044 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    203a:	4903      	ldr	r1, [pc, #12]	; (2048 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    203c:	4803      	ldr	r0, [pc, #12]	; (204c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    203e:	f00b bc2d 	b.w	d89c <__aeabi_atexit>
    2042:	bf00      	nop
    2044:	20002f34 	.word	0x20002f34
    2048:	000018a9 	.word	0x000018a9
    204c:	200047e8 	.word	0x200047e8

00002050 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    2050:	4a02      	ldr	r2, [pc, #8]	; (205c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    2052:	4903      	ldr	r1, [pc, #12]	; (2060 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    2054:	4803      	ldr	r0, [pc, #12]	; (2064 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    2056:	f00b bc21 	b.w	d89c <__aeabi_atexit>
    205a:	bf00      	nop
    205c:	20002f34 	.word	0x20002f34
    2060:	000018a9 	.word	0x000018a9
    2064:	20004868 	.word	0x20004868

00002068 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
DMAChannel AudioInputTDM::dma(false);
    2068:	4a02      	ldr	r2, [pc, #8]	; (2074 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    206a:	4903      	ldr	r1, [pc, #12]	; (2078 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    206c:	4803      	ldr	r0, [pc, #12]	; (207c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    206e:	f00b bc15 	b.w	d89c <__aeabi_atexit>
    2072:	bf00      	nop
    2074:	20002f34 	.word	0x20002f34
    2078:	000018a9 	.word	0x000018a9
    207c:	200047d8 	.word	0x200047d8

00002080 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
DMAChannel AudioInputTDM2::dma(false);
    2080:	4a02      	ldr	r2, [pc, #8]	; (208c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    2082:	4903      	ldr	r1, [pc, #12]	; (2090 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    2084:	4803      	ldr	r0, [pc, #12]	; (2094 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    2086:	f00b bc09 	b.w	d89c <__aeabi_atexit>
    208a:	bf00      	nop
    208c:	20002f34 	.word	0x20002f34
    2090:	000018a9 	.word	0x000018a9
    2094:	200047f0 	.word	0x200047f0

00002098 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    2098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    209c:	f500 7e80 	add.w	lr, r0, #256	; 0x100

000020a0 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    20a0:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    20a4:	e8b2 1540 	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    20a8:	eac5 4306 	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    20ac:	eac6 4425 	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    20b0:	eac7 4508 	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    20b4:	eac8 4627 	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    20b8:	eac9 470a 	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    20bc:	eaca 4829 	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    20c0:	eacb 490c 	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    20c4:	eacc 4a2b 	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    20c8:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    20cc:	4586      	cmp	lr, r0
	bne .loopLR
    20ce:	d1e7      	bne.n	20a0 <.loopLR>

	pop	{r4-r11,r14}	
    20d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8}
#endif
	BX lr
    20d4:	4770      	bx	lr

000020d6 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    20d6:	f04f 0200 	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    20da:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    20de:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    20e2:	bf00      	nop

000020e4 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    20e4:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    20e8:	eac5 0302 	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    20ec:	eac2 4425 	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    20f0:	eac7 0502 	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    20f4:	eac2 4627 	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    20f8:	eac9 0702 	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    20fc:	eac2 4829 	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    2100:	eacb 0902 	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    2104:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    2108:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    210c:	4584      	cmp	ip, r0
	bne .loopL
    210e:	d1e9      	bne.n	20e4 <.loopL>

	pop	{r4-r11}
    2110:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    2114:	4770      	bx	lr

00002116 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    2116:	f04f 0200 	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    211a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    211e:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    2122:	bf00      	nop

00002124 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    2124:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    2128:	eac2 4305 	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    212c:	eac2 0405 	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    2130:	eac2 4507 	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    2134:	eac2 0607 	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    2138:	eac2 4709 	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    213c:	eac2 0809 	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    2140:	eac2 490b 	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    2144:	eac2 0a0b 	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    2148:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    214c:	4584      	cmp	ip, r0
	bne .loopR
    214e:	d1e9      	bne.n	2124 <.loopR>

	pop	{r4-r11}
    2150:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    2154:	4770      	bx	lr

00002156 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    2156:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    215a:	9c08      	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    215c:	f500 7b00 	add.w	fp, r0, #512	; 0x200

00002160 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    2160:	f851 5b04 	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    2164:	f853 6b04 	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    2168:	eac5 4706 	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    216c:	eac6 4925 	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    2170:	f852 5b04 	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    2174:	f854 6b04 	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    2178:	eac5 4806 	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    217c:	eac6 4a25 	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    2180:	e8a0 0780 	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    2184:	4583      	cmp	fp, r0
	bne .loopQuad
    2186:	d1eb      	bne.n	2160 <.loopQuad>

	pop	{r4-r11}
    2188:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    218c:	4770      	bx	lr
    218e:	bf00      	nop

00002190 <AudioMixer4::update()>:
{
    2190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (channel=0; channel < 4; channel++) {
    2192:	2700      	movs	r7, #0
{
    2194:	4605      	mov	r5, r0
	audio_block_t *in, *out=NULL;
    2196:	463c      	mov	r4, r7
		if (!out) {
    2198:	b3b4      	cbz	r4, 2208 <AudioMixer4::update()+0x78>
			in = receiveReadOnly(channel);
    219a:	4639      	mov	r1, r7
    219c:	4628      	mov	r0, r5
    219e:	f009 f88d 	bl	b2bc <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    21a2:	b308      	cbz	r0, 21e8 <AudioMixer4::update()+0x58>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    21a4:	1dbb      	adds	r3, r7, #6
    21a6:	f104 0e04 	add.w	lr, r4, #4
    21aa:	f100 0c04 	add.w	ip, r0, #4
    21ae:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
	if (mult == MULTI_UNITYGAIN) {
    21b2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    21b6:	d047      	beq.n	2248 <AudioMixer4::update()+0xb8>
    21b8:	f500 7182 	add.w	r1, r0, #260	; 0x104
			uint32_t tmp32 = *src++; // read 2 samples from *data
    21bc:	f85c 2b04 	ldr.w	r2, [ip], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    21c0:	fb36 f302 	smulwb	r3, r6, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    21c4:	fb36 f212 	smulwt	r2, r6, r2
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    21c8:	f303 030f 	ssat	r3, #16, r3
    21cc:	f302 020f 	ssat	r2, #16, r2
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    21d0:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    21d4:	f8de 2000 	ldr.w	r2, [lr]
    21d8:	fa93 f312 	qadd16	r3, r3, r2
		} while (dst < end);
    21dc:	458c      	cmp	ip, r1
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    21de:	f84e 3b04 	str.w	r3, [lr], #4
		} while (dst < end);
    21e2:	d1eb      	bne.n	21bc <AudioMixer4::update()+0x2c>
				release(in);
    21e4:	f009 f81e 	bl	b224 <AudioStream::release(audio_block_struct*)>
	for (channel=0; channel < 4; channel++) {
    21e8:	3701      	adds	r7, #1
    21ea:	2f04      	cmp	r7, #4
    21ec:	d1d4      	bne.n	2198 <AudioMixer4::update()+0x8>
		transmit(out);
    21ee:	4628      	mov	r0, r5
    21f0:	4621      	mov	r1, r4
    21f2:	2200      	movs	r2, #0
    21f4:	f009 f83e 	bl	b274 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    21f8:	4620      	mov	r0, r4
}
    21fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		release(out);
    21fe:	f009 b811 	b.w	b224 <AudioStream::release(audio_block_struct*)>
	for (channel=0; channel < 4; channel++) {
    2202:	3701      	adds	r7, #1
    2204:	2f04      	cmp	r7, #4
    2206:	d03a      	beq.n	227e <AudioMixer4::update()+0xee>
			out = receiveWritable(channel);
    2208:	4639      	mov	r1, r7
    220a:	4628      	mov	r0, r5
    220c:	f009 f862 	bl	b2d4 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    2210:	4604      	mov	r4, r0
    2212:	2800      	cmp	r0, #0
    2214:	d0f5      	beq.n	2202 <AudioMixer4::update()+0x72>
				int32_t mult = multiplier[channel];
    2216:	1dbb      	adds	r3, r7, #6
    2218:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    221c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    2220:	d0e2      	beq.n	21e8 <AudioMixer4::update()+0x58>
    2222:	1d21      	adds	r1, r4, #4
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    2224:	f504 7682 	add.w	r6, r4, #260	; 0x104
		uint32_t tmp32 = *p; // read 2 samples from *data
    2228:	680b      	ldr	r3, [r1, #0]
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    222a:	fb30 f203 	smulwb	r2, r0, r3
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    222e:	fb30 f313 	smulwt	r3, r0, r3
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    2232:	f302 020f 	ssat	r2, #16, r2
    2236:	f303 030f 	ssat	r3, #16, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    223a:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
		*p++ = pack_16b_16b(val2, val1);
    223e:	f841 3b04 	str.w	r3, [r1], #4
	} while (p < end);
    2242:	42b1      	cmp	r1, r6
    2244:	d1f0      	bne.n	2228 <AudioMixer4::update()+0x98>
    2246:	e7cf      	b.n	21e8 <AudioMixer4::update()+0x58>
    2248:	f100 020c 	add.w	r2, r0, #12
    224c:	f104 030c 	add.w	r3, r4, #12
    2250:	f500 7c86 	add.w	ip, r0, #268	; 0x10c
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    2254:	f853 1c08 	ldr.w	r1, [r3, #-8]
    2258:	f852 6c08 	ldr.w	r6, [r2, #-8]
    225c:	fa91 f116 	qadd16	r1, r1, r6
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    2260:	f843 1c08 	str.w	r1, [r3, #-8]
    2264:	f853 1c04 	ldr.w	r1, [r3, #-4]
    2268:	f852 6c04 	ldr.w	r6, [r2, #-4]
    226c:	fa91 f116 	qadd16	r1, r1, r6
		} while (dst < end);
    2270:	3208      	adds	r2, #8
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    2272:	f843 1c04 	str.w	r1, [r3, #-4]
		} while (dst < end);
    2276:	3308      	adds	r3, #8
    2278:	4594      	cmp	ip, r2
    227a:	d1eb      	bne.n	2254 <AudioMixer4::update()+0xc4>
    227c:	e7b2      	b.n	21e4 <AudioMixer4::update()+0x54>
}
    227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002280 <AudioOutputI2S::isr()>:
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    2280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    2284:	4b45      	ldr	r3, [pc, #276]	; (239c <AudioOutputI2S::isr()+0x11c>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    2286:	4c46      	ldr	r4, [pc, #280]	; (23a0 <AudioOutputI2S::isr()+0x120>)
	saddr = (uint32_t)(dma.TCD->SADDR);
    2288:	6818      	ldr	r0, [r3, #0]
		DMA_CINT = channel;
    228a:	7919      	ldrb	r1, [r3, #4]
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    228c:	f504 7580 	add.w	r5, r4, #256	; 0x100
	saddr = (uint32_t)(dma.TCD->SADDR);
    2290:	6803      	ldr	r3, [r0, #0]
    2292:	4a44      	ldr	r2, [pc, #272]	; (23a4 <AudioOutputI2S::isr()+0x124>)
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    2294:	42ab      	cmp	r3, r5
    2296:	77d1      	strb	r1, [r2, #31]
    2298:	d20b      	bcs.n	22b2 <AudioOutputI2S::isr()+0x32>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    229a:	4b43      	ldr	r3, [pc, #268]	; (23a8 <AudioOutputI2S::isr()+0x128>)
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d04b      	beq.n	233a <AudioOutputI2S::isr()+0xba>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    22a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    22a6:	2240      	movs	r2, #64	; 0x40
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    22a8:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    22aa:	f505 7580 	add.w	r5, r5, #256	; 0x100
    22ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    22b2:	4b3e      	ldr	r3, [pc, #248]	; (23ac <AudioOutputI2S::isr()+0x12c>)
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
    22b4:	f8df a104 	ldr.w	sl, [pc, #260]	; 23bc <AudioOutputI2S::isr()+0x13c>
	blockL = AudioOutputI2S::block_left_1st;
    22b8:	f8d3 8000 	ldr.w	r8, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    22bc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 23c0 <AudioOutputI2S::isr()+0x140>
	blockR = AudioOutputI2S::block_right_1st;
    22c0:	4b3b      	ldr	r3, [pc, #236]	; (23b0 <AudioOutputI2S::isr()+0x130>)
	offsetL = AudioOutputI2S::block_left_offset;
    22c2:	f8ba 6000 	ldrh.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    22c6:	f8d3 b000 	ldr.w	fp, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    22ca:	f8b9 7000 	ldrh.w	r7, [r9]

	if (blockL && blockR) {
    22ce:	f1b8 0f00 	cmp.w	r8, #0
    22d2:	d04f      	beq.n	2374 <AudioOutputI2S::isr()+0xf4>
    22d4:	f1bb 0f00 	cmp.w	fp, #0
    22d8:	d121      	bne.n	231e <AudioOutputI2S::isr()+0x9e>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    22da:	f1b8 0f00 	cmp.w	r8, #0
    22de:	d049      	beq.n	2374 <AudioOutputI2S::isr()+0xf4>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    22e0:	f108 0104 	add.w	r1, r8, #4
    22e4:	4620      	mov	r0, r4
    22e6:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    22ea:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    22ec:	f7ff fef3 	bl	20d6 <memcpy_tointerleaveL>
	asm volatile("": : :"memory");
	asm("dsb");
    22f0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    22f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    22f8:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    22fc:	3420      	adds	r4, #32
	} while (location < end_addr);
    22fe:	42ac      	cmp	r4, r5
    2300:	d3fa      	bcc.n	22f8 <AudioOutputI2S::isr()+0x78>
	asm("dsb");
    2302:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2306:	f3bf 8f6f 	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    230a:	2e7f      	cmp	r6, #127	; 0x7f
    230c:	d826      	bhi.n	235c <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_left_offset = offsetL;
    230e:	f8aa 6000 	strh.w	r6, [sl]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    2312:	2f7f      	cmp	r7, #127	; 0x7f
    2314:	d815      	bhi.n	2342 <AudioOutputI2S::isr()+0xc2>
		AudioOutputI2S::block_right_offset = offsetR;
    2316:	f8a9 7000 	strh.w	r7, [r9]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    231a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    231e:	f10b 0204 	add.w	r2, fp, #4
    2322:	f108 0104 	add.w	r1, r8, #4
    2326:	4620      	mov	r0, r4
    2328:	eb02 0247 	add.w	r2, r2, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    232c:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    232e:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    2332:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    2334:	f7ff feb0 	bl	2098 <memcpy_tointerleaveLR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    2338:	e7da      	b.n	22f0 <AudioOutputI2S::isr()+0x70>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    233a:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    233c:	f505 7580 	add.w	r5, r5, #256	; 0x100
    2340:	e7b7      	b.n	22b2 <AudioOutputI2S::isr()+0x32>
		AudioOutputI2S::block_right_offset = 0;
    2342:	2400      	movs	r4, #0
		AudioStream::release(blockR);
    2344:	4658      	mov	r0, fp
		AudioOutputI2S::block_right_offset = 0;
    2346:	f8a9 4000 	strh.w	r4, [r9]
		AudioStream::release(blockR);
    234a:	f008 ff6b 	bl	b224 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    234e:	4b19      	ldr	r3, [pc, #100]	; (23b4 <AudioOutputI2S::isr()+0x134>)
    2350:	681a      	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    2352:	601c      	str	r4, [r3, #0]
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    2354:	4b16      	ldr	r3, [pc, #88]	; (23b0 <AudioOutputI2S::isr()+0x130>)
    2356:	601a      	str	r2, [r3, #0]
}
    2358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		AudioOutputI2S::block_left_offset = 0;
    235c:	2400      	movs	r4, #0
		AudioStream::release(blockL);
    235e:	4640      	mov	r0, r8
		AudioOutputI2S::block_left_offset = 0;
    2360:	f8aa 4000 	strh.w	r4, [sl]
		AudioStream::release(blockL);
    2364:	f008 ff5e 	bl	b224 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    2368:	4a13      	ldr	r2, [pc, #76]	; (23b8 <AudioOutputI2S::isr()+0x138>)
    236a:	4b10      	ldr	r3, [pc, #64]	; (23ac <AudioOutputI2S::isr()+0x12c>)
    236c:	6811      	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    236e:	6014      	str	r4, [r2, #0]
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    2370:	6019      	str	r1, [r3, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    2372:	e7ce      	b.n	2312 <AudioOutputI2S::isr()+0x92>
	} else if (blockR) {
    2374:	f1bb 0f00 	cmp.w	fp, #0
    2378:	d008      	beq.n	238c <AudioOutputI2S::isr()+0x10c>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    237a:	f10b 0104 	add.w	r1, fp, #4
    237e:	4620      	mov	r0, r4
    2380:	eb01 0147 	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    2384:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    2386:	f7ff fec6 	bl	2116 <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    238a:	e7b1      	b.n	22f0 <AudioOutputI2S::isr()+0x70>
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    238c:	f44f 7280 	mov.w	r2, #256	; 0x100
    2390:	4659      	mov	r1, fp
    2392:	4620      	mov	r0, r4
    2394:	f00c f904 	bl	e5a0 <memset>
    2398:	e7aa      	b.n	22f0 <AudioOutputI2S::isr()+0x70>
    239a:	bf00      	nop
    239c:	20004808 	.word	0x20004808
    23a0:	20219fa0 	.word	0x20219fa0
    23a4:	400e8000 	.word	0x400e8000
    23a8:	200086f2 	.word	0x200086f2
    23ac:	200047f8 	.word	0x200047f8
    23b0:	20004800 	.word	0x20004800
    23b4:	20004804 	.word	0x20004804
    23b8:	200047fc 	.word	0x200047fc
    23bc:	200086da 	.word	0x200086da
    23c0:	200086dc 	.word	0x200086dc

000023c4 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    23c4:	b538      	push	{r3, r4, r5, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    23c6:	2100      	movs	r1, #0
{
    23c8:	4604      	mov	r4, r0
	block = receiveReadOnly(0); // input 0 = left channel
    23ca:	f008 ff77 	bl	b2bc <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    23ce:	b188      	cbz	r0, 23f4 <AudioOutputI2S::update()+0x30>
		__disable_irq();
    23d0:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    23d2:	4a1c      	ldr	r2, [pc, #112]	; (2444 <AudioOutputI2S::update()+0x80>)
    23d4:	6813      	ldr	r3, [r2, #0]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d02b      	beq.n	2432 <AudioOutputI2S::update()+0x6e>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    23da:	491b      	ldr	r1, [pc, #108]	; (2448 <AudioOutputI2S::update()+0x84>)
    23dc:	680d      	ldr	r5, [r1, #0]
    23de:	2d00      	cmp	r5, #0
    23e0:	d02c      	beq.n	243c <AudioOutputI2S::update()+0x78>
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    23e2:	6015      	str	r5, [r2, #0]
			block_left_2nd = block;
    23e4:	6008      	str	r0, [r1, #0]
			block_left_offset = 0;
    23e6:	2100      	movs	r1, #0
    23e8:	4a18      	ldr	r2, [pc, #96]	; (244c <AudioOutputI2S::update()+0x88>)
    23ea:	8011      	strh	r1, [r2, #0]
			__enable_irq();
    23ec:	b662      	cpsie	i
			release(tmp);
    23ee:	4618      	mov	r0, r3
    23f0:	f008 ff18 	bl	b224 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    23f4:	2101      	movs	r1, #1
    23f6:	4620      	mov	r0, r4
    23f8:	f008 ff60 	bl	b2bc <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    23fc:	b198      	cbz	r0, 2426 <AudioOutputI2S::update()+0x62>
		__disable_irq();
    23fe:	b672      	cpsid	i
		if (block_right_1st == NULL) {
    2400:	4a13      	ldr	r2, [pc, #76]	; (2450 <AudioOutputI2S::update()+0x8c>)
    2402:	6813      	ldr	r3, [r2, #0]
    2404:	b183      	cbz	r3, 2428 <AudioOutputI2S::update()+0x64>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    2406:	4913      	ldr	r1, [pc, #76]	; (2454 <AudioOutputI2S::update()+0x90>)
    2408:	680c      	ldr	r4, [r1, #0]
    240a:	b154      	cbz	r4, 2422 <AudioOutputI2S::update()+0x5e>
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    240c:	6014      	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    240e:	2400      	movs	r4, #0
    2410:	4a11      	ldr	r2, [pc, #68]	; (2458 <AudioOutputI2S::update()+0x94>)
			block_right_2nd = block;
    2412:	6008      	str	r0, [r1, #0]
			block_right_offset = 0;
    2414:	8014      	strh	r4, [r2, #0]
			__enable_irq();
    2416:	b662      	cpsie	i
			release(tmp);
    2418:	4618      	mov	r0, r3
		}
	}
}
    241a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			release(tmp);
    241e:	f008 bf01 	b.w	b224 <AudioStream::release(audio_block_struct*)>
			block_right_2nd = block;
    2422:	6008      	str	r0, [r1, #0]
			__enable_irq();
    2424:	b662      	cpsie	i
}
    2426:	bd38      	pop	{r3, r4, r5, pc}
			block_right_offset = 0;
    2428:	490b      	ldr	r1, [pc, #44]	; (2458 <AudioOutputI2S::update()+0x94>)
			block_right_1st = block;
    242a:	6010      	str	r0, [r2, #0]
			block_right_offset = 0;
    242c:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    242e:	b662      	cpsie	i
}
    2430:	bd38      	pop	{r3, r4, r5, pc}
			block_left_offset = 0;
    2432:	4906      	ldr	r1, [pc, #24]	; (244c <AudioOutputI2S::update()+0x88>)
			block_left_1st = block;
    2434:	6010      	str	r0, [r2, #0]
			block_left_offset = 0;
    2436:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    2438:	b662      	cpsie	i
    243a:	e7db      	b.n	23f4 <AudioOutputI2S::update()+0x30>
			block_left_2nd = block;
    243c:	6008      	str	r0, [r1, #0]
			__enable_irq();
    243e:	b662      	cpsie	i
    2440:	e7d8      	b.n	23f4 <AudioOutputI2S::update()+0x30>
    2442:	bf00      	nop
    2444:	200047f8 	.word	0x200047f8
    2448:	200047fc 	.word	0x200047fc
    244c:	200086da 	.word	0x200086da
    2450:	20004800 	.word	0x20004800
    2454:	20004804 	.word	0x20004804
    2458:	200086dc 	.word	0x200086dc

0000245c <AudioOutputI2S::config_i2s(bool)>:
#endif
#endif


void AudioOutputI2S::config_i2s(bool only_bclk)
{
    245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    245e:	4c2d      	ldr	r4, [pc, #180]	; (2514 <AudioOutputI2S::config_i2s(bool)+0xb8>)
{
    2460:	4605      	mov	r5, r0

	// if either transmitter or receiver is enabled, do nothing
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    2462:	4a2d      	ldr	r2, [pc, #180]	; (2518 <AudioOutputI2S::config_i2s(bool)+0xbc>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    2464:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2466:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    246a:	67e3      	str	r3, [r4, #124]	; 0x7c
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    246c:	6893      	ldr	r3, [r2, #8]
    246e:	2b00      	cmp	r3, #0
    2470:	db46      	blt.n	2500 <AudioOutputI2S::config_i2s(bool)+0xa4>
    2472:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    2476:	2b00      	cmp	r3, #0
    2478:	db42      	blt.n	2500 <AudioOutputI2S::config_i2s(bool)+0xa4>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    247a:	2300      	movs	r3, #0
    247c:	f242 7210 	movw	r2, #10000	; 0x2710
    2480:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
    2484:	201c      	movs	r0, #28
    2486:	f011 fd8b 	bl	13fa0 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    248a:	69e3      	ldr	r3, [r4, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    248c:	4a23      	ldr	r2, [pc, #140]	; (251c <AudioOutputI2S::config_i2s(bool)+0xc0>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    248e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    2492:	4923      	ldr	r1, [pc, #140]	; (2520 <AudioOutputI2S::config_i2s(bool)+0xc4>)
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    2494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    2498:	61e3      	str	r3, [r4, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    249a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    249c:	401a      	ands	r2, r3
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    249e:	4b21      	ldr	r3, [pc, #132]	; (2524 <AudioOutputI2S::config_i2s(bool)+0xc8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    24a0:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    24a4:	62a2      	str	r2, [r4, #40]	; 0x28
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    24a6:	684a      	ldr	r2, [r1, #4]
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    24a8:	4013      	ands	r3, r2
    24aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    24ae:	604b      	str	r3, [r1, #4]

	if (!only_bclk)
    24b0:	b92d      	cbnz	r5, 24be <AudioOutputI2S::config_i2s(bool)+0x62>
	{
	  CORE_PIN23_CONFIG = 3;  //1:MCLK
    24b2:	4b1d      	ldr	r3, [pc, #116]	; (2528 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    24b4:	2203      	movs	r2, #3
    24b6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	  CORE_PIN20_CONFIG = 3;  //1:RX_SYNC  (LRCLK)
    24ba:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	}
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    24be:	4e1a      	ldr	r6, [pc, #104]	; (2528 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    24c0:	2703      	movs	r7, #3

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    24c2:	4b15      	ldr	r3, [pc, #84]	; (2518 <AudioOutputI2S::config_i2s(bool)+0xbc>)
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    24c4:	2401      	movs	r4, #1
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    24c6:	f8c6 7128 	str.w	r7, [r6, #296]	; 0x128
	I2S1_TMR = 0;
    24ca:	2500      	movs	r5, #0
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    24cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    24d0:	4916      	ldr	r1, [pc, #88]	; (252c <AudioOutputI2S::config_i2s(bool)+0xd0>)
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    24d2:	4a17      	ldr	r2, [pc, #92]	; (2530 <AudioOutputI2S::config_i2s(bool)+0xd4>)
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    24d4:	4e17      	ldr	r6, [pc, #92]	; (2534 <AudioOutputI2S::config_i2s(bool)+0xd8>)
	I2S1_TMR = 0;
    24d6:	661d      	str	r5, [r3, #96]	; 0x60
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    24d8:	60dc      	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    24da:	611e      	str	r6, [r3, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    24dc:	6158      	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    24de:	6199      	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    24e0:	61da      	str	r2, [r3, #28]

	I2S1_RMR = 0;
    24e2:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    24e6:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
    24ea:	f104 64e0 	add.w	r4, r4, #117440512	; 0x7000000
    24ee:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
    24f2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
    24f6:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    24fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

#endif
}
    24fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if (!only_bclk) // if previous transmitter/receiver only activated BCLK, activate the other clock pins now
    2500:	2d00      	cmp	r5, #0
    2502:	d1fc      	bne.n	24fe <AudioOutputI2S::config_i2s(bool)+0xa2>
	    CORE_PIN23_CONFIG = 3;  //1:MCLK
    2504:	4b08      	ldr	r3, [pc, #32]	; (2528 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    2506:	2203      	movs	r2, #3
    2508:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC (LRCLK)
    250c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
    2510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2512:	bf00      	nop
    2514:	400fc000 	.word	0x400fc000
    2518:	40384000 	.word	0x40384000
    251c:	fffffe00 	.word	0xfffffe00
    2520:	400ac000 	.word	0x400ac000
    2524:	fff7fff8 	.word	0xfff7fff8
    2528:	401f8000 	.word	0x401f8000
    252c:	00011f1b 	.word	0x00011f1b
    2530:	1f1f1f00 	.word	0x1f1f1f00
    2534:	47000001 	.word	0x47000001

00002538 <AudioOutputI2S::begin()>:
{
    2538:	b570      	push	{r4, r5, r6, lr}
	dma.begin(true); // Allocate the DMA channel first
    253a:	4d26      	ldr	r5, [pc, #152]	; (25d4 <AudioOutputI2S::begin()+0x9c>)
	block_left_1st = NULL;
    253c:	2400      	movs	r4, #0
	dma.begin(true); // Allocate the DMA channel first
    253e:	2101      	movs	r1, #1
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    2540:	4e25      	ldr	r6, [pc, #148]	; (25d8 <AudioOutputI2S::begin()+0xa0>)
	dma.begin(true); // Allocate the DMA channel first
    2542:	4628      	mov	r0, r5
    2544:	f008 fff4 	bl	b530 <DMAChannel::begin(bool)>
	block_left_1st = NULL;
    2548:	4a24      	ldr	r2, [pc, #144]	; (25dc <AudioOutputI2S::begin()+0xa4>)
	block_right_1st = NULL;
    254a:	4b25      	ldr	r3, [pc, #148]	; (25e0 <AudioOutputI2S::begin()+0xa8>)
	config_i2s();
    254c:	4620      	mov	r0, r4
	block_left_1st = NULL;
    254e:	6014      	str	r4, [r2, #0]
	block_right_1st = NULL;
    2550:	601c      	str	r4, [r3, #0]
	config_i2s();
    2552:	f7ff ff83 	bl	245c <AudioOutputI2S::config_i2s(bool)>
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    2556:	4b23      	ldr	r3, [pc, #140]	; (25e4 <AudioOutputI2S::begin()+0xac>)
    2558:	2103      	movs	r1, #3
	dma.TCD->SADDR = i2s_tx_buffer;
    255a:	4a23      	ldr	r2, [pc, #140]	; (25e8 <AudioOutputI2S::begin()+0xb0>)
	dma.TCD->NBYTES_MLNO = 2;
    255c:	2002      	movs	r0, #2
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    255e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	dma.TCD->SADDR = i2s_tx_buffer;
    2562:	682b      	ldr	r3, [r5, #0]
	dma.TCD->SOFF = 2;
    2564:	4921      	ldr	r1, [pc, #132]	; (25ec <AudioOutputI2S::begin()+0xb4>)
	dma.TCD->SADDR = i2s_tx_buffer;
    2566:	601a      	str	r2, [r3, #0]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    2568:	f44f 7280 	mov.w	r2, #256	; 0x100
	dma.TCD->DLASTSGA = 0;
    256c:	619c      	str	r4, [r3, #24]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    256e:	82da      	strh	r2, [r3, #22]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    2570:	83da      	strh	r2, [r3, #30]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2572:	2206      	movs	r2, #6
	dma.TCD->DOFF = 0;
    2574:	829c      	strh	r4, [r3, #20]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2576:	839a      	strh	r2, [r3, #28]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    2578:	4a1d      	ldr	r2, [pc, #116]	; (25f0 <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    257a:	60de      	str	r6, [r3, #12]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    257c:	611a      	str	r2, [r3, #16]
	dma.TCD->SOFF = 2;
    257e:	e9c3 1001 	strd	r1, r0, [r3, #4]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    2582:	7929      	ldrb	r1, [r5, #4]
    2584:	481b      	ldr	r0, [pc, #108]	; (25f4 <AudioOutputI2S::begin()+0xbc>)
    2586:	fa0f fc81 	sxth.w	ip, r1
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    258a:	4b1b      	ldr	r3, [pc, #108]	; (25f8 <AudioOutputI2S::begin()+0xc0>)
		*mux = 0;
    258c:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    2590:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
		DMA_SERQ = channel;
    2594:	4b19      	ldr	r3, [pc, #100]	; (25fc <AudioOutputI2S::begin()+0xc4>)
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    2596:	481a      	ldr	r0, [pc, #104]	; (2600 <AudioOutputI2S::begin()+0xc8>)
    2598:	76d9      	strb	r1, [r3, #27]
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    259a:	f8d2 3066 	ldr.w	r3, [r2, #102]	; 0x66
	update_responsibility = update_setup();
    259e:	4c19      	ldr	r4, [pc, #100]	; (2604 <AudioOutputI2S::begin()+0xcc>)
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    25a0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    25a4:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    25a8:	f842 0c1a 	str.w	r0, [r2, #-26]
	update_responsibility = update_setup();
    25ac:	f008 ff9e 	bl	b4ec <AudioStream::update_setup()>
    25b0:	792a      	ldrb	r2, [r5, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    25b2:	4b15      	ldr	r3, [pc, #84]	; (2608 <AudioOutputI2S::begin()+0xd0>)
    25b4:	2101      	movs	r1, #1
    25b6:	7020      	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    25b8:	f102 0010 	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    25bc:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    25c0:	f002 021f 	and.w	r2, r2, #31
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    25c4:	4c11      	ldr	r4, [pc, #68]	; (260c <AudioOutputI2S::begin()+0xd4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    25c6:	4091      	lsls	r1, r2
    25c8:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    25ca:	4a11      	ldr	r2, [pc, #68]	; (2610 <AudioOutputI2S::begin()+0xd8>)
    25cc:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    25d0:	6019      	str	r1, [r3, #0]
}
    25d2:	bd70      	pop	{r4, r5, r6, pc}
    25d4:	20004808 	.word	0x20004808
    25d8:	fffffe00 	.word	0xfffffe00
    25dc:	200047f8 	.word	0x200047f8
    25e0:	20004800 	.word	0x20004800
    25e4:	401f8000 	.word	0x401f8000
    25e8:	20219fa0 	.word	0x20219fa0
    25ec:	01010002 	.word	0x01010002
    25f0:	40384022 	.word	0x40384022
    25f4:	400ec000 	.word	0x400ec000
    25f8:	80000014 	.word	0x80000014
    25fc:	400e8000 	.word	0x400e8000
    2600:	90000001 	.word	0x90000001
    2604:	200086f2 	.word	0x200086f2
    2608:	38003840 	.word	0x38003840
    260c:	00002281 	.word	0x00002281
    2610:	20003800 	.word	0x20003800

00002614 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
DMAChannel AudioOutputI2S::dma(false);
    2614:	4a02      	ldr	r2, [pc, #8]	; (2620 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    2616:	4903      	ldr	r1, [pc, #12]	; (2624 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2618:	4803      	ldr	r0, [pc, #12]	; (2628 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    261a:	f00b b93f 	b.w	d89c <__aeabi_atexit>
    261e:	bf00      	nop
    2620:	20002f34 	.word	0x20002f34
    2624:	000018a9 	.word	0x000018a9
    2628:	20004808 	.word	0x20004808

0000262c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    262c:	4a02      	ldr	r2, [pc, #8]	; (2638 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    262e:	4903      	ldr	r1, [pc, #12]	; (263c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    2630:	4803      	ldr	r0, [pc, #12]	; (2640 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    2632:	f00b b933 	b.w	d89c <__aeabi_atexit>
    2636:	bf00      	nop
    2638:	20002f34 	.word	0x20002f34
    263c:	000018a9 	.word	0x000018a9
    2640:	20004840 	.word	0x20004840

00002644 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    2644:	4a02      	ldr	r2, [pc, #8]	; (2650 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    2646:	4903      	ldr	r1, [pc, #12]	; (2654 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    2648:	4803      	ldr	r0, [pc, #12]	; (2658 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    264a:	f00b b927 	b.w	d89c <__aeabi_atexit>
    264e:	bf00      	nop
    2650:	20002f34 	.word	0x20002f34
    2654:	000018a9 	.word	0x000018a9
    2658:	20004880 	.word	0x20004880

0000265c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    265c:	4a02      	ldr	r2, [pc, #8]	; (2668 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    265e:	4903      	ldr	r1, [pc, #12]	; (266c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    2660:	4803      	ldr	r0, [pc, #12]	; (2670 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    2662:	f00b b91b 	b.w	d89c <__aeabi_atexit>
    2666:	bf00      	nop
    2668:	20002f34 	.word	0x20002f34
    266c:	000018a9 	.word	0x000018a9
    2670:	20004888 	.word	0x20004888

00002674 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    2674:	4a02      	ldr	r2, [pc, #8]	; (2680 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    2676:	4903      	ldr	r1, [pc, #12]	; (2684 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    2678:	4803      	ldr	r0, [pc, #12]	; (2688 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    267a:	f00b b90f 	b.w	d89c <__aeabi_atexit>
    267e:	bf00      	nop
    2680:	20002f34 	.word	0x20002f34
    2684:	000018a9 	.word	0x000018a9
    2688:	200048a8 	.word	0x200048a8

0000268c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    268c:	4a02      	ldr	r2, [pc, #8]	; (2698 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    268e:	4903      	ldr	r1, [pc, #12]	; (269c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    2690:	4803      	ldr	r0, [pc, #12]	; (26a0 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    2692:	f00b b903 	b.w	d89c <__aeabi_atexit>
    2696:	bf00      	nop
    2698:	20002f34 	.word	0x20002f34
    269c:	000018a9 	.word	0x000018a9
    26a0:	20004810 	.word	0x20004810

000026a4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    26a4:	4a02      	ldr	r2, [pc, #8]	; (26b0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    26a6:	4903      	ldr	r1, [pc, #12]	; (26b4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    26a8:	4803      	ldr	r0, [pc, #12]	; (26b8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    26aa:	f00b b8f7 	b.w	d89c <__aeabi_atexit>
    26ae:	bf00      	nop
    26b0:	20002f34 	.word	0x20002f34
    26b4:	000018a9 	.word	0x000018a9
    26b8:	20004890 	.word	0x20004890

000026bc <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    26bc:	4a02      	ldr	r2, [pc, #8]	; (26c8 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    26be:	4903      	ldr	r1, [pc, #12]	; (26cc <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    26c0:	4803      	ldr	r0, [pc, #12]	; (26d0 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    26c2:	f00b b8eb 	b.w	d89c <__aeabi_atexit>
    26c6:	bf00      	nop
    26c8:	20002f34 	.word	0x20002f34
    26cc:	000018a9 	.word	0x000018a9
    26d0:	200048b0 	.word	0x200048b0

000026d4 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    26d4:	b510      	push	{r4, lr}
		release();
    26d6:	4c05      	ldr	r4, [pc, #20]	; (26ec <__tcf_0+0x18>)
    26d8:	f104 0008 	add.w	r0, r4, #8
    26dc:	f008 ff82 	bl	b5e4 <DMAChannel::release()>
    26e0:	4620      	mov	r0, r4
    26e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    26e6:	f008 bf7d 	b.w	b5e4 <DMAChannel::release()>
    26ea:	bf00      	nop
    26ec:	20004818 	.word	0x20004818

000026f0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    26f0:	b510      	push	{r4, lr}
		begin();
    26f2:	4c08      	ldr	r4, [pc, #32]	; (2714 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    26f4:	2100      	movs	r1, #0
    26f6:	4620      	mov	r0, r4
    26f8:	f008 ff1a 	bl	b530 <DMAChannel::begin(bool)>
    26fc:	f104 0008 	add.w	r0, r4, #8
    2700:	2100      	movs	r1, #0
    2702:	f008 ff15 	bl	b530 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    2706:	4a04      	ldr	r2, [pc, #16]	; (2718 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    2708:	4904      	ldr	r1, [pc, #16]	; (271c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    270a:	2000      	movs	r0, #0
}
    270c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    2710:	f00b b8c4 	b.w	d89c <__aeabi_atexit>
    2714:	20004818 	.word	0x20004818
    2718:	20002f34 	.word	0x20002f34
    271c:	000026d5 	.word	0x000026d5

00002720 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    2720:	4a02      	ldr	r2, [pc, #8]	; (272c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    2722:	4903      	ldr	r1, [pc, #12]	; (2730 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    2724:	4803      	ldr	r0, [pc, #12]	; (2734 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    2726:	f00b b8b9 	b.w	d89c <__aeabi_atexit>
    272a:	bf00      	nop
    272c:	20002f34 	.word	0x20002f34
    2730:	000018a9 	.word	0x000018a9
    2734:	20004870 	.word	0x20004870

00002738 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    2738:	4a02      	ldr	r2, [pc, #8]	; (2744 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    273a:	4903      	ldr	r1, [pc, #12]	; (2748 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    273c:	4803      	ldr	r0, [pc, #12]	; (274c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    273e:	f00b b8ad 	b.w	d89c <__aeabi_atexit>
    2742:	bf00      	nop
    2744:	20002f34 	.word	0x20002f34
    2748:	000018a9 	.word	0x000018a9
    274c:	20004898 	.word	0x20004898

00002750 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    2750:	4a02      	ldr	r2, [pc, #8]	; (275c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    2752:	4903      	ldr	r1, [pc, #12]	; (2760 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    2754:	4803      	ldr	r0, [pc, #12]	; (2764 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    2756:	f00b b8a1 	b.w	d89c <__aeabi_atexit>
    275a:	bf00      	nop
    275c:	20002f34 	.word	0x20002f34
    2760:	000018a9 	.word	0x000018a9
    2764:	200048a0 	.word	0x200048a0

00002768 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    2768:	4a02      	ldr	r2, [pc, #8]	; (2774 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    276a:	4903      	ldr	r1, [pc, #12]	; (2778 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    276c:	4803      	ldr	r0, [pc, #12]	; (277c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    276e:	f00b b895 	b.w	d89c <__aeabi_atexit>
    2772:	bf00      	nop
    2774:	20002f34 	.word	0x20002f34
    2778:	000018a9 	.word	0x000018a9
    277c:	20004828 	.word	0x20004828

00002780 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    2780:	4a02      	ldr	r2, [pc, #8]	; (278c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    2782:	4903      	ldr	r1, [pc, #12]	; (2790 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    2784:	4803      	ldr	r0, [pc, #12]	; (2794 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    2786:	f00b b889 	b.w	d89c <__aeabi_atexit>
    278a:	bf00      	nop
    278c:	20002f34 	.word	0x20002f34
    2790:	000018a9 	.word	0x000018a9
    2794:	20004848 	.word	0x20004848

00002798 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    2798:	2000      	movs	r0, #0
    279a:	4770      	bx	lr

0000279c <Print::flush()>:
	virtual void flush()				{ }
    279c:	4770      	bx	lr
    279e:	bf00      	nop

000027a0 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    27a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
    27a2:	b10b      	cbz	r3, 27a8 <SDFile::isOpen()+0x8>
    27a4:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
    27a6:	4770      	bx	lr
    27a8:	6d40      	ldr	r0, [r0, #84]	; 0x54
    27aa:	3800      	subs	r0, #0
    27ac:	bf18      	it	ne
    27ae:	2001      	movne	r0, #1
    27b0:	4770      	bx	lr
    27b2:	bf00      	nop

000027b4 <SDFile::close()>:
	virtual void close() {
    27b4:	b510      	push	{r4, lr}
    27b6:	4604      	mov	r4, r0
		if (filename) {
    27b8:	6d80      	ldr	r0, [r0, #88]	; 0x58
    27ba:	b118      	cbz	r0, 27c4 <SDFile::close()+0x10>
			free(filename);
    27bc:	f00b f87c 	bl	d8b8 <free>
			filename = nullptr;
    27c0:	2300      	movs	r3, #0
    27c2:	65a3      	str	r3, [r4, #88]	; 0x58
    27c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    27c6:	b12b      	cbz	r3, 27d4 <SDFile::close()+0x20>
			sdfatfile.close();
    27c8:	f104 0018 	add.w	r0, r4, #24
	}
    27cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
    27d0:	f005 bdb4 	b.w	833c <FsBaseFile::close()>
    27d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    27d6:	2b00      	cmp	r3, #0
    27d8:	d1f6      	bne.n	27c8 <SDFile::close()+0x14>
	}
    27da:	bd10      	pop	{r4, pc}

000027dc <SDFile::name()>:
	virtual const char * name() {
    27dc:	b510      	push	{r4, lr}
    27de:	4604      	mov	r4, r0
		if (!filename) {
    27e0:	6d80      	ldr	r0, [r0, #88]	; 0x58
    27e2:	b100      	cbz	r0, 27e6 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
    27e4:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
    27e6:	f44f 7080 	mov.w	r0, #256	; 0x100
    27ea:	f00b f85d 	bl	d8a8 <malloc>
    27ee:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
    27f0:	b1b0      	cbz	r0, 2820 <SDFile::name()+0x44>
    *name = 0;
    27f2:	2200      	movs	r2, #0
    return m_fFile ? m_fFile->getName(name, len) :
    27f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
    27f6:	7002      	strb	r2, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
    27f8:	b13b      	cbz	r3, 280a <SDFile::name()+0x2e>
    27fa:	4601      	mov	r1, r0
    27fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    2800:	4618      	mov	r0, r3
    2802:	f005 f9eb 	bl	7bdc <FatFile::getName(char*, unsigned int)>
		return filename;
    2806:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
    2808:	bd10      	pop	{r4, pc}
    280a:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
    280c:	2b00      	cmp	r3, #0
    280e:	d0e9      	beq.n	27e4 <SDFile::name()+0x8>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    2810:	4601      	mov	r1, r0
    2812:	f44f 7280 	mov.w	r2, #256	; 0x100
    2816:	4618      	mov	r0, r3
    2818:	f002 fe8e 	bl	5538 <ExFatFile::getName8(char*, unsigned int)>
		return filename;
    281c:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
    281e:	bd10      	pop	{r4, pc}
				filename = &zeroterm;
    2820:	4b01      	ldr	r3, [pc, #4]	; (2828 <SDFile::name()+0x4c>)
    2822:	4618      	mov	r0, r3
    2824:	65a3      	str	r3, [r4, #88]	; 0x58
	}
    2826:	bd10      	pop	{r4, pc}
    2828:	200086f6 	.word	0x200086f6

0000282c <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
    282c:	b538      	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
    282e:	6d05      	ldr	r5, [r0, #80]	; 0x50
    2830:	b16d      	cbz	r5, 284e <SDFile::truncate(unsigned long long)+0x22>
    2832:	b10b      	cbz	r3, 2838 <SDFile::truncate(unsigned long long)+0xc>
	}
    2834:	2000      	movs	r0, #0
    2836:	bd38      	pop	{r3, r4, r5, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
    2838:	4611      	mov	r1, r2
    283a:	4628      	mov	r0, r5
    283c:	f003 ff0a 	bl	6654 <FatFile::seekSet(unsigned long)>
    2840:	2800      	cmp	r0, #0
    2842:	d0f7      	beq.n	2834 <SDFile::truncate(unsigned long long)+0x8>
    2844:	4628      	mov	r0, r5
    2846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    284a:	f004 b8a5 	b.w	6998 <FatFile::truncate()>
    284e:	6d44      	ldr	r4, [r0, #84]	; 0x54
           m_xFile ? m_xFile->truncate(length) : false;
    2850:	2c00      	cmp	r4, #0
    2852:	d0ef      	beq.n	2834 <SDFile::truncate(unsigned long long)+0x8>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    2854:	4620      	mov	r0, r4
    2856:	f001 fac1 	bl	3ddc <ExFatFile::seekSet(unsigned long long)>
    285a:	2800      	cmp	r0, #0
    285c:	d0ea      	beq.n	2834 <SDFile::truncate(unsigned long long)+0x8>
    285e:	4620      	mov	r0, r4
    2860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2864:	f002 b934 	b.w	4ad0 <ExFatFile::truncate()>

00002868 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
    2868:	798a      	ldrb	r2, [r1, #6]
    286a:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
    286e:	061b      	lsls	r3, r3, #24
    2870:	d422      	bmi.n	28b8 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    2872:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
    2876:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    2878:	794b      	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
    287a:	b085      	sub	sp, #20
    return m_fFile ?
    287c:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    287e:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    2880:	790d      	ldrb	r5, [r1, #4]
    2882:	788e      	ldrb	r6, [r1, #2]
    2884:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    2886:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    2888:	7809      	ldrb	r1, [r1, #0]
    288a:	b14c      	cbz	r4, 28a0 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
    288c:	4620      	mov	r0, r4
    288e:	9601      	str	r6, [sp, #4]
    2890:	9500      	str	r5, [sp, #0]
    2892:	e9cd 7102 	strd	r7, r1, [sp, #8]
    2896:	2104      	movs	r1, #4
    2898:	f004 f812 	bl	68c0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    289c:	b005      	add	sp, #20
    289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28a0:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
    28a2:	2800      	cmp	r0, #0
    28a4:	d0fa      	beq.n	289c <SDFile::setModifyTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
    28a6:	9601      	str	r6, [sp, #4]
    28a8:	9500      	str	r5, [sp, #0]
    28aa:	e9cd 7102 	strd	r7, r1, [sp, #8]
    28ae:	2104      	movs	r1, #4
    28b0:	f002 f852 	bl	4958 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    28b4:	b005      	add	sp, #20
    28b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    28b8:	2000      	movs	r0, #0
	}
    28ba:	4770      	bx	lr

000028bc <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
    28bc:	b510      	push	{r4, lr}
    28be:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
    28c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
    28c2:	b180      	cbz	r0, 28e6 <SDFile::rewindDirectory()+0x2a>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    28c4:	7803      	ldrb	r3, [r0, #0]
    28c6:	f013 0f70 	tst.w	r3, #112	; 0x70
    28ca:	d100      	bne.n	28ce <SDFile::rewindDirectory()+0x12>
	}
    28cc:	bd10      	pop	{r4, pc}
    seekSet(0);
    28ce:	2100      	movs	r1, #0
    28d0:	f003 fec0 	bl	6654 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
    28d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    28d6:	2800      	cmp	r0, #0
    28d8:	d0f8      	beq.n	28cc <SDFile::rewindDirectory()+0x10>
    seekSet(0);
    28da:	2200      	movs	r2, #0
    28dc:	2300      	movs	r3, #0
    28de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    28e2:	f001 ba7b 	b.w	3ddc <ExFatFile::seekSet(unsigned long long)>
    28e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
    28e8:	2800      	cmp	r0, #0
    28ea:	d0ef      	beq.n	28cc <SDFile::rewindDirectory()+0x10>
    28ec:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    28f0:	f013 0f50 	tst.w	r3, #80	; 0x50
    28f4:	d0ea      	beq.n	28cc <SDFile::rewindDirectory()+0x10>
    28f6:	2200      	movs	r2, #0
    28f8:	2300      	movs	r3, #0
    28fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    28fe:	f001 ba6d 	b.w	3ddc <ExFatFile::seekSet(unsigned long long)>
    2902:	bf00      	nop

00002904 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    2904:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
    2906:	b510      	push	{r4, lr}
    2908:	460c      	mov	r4, r1
    290a:	b082      	sub	sp, #8
    290c:	b32b      	cbz	r3, 295a <SDFile::getModifyTime(DateTimeFields&)+0x56>
    290e:	f10d 0206 	add.w	r2, sp, #6
    2912:	a901      	add	r1, sp, #4
    2914:	4618      	mov	r0, r3
    2916:	f003 fa43 	bl	5da0 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    291a:	b338      	cbz	r0, 296c <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    291c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2920:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2924:	ea53 0102 	orrs.w	r1, r3, r2
    2928:	d020      	beq.n	296c <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
    292a:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    292e:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
    2932:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
    2934:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
    2938:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
    293a:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
    293e:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
    2940:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    2942:	3901      	subs	r1, #1
  return fatDate & 0X1F;
    2944:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
    2948:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
    294c:	7020      	strb	r0, [r4, #0]
		return true;
    294e:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
    2950:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
    2952:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
    2954:	71a2      	strb	r2, [r4, #6]
	}
    2956:	b002      	add	sp, #8
    2958:	bd10      	pop	{r4, pc}
    295a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    295c:	b130      	cbz	r0, 296c <SDFile::getModifyTime(DateTimeFields&)+0x68>
    295e:	f10d 0206 	add.w	r2, sp, #6
    2962:	a901      	add	r1, sp, #4
    2964:	f001 f8e0 	bl	3b28 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    2968:	2800      	cmp	r0, #0
    296a:	d1d7      	bne.n	291c <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    296c:	2000      	movs	r0, #0
	}
    296e:	b002      	add	sp, #8
    2970:	bd10      	pop	{r4, pc}
    2972:	bf00      	nop

00002974 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    2974:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
    2976:	b510      	push	{r4, lr}
    2978:	460c      	mov	r4, r1
    297a:	b082      	sub	sp, #8
    297c:	b32b      	cbz	r3, 29ca <SDFile::getCreateTime(DateTimeFields&)+0x56>
    297e:	f10d 0206 	add.w	r2, sp, #6
    2982:	a901      	add	r1, sp, #4
    2984:	4618      	mov	r0, r3
    2986:	f003 f9fb 	bl	5d80 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    298a:	b338      	cbz	r0, 29dc <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    298c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2990:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2994:	ea53 0102 	orrs.w	r1, r3, r2
    2998:	d020      	beq.n	29dc <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
    299a:	f3c2 1c45 	ubfx	ip, r2, #5, #6
  return 2*(fatTime & 0X1F);
    299e:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
    29a2:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
    29a4:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
    29a8:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
    29aa:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
    29ae:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
    29b0:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    29b2:	3901      	subs	r1, #1
  return fatDate & 0X1F;
    29b4:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
    29b8:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
    29bc:	7020      	strb	r0, [r4, #0]
		return true;
    29be:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
    29c0:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
    29c2:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
    29c4:	71a2      	strb	r2, [r4, #6]
	}
    29c6:	b002      	add	sp, #8
    29c8:	bd10      	pop	{r4, pc}
    29ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    29cc:	b130      	cbz	r0, 29dc <SDFile::getCreateTime(DateTimeFields&)+0x68>
    29ce:	f10d 0206 	add.w	r2, sp, #6
    29d2:	a901      	add	r1, sp, #4
    29d4:	f001 f896 	bl	3b04 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    29d8:	2800      	cmp	r0, #0
    29da:	d1d7      	bne.n	298c <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    29dc:	2000      	movs	r0, #0
	}
    29de:	b002      	add	sp, #8
    29e0:	bd10      	pop	{r4, pc}
    29e2:	bf00      	nop

000029e4 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
    29e4:	6903      	ldr	r3, [r0, #16]
    29e6:	b1d3      	cbz	r3, 2a1e <File::write(unsigned char const*, unsigned int)+0x3a>
    29e8:	480e      	ldr	r0, [pc, #56]	; (2a24 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
    29ea:	b410      	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
    29ec:	681c      	ldr	r4, [r3, #0]
    29ee:	68e4      	ldr	r4, [r4, #12]
    29f0:	4284      	cmp	r4, r0
    29f2:	d10f      	bne.n	2a14 <File::write(unsigned char const*, unsigned int)+0x30>
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
    29f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
    29f6:	b118      	cbz	r0, 2a00 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
    29f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    29fc:	f004 b806 	b.w	6a0c <FatFile::write(void const*, unsigned int)>
    2a00:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    2a02:	b118      	cbz	r0, 2a0c <File::write(unsigned char const*, unsigned int)+0x28>
    2a04:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a08:	f002 b8d4 	b.w	4bb4 <ExFatFile::write(void const*, unsigned int)>
    2a0c:	2000      	movs	r0, #0
    2a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a12:	4770      	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
    2a14:	4618      	mov	r0, r3
    2a16:	4623      	mov	r3, r4
	}
    2a18:	f85d 4b04 	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
    2a1c:	4718      	bx	r3
	}
    2a1e:	2000      	movs	r0, #0
    2a20:	4770      	bx	lr
    2a22:	bf00      	nop
    2a24:	00002ced 	.word	0x00002ced

00002a28 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
    2a28:	6900      	ldr	r0, [r0, #16]
    2a2a:	b190      	cbz	r0, 2a52 <File::available()+0x2a>
    2a2c:	6803      	ldr	r3, [r0, #0]
    2a2e:	4a15      	ldr	r2, [pc, #84]	; (2a84 <File::available()+0x5c>)
    2a30:	691b      	ldr	r3, [r3, #16]
    2a32:	4293      	cmp	r3, r2
    2a34:	d125      	bne.n	2a82 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() :
    2a36:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2a38:	b163      	cbz	r3, 2a54 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
    2a3a:	7818      	ldrb	r0, [r3, #0]
    2a3c:	f010 0008 	ands.w	r0, r0, #8
    2a40:	d007      	beq.n	2a52 <File::available()+0x2a>
    2a42:	69d8      	ldr	r0, [r3, #28]
    2a44:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    2a46:	1ac0      	subs	r0, r0, r3
    2a48:	bf48      	it	mi
    2a4a:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    2a4e:	4770      	bx	lr
    2a50:	4618      	mov	r0, r3
	}
    2a52:	4770      	bx	lr
    2a54:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    2a56:	2b00      	cmp	r3, #0
    2a58:	d0fa      	beq.n	2a50 <File::available()+0x28>
    return isFile() ? fileSize() - curPosition() : 0;
    2a5a:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    2a5e:	f010 0008 	ands.w	r0, r0, #8
    2a62:	d0f6      	beq.n	2a52 <File::available()+0x2a>
    2a64:	6918      	ldr	r0, [r3, #16]
    2a66:	6819      	ldr	r1, [r3, #0]
    2a68:	695a      	ldr	r2, [r3, #20]
    2a6a:	1a40      	subs	r0, r0, r1
    2a6c:	685b      	ldr	r3, [r3, #4]
    2a6e:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    2a72:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    2a76:	f173 0300 	sbcs.w	r3, r3, #0
    2a7a:	d3ea      	bcc.n	2a52 <File::available()+0x2a>
    2a7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2a80:	4770      	bx	lr
		return (f) ? f->available() : 0;
    2a82:	4718      	bx	r3
    2a84:	00002de9 	.word	0x00002de9

00002a88 <File::flush()>:
	int peek() {
		return (f) ? f->peek() : -1;
	}
	void flush() {
		if (f) f->flush();
    2a88:	6903      	ldr	r3, [r0, #16]
    2a8a:	b163      	cbz	r3, 2aa6 <File::flush()+0x1e>
    2a8c:	681a      	ldr	r2, [r3, #0]
    2a8e:	4907      	ldr	r1, [pc, #28]	; (2aac <File::flush()+0x24>)
    2a90:	6992      	ldr	r2, [r2, #24]
    2a92:	428a      	cmp	r2, r1
    2a94:	d108      	bne.n	2aa8 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() :
    2a96:	6d18      	ldr	r0, [r3, #80]	; 0x50
    2a98:	b108      	cbz	r0, 2a9e <File::flush()+0x16>
    2a9a:	f003 bf0b 	b.w	68b4 <FatFile::sync()>
    2a9e:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
    2aa0:	b108      	cbz	r0, 2aa6 <File::flush()+0x1e>
    2aa2:	f001 bde3 	b.w	466c <ExFatFile::sync()>
	}
    2aa6:	4770      	bx	lr
		if (f) f->flush();
    2aa8:	4618      	mov	r0, r3
    2aaa:	4710      	bx	r2
    2aac:	00002c6d 	.word	0x00002c6d

00002ab0 <File::peek()>:
		return (f) ? f->peek() : -1;
    2ab0:	6903      	ldr	r3, [r0, #16]
    2ab2:	b173      	cbz	r3, 2ad2 <File::peek()+0x22>
    2ab4:	681a      	ldr	r2, [r3, #0]
    2ab6:	4908      	ldr	r1, [pc, #32]	; (2ad8 <File::peek()+0x28>)
    2ab8:	6952      	ldr	r2, [r2, #20]
    2aba:	428a      	cmp	r2, r1
    2abc:	d107      	bne.n	2ace <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() :
    2abe:	6d18      	ldr	r0, [r3, #80]	; 0x50
    2ac0:	b108      	cbz	r0, 2ac6 <File::peek()+0x16>
    2ac2:	f003 bc53 	b.w	636c <FatFile::peek()>
    2ac6:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
    2ac8:	b118      	cbz	r0, 2ad2 <File::peek()+0x22>
    2aca:	f001 b971 	b.w	3db0 <ExFatFile::peek()>
    2ace:	4618      	mov	r0, r3
    2ad0:	4710      	bx	r2
	}
    2ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ad6:	4770      	bx	lr
    2ad8:	00002bc5 	.word	0x00002bc5

00002adc <SDFile::position()>:
    return m_fFile ? m_fFile->curPosition() :
    2adc:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2ade:	b113      	cbz	r3, 2ae6 <SDFile::position()+0xa>
    2ae0:	6958      	ldr	r0, [r3, #20]
    2ae2:	2100      	movs	r1, #0
    2ae4:	4770      	bx	lr
    2ae6:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
    2ae8:	b113      	cbz	r3, 2af0 <SDFile::position()+0x14>
  uint64_t curPosition() const {return m_curPosition;}
    2aea:	e9d3 0100 	ldrd	r0, r1, [r3]
    2aee:	4770      	bx	lr
    2af0:	4618      	mov	r0, r3
    2af2:	4619      	mov	r1, r3
	}
    2af4:	4770      	bx	lr
    2af6:	bf00      	nop

00002af8 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() :
    2af8:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2afa:	b113      	cbz	r3, 2b02 <SDFile::size()+0xa>
    2afc:	69d8      	ldr	r0, [r3, #28]
    2afe:	2100      	movs	r1, #0
    2b00:	4770      	bx	lr
    2b02:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
    2b04:	b113      	cbz	r3, 2b0c <SDFile::size()+0x14>
  uint64_t fileSize() const {return m_validLength;}
    2b06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    2b0a:	4770      	bx	lr
    2b0c:	4618      	mov	r0, r3
    2b0e:	4619      	mov	r1, r3
	}
    2b10:	4770      	bx	lr
    2b12:	bf00      	nop

00002b14 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
    2b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b16:	b095      	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
    2b18:	2200      	movs	r2, #0
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2b1a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2b1e:	4f24      	ldr	r7, [pc, #144]	; (2bb0 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    2b20:	3118      	adds	r1, #24
    2b22:	4605      	mov	r5, r0
    2b24:	a804      	add	r0, sp, #16
    2b26:	f88d 200c 	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2b2a:	9700      	str	r7, [sp, #0]
    2b2c:	e9cd 2401 	strd	r2, r4, [sp, #4]
  FsBaseFile() {}
    2b30:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
    2b34:	f005 fc6e 	bl	8414 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	d02d      	beq.n	2b9a <SDFile::openNextFile(unsigned char)+0x86>
		if (file) return File(new SDFile(file));
    2b3e:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    2b40:	2600      	movs	r6, #0
    2b42:	f009 fa47 	bl	bfd4 <operator new(unsigned int)>
class Print
    2b46:	9b01      	ldr	r3, [sp, #4]
    2b48:	4604      	mov	r4, r0
    2b4a:	6046      	str	r6, [r0, #4]
    2b4c:	60c3      	str	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
    2b4e:	a904      	add	r1, sp, #16
class Stream : public Print
    2b50:	9b02      	ldr	r3, [sp, #8]
    2b52:	3018      	adds	r0, #24
    2b54:	f840 3c08 	str.w	r3, [r0, #-8]
    2b58:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2b5c:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2b60:	4b14      	ldr	r3, [pc, #80]	; (2bb4 <SDFile::openNextFile(unsigned char)+0xa0>)
    2b62:	f840 3c18 	str.w	r3, [r0, #-24]
    2b66:	4b14      	ldr	r3, [pc, #80]	; (2bb8 <SDFile::openNextFile(unsigned char)+0xa4>)
    2b68:	f840 3c10 	str.w	r3, [r0, #-16]
    2b6c:	f005 fba4 	bl	82b8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
    2b70:	4b12      	ldr	r3, [pc, #72]	; (2bbc <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2b76:	60a7      	str	r7, [r4, #8]
    2b78:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    2b7a:	6863      	ldr	r3, [r4, #4]
    2b7c:	65a6      	str	r6, [r4, #88]	; 0x58
    2b7e:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
    2b80:	606e      	str	r6, [r5, #4]
    2b82:	732e      	strb	r6, [r5, #12]
    2b84:	60aa      	str	r2, [r5, #8]
		f = file;
    2b86:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    2b88:	6063      	str	r3, [r4, #4]
    2b8a:	4b0d      	ldr	r3, [pc, #52]	; (2bc0 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() {close();}
    2b8c:	a804      	add	r0, sp, #16
    2b8e:	9300      	str	r3, [sp, #0]
    2b90:	f005 fbd4 	bl	833c <FsBaseFile::close()>
	}
    2b94:	4628      	mov	r0, r5
    2b96:	b015      	add	sp, #84	; 0x54
    2b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    2b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d1ce      	bne.n	2b3e <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
    2ba0:	4a06      	ldr	r2, [pc, #24]	; (2bbc <SDFile::openNextFile(unsigned char)+0xa8>)
    2ba2:	732b      	strb	r3, [r5, #12]
    2ba4:	602a      	str	r2, [r5, #0]
    2ba6:	612b      	str	r3, [r5, #16]
    2ba8:	e9c5 3401 	strd	r3, r4, [r5, #4]
    2bac:	e7ed      	b.n	2b8a <SDFile::openNextFile(unsigned char)+0x76>
    2bae:	bf00      	nop
    2bb0:	200021e0 	.word	0x200021e0
    2bb4:	20002204 	.word	0x20002204
    2bb8:	20002260 	.word	0x20002260
    2bbc:	20002194 	.word	0x20002194
    2bc0:	20002054 	.word	0x20002054

00002bc4 <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() :
    2bc4:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2bc6:	b113      	cbz	r3, 2bce <SDFile::peek()+0xa>
    2bc8:	4618      	mov	r0, r3
    2bca:	f003 bbcf 	b.w	636c <FatFile::peek()>
    2bce:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
    2bd0:	b108      	cbz	r0, 2bd6 <SDFile::peek()+0x12>
    2bd2:	f001 b8ed 	b.w	3db0 <ExFatFile::peek()>
	}
    2bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2bda:	4770      	bx	lr

00002bdc <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
    2bdc:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2bde:	b113      	cbz	r3, 2be6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
    2be0:	4618      	mov	r0, r3
    2be2:	f003 bbc3 	b.w	636c <FatFile::peek()>
    2be6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
    2be8:	b108      	cbz	r0, 2bee <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
    2bea:	f001 b8e1 	b.w	3db0 <ExFatFile::peek()>
  }
    2bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2bf2:	4770      	bx	lr

00002bf4 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
    2bf4:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2bf6:	b133      	cbz	r3, 2c06 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    2bf8:	781b      	ldrb	r3, [r3, #0]
    2bfa:	f013 0f70 	tst.w	r3, #112	; 0x70
    2bfe:	bf14      	ite	ne
    2c00:	2001      	movne	r0, #1
    2c02:	2000      	moveq	r0, #0
    2c04:	4770      	bx	lr
    2c06:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
    2c08:	b130      	cbz	r0, 2c18 <SDFile::isDirectory()+0x24>
    2c0a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2c0e:	f013 0f50 	tst.w	r3, #80	; 0x50
    2c12:	bf14      	ite	ne
    2c14:	2001      	movne	r0, #1
    2c16:	2000      	moveq	r0, #0
	}
    2c18:	4770      	bx	lr
    2c1a:	bf00      	nop

00002c1c <SDFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
    2c1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2c1e:	b113      	cbz	r3, 2c26 <SDFile::read(void*, unsigned int)+0xa>
    2c20:	4618      	mov	r0, r3
    2c22:	f003 bacf 	b.w	61c4 <FatFile::read(void*, unsigned int)>
    2c26:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    2c28:	b108      	cbz	r0, 2c2e <SDFile::read(void*, unsigned int)+0x12>
    2c2a:	f000 bff1 	b.w	3c10 <ExFatFile::read(void*, unsigned int)>
	}
    2c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c32:	4770      	bx	lr

00002c34 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
    2c34:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
    2c36:	b500      	push	{lr}
    2c38:	b083      	sub	sp, #12
    2c3a:	b163      	cbz	r3, 2c56 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
    2c3c:	2201      	movs	r2, #1
    2c3e:	f10d 0107 	add.w	r1, sp, #7
    2c42:	4618      	mov	r0, r3
    2c44:	f003 fabe 	bl	61c4 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
    2c48:	2801      	cmp	r0, #1
    2c4a:	d10c      	bne.n	2c66 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
    2c4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
    2c50:	b003      	add	sp, #12
    2c52:	f85d fb04 	ldr.w	pc, [sp], #4
    2c56:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
    2c58:	b128      	cbz	r0, 2c66 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
    2c5a:	2201      	movs	r2, #1
    2c5c:	f10d 0107 	add.w	r1, sp, #7
    2c60:	f000 ffd6 	bl	3c10 <ExFatFile::read(void*, unsigned int)>
    2c64:	e7f0      	b.n	2c48 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
    2c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c6a:	e7f1      	b.n	2c50 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00002c6c <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() :
    2c6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2c6e:	b113      	cbz	r3, 2c76 <SDFile::flush()+0xa>
    2c70:	4618      	mov	r0, r3
    2c72:	f003 be1f 	b.w	68b4 <FatFile::sync()>
    2c76:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
    2c78:	b108      	cbz	r0, 2c7e <SDFile::flush()+0x12>
    2c7a:	f001 bcf7 	b.w	466c <ExFatFile::sync()>
	}
    2c7e:	4770      	bx	lr

00002c80 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
    2c80:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2c82:	b113      	cbz	r3, 2c8a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
    2c84:	4618      	mov	r0, r3
    2c86:	f003 be15 	b.w	68b4 <FatFile::sync()>
    2c8a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    2c8c:	b108      	cbz	r0, 2c92 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
    2c8e:	f001 bced 	b.w	466c <ExFatFile::sync()>
  }
    2c92:	4770      	bx	lr

00002c94 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2c94:	6903      	ldr	r3, [r0, #16]
    2c96:	b323      	cbz	r3, 2ce2 <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2c98:	6819      	ldr	r1, [r3, #0]
    2c9a:	4a13      	ldr	r2, [pc, #76]	; (2ce8 <File::read()+0x54>)
	int read() {
    2c9c:	b510      	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
    2c9e:	688c      	ldr	r4, [r1, #8]
	int read() {
    2ca0:	b082      	sub	sp, #8
    2ca2:	4294      	cmp	r4, r2
    2ca4:	d114      	bne.n	2cd0 <File::read()+0x3c>
    return m_fFile ? m_fFile->read(buf, count) :
    2ca6:	6d18      	ldr	r0, [r3, #80]	; 0x50
    2ca8:	b148      	cbz	r0, 2cbe <File::read()+0x2a>
    2caa:	2201      	movs	r2, #1
    2cac:	f10d 0107 	add.w	r1, sp, #7
    2cb0:	f003 fa88 	bl	61c4 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
    2cb4:	b190      	cbz	r0, 2cdc <File::read()+0x48>
		return b;
    2cb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
    2cba:	b002      	add	sp, #8
    2cbc:	bd10      	pop	{r4, pc}
    2cbe:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    2cc0:	2800      	cmp	r0, #0
    2cc2:	d0f8      	beq.n	2cb6 <File::read()+0x22>
    2cc4:	2201      	movs	r2, #1
    2cc6:	f10d 0107 	add.w	r1, sp, #7
    2cca:	f000 ffa1 	bl	3c10 <ExFatFile::read(void*, unsigned int)>
    2cce:	e7f1      	b.n	2cb4 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
    2cd0:	2201      	movs	r2, #1
    2cd2:	f10d 0107 	add.w	r1, sp, #7
    2cd6:	4618      	mov	r0, r3
    2cd8:	47a0      	blx	r4
    2cda:	e7eb      	b.n	2cb4 <File::read()+0x20>
		if (!f) return -1;
    2cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ce0:	e7eb      	b.n	2cba <File::read()+0x26>
    2ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    2ce6:	4770      	bx	lr
    2ce8:	00002c1d 	.word	0x00002c1d

00002cec <SDFile::write(void const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
    2cec:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2cee:	b113      	cbz	r3, 2cf6 <SDFile::write(void const*, unsigned int)+0xa>
    2cf0:	4618      	mov	r0, r3
    2cf2:	f003 be8b 	b.w	6a0c <FatFile::write(void const*, unsigned int)>
    2cf6:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    2cf8:	b108      	cbz	r0, 2cfe <SDFile::write(void const*, unsigned int)+0x12>
    2cfa:	f001 bf5b 	b.w	4bb4 <ExFatFile::write(void const*, unsigned int)>
	}
    2cfe:	4770      	bx	lr

00002d00 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
    2d00:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2d02:	b113      	cbz	r3, 2d0a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
    2d04:	4618      	mov	r0, r3
    2d06:	f003 be81 	b.w	6a0c <FatFile::write(void const*, unsigned int)>
    2d0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    2d0c:	b108      	cbz	r0, 2d12 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
    2d0e:	f001 bf51 	b.w	4bb4 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
    2d12:	4770      	bx	lr

00002d14 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
    2d14:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
    2d16:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2d18:	b083      	sub	sp, #12
    2d1a:	f88d 1007 	strb.w	r1, [sp, #7]
    2d1e:	b143      	cbz	r3, 2d32 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
    2d20:	2201      	movs	r2, #1
    2d22:	f10d 0107 	add.w	r1, sp, #7
    2d26:	4618      	mov	r0, r3
    2d28:	f003 fe70 	bl	6a0c <FatFile::write(void const*, unsigned int)>
  }
    2d2c:	b003      	add	sp, #12
    2d2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d32:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    2d34:	2800      	cmp	r0, #0
    2d36:	d0f9      	beq.n	2d2c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
    2d38:	2201      	movs	r2, #1
    2d3a:	f10d 0107 	add.w	r1, sp, #7
    2d3e:	f001 ff39 	bl	4bb4 <ExFatFile::write(void const*, unsigned int)>
    2d42:	b003      	add	sp, #12
    2d44:	f85d fb04 	ldr.w	pc, [sp], #4

00002d48 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
    2d48:	798a      	ldrb	r2, [r1, #6]
    2d4a:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
    2d4e:	061b      	lsls	r3, r3, #24
    2d50:	d422      	bmi.n	2d98 <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    2d52:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
    2d56:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    2d58:	794b      	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
    2d5a:	b085      	sub	sp, #20
    return m_fFile ?
    2d5c:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    2d5e:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    2d60:	790d      	ldrb	r5, [r1, #4]
    2d62:	788e      	ldrb	r6, [r1, #2]
    2d64:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    2d66:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    2d68:	7809      	ldrb	r1, [r1, #0]
    2d6a:	b14c      	cbz	r4, 2d80 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
    2d6c:	4620      	mov	r0, r4
    2d6e:	9601      	str	r6, [sp, #4]
    2d70:	9500      	str	r5, [sp, #0]
    2d72:	e9cd 7102 	strd	r7, r1, [sp, #8]
    2d76:	2102      	movs	r1, #2
    2d78:	f003 fda2 	bl	68c0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    2d7c:	b005      	add	sp, #20
    2d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d80:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
    2d82:	2800      	cmp	r0, #0
    2d84:	d0fa      	beq.n	2d7c <SDFile::setCreateTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
    2d86:	9601      	str	r6, [sp, #4]
    2d88:	9500      	str	r5, [sp, #0]
    2d8a:	e9cd 7102 	strd	r7, r1, [sp, #8]
    2d8e:	2102      	movs	r1, #2
    2d90:	f001 fde2 	bl	4958 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    2d94:	b005      	add	sp, #20
    2d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    2d98:	2000      	movs	r0, #0
	}
    2d9a:	4770      	bx	lr

00002d9c <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
    2d9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2d9e:	b153      	cbz	r3, 2db6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
    2da0:	7818      	ldrb	r0, [r3, #0]
    2da2:	f010 0008 	ands.w	r0, r0, #8
    2da6:	d00d      	beq.n	2dc4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
    2da8:	69d8      	ldr	r0, [r3, #28]
    2daa:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    2dac:	1ac0      	subs	r0, r0, r3
    2dae:	bf48      	it	mi
    2db0:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    2db4:	4770      	bx	lr
    2db6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    2db8:	b1a3      	cbz	r3, 2de4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    2dba:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    2dbe:	f010 0008 	ands.w	r0, r0, #8
    2dc2:	d100      	bne.n	2dc6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
    2dc4:	4770      	bx	lr
    2dc6:	6918      	ldr	r0, [r3, #16]
    2dc8:	6819      	ldr	r1, [r3, #0]
    2dca:	695a      	ldr	r2, [r3, #20]
    2dcc:	1a40      	subs	r0, r0, r1
    2dce:	685b      	ldr	r3, [r3, #4]
    2dd0:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    2dd4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    2dd8:	f173 0300 	sbcs.w	r3, r3, #0
    2ddc:	d3f2      	bcc.n	2dc4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
    2dde:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2de2:	4770      	bx	lr
    2de4:	4618      	mov	r0, r3
    return BaseFile::available();
    2de6:	e7ed      	b.n	2dc4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00002de8 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
    2de8:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2dea:	b153      	cbz	r3, 2e02 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
    2dec:	7818      	ldrb	r0, [r3, #0]
    2dee:	f010 0008 	ands.w	r0, r0, #8
    2df2:	d00d      	beq.n	2e10 <SDFile::available()+0x28>
    2df4:	69d8      	ldr	r0, [r3, #28]
    2df6:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    2df8:	1ac0      	subs	r0, r0, r3
    2dfa:	bf48      	it	mi
    2dfc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    2e00:	4770      	bx	lr
    2e02:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    2e04:	b1a3      	cbz	r3, 2e30 <SDFile::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    2e06:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    2e0a:	f010 0008 	ands.w	r0, r0, #8
    2e0e:	d100      	bne.n	2e12 <SDFile::available()+0x2a>
	}
    2e10:	4770      	bx	lr
    2e12:	6918      	ldr	r0, [r3, #16]
    2e14:	6819      	ldr	r1, [r3, #0]
    2e16:	695a      	ldr	r2, [r3, #20]
    2e18:	1a40      	subs	r0, r0, r1
    2e1a:	685b      	ldr	r3, [r3, #4]
    2e1c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    2e20:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    2e24:	f173 0300 	sbcs.w	r3, r3, #0
    2e28:	d3f2      	bcc.n	2e10 <SDFile::available()+0x28>
    2e2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2e2e:	4770      	bx	lr
    2e30:	4618      	mov	r0, r3
		return sdfatfile.available();
    2e32:	e7ed      	b.n	2e10 <SDFile::available()+0x28>

00002e34 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
    2e34:	b500      	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
    2e36:	6900      	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
    2e38:	b083      	sub	sp, #12
    2e3a:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
    2e3e:	b160      	cbz	r0, 2e5a <File::write(unsigned char)+0x26>
    2e40:	6803      	ldr	r3, [r0, #0]
    2e42:	4a10      	ldr	r2, [pc, #64]	; (2e84 <File::write(unsigned char)+0x50>)
    2e44:	68db      	ldr	r3, [r3, #12]
    2e46:	4293      	cmp	r3, r2
    2e48:	d115      	bne.n	2e76 <File::write(unsigned char)+0x42>
    return m_fFile ? m_fFile->write(buf, count) :
    2e4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2e4c:	b143      	cbz	r3, 2e60 <File::write(unsigned char)+0x2c>
    2e4e:	2201      	movs	r2, #1
    2e50:	f10d 0107 	add.w	r1, sp, #7
    2e54:	4618      	mov	r0, r3
    2e56:	f003 fdd9 	bl	6a0c <FatFile::write(void const*, unsigned int)>
	}
    2e5a:	b003      	add	sp, #12
    2e5c:	f85d fb04 	ldr.w	pc, [sp], #4
    2e60:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    2e62:	2800      	cmp	r0, #0
    2e64:	d0f9      	beq.n	2e5a <File::write(unsigned char)+0x26>
    2e66:	2201      	movs	r2, #1
    2e68:	f10d 0107 	add.w	r1, sp, #7
    2e6c:	f001 fea2 	bl	4bb4 <ExFatFile::write(void const*, unsigned int)>
    2e70:	b003      	add	sp, #12
    2e72:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
    2e76:	2201      	movs	r2, #1
    2e78:	f10d 0107 	add.w	r1, sp, #7
    2e7c:	4798      	blx	r3
	}
    2e7e:	b003      	add	sp, #12
    2e80:	f85d fb04 	ldr.w	pc, [sp], #4
    2e84:	00002ced 	.word	0x00002ced

00002e88 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    2e88:	b538      	push	{r3, r4, r5, lr}
    2e8a:	4604      	mov	r4, r0
    2e8c:	4b0c      	ldr	r3, [pc, #48]	; (2ec0 <SDFile::~SDFile()+0x38>)
		if (filename) {
    2e8e:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
    2e90:	6023      	str	r3, [r4, #0]
		if (filename) {
    2e92:	b118      	cbz	r0, 2e9c <SDFile::~SDFile()+0x14>
			free(filename);
    2e94:	f00a fd10 	bl	d8b8 <free>
			filename = nullptr;
    2e98:	2300      	movs	r3, #0
    2e9a:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    2e9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    2e9e:	f104 0518 	add.w	r5, r4, #24
    2ea2:	b14b      	cbz	r3, 2eb8 <SDFile::~SDFile()+0x30>
    2ea4:	4628      	mov	r0, r5
    2ea6:	f005 fa49 	bl	833c <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
    2eaa:	4b06      	ldr	r3, [pc, #24]	; (2ec4 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() {close();}
    2eac:	4628      	mov	r0, r5
    2eae:	60a3      	str	r3, [r4, #8]
    2eb0:	f005 fa44 	bl	833c <FsBaseFile::close()>
	}
    2eb4:	4620      	mov	r0, r4
    2eb6:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    2eb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d1f2      	bne.n	2ea4 <SDFile::~SDFile()+0x1c>
    2ebe:	e7f4      	b.n	2eaa <SDFile::~SDFile()+0x22>
    2ec0:	20002204 	.word	0x20002204
    2ec4:	20002054 	.word	0x20002054

00002ec8 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    2ec8:	b538      	push	{r3, r4, r5, lr}
    2eca:	4604      	mov	r4, r0
    2ecc:	4b0e      	ldr	r3, [pc, #56]	; (2f08 <SDFile::~SDFile()+0x40>)
		if (filename) {
    2ece:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
    2ed0:	6023      	str	r3, [r4, #0]
		if (filename) {
    2ed2:	b118      	cbz	r0, 2edc <SDFile::~SDFile()+0x14>
			free(filename);
    2ed4:	f00a fcf0 	bl	d8b8 <free>
			filename = nullptr;
    2ed8:	2300      	movs	r3, #0
    2eda:	65a3      	str	r3, [r4, #88]	; 0x58
    2edc:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    2ede:	f104 0518 	add.w	r5, r4, #24
    2ee2:	b16b      	cbz	r3, 2f00 <SDFile::~SDFile()+0x38>
    2ee4:	4628      	mov	r0, r5
    2ee6:	f005 fa29 	bl	833c <FsBaseFile::close()>
    2eea:	4b08      	ldr	r3, [pc, #32]	; (2f0c <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() {close();}
    2eec:	4628      	mov	r0, r5
    2eee:	60a3      	str	r3, [r4, #8]
    2ef0:	f005 fa24 	bl	833c <FsBaseFile::close()>
	}
    2ef4:	4620      	mov	r0, r4
    2ef6:	215c      	movs	r1, #92	; 0x5c
    2ef8:	f009 f86e 	bl	bfd8 <operator delete(void*, unsigned int)>
    2efc:	4620      	mov	r0, r4
    2efe:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    2f00:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2f02:	2b00      	cmp	r3, #0
    2f04:	d1ee      	bne.n	2ee4 <SDFile::~SDFile()+0x1c>
    2f06:	e7f0      	b.n	2eea <SDFile::~SDFile()+0x22>
    2f08:	20002204 	.word	0x20002204
    2f0c:	20002054 	.word	0x20002054

00002f10 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    2f10:	b430      	push	{r4, r5}
    2f12:	9c02      	ldr	r4, [sp, #8]
    2f14:	4611      	mov	r1, r2
    2f16:	469c      	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    2f18:	b134      	cbz	r4, 2f28 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    2f1a:	2c01      	cmp	r4, #1
    2f1c:	d01c      	beq.n	2f58 <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    2f1e:	2c02      	cmp	r4, #2
    2f20:	d00e      	beq.n	2f40 <SDFile::seek(unsigned long long, int)+0x30>
	}
    2f22:	2000      	movs	r0, #0
    2f24:	bc30      	pop	{r4, r5}
    2f26:	4770      	bx	lr
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2f28:	6d05      	ldr	r5, [r0, #80]	; 0x50
    2f2a:	b1f5      	cbz	r5, 2f6a <SDFile::seek(unsigned long long, int)+0x5a>
    2f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f30:	4293      	cmp	r3, r2
    2f32:	eb74 040c 	sbcs.w	r4, r4, ip
    2f36:	d3f4      	bcc.n	2f22 <SDFile::seek(unsigned long long, int)+0x12>
    2f38:	4628      	mov	r0, r5
    2f3a:	bc30      	pop	{r4, r5}
    2f3c:	f003 bb8a 	b.w	6654 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() :
    2f40:	6d02      	ldr	r2, [r0, #80]	; 0x50
    2f42:	b30a      	cbz	r2, 2f88 <SDFile::seek(unsigned long long, int)+0x78>
    2f44:	69d3      	ldr	r3, [r2, #28]
    return seekSet(fileSize() + offset);
    2f46:	1859      	adds	r1, r3, r1
    2f48:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d1e8      	bne.n	2f22 <SDFile::seek(unsigned long long, int)+0x12>
    2f50:	4610      	mov	r0, r2
    2f52:	bc30      	pop	{r4, r5}
    2f54:	f003 bb7e 	b.w	6654 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->curPosition() :
    2f58:	6d02      	ldr	r2, [r0, #80]	; 0x50
    2f5a:	b162      	cbz	r2, 2f76 <SDFile::seek(unsigned long long, int)+0x66>
    2f5c:	6953      	ldr	r3, [r2, #20]
    return seekSet(curPosition() + offset);
    2f5e:	1859      	adds	r1, r3, r1
    2f60:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2f64:	2b00      	cmp	r3, #0
    2f66:	d1dc      	bne.n	2f22 <SDFile::seek(unsigned long long, int)+0x12>
    2f68:	e7f2      	b.n	2f50 <SDFile::seek(unsigned long long, int)+0x40>
    2f6a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f6c:	2800      	cmp	r0, #0
    2f6e:	d0d8      	beq.n	2f22 <SDFile::seek(unsigned long long, int)+0x12>
    2f70:	bc30      	pop	{r4, r5}
    2f72:	f000 bf33 	b.w	3ddc <ExFatFile::seekSet(unsigned long long)>
    2f76:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
    2f78:	2800      	cmp	r0, #0
    2f7a:	d0d2      	beq.n	2f22 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(curPosition() + offset);
    2f7c:	e9d0 2300 	ldrd	r2, r3, [r0]
    2f80:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f82:	eb4c 0303 	adc.w	r3, ip, r3
    2f86:	e7f3      	b.n	2f70 <SDFile::seek(unsigned long long, int)+0x60>
    2f88:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d0c9      	beq.n	2f22 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(fileSize() + offset);
    2f8e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2f92:	bc30      	pop	{r4, r5}
    2f94:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f96:	eb4c 0303 	adc.w	r3, ip, r3
    2f9a:	f000 bf1f 	b.w	3ddc <ExFatFile::seekSet(unsigned long long)>
    2f9e:	bf00      	nop

00002fa0 <File::~File()>:
	virtual ~File() {
    2fa0:	b570      	push	{r4, r5, r6, lr}
    2fa2:	4b24      	ldr	r3, [pc, #144]	; (3034 <File::~File()+0x94>)
    2fa4:	4604      	mov	r4, r0
		if (f) dec_refcount();
    2fa6:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
    2fa8:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    2faa:	2d00      	cmp	r5, #0
    2fac:	d032      	beq.n	3014 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
    2fae:	686e      	ldr	r6, [r5, #4]
    2fb0:	3e01      	subs	r6, #1
    2fb2:	606e      	str	r6, [r5, #4]
    2fb4:	bb76      	cbnz	r6, 3014 <File::~File()+0x74>
			f->close();
    2fb6:	682b      	ldr	r3, [r5, #0]
    2fb8:	4a1f      	ldr	r2, [pc, #124]	; (3038 <File::~File()+0x98>)
    2fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2fbc:	4293      	cmp	r3, r2
    2fbe:	d12f      	bne.n	3020 <File::~File()+0x80>
		if (filename) {
    2fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2fc2:	b110      	cbz	r0, 2fca <File::~File()+0x2a>
			free(filename);
    2fc4:	f00a fc78 	bl	d8b8 <free>
			filename = nullptr;
    2fc8:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    2fca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    2fcc:	b323      	cbz	r3, 3018 <File::~File()+0x78>
			sdfatfile.close();
    2fce:	f105 0018 	add.w	r0, r5, #24
    2fd2:	f005 f9b3 	bl	833c <FsBaseFile::close()>
			delete f;
    2fd6:	6925      	ldr	r5, [r4, #16]
    2fd8:	b1e5      	cbz	r5, 3014 <File::~File()+0x74>
    2fda:	682b      	ldr	r3, [r5, #0]
    2fdc:	4a17      	ldr	r2, [pc, #92]	; (303c <File::~File()+0x9c>)
    2fde:	685b      	ldr	r3, [r3, #4]
    2fe0:	4293      	cmp	r3, r2
    2fe2:	d124      	bne.n	302e <File::~File()+0x8e>
	virtual ~SDFile(void) {
    2fe4:	4b16      	ldr	r3, [pc, #88]	; (3040 <File::~File()+0xa0>)
		if (filename) {
    2fe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    2fe8:	602b      	str	r3, [r5, #0]
		if (filename) {
    2fea:	b118      	cbz	r0, 2ff4 <File::~File()+0x54>
			free(filename);
    2fec:	f00a fc64 	bl	d8b8 <free>
			filename = nullptr;
    2ff0:	2300      	movs	r3, #0
    2ff2:	65ab      	str	r3, [r5, #88]	; 0x58
    2ff4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    2ff6:	f105 0618 	add.w	r6, r5, #24
    2ffa:	b1a3      	cbz	r3, 3026 <File::~File()+0x86>
    2ffc:	4630      	mov	r0, r6
    2ffe:	f005 f99d 	bl	833c <FsBaseFile::close()>
    3002:	4b10      	ldr	r3, [pc, #64]	; (3044 <File::~File()+0xa4>)
  ~FsBaseFile() {close();}
    3004:	4630      	mov	r0, r6
    3006:	60ab      	str	r3, [r5, #8]
    3008:	f005 f998 	bl	833c <FsBaseFile::close()>
	}
    300c:	215c      	movs	r1, #92	; 0x5c
    300e:	4628      	mov	r0, r5
    3010:	f008 ffe2 	bl	bfd8 <operator delete(void*, unsigned int)>
	}
    3014:	4620      	mov	r0, r4
    3016:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    3018:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    301a:	2b00      	cmp	r3, #0
    301c:	d1d7      	bne.n	2fce <File::~File()+0x2e>
    301e:	e7da      	b.n	2fd6 <File::~File()+0x36>
			f->close();
    3020:	4628      	mov	r0, r5
    3022:	4798      	blx	r3
    3024:	e7d7      	b.n	2fd6 <File::~File()+0x36>
    3026:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3028:	2b00      	cmp	r3, #0
    302a:	d1e7      	bne.n	2ffc <File::~File()+0x5c>
    302c:	e7e9      	b.n	3002 <File::~File()+0x62>
			delete f;
    302e:	4628      	mov	r0, r5
    3030:	4798      	blx	r3
    3032:	e7ef      	b.n	3014 <File::~File()+0x74>
    3034:	20002194 	.word	0x20002194
    3038:	000027b5 	.word	0x000027b5
    303c:	00002ec9 	.word	0x00002ec9
    3040:	20002204 	.word	0x20002204
    3044:	20002054 	.word	0x20002054

00003048 <File::~File()>:
	virtual ~File() {
    3048:	b570      	push	{r4, r5, r6, lr}
    304a:	4b26      	ldr	r3, [pc, #152]	; (30e4 <File::~File()+0x9c>)
    304c:	4604      	mov	r4, r0
		if (f) dec_refcount();
    304e:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
    3050:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    3052:	2d00      	cmp	r5, #0
    3054:	d032      	beq.n	30bc <File::~File()+0x74>
		if (--(f->refcount) == 0) {
    3056:	686e      	ldr	r6, [r5, #4]
    3058:	3e01      	subs	r6, #1
    305a:	606e      	str	r6, [r5, #4]
    305c:	bb76      	cbnz	r6, 30bc <File::~File()+0x74>
			f->close();
    305e:	682b      	ldr	r3, [r5, #0]
    3060:	4a21      	ldr	r2, [pc, #132]	; (30e8 <File::~File()+0xa0>)
    3062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3064:	4293      	cmp	r3, r2
    3066:	d133      	bne.n	30d0 <File::~File()+0x88>
		if (filename) {
    3068:	6da8      	ldr	r0, [r5, #88]	; 0x58
    306a:	b110      	cbz	r0, 3072 <File::~File()+0x2a>
			free(filename);
    306c:	f00a fc24 	bl	d8b8 <free>
			filename = nullptr;
    3070:	65ae      	str	r6, [r5, #88]	; 0x58
    3072:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    3074:	b343      	cbz	r3, 30c8 <File::~File()+0x80>
			sdfatfile.close();
    3076:	f105 0018 	add.w	r0, r5, #24
    307a:	f005 f95f 	bl	833c <FsBaseFile::close()>
			delete f;
    307e:	6925      	ldr	r5, [r4, #16]
    3080:	b1e5      	cbz	r5, 30bc <File::~File()+0x74>
    3082:	682b      	ldr	r3, [r5, #0]
    3084:	4a19      	ldr	r2, [pc, #100]	; (30ec <File::~File()+0xa4>)
    3086:	685b      	ldr	r3, [r3, #4]
    3088:	4293      	cmp	r3, r2
    308a:	d128      	bne.n	30de <File::~File()+0x96>
	virtual ~SDFile(void) {
    308c:	4b18      	ldr	r3, [pc, #96]	; (30f0 <File::~File()+0xa8>)
		if (filename) {
    308e:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    3090:	602b      	str	r3, [r5, #0]
		if (filename) {
    3092:	b118      	cbz	r0, 309c <File::~File()+0x54>
			free(filename);
    3094:	f00a fc10 	bl	d8b8 <free>
			filename = nullptr;
    3098:	2300      	movs	r3, #0
    309a:	65ab      	str	r3, [r5, #88]	; 0x58
    309c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    309e:	f105 0618 	add.w	r6, r5, #24
    30a2:	b1c3      	cbz	r3, 30d6 <File::~File()+0x8e>
    30a4:	4630      	mov	r0, r6
    30a6:	f005 f949 	bl	833c <FsBaseFile::close()>
    30aa:	4b12      	ldr	r3, [pc, #72]	; (30f4 <File::~File()+0xac>)
  ~FsBaseFile() {close();}
    30ac:	4630      	mov	r0, r6
    30ae:	60ab      	str	r3, [r5, #8]
    30b0:	f005 f944 	bl	833c <FsBaseFile::close()>
	}
    30b4:	215c      	movs	r1, #92	; 0x5c
    30b6:	4628      	mov	r0, r5
    30b8:	f008 ff8e 	bl	bfd8 <operator delete(void*, unsigned int)>
	}
    30bc:	4620      	mov	r0, r4
    30be:	2114      	movs	r1, #20
    30c0:	f008 ff8a 	bl	bfd8 <operator delete(void*, unsigned int)>
    30c4:	4620      	mov	r0, r4
    30c6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    30c8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    30ca:	2b00      	cmp	r3, #0
    30cc:	d1d3      	bne.n	3076 <File::~File()+0x2e>
    30ce:	e7d6      	b.n	307e <File::~File()+0x36>
			f->close();
    30d0:	4628      	mov	r0, r5
    30d2:	4798      	blx	r3
    30d4:	e7d3      	b.n	307e <File::~File()+0x36>
    30d6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    30d8:	2b00      	cmp	r3, #0
    30da:	d1e3      	bne.n	30a4 <File::~File()+0x5c>
    30dc:	e7e5      	b.n	30aa <File::~File()+0x62>
			delete f;
    30de:	4628      	mov	r0, r5
    30e0:	4798      	blx	r3
    30e2:	e7eb      	b.n	30bc <File::~File()+0x74>
    30e4:	20002194 	.word	0x20002194
    30e8:	000027b5 	.word	0x000027b5
    30ec:	00002ec9 	.word	0x00002ec9
    30f0:	20002204 	.word	0x20002204
    30f4:	20002054 	.word	0x20002054

000030f8 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    30f8:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    30fc:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    30fe:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    3102:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3104:	d101      	bne.n	310a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    3106:	6883      	ldr	r3, [r0, #8]
    3108:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    310a:	f008 ba85 	b.w	b618 <EventResponder::triggerEventNotImmediate()>
    310e:	bf00      	nop

00003110 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    3110:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3112:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    3114:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    3118:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    311a:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    311c:	b1a3      	cbz	r3, 3148 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    311e:	b321      	cbz	r1, 316a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    3120:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    3124:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    3126:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    3128:	6f25      	ldr	r5, [r4, #112]	; 0x70
    312a:	07af      	lsls	r7, r5, #30
    312c:	d407      	bmi.n	313e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    312e:	4615      	mov	r5, r2
				count_read--;
    3130:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    3132:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    3134:	b11a      	cbz	r2, 313e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    3136:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    313a:	462a      	mov	r2, r5
    313c:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    313e:	6965      	ldr	r5, [r4, #20]
    3140:	07ed      	lsls	r5, r5, #31
    3142:	d5f1      	bpl.n	3128 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    3144:	2b00      	cmp	r3, #0
    3146:	d1ea      	bne.n	311e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    3148:	b16e      	cbz	r6, 3166 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    314a:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    314c:	6f19      	ldr	r1, [r3, #112]	; 0x70
    314e:	0789      	lsls	r1, r1, #30
    3150:	d4fa      	bmi.n	3148 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    3152:	4611      	mov	r1, r2
			count_read--;
    3154:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    3156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    3158:	2a00      	cmp	r2, #0
    315a:	d0f5      	beq.n	3148 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    315c:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    3160:	460a      	mov	r2, r1
	while (count_read) {
    3162:	2e00      	cmp	r6, #0
    3164:	d1f1      	bne.n	314a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    3166:	bcf0      	pop	{r4, r5, r6, r7}
    3168:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    316a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    316e:	e7d9      	b.n	3124 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00003170 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    3170:	4b32      	ldr	r3, [pc, #200]	; (323c <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    3172:	4933      	ldr	r1, [pc, #204]	; (3240 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3174:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    3176:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    317a:	7920      	ldrb	r0, [r4, #4]
    317c:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    317e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    3180:	f895 c004 	ldrb.w	ip, [r5, #4]
    3184:	f881 c01c 	strb.w	ip, [r1, #28]
    3188:	7708      	strb	r0, [r1, #28]
    318a:	b152      	cbz	r2, 31a2 <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    318c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    3190:	d323      	bcc.n	31da <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    3192:	492c      	ldr	r1, [pc, #176]	; (3244 <_spi_dma_rxISR0()+0xd4>)
    3194:	4411      	add	r1, r2
		DMA_SERQ = channel;
    3196:	4a2a      	ldr	r2, [pc, #168]	; (3240 <_spi_dma_rxISR0()+0xd0>)
    3198:	6419      	str	r1, [r3, #64]	; 0x40
    319a:	76d0      	strb	r0, [r2, #27]
    319c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    31a0:	bd30      	pop	{r4, r5, pc}
    31a2:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    31a4:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    31a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    31a8:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    31aa:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    31ae:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    31b0:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    31b2:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    31b6:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    31b8:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    31ba:	6804      	ldr	r4, [r0, #0]
    31bc:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    31be:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    31c2:	4b21      	ldr	r3, [pc, #132]	; (3248 <_spi_dma_rxISR0()+0xd8>)
    31c4:	429c      	cmp	r4, r3
    31c6:	d126      	bne.n	3216 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    31c8:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    31ca:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    31cc:	2b02      	cmp	r3, #2
		_data = data;
    31ce:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    31d0:	d126      	bne.n	3220 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    31d2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    31d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    31d8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    31da:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    31dc:	8be9      	ldrh	r1, [r5, #30]
    31de:	0409      	lsls	r1, r1, #16
    31e0:	d422      	bmi.n	3228 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    31e2:	b292      	uxth	r2, r2
    31e4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    31e6:	6821      	ldr	r1, [r4, #0]
    31e8:	8bec      	ldrh	r4, [r5, #30]
    31ea:	b2a4      	uxth	r4, r4
    31ec:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    31ee:	8bcc      	ldrh	r4, [r1, #30]
    31f0:	0424      	lsls	r4, r4, #16
    31f2:	d505      	bpl.n	3200 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    31f4:	8bcc      	ldrh	r4, [r1, #30]
    31f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    31fa:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    31fe:	4322      	orrs	r2, r4
    3200:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    3202:	8bca      	ldrh	r2, [r1, #30]
    3204:	b292      	uxth	r2, r2
    3206:	82ca      	strh	r2, [r1, #22]
    3208:	2100      	movs	r1, #0
    320a:	4a0d      	ldr	r2, [pc, #52]	; (3240 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    320c:	6419      	str	r1, [r3, #64]	; 0x40
    320e:	76d0      	strb	r0, [r2, #27]
    3210:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3214:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    3216:	4623      	mov	r3, r4
    3218:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    321a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    321e:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    3224:	f008 b9f8 	b.w	b618 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    3228:	8be9      	ldrh	r1, [r5, #30]
    322a:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    322e:	b292      	uxth	r2, r2
    3230:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    3234:	ea41 010e 	orr.w	r1, r1, lr
    3238:	83e9      	strh	r1, [r5, #30]
    323a:	e7d4      	b.n	31e6 <_spi_dma_rxISR0()+0x76>
    323c:	20002b00 	.word	0x20002b00
    3240:	400e8000 	.word	0x400e8000
    3244:	ffff8001 	.word	0xffff8001
    3248:	000030f9 	.word	0x000030f9

0000324c <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    324c:	6843      	ldr	r3, [r0, #4]
{
    324e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3252:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3256:	4d81      	ldr	r5, [pc, #516]	; (345c <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3258:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    325c:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    325e:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3262:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3266:	497e      	ldr	r1, [pc, #504]	; (3460 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3268:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    326a:	69aa      	ldr	r2, [r5, #24]
    326c:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    326e:	4a7d      	ldr	r2, [pc, #500]	; (3464 <SPIClass::begin()+0x218>)
    3270:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3272:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3274:	f890 e010 	ldrb.w	lr, [r0, #16]
    3278:	4a7b      	ldr	r2, [pc, #492]	; (3468 <SPIClass::begin()+0x21c>)
    327a:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    327e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3282:	7c31      	ldrb	r1, [r6, #16]
    3284:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    3288:	6889      	ldr	r1, [r1, #8]
    328a:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    328e:	f890 c011 	ldrb.w	ip, [r0, #17]
    3292:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    3296:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    329a:	f895 1020 	ldrb.w	r1, [r5, #32]
    329e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    32a2:	6889      	ldr	r1, [r1, #8]
    32a4:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    32a8:	7c81      	ldrb	r1, [r0, #18]
    32aa:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    32ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    32b2:	f899 b030 	ldrb.w	fp, [r9, #48]	; 0x30
    32b6:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    32ba:	f8db b008 	ldr.w	fp, [fp, #8]
    32be:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    32c2:	f8d4 a000 	ldr.w	sl, [r4]
    32c6:	685f      	ldr	r7, [r3, #4]
    32c8:	ea4a 0a07 	orr.w	sl, sl, r7
    32cc:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    32d0:	7c34      	ldrb	r4, [r6, #16]
    32d2:	f8de e014 	ldr.w	lr, [lr, #20]
    32d6:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    32da:	6864      	ldr	r4, [r4, #4]
    32dc:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    32e0:	f895 4020 	ldrb.w	r4, [r5, #32]
    32e4:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
    32e8:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    32ec:	6864      	ldr	r4, [r4, #4]
    32ee:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    32f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
    32f4:	f899 4030 	ldrb.w	r4, [r9, #48]	; 0x30
    32f8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    32fc:	6852      	ldr	r2, [r2, #4]
    32fe:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    3300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3302:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
    3306:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    3308:	69da      	ldr	r2, [r3, #28]
    330a:	7e31      	ldrb	r1, [r6, #24]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    330e:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    3310:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    3314:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    3316:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3318:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    331a:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    331e:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    3320:	7cc2      	ldrb	r2, [r0, #19]
    3322:	2a00      	cmp	r2, #0
    3324:	d031      	beq.n	338a <SPIClass::begin()+0x13e>
			__disable_irq();
    3326:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3328:	7cc3      	ldrb	r3, [r0, #19]
    332a:	07dc      	lsls	r4, r3, #31
    332c:	d508      	bpl.n	3340 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    332e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3332:	6944      	ldr	r4, [r0, #20]
    3334:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    3338:	4022      	ands	r2, r4
    333a:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    333c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    3340:	0799      	lsls	r1, r3, #30
    3342:	d508      	bpl.n	3356 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3344:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3348:	6984      	ldr	r4, [r0, #24]
    334a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    334e:	4022      	ands	r2, r4
    3350:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    3352:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    3356:	075a      	lsls	r2, r3, #29
    3358:	d508      	bpl.n	336c <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    335a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    335e:	69c4      	ldr	r4, [r0, #28]
    3360:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    3364:	4022      	ands	r2, r4
    3366:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    3368:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    336c:	071f      	lsls	r7, r3, #28
    336e:	d508      	bpl.n	3382 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3370:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3374:	6a04      	ldr	r4, [r0, #32]
    3376:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    337a:	4022      	ands	r2, r4
    337c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    337e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    3382:	06de      	lsls	r6, r3, #27
    3384:	d455      	bmi.n	3432 <SPIClass::begin()+0x1e6>
			__enable_irq();
    3386:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3388:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    338a:	4c38      	ldr	r4, [pc, #224]	; (346c <SPIClass::begin()+0x220>)
    338c:	6882      	ldr	r2, [r0, #8]
    338e:	42a2      	cmp	r2, r4
    3390:	d059      	beq.n	3446 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    3392:	4a32      	ldr	r2, [pc, #200]	; (345c <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    3394:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    3396:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3398:	4935      	ldr	r1, [pc, #212]	; (3470 <SPIClass::begin()+0x224>)
    339a:	f3c2 1601 	ubfx	r6, r2, #4, #2
    339e:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    33a2:	4d34      	ldr	r5, [pc, #208]	; (3474 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    33a4:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    33a8:	3201      	adds	r2, #1
    33aa:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    33ae:	42aa      	cmp	r2, r5
    33b0:	d831      	bhi.n	3416 <SPIClass::begin()+0x1ca>
    33b2:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    33b4:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    33b6:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    33b8:	2103      	movs	r1, #3
		port().CR = 0;
    33ba:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    33bc:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    33be:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    33c0:	2101      	movs	r1, #1
		port().CCR = _ccr;
    33c2:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    33c4:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    33c6:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    33c8:	7cc3      	ldrb	r3, [r0, #19]
    33ca:	b313      	cbz	r3, 3412 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    33cc:	07dd      	lsls	r5, r3, #31
    33ce:	d504      	bpl.n	33da <SPIClass::begin()+0x18e>
    33d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    33d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    33d6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    33da:	079c      	lsls	r4, r3, #30
    33dc:	d504      	bpl.n	33e8 <SPIClass::begin()+0x19c>
    33de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    33e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    33e4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    33e8:	0759      	lsls	r1, r3, #29
    33ea:	d504      	bpl.n	33f6 <SPIClass::begin()+0x1aa>
    33ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
    33ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    33f2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    33f6:	071a      	lsls	r2, r3, #28
    33f8:	d504      	bpl.n	3404 <SPIClass::begin()+0x1b8>
    33fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
    33fc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3400:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    3404:	06db      	lsls	r3, r3, #27
    3406:	d504      	bpl.n	3412 <SPIClass::begin()+0x1c6>
    3408:	6b82      	ldr	r2, [r0, #56]	; 0x38
    340a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    340e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    3412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    3416:	4918      	ldr	r1, [pc, #96]	; (3478 <SPIClass::begin()+0x22c>)
    3418:	fba1 5102 	umull	r5, r1, r1, r2
    341c:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    341e:	fbb2 f2f1 	udiv	r2, r2, r1
    3422:	42a2      	cmp	r2, r4
    3424:	bf88      	it	hi
    3426:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    3428:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    342c:	d30d      	bcc.n	344a <SPIClass::begin()+0x1fe>
    342e:	4a13      	ldr	r2, [pc, #76]	; (347c <SPIClass::begin()+0x230>)
				div = d-2;
    3430:	e7c0      	b.n	33b4 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    3432:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3436:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3438:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    343c:	400b      	ands	r3, r1
    343e:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    3440:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    3444:	e79f      	b.n	3386 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    3446:	68c2      	ldr	r2, [r0, #12]
    3448:	e7b5      	b.n	33b6 <SPIClass::begin()+0x16a>
			if (d > 2) {
    344a:	2902      	cmp	r1, #2
    344c:	d9b1      	bls.n	33b2 <SPIClass::begin()+0x166>
				div = d-2;
    344e:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3450:	084c      	lsrs	r4, r1, #1
    3452:	0222      	lsls	r2, r4, #8
    3454:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    3458:	430a      	orrs	r2, r1
    345a:	e7ab      	b.n	33b4 <SPIClass::begin()+0x168>
    345c:	400fc000 	.word	0x400fc000
    3460:	e3ffffcf 	.word	0xe3ffffcf
    3464:	08000010 	.word	0x08000010
    3468:	20002678 	.word	0x20002678
    346c:	003d0900 	.word	0x003d0900
    3470:	200023d4 	.word	0x200023d4
    3474:	003d08ff 	.word	0x003d08ff
    3478:	431bde83 	.word	0x431bde83
    347c:	007f7fff 	.word	0x007f7fff

00003480 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    3480:	b10b      	cbz	r3, 3486 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3482:	f7ff be45 	b.w	3110 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    3486:	4770      	bx	lr

00003488 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    3488:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    348a:	e9d3 1200 	ldrd	r1, r2, [r3]
    348e:	6809      	ldr	r1, [r1, #0]
    3490:	4211      	tst	r1, r2
    3492:	d100      	bne.n	3496 <SPIClass::end()+0xe>
    3494:	4770      	bx	lr
void SPIClass::end() {
    3496:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3498:	6802      	ldr	r2, [r0, #0]
    349a:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    349c:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    349e:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    34a0:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    34a2:	7c22      	ldrb	r2, [r4, #16]
    34a4:	4413      	add	r3, r2
    34a6:	7c18      	ldrb	r0, [r3, #16]
    34a8:	f008 fcba 	bl	be20 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    34ac:	7c62      	ldrb	r2, [r4, #17]
    34ae:	6863      	ldr	r3, [r4, #4]
    34b0:	2105      	movs	r1, #5
    34b2:	4413      	add	r3, r2
    34b4:	f893 0020 	ldrb.w	r0, [r3, #32]
    34b8:	f008 fcb2 	bl	be20 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    34bc:	6863      	ldr	r3, [r4, #4]
    34be:	7ca2      	ldrb	r2, [r4, #18]
    34c0:	2105      	movs	r1, #5
    34c2:	4413      	add	r3, r2
}
    34c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    34c8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    34cc:	f008 bca8 	b.w	be20 <pinMode>

000034d0 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    34d0:	4770      	bx	lr
    34d2:	bf00      	nop

000034d4 <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    34d4:	2b01      	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    34d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    34d8:	4605      	mov	r5, r0
    34da:	b095      	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    34dc:	d03d      	beq.n	355a <SDClass::open(char const*, unsigned char)+0x86>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    34de:	2b02      	cmp	r3, #2
    34e0:	f240 2002 	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    34e4:	f101 0104 	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    34e8:	bf0c      	ite	eq
    34ea:	4603      	moveq	r3, r0
    34ec:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    34ee:	4668      	mov	r0, sp
    34f0:	f005 f83e 	bl	8570 <FsVolume::open(char const*, int)>
    34f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    34f6:	2b00      	cmp	r3, #0
    34f8:	d038      	beq.n	356c <SDClass::open(char const*, unsigned char)+0x98>
		if (file) return File(new SDFile(file));
    34fa:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    34fc:	2600      	movs	r6, #0
    34fe:	f008 fd69 	bl	bfd4 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3502:	4b21      	ldr	r3, [pc, #132]	; (3588 <SDClass::open(char const*, unsigned char)+0xb4>)
    3504:	af04      	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    3506:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3508:	e9c0 3600 	strd	r3, r6, [r0]
class Print
    350c:	9b01      	ldr	r3, [sp, #4]
    350e:	4639      	mov	r1, r7
    3510:	3018      	adds	r0, #24
    3512:	f840 3c0c 	str.w	r3, [r0, #-12]
class Stream : public Print
    3516:	4b1d      	ldr	r3, [pc, #116]	; (358c <SDClass::open(char const*, unsigned char)+0xb8>)
    3518:	f840 3c10 	str.w	r3, [r0, #-16]
    351c:	9b02      	ldr	r3, [sp, #8]
    351e:	f840 3c08 	str.w	r3, [r0, #-8]
    3522:	f89d 300c 	ldrb.w	r3, [sp, #12]
    3526:	f800 3c04 	strb.w	r3, [r0, #-4]
    352a:	f004 fec5 	bl	82b8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    352e:	4b18      	ldr	r3, [pc, #96]	; (3590 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3534:	65a6      	str	r6, [r4, #88]	; 0x58
    3536:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
    3538:	4b16      	ldr	r3, [pc, #88]	; (3594 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    353a:	606e      	str	r6, [r5, #4]
    353c:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    353e:	6863      	ldr	r3, [r4, #4]
    3540:	732e      	strb	r6, [r5, #12]
    3542:	3301      	adds	r3, #1
    3544:	60aa      	str	r2, [r5, #8]
		f = file;
    3546:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    3548:	6063      	str	r3, [r4, #4]
    354a:	4b13      	ldr	r3, [pc, #76]	; (3598 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() {close();}
    354c:	4638      	mov	r0, r7
    354e:	9300      	str	r3, [sp, #0]
    3550:	f004 fef4 	bl	833c <FsBaseFile::close()>
		return File();
	}
    3554:	4628      	mov	r0, r5
    3556:	b015      	add	sp, #84	; 0x54
    3558:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    355a:	f244 2302 	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    355e:	3104      	adds	r1, #4
    3560:	4668      	mov	r0, sp
    3562:	f005 f805 	bl	8570 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    3566:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3568:	2b00      	cmp	r3, #0
    356a:	d1c6      	bne.n	34fa <SDClass::open(char const*, unsigned char)+0x26>
    356c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    356e:	2b00      	cmp	r3, #0
    3570:	d1c3      	bne.n	34fa <SDClass::open(char const*, unsigned char)+0x26>
    3572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    3576:	4a07      	ldr	r2, [pc, #28]	; (3594 <SDClass::open(char const*, unsigned char)+0xc0>)
    3578:	af04      	add	r7, sp, #16
    357a:	732b      	strb	r3, [r5, #12]
    357c:	602a      	str	r2, [r5, #0]
    357e:	612b      	str	r3, [r5, #16]
    3580:	e9c5 3101 	strd	r3, r1, [r5, #4]
    3584:	e7e1      	b.n	354a <SDClass::open(char const*, unsigned char)+0x76>
    3586:	bf00      	nop
    3588:	20002204 	.word	0x20002204
    358c:	20002260 	.word	0x20002260
    3590:	200021e0 	.word	0x200021e0
    3594:	20002194 	.word	0x20002194
    3598:	20002054 	.word	0x20002054

0000359c <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    359c:	b510      	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    359e:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    35a2:	b08e      	sub	sp, #56	; 0x38
    35a4:	460a      	mov	r2, r1
    35a6:	b144      	cbz	r4, 35ba <SDClass::rmdir(char const*)+0x1e>
  FatFile() {}
    35a8:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    35aa:	4621      	mov	r1, r4
    35ac:	4668      	mov	r0, sp
    35ae:	9300      	str	r3, [sp, #0]
    35b0:	f002 fdb4 	bl	611c <FatFile::open(FatVolume*, char const*, int)>
    35b4:	b980      	cbnz	r0, 35d8 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    35b6:	b00e      	add	sp, #56	; 0x38
    35b8:	bd10      	pop	{r4, pc}
    35ba:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rmdir(path) : false;
    35be:	b141      	cbz	r1, 35d2 <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    35c0:	4623      	mov	r3, r4
    35c2:	4668      	mov	r0, sp
  ExFatFile() {}
    35c4:	940c      	str	r4, [sp, #48]	; 0x30
    35c6:	f000 fec7 	bl	4358 <ExFatFile::open(ExFatVolume*, char const*, int)>
    35ca:	b950      	cbnz	r0, 35e2 <SDClass::rmdir(char const*)+0x46>
    35cc:	2000      	movs	r0, #0
    35ce:	b00e      	add	sp, #56	; 0x38
    35d0:	bd10      	pop	{r4, pc}
    35d2:	4608      	mov	r0, r1
    35d4:	b00e      	add	sp, #56	; 0x38
    35d6:	bd10      	pop	{r4, pc}
    35d8:	4668      	mov	r0, sp
    35da:	f002 fff3 	bl	65c4 <FatFile::rmdir()>
    35de:	b00e      	add	sp, #56	; 0x38
    35e0:	bd10      	pop	{r4, pc}
    35e2:	4668      	mov	r0, sp
    35e4:	f000 ff76 	bl	44d4 <ExFatFile::rmdir()>
    35e8:	2800      	cmp	r0, #0
    35ea:	d0ef      	beq.n	35cc <SDClass::rmdir(char const*)+0x30>
    35ec:	e7e3      	b.n	35b6 <SDClass::rmdir(char const*)+0x1a>
    35ee:	bf00      	nop

000035f0 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    35f0:	b570      	push	{r4, r5, r6, lr}
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    35f2:	f8d0 5484 	ldr.w	r5, [r0, #1156]	; 0x484
    35f6:	b08e      	sub	sp, #56	; 0x38
    35f8:	4616      	mov	r6, r2
    35fa:	b15d      	cbz	r5, 3614 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    35fc:	f505 6589 	add.w	r5, r5, #1096	; 0x448
    3600:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    3602:	460a      	mov	r2, r1
    3604:	4668      	mov	r0, sp
    3606:	4629      	mov	r1, r5
    3608:	9300      	str	r3, [sp, #0]
    360a:	f002 fd05 	bl	6018 <FatFile::open(FatFile*, char const*, int)>
    360e:	b990      	cbnz	r0, 3636 <SDClass::rename(char const*, char const*)+0x46>
	}
    3610:	b00e      	add	sp, #56	; 0x38
    3612:	bd70      	pop	{r4, r5, r6, pc}
    3614:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    3618:	2800      	cmp	r0, #0
    361a:	d0f9      	beq.n	3610 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    361c:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    3620:	460a      	mov	r2, r1
    3622:	462b      	mov	r3, r5
    3624:	4668      	mov	r0, sp
    3626:	4621      	mov	r1, r4
    3628:	950c      	str	r5, [sp, #48]	; 0x30
    362a:	f000 fe19 	bl	4260 <ExFatFile::open(ExFatFile*, char const*, int)>
    362e:	b948      	cbnz	r0, 3644 <SDClass::rename(char const*, char const*)+0x54>
    3630:	2000      	movs	r0, #0
    3632:	b00e      	add	sp, #56	; 0x38
    3634:	bd70      	pop	{r4, r5, r6, pc}
    3636:	4632      	mov	r2, r6
    3638:	4629      	mov	r1, r5
    363a:	4668      	mov	r0, sp
    363c:	f002 fecc 	bl	63d8 <FatFile::rename(FatFile*, char const*)>
    3640:	b00e      	add	sp, #56	; 0x38
    3642:	bd70      	pop	{r4, r5, r6, pc}
    3644:	4632      	mov	r2, r6
    3646:	4621      	mov	r1, r4
    3648:	4668      	mov	r0, sp
    364a:	f001 f897 	bl	477c <ExFatFile::rename(ExFatFile*, char const*)>
    364e:	2800      	cmp	r0, #0
    3650:	d0ee      	beq.n	3630 <SDClass::rename(char const*, char const*)+0x40>
    3652:	e7dd      	b.n	3610 <SDClass::rename(char const*, char const*)+0x20>

00003654 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    3654:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->remove(path) :
    3656:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    365a:	b08e      	sub	sp, #56	; 0x38
    365c:	460a      	mov	r2, r1
    365e:	b14c      	cbz	r4, 3674 <SDClass::remove(char const*)+0x20>
    3660:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    3662:	2301      	movs	r3, #1
    3664:	4621      	mov	r1, r4
    3666:	9000      	str	r0, [sp, #0]
    3668:	4668      	mov	r0, sp
    366a:	f002 fd57 	bl	611c <FatFile::open(FatVolume*, char const*, int)>
    366e:	b980      	cbnz	r0, 3692 <SDClass::remove(char const*)+0x3e>
	}
    3670:	b00e      	add	sp, #56	; 0x38
    3672:	bd10      	pop	{r4, pc}
    3674:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    3678:	b141      	cbz	r1, 368c <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    367a:	2301      	movs	r3, #1
    367c:	4668      	mov	r0, sp
    367e:	940c      	str	r4, [sp, #48]	; 0x30
    3680:	f000 fe6a 	bl	4358 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3684:	b950      	cbnz	r0, 369c <SDClass::remove(char const*)+0x48>
    3686:	2000      	movs	r0, #0
    3688:	b00e      	add	sp, #56	; 0x38
    368a:	bd10      	pop	{r4, pc}
    368c:	4608      	mov	r0, r1
    368e:	b00e      	add	sp, #56	; 0x38
    3690:	bd10      	pop	{r4, pc}
    3692:	4668      	mov	r0, sp
    3694:	f003 fe48 	bl	7328 <FatFile::remove()>
    3698:	b00e      	add	sp, #56	; 0x38
    369a:	bd10      	pop	{r4, pc}
    369c:	4668      	mov	r0, sp
    369e:	f000 febf 	bl	4420 <ExFatFile::remove()>
    36a2:	2800      	cmp	r0, #0
    36a4:	d0ef      	beq.n	3686 <SDClass::remove(char const*)+0x32>
    36a6:	e7e3      	b.n	3670 <SDClass::remove(char const*)+0x1c>

000036a8 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    36a8:	b530      	push	{r4, r5, lr}
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    36aa:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    36ae:	b08f      	sub	sp, #60	; 0x3c
    36b0:	460a      	mov	r2, r1
    36b2:	b14c      	cbz	r4, 36c8 <SDClass::mkdir(char const*)+0x20>
    36b4:	2500      	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    36b6:	2301      	movs	r3, #1
    36b8:	f504 6189 	add.w	r1, r4, #1096	; 0x448
    36bc:	4668      	mov	r0, sp
    36be:	9500      	str	r5, [sp, #0]
    36c0:	f002 fc34 	bl	5f2c <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    36c4:	b00f      	add	sp, #60	; 0x3c
    36c6:	bd30      	pop	{r4, r5, pc}
    36c8:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    36cc:	2800      	cmp	r0, #0
    36ce:	d0f9      	beq.n	36c4 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    36d0:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    36d4:	2301      	movs	r3, #1
    36d6:	4668      	mov	r0, sp
    36d8:	940c      	str	r4, [sp, #48]	; 0x30
    36da:	f001 f8d1 	bl	4880 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    36de:	b00f      	add	sp, #60	; 0x3c
    36e0:	bd30      	pop	{r4, r5, pc}
    36e2:	bf00      	nop

000036e4 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    36e4:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->exists(path) :
    36e6:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    36ea:	b08e      	sub	sp, #56	; 0x38
    36ec:	460a      	mov	r2, r1
    36ee:	b13c      	cbz	r4, 3700 <SDClass::exists(char const*)+0x1c>
    36f0:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    36f2:	4621      	mov	r1, r4
    36f4:	4668      	mov	r0, sp
    36f6:	9300      	str	r3, [sp, #0]
    36f8:	f002 fd10 	bl	611c <FatFile::open(FatVolume*, char const*, int)>
	}
    36fc:	b00e      	add	sp, #56	; 0x38
    36fe:	bd10      	pop	{r4, pc}
    3700:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    3704:	b131      	cbz	r1, 3714 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    3706:	4623      	mov	r3, r4
    3708:	4668      	mov	r0, sp
    370a:	940c      	str	r4, [sp, #48]	; 0x30
    370c:	f000 fe24 	bl	4358 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3710:	b00e      	add	sp, #56	; 0x38
    3712:	bd10      	pop	{r4, pc}
    3714:	4608      	mov	r0, r1
    3716:	b00e      	add	sp, #56	; 0x38
    3718:	bd10      	pop	{r4, pc}
    371a:	bf00      	nop

0000371c <SDClass::usedSize()>:
	uint64_t usedSize() {
    371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    371e:	4605      	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    3720:	f890 04d0 	ldrb.w	r0, [r0, #1232]	; 0x4d0
    3724:	b908      	cbnz	r0, 372a <SDClass::usedSize()+0xe>
    3726:	4601      	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    3728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol ? m_fVol->clusterCount() :
    372a:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    372e:	2b00      	cmp	r3, #0
    3730:	d04c      	beq.n	37cc <SDClass::usedSize()+0xb0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    3732:	69dc      	ldr	r4, [r3, #28]
    3734:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    3738:	3c01      	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    373a:	2800      	cmp	r0, #0
    373c:	d054      	beq.n	37e8 <SDClass::usedSize()+0xcc>
    373e:	6803      	ldr	r3, [r0, #0]
    3740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3742:	4798      	blx	r3
    3744:	b1e0      	cbz	r0, 3780 <SDClass::usedSize()+0x64>
    3746:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    374a:	b378      	cbz	r0, 37ac <SDClass::usedSize()+0x90>
    374c:	6803      	ldr	r3, [r0, #0]
    374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3750:	4798      	blx	r3
    3752:	b9a8      	cbnz	r0, 3780 <SDClass::usedSize()+0x64>
    3754:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    3758:	b340      	cbz	r0, 37ac <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    375a:	6803      	ldr	r3, [r0, #0]
    375c:	2101      	movs	r1, #1
    375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3760:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    3762:	4607      	mov	r7, r0
    3764:	b310      	cbz	r0, 37ac <SDClass::usedSize()+0x90>
    return m_fVol ? m_fVol->freeClusterCount() :
    3766:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    376a:	bb58      	cbnz	r0, 37c4 <SDClass::usedSize()+0xa8>
    376c:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
    3770:	4633      	mov	r3, r6
           m_xVol ? m_xVol->freeClusterCount() : 0;
    3772:	b96e      	cbnz	r6, 3790 <SDClass::usedSize()+0x74>
    3774:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    3778:	b990      	cbnz	r0, 37a0 <SDClass::usedSize()+0x84>
  uint32_t bytesPerCluster() const {
    377a:	2000      	movs	r0, #0
    377c:	4601      	mov	r1, r0
    377e:	e7d3      	b.n	3728 <SDClass::usedSize()+0xc>
    return m_fVol ? m_fVol->freeClusterCount() :
    3780:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    3784:	b9e8      	cbnz	r0, 37c2 <SDClass::usedSize()+0xa6>
    3786:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->freeClusterCount() : 0;
    378a:	2b00      	cmp	r3, #0
    378c:	d0f5      	beq.n	377a <SDClass::usedSize()+0x5e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    378e:	4607      	mov	r7, r0
    3790:	4618      	mov	r0, r3
    3792:	f002 f949 	bl	5a28 <ExFatPartition::freeClusterCount()>
    3796:	4606      	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    3798:	b13f      	cbz	r7, 37aa <SDClass::usedSize()+0x8e>
    379a:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    379e:	b128      	cbz	r0, 37ac <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    37a0:	6803      	ldr	r3, [r0, #0]
    37a2:	2100      	movs	r1, #0
    37a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    37a6:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    37a8:	b100      	cbz	r0, 37ac <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    37aa:	1ba4      	subs	r4, r4, r6
    return m_fVol ? m_fVol->bytesPerCluster() :
    37ac:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    37b0:	b1fb      	cbz	r3, 37f2 <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    37b2:	799b      	ldrb	r3, [r3, #6]
    37b4:	f44f 7100 	mov.w	r1, #512	; 0x200
    37b8:	4099      	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    37ba:	b289      	uxth	r1, r1
    37bc:	fba1 0104 	umull	r0, r1, r1, r4
	}
    37c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    37c2:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    37c4:	f004 fc02 	bl	7fcc <FatPartition::freeClusterCount()>
    37c8:	4606      	mov	r6, r0
    37ca:	e7e5      	b.n	3798 <SDClass::usedSize()+0x7c>
    37cc:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    37d0:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
           m_xVol ? m_xVol->clusterCount() : 0;
    37d4:	b1b3      	cbz	r3, 3804 <SDClass::usedSize()+0xe8>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    37d6:	f8d3 4430 	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    37da:	2800      	cmp	r0, #0
    37dc:	d1af      	bne.n	373e <SDClass::usedSize()+0x22>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    37de:	4618      	mov	r0, r3
    37e0:	f002 f922 	bl	5a28 <ExFatPartition::freeClusterCount()>
    37e4:	4606      	mov	r6, r0
    37e6:	e7e0      	b.n	37aa <SDClass::usedSize()+0x8e>
    return m_fVol ? m_fVol->freeClusterCount() :
    37e8:	4618      	mov	r0, r3
    37ea:	f004 fbef 	bl	7fcc <FatPartition::freeClusterCount()>
    37ee:	4606      	mov	r6, r0
    37f0:	e7db      	b.n	37aa <SDClass::usedSize()+0x8e>
    37f2:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    37f6:	2e00      	cmp	r6, #0
    37f8:	d0bf      	beq.n	377a <SDClass::usedSize()+0x5e>
		  * (uint64_t)sdfs.bytesPerCluster();
    37fa:	f8d6 143c 	ldr.w	r1, [r6, #1084]	; 0x43c
    37fe:	fba1 0104 	umull	r0, r1, r1, r4
	}
    3802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3804:	2800      	cmp	r0, #0
    3806:	d0b8      	beq.n	377a <SDClass::usedSize()+0x5e>
           m_xVol ? m_xVol->clusterCount() : 0;
    3808:	461c      	mov	r4, r3
    380a:	e798      	b.n	373e <SDClass::usedSize()+0x22>

0000380c <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    380c:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    3810:	b163      	cbz	r3, 382c <SDClass::totalSize()+0x20>
    return m_fVol ? m_fVol->clusterCount() :
    3812:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    3816:	b163      	cbz	r3, 3832 <SDClass::totalSize()+0x26>
    3818:	799a      	ldrb	r2, [r3, #6]
    381a:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    381e:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    3820:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    3822:	3901      	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    3824:	b280      	uxth	r0, r0
    3826:	fba0 0101 	umull	r0, r1, r0, r1
    382a:	4770      	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    382c:	4618      	mov	r0, r3
    382e:	4601      	mov	r1, r0
	}
    3830:	4770      	bx	lr
    3832:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->clusterCount() : 0;
    3836:	2800      	cmp	r0, #0
    3838:	d0f9      	beq.n	382e <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    383a:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    383e:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
    3842:	fba1 0100 	umull	r0, r1, r1, r0
    3846:	4770      	bx	lr

00003848 <SDClass::format(int, char, Print&)>:
	}
}
#endif

bool SDClass::format(int type, char progressChar, Print& pr)
{
    3848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() {return m_card;}
    384c:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    3850:	b08d      	sub	sp, #52	; 0x34
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
    3852:	b14d      	cbz	r5, 3868 <SDClass::format(int, char, Print&)+0x20>
    3854:	4698      	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    3856:	682b      	ldr	r3, [r5, #0]
    3858:	4604      	mov	r4, r0
    385a:	4628      	mov	r0, r5
    385c:	69db      	ldr	r3, [r3, #28]
    385e:	4798      	blx	r3
	if (sectors <= 12288) return false; // card too small
    3860:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    3864:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    3866:	d804      	bhi.n	3872 <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    3868:	2600      	movs	r6, #0
		// TODO: Is begin() really necessary?  Is a quicker way possible?
		card->syncDevice();
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
	}
	return ret;
}
    386a:	4630      	mov	r0, r6
    386c:	b00d      	add	sp, #52	; 0x34
    386e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    3872:	f44f 7000 	mov.w	r0, #512	; 0x200
    3876:	f00a f817 	bl	d8a8 <malloc>
	if (!buf) return false; // unable to allocate memory
    387a:	4607      	mov	r7, r0
    387c:	2800      	cmp	r0, #0
    387e:	d0f3      	beq.n	3868 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    3880:	f10d 0904 	add.w	r9, sp, #4
	if (sectors > 67108864) {
    3884:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    3888:	4602      	mov	r2, r0
    388a:	4643      	mov	r3, r8
    388c:	4629      	mov	r1, r5
    388e:	4648      	mov	r0, r9
	if (sectors > 67108864) {
    3890:	d92e      	bls.n	38f0 <SDClass::format(int, char, Print&)+0xa8>
		ret = exFatFormatter.format(card, buf, &pr);
    3892:	f001 fb95 	bl	4fc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    3896:	4606      	mov	r6, r0
	free(buf);
    3898:	4638      	mov	r0, r7
    389a:	f00a f80d 	bl	d8b8 <free>
	if (ret) {
    389e:	2e00      	cmp	r6, #0
    38a0:	d0e2      	beq.n	3868 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    38a2:	682b      	ldr	r3, [r5, #0]
    38a4:	4628      	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    38a6:	1d27      	adds	r7, r4, #4
		card->syncDevice();
    38a8:	6a1b      	ldr	r3, [r3, #32]
    38aa:	4798      	blx	r3
    if (spiConfigBackupPin == 255) {
    38ac:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
    38b0:	2bff      	cmp	r3, #255	; 0xff
    38b2:	d021      	beq.n	38f8 <SDClass::format(int, char, Print&)+0xb0>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    38b4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    38b8:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    38bc:	9302      	str	r3, [sp, #8]
    38be:	4628      	mov	r0, r5
    38c0:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    38c4:	9303      	str	r3, [sp, #12]
    38c6:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    38ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    38ce:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
    38d2:	f005 fd13 	bl	92fc <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    38d6:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    38da:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    38de:	2b00      	cmp	r3, #0
    38e0:	d1c3      	bne.n	386a <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    38e2:	2301      	movs	r3, #1
    38e4:	4629      	mov	r1, r5
    38e6:	4638      	mov	r0, r7
    38e8:	461a      	mov	r2, r3
    38ea:	f004 fdcf 	bl	848c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    38ee:	e7bc      	b.n	386a <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    38f0:	f004 f832 	bl	7958 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    38f4:	4606      	mov	r6, r0
    38f6:	e7cf      	b.n	3898 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    38f8:	f204 4594 	addw	r5, r4, #1172	; 0x494
    38fc:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    3900:	4628      	mov	r0, r5
    3902:	f006 fb43 	bl	9f8c <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    3906:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    3908:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    390c:	f005 fda0 	bl	9450 <SdioCard::errorCode() const>
    3910:	2800      	cmp	r0, #0
    3912:	d1aa      	bne.n	386a <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    3914:	2301      	movs	r3, #1
    3916:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    391a:	4638      	mov	r0, r7
    391c:	461a      	mov	r2, r3
    391e:	f004 fdb5 	bl	848c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    3922:	e7a2      	b.n	386a <SDClass::format(int, char, Print&)+0x22>

00003924 <SDClass::mediaPresent()>:
	}
	return false;
}

bool SDClass::mediaPresent()
{
    3924:	b5f0      	push	{r4, r5, r6, r7, lr}
  SdCard* card() {return m_card;}
    3926:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
    392a:	b085      	sub	sp, #20
    392c:	4604      	mov	r4, r0
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
//	Serial.printf("mediaPresent: card:%x cs:%u cd:%u\n", (uint32_t)card, csPin_, cdPin_);
	if (card) {
    392e:	2e00      	cmp	r6, #0
    3930:	d042      	beq.n	39b8 <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    3932:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
			#ifdef BUILTIN_SDCARD
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
    3936:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
		if (cardPreviouslyPresent) {
    393a:	b185      	cbz	r5, 395e <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    393c:	2bfe      	cmp	r3, #254	; 0xfe
    393e:	d063      	beq.n	3a08 <SDClass::mediaPresent()+0xe4>
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
				// see if we have digital pin to bypass...
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    3940:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    3944:	2827      	cmp	r0, #39	; 0x27
    3946:	d93d      	bls.n	39c4 <SDClass::mediaPresent()+0xa0>
				else {
					// SPI doesn't have 32 bit status, read CID register
					cid_t cid;
					ret = card->readCID(&cid);
    3948:	6833      	ldr	r3, [r6, #0]
    394a:	4669      	mov	r1, sp
    394c:	4630      	mov	r0, r6
    394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3950:	4798      	blx	r3
    3952:	4605      	mov	r5, r0
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
	return ret;
}
    3954:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    3956:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    395a:	b005      	add	sp, #20
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    395e:	2bfe      	cmp	r3, #254	; 0xfe
    3960:	d026      	beq.n	39b0 <SDClass::mediaPresent()+0x8c>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    3962:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    3966:	2827      	cmp	r0, #39	; 0x27
    3968:	d949      	bls.n	39fe <SDClass::mediaPresent()+0xda>
    if (spiConfigBackupPin == 255) {
    396a:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
				ret = sdfs.restart();
    396e:	1d27      	adds	r7, r4, #4
    3970:	2bff      	cmp	r3, #255	; 0xff
    3972:	d02d      	beq.n	39d0 <SDClass::mediaPresent()+0xac>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    3974:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    m_spiCard.begin(config);
    3978:	f504 6694 	add.w	r6, r4, #1184	; 0x4a0
    397c:	f8d4 24c8 	ldr.w	r2, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    3980:	9301      	str	r3, [sp, #4]
    3982:	4630      	mov	r0, r6
    3984:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    3988:	9202      	str	r2, [sp, #8]
    398a:	f8ad 3000 	strh.w	r3, [sp]
    398e:	466b      	mov	r3, sp
    3990:	cb0e      	ldmia	r3, {r1, r2, r3}
    3992:	f005 fcb3 	bl	92fc <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    3996:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    399a:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    399e:	b963      	cbnz	r3, 39ba <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    39a0:	2301      	movs	r3, #1
    39a2:	4631      	mov	r1, r6
    39a4:	4638      	mov	r0, r7
    39a6:	461a      	mov	r2, r3
    39a8:	f004 fd70 	bl	848c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    39ac:	4605      	mov	r5, r0
    39ae:	e004      	b.n	39ba <SDClass::mediaPresent()+0x96>
			return (CORE_PIN38_PINREG & CORE_PIN38_BITMASK) ? 1 : 0;
    39b0:	4b1f      	ldr	r3, [pc, #124]	; (3a30 <SDClass::mediaPresent()+0x10c>)
    39b2:	689b      	ldr	r3, [r3, #8]
			if (ret)
    39b4:	039b      	lsls	r3, r3, #14
    39b6:	d4d8      	bmi.n	396a <SDClass::mediaPresent()+0x46>
		ret = false;
    39b8:	2500      	movs	r5, #0
}
    39ba:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    39bc:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    39c0:	b005      	add	sp, #20
    39c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    39c4:	f008 fa1a 	bl	bdfc <digitalRead>
    39c8:	1e05      	subs	r5, r0, #0
    39ca:	bf18      	it	ne
    39cc:	2501      	movne	r5, #1
    39ce:	e7f4      	b.n	39ba <SDClass::mediaPresent()+0x96>
    m_sdioCard.begin(config);
    39d0:	f204 4694 	addw	r6, r4, #1172	; 0x494
    39d4:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    39d8:	4630      	mov	r0, r6
    39da:	f006 fad7 	bl	9f8c <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    39de:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    39e0:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    39e4:	f005 fd34 	bl	9450 <SdioCard::errorCode() const>
    39e8:	2800      	cmp	r0, #0
    39ea:	d1e6      	bne.n	39ba <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    39ec:	2301      	movs	r3, #1
    39ee:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    39f2:	4638      	mov	r0, r7
    39f4:	461a      	mov	r2, r3
    39f6:	f004 fd49 	bl	848c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    39fa:	4605      	mov	r5, r0
    39fc:	e7dd      	b.n	39ba <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    39fe:	f008 f9fd 	bl	bdfc <digitalRead>
			if (ret)
    3a02:	2800      	cmp	r0, #0
    3a04:	d1b1      	bne.n	396a <SDClass::mediaPresent()+0x46>
    3a06:	e7d7      	b.n	39b8 <SDClass::mediaPresent()+0x94>
				s = card->status();
    3a08:	6833      	ldr	r3, [r6, #0]
    3a0a:	4630      	mov	r0, r6
    3a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3a0e:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    3a10:	1c42      	adds	r2, r0, #1
				s = card->status();
    3a12:	4603      	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    3a14:	d094      	beq.n	3940 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    3a16:	2800      	cmp	r0, #0
    3a18:	d1cf      	bne.n	39ba <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    3a1a:	f894 24d1 	ldrb.w	r2, [r4, #1233]	; 0x4d1
    3a1e:	2afe      	cmp	r2, #254	; 0xfe
    3a20:	d1ca      	bne.n	39b8 <SDClass::mediaPresent()+0x94>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3a22:	2103      	movs	r1, #3
    3a24:	2026      	movs	r0, #38	; 0x26
				ret = false;
    3a26:	461d      	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3a28:	f008 f9fa 	bl	be20 <pinMode>
    3a2c:	e7c5      	b.n	39ba <SDClass::mediaPresent()+0x96>
    3a2e:	bf00      	nop
    3a30:	42008000 	.word	0x42008000

00003a34 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    3a34:	4818      	ldr	r0, [pc, #96]	; (3a98 <_GLOBAL__sub_I_SD+0x64>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    3a36:	f04f 0c29 	mov.w	ip, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    3a3a:	4a18      	ldr	r2, [pc, #96]	; (3a9c <_GLOBAL__sub_I_SD+0x68>)
  FsVolume() {}
    3a3c:	2300      	movs	r3, #0
	SPISettings() : _clock(4000000) {
    3a3e:	4918      	ldr	r1, [pc, #96]	; (3aa0 <_GLOBAL__sub_I_SD+0x6c>)
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    3a40:	b410      	push	{r4}
    3a42:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3a46:	2207      	movs	r2, #7
    3a48:	f880 c4b1 	strb.w	ip, [r0, #1201]	; 0x4b1
    3a4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    3a50:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    3a54:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    3a58:	4c12      	ldr	r4, [pc, #72]	; (3aa4 <_GLOBAL__sub_I_SD+0x70>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3a5a:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    3a5e:	4a12      	ldr	r2, [pc, #72]	; (3aa8 <_GLOBAL__sub_I_SD+0x74>)
    3a60:	f8a0 14d0 	strh.w	r1, [r0, #1232]	; 0x4d0
  SdioConfig() {}
    3a64:	f8a0 349c 	strh.w	r3, [r0, #1180]	; 0x49c
  SharedSpiCard() {}
    3a68:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
    3a6c:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    3a70:	f880 c4d2 	strb.w	ip, [r0, #1234]	; 0x4d2
    3a74:	6004      	str	r4, [r0, #0]
  DedicatedSpiCard() {}
    3a76:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
SDClass SD;
    3a7a:	490c      	ldr	r1, [pc, #48]	; (3aac <_GLOBAL__sub_I_SD+0x78>)
    3a7c:	4a0c      	ldr	r2, [pc, #48]	; (3ab0 <_GLOBAL__sub_I_SD+0x7c>)
}
    3a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a82:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    3a86:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    3a8a:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
    3a8e:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
SDClass SD;
    3a92:	f009 bf03 	b.w	d89c <__aeabi_atexit>
    3a96:	bf00      	nop
    3a98:	20004120 	.word	0x20004120
    3a9c:	200022d8 	.word	0x200022d8
    3aa0:	003d0900 	.word	0x003d0900
    3aa4:	20002284 	.word	0x20002284
    3aa8:	200020a8 	.word	0x200020a8
    3aac:	000034d1 	.word	0x000034d1
    3ab0:	20002f34 	.word	0x20002f34

00003ab4 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3ab4:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    3ab6:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3aba:	b084      	sub	sp, #16
    3abc:	468c      	mov	ip, r1
    3abe:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    3ac0:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3ac2:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    3ac4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ac8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    3acc:	ea4f 124c 	mov.w	r2, ip, lsl #5
    3ad0:	4629      	mov	r1, r5
    3ad2:	6a20      	ldr	r0, [r4, #32]
    3ad4:	f001 fec4 	bl	5860 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3ad8:	2801      	cmp	r0, #1
    3ada:	d106      	bne.n	3aea <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    3adc:	4632      	mov	r2, r6
    3ade:	4629      	mov	r1, r5
    3ae0:	6a20      	ldr	r0, [r4, #32]
    3ae2:	f001 fea1 	bl	5828 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    3ae6:	b004      	add	sp, #16
    3ae8:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    3aea:	2000      	movs	r0, #0
}
    3aec:	b004      	add	sp, #16
    3aee:	bd70      	pop	{r4, r5, r6, pc}

00003af0 <ExFatFile::close()>:
bool ExFatFile::close() {
    3af0:	b510      	push	{r4, lr}
    3af2:	4604      	mov	r4, r0
  bool rtn = sync();
    3af4:	f000 fdba 	bl	466c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3af8:	2300      	movs	r3, #0
    3afa:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3afe:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    3b02:	bd10      	pop	{r4, pc}

00003b04 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b04:	b538      	push	{r3, r4, r5, lr}
    3b06:	4614      	mov	r4, r2
    3b08:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b0a:	2200      	movs	r2, #0
    3b0c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    3b10:	6a00      	ldr	r0, [r0, #32]
    3b12:	f001 fe89 	bl	5828 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b16:	4603      	mov	r3, r0
    3b18:	b120      	cbz	r0, 3b24 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3b1a:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    3b1c:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    3b1e:	802a      	strh	r2, [r5, #0]
    3b20:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    3b22:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    3b24:	bd38      	pop	{r3, r4, r5, pc}
    3b26:	bf00      	nop

00003b28 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b28:	b538      	push	{r3, r4, r5, lr}
    3b2a:	4614      	mov	r4, r2
    3b2c:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b2e:	2200      	movs	r2, #0
    3b30:	f100 0124 	add.w	r1, r0, #36	; 0x24
    3b34:	6a00      	ldr	r0, [r0, #32]
    3b36:	f001 fe77 	bl	5828 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b3a:	4603      	mov	r3, r0
    3b3c:	b120      	cbz	r0, 3b48 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    3b3e:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    3b40:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    3b42:	802a      	strh	r2, [r5, #0]
    3b44:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3b46:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    3b48:	bd38      	pop	{r3, r4, r5, pc}
    3b4a:	bf00      	nop

00003b4c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3b4c:	b538      	push	{r3, r4, r5, lr}
    3b4e:	460d      	mov	r5, r1
  if (isOpen()) {
    3b50:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    3b54:	b109      	cbz	r1, 3b5a <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3b56:	2000      	movs	r0, #0
}
    3b58:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    3b5a:	2238      	movs	r2, #56	; 0x38
    3b5c:	4604      	mov	r4, r0
    3b5e:	f00a fd1f 	bl	e5a0 <memset>
  m_flags = FILE_FLAG_READ;
    3b62:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3b64:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    3b66:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3b68:	4618      	mov	r0, r3
    3b6a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    3b6e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    3b72:	bd38      	pop	{r3, r4, r5, pc}

00003b74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    3b74:	b4f0      	push	{r4, r5, r6, r7}
    3b76:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    3b78:	7809      	ldrb	r1, [r1, #0]
    3b7a:	2920      	cmp	r1, #32
    3b7c:	d103      	bne.n	3b86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    3b7e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    3b82:	2c20      	cmp	r4, #32
    3b84:	d0fb      	beq.n	3b7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    3b86:	6015      	str	r5, [r2, #0]
  fname->end = path;
    3b88:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3b8a:	782c      	ldrb	r4, [r5, #0]
    3b8c:	2c2f      	cmp	r4, #47	; 0x2f
    3b8e:	d011      	beq.n	3bb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3b90:	b184      	cbz	r4, 3bb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3b92:	1c6e      	adds	r6, r5, #1
    3b94:	2c3c      	cmp	r4, #60	; 0x3c
    3b96:	4f1d      	ldr	r7, [pc, #116]	; (3c0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    3b98:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    3b9a:	d82a      	bhi.n	3bf2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    3b9c:	2c21      	cmp	r4, #33	; 0x21
    3b9e:	d812      	bhi.n	3bc6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    3ba0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    3ba4:	f1bc 0f1e 	cmp.w	ip, #30
    3ba8:	d816      	bhi.n	3bd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    3baa:	2000      	movs	r0, #0
    3bac:	bcf0      	pop	{r4, r5, r6, r7}
    3bae:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    3bb0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    3bb4:	2c20      	cmp	r4, #32
    3bb6:	d0fb      	beq.n	3bb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    3bb8:	2c2f      	cmp	r4, #47	; 0x2f
    3bba:	d0f9      	beq.n	3bb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    3bbc:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    3bbe:	4611      	mov	r1, r2
}
    3bc0:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    3bc2:	f001 bd1f 	b.w	5604 <ExFatFile::hashName(ExName_t*)>
    3bc6:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    3bca:	fa5f fc8c 	uxtb.w	ip, ip
    3bce:	fa27 fc0c 	lsr.w	ip, r7, ip
    3bd2:	f01c 0f01 	tst.w	ip, #1
    3bd6:	d1e8      	bne.n	3baa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    3bd8:	2c2e      	cmp	r4, #46	; 0x2e
    3bda:	d001      	beq.n	3be0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3bdc:	2c20      	cmp	r4, #32
    3bde:	d10d      	bne.n	3bfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    3be0:	f816 4b01 	ldrb.w	r4, [r6], #1
    3be4:	2c00      	cmp	r4, #0
    3be6:	d0e5      	beq.n	3bb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3be8:	2c2f      	cmp	r4, #47	; 0x2f
    3bea:	d0e3      	beq.n	3bb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    3bec:	2c3c      	cmp	r4, #60	; 0x3c
    3bee:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    3bf0:	d9d4      	bls.n	3b9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    3bf2:	2c5c      	cmp	r4, #92	; 0x5c
    3bf4:	d0d9      	beq.n	3baa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3bf6:	d903      	bls.n	3c00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    3bf8:	2c7c      	cmp	r4, #124	; 0x7c
    3bfa:	d0d6      	beq.n	3baa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    3bfc:	6096      	str	r6, [r2, #8]
    3bfe:	e7ef      	b.n	3be0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c00:	3c3e      	subs	r4, #62	; 0x3e
    3c02:	2c01      	cmp	r4, #1
    3c04:	d8fa      	bhi.n	3bfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    3c06:	2000      	movs	r0, #0
    3c08:	bcf0      	pop	{r4, r5, r6, r7}
    3c0a:	4770      	bx	lr
    3c0c:	05002101 	.word	0x05002101

00003c10 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    3c14:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    3c18:	b083      	sub	sp, #12
    3c1a:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3c1c:	07dc      	lsls	r4, r3, #31
    3c1e:	d574      	bpl.n	3d0a <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3c20:	0658      	lsls	r0, r3, #25
    3c22:	460f      	mov	r7, r1
    3c24:	4690      	mov	r8, r2
    3c26:	f140 80b0 	bpl.w	3d8a <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    3c2a:	e9d5 2300 	ldrd	r2, r3, [r5]
    3c2e:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    3c32:	eb18 0402 	adds.w	r4, r8, r2
    3c36:	f143 0300 	adc.w	r3, r3, #0
    3c3a:	42a1      	cmp	r1, r4
    3c3c:	eb70 0303 	sbcs.w	r3, r0, r3
    3c40:	f0c0 80a9 	bcc.w	3d96 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3c44:	f1b8 0f00 	cmp.w	r8, #0
    3c48:	d05b      	beq.n	3d02 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    3c4a:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3c4c:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    3c50:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3c54:	f8d5 a020 	ldr.w	sl, [r5, #32]
    3c58:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    3c5c:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3c5e:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    3c62:	2c00      	cmp	r4, #0
    3c64:	d170      	bne.n	3d48 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    3c66:	4313      	orrs	r3, r2
    3c68:	d170      	bne.n	3d4c <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3c6a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    3c6e:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    3c70:	bf4c      	ite	mi
    3c72:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    3c76:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    3c78:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3c7a:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    3c7e:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3c80:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3c84:	0a63      	lsrs	r3, r4, #9
    3c86:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    3c88:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    3c8c:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3c8e:	f1bb 0f00 	cmp.w	fp, #0
    3c92:	d145      	bne.n	3d20 <ExFatFile::read(void*, unsigned int)+0x110>
    3c94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3c98:	d342      	bcc.n	3d20 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    3c9a:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    3c9e:	4291      	cmp	r1, r2
    3ca0:	d03e      	beq.n	3d20 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    3ca2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    3ca6:	d358      	bcc.n	3d5a <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    3ca8:	f04f 0b01 	mov.w	fp, #1
    3cac:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3cb0:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3cb4:	0a73      	lsrs	r3, r6, #9
    3cb6:	459b      	cmp	fp, r3
    3cb8:	bf28      	it	cs
    3cba:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    3cbc:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3cbe:	ea4f 244b 	mov.w	r4, fp, lsl #9
    3cc2:	d80a      	bhi.n	3cda <ExFatFile::read(void*, unsigned int)+0xca>
    3cc4:	eb01 030b 	add.w	r3, r1, fp
    3cc8:	429a      	cmp	r2, r3
    3cca:	d206      	bcs.n	3cda <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    3ccc:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    3cd0:	9101      	str	r1, [sp, #4]
    3cd2:	f006 fdb5 	bl	a840 <FsCache::sync()>
    3cd6:	9901      	ldr	r1, [sp, #4]
    3cd8:	b1b8      	cbz	r0, 3d0a <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    3cda:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    3cde:	465b      	mov	r3, fp
    3ce0:	6802      	ldr	r2, [r0, #0]
    3ce2:	f8d2 a014 	ldr.w	sl, [r2, #20]
    3ce6:	463a      	mov	r2, r7
    3ce8:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3cea:	b170      	cbz	r0, 3d0a <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3cec:	4623      	mov	r3, r4
    dst += n;
    3cee:	4427      	add	r7, r4
    m_curPosition += n;
    3cf0:	e9d5 1200 	ldrd	r1, r2, [r5]
    3cf4:	185b      	adds	r3, r3, r1
    3cf6:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    3cfa:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    3cfc:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    3d00:	d1a8      	bne.n	3c54 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    3d02:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    3d04:	b003      	add	sp, #12
    3d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    3d0a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    3d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    3d12:	f043 0302 	orr.w	r3, r3, #2
    3d16:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    3d1a:	b003      	add	sp, #12
    3d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3d20:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    3d24:	2200      	movs	r2, #0
    3d26:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    3d2a:	42b4      	cmp	r4, r6
    3d2c:	bf28      	it	cs
    3d2e:	4634      	movcs	r4, r6
    3d30:	f006 fdb2 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3d34:	2800      	cmp	r0, #0
    3d36:	d0e8      	beq.n	3d0a <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    3d38:	eb00 010b 	add.w	r1, r0, fp
    3d3c:	4622      	mov	r2, r4
    3d3e:	4638      	mov	r0, r7
    3d40:	f008 f8ae 	bl	bea0 <memcpy>
    m_curPosition += n;
    3d44:	4623      	mov	r3, r4
    3d46:	e7d2      	b.n	3cee <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    3d48:	69aa      	ldr	r2, [r5, #24]
    3d4a:	e796      	b.n	3c7a <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    3d4c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3d50:	065b      	lsls	r3, r3, #25
    3d52:	d50e      	bpl.n	3d72 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    3d54:	69aa      	ldr	r2, [r5, #24]
    3d56:	3201      	adds	r2, #1
    3d58:	e78e      	b.n	3c78 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    3d5a:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    3d5e:	463a      	mov	r2, r7
    3d60:	6803      	ldr	r3, [r0, #0]
    3d62:	691b      	ldr	r3, [r3, #16]
    3d64:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3d66:	2800      	cmp	r0, #0
    3d68:	d0cf      	beq.n	3d0a <ExFatFile::read(void*, unsigned int)+0xfa>
    3d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3d6e:	461c      	mov	r4, r3
    3d70:	e7bd      	b.n	3cee <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3d72:	464a      	mov	r2, r9
    3d74:	4650      	mov	r0, sl
    3d76:	69a9      	ldr	r1, [r5, #24]
    3d78:	f001 fdb4 	bl	58e4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3d7c:	2800      	cmp	r0, #0
    3d7e:	dbc4      	blt.n	3d0a <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    3d80:	d00c      	beq.n	3d9c <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3d82:	f8d5 a020 	ldr.w	sl, [r5, #32]
    3d86:	69aa      	ldr	r2, [r5, #24]
    3d88:	e777      	b.n	3c7a <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    3d8a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    3d8e:	0719      	lsls	r1, r3, #28
    3d90:	f57f af58 	bpl.w	3c44 <ExFatFile::read(void*, unsigned int)+0x34>
    3d94:	e749      	b.n	3c2a <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    3d96:	eba1 0802 	sub.w	r8, r1, r2
    3d9a:	e753      	b.n	3c44 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    3d9c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    3da0:	f013 0f50 	tst.w	r3, #80	; 0x50
    3da4:	d0b1      	beq.n	3d0a <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    3da6:	eba8 0806 	sub.w	r8, r8, r6
    3daa:	4640      	mov	r0, r8
    3dac:	e7aa      	b.n	3d04 <ExFatFile::read(void*, unsigned int)+0xf4>
    3dae:	bf00      	nop

00003db0 <ExFatFile::peek()>:
int ExFatFile::peek() {
    3db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3db2:	b083      	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    3db4:	2201      	movs	r2, #1
    3db6:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    3db8:	6985      	ldr	r5, [r0, #24]
    3dba:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    3dbe:	e9d0 6700 	ldrd	r6, r7, [r0]
    3dc2:	f7ff ff25 	bl	3c10 <ExFatFile::read(void*, unsigned int)>
    3dc6:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    3dc8:	61a5      	str	r5, [r4, #24]
    3dca:	bf0c      	ite	eq
    3dcc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3dd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    3dd4:	e9c4 6700 	strd	r6, r7, [r4]
}
    3dd8:	b003      	add	sp, #12
    3dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003ddc <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3de0:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    3de2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    3de6:	b083      	sub	sp, #12
    3de8:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3dea:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    3dee:	2b00      	cmp	r3, #0
    3df0:	d051      	beq.n	3e96 <ExFatFile::seekSet(unsigned long long)+0xba>
    3df2:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3df4:	e9d0 1c00 	ldrd	r1, ip, [r0]
    3df8:	45bc      	cmp	ip, r7
    3dfa:	bf08      	it	eq
    3dfc:	4291      	cmpeq	r1, r2
    3dfe:	d05c      	beq.n	3eba <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    3e00:	ea56 0207 	orrs.w	r2, r6, r7
    3e04:	d04d      	beq.n	3ea2 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3e06:	071d      	lsls	r5, r3, #28
    3e08:	d504      	bpl.n	3e14 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    3e0a:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    3e0e:	42b0      	cmp	r0, r6
    3e10:	41ba      	sbcs	r2, r7
    3e12:	d340      	bcc.n	3e96 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    3e14:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e18:	1e75      	subs	r5, r6, #1
    3e1a:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    3e1e:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e20:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3e24:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    3e28:	3209      	adds	r2, #9
    3e2a:	b2d2      	uxtb	r2, r2
    3e2c:	f1c2 0e20 	rsb	lr, r2, #32
    3e30:	40d5      	lsrs	r5, r2
    3e32:	f1a2 0920 	sub.w	r9, r2, #32
    3e36:	fa00 fb0e 	lsl.w	fp, r0, lr
    3e3a:	fa20 f009 	lsr.w	r0, r0, r9
    3e3e:	ea45 050b 	orr.w	r5, r5, fp
    3e42:	4305      	orrs	r5, r0
  if (isContiguous()) {
    3e44:	9801      	ldr	r0, [sp, #4]
    3e46:	0640      	lsls	r0, r0, #25
    3e48:	d433      	bmi.n	3eb2 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3e4a:	1e48      	subs	r0, r1, #1
    3e4c:	fa20 f202 	lsr.w	r2, r0, r2
    3e50:	f14c 30ff 	adc.w	r0, ip, #4294967295	; 0xffffffff
  if (nNew < nCur || m_curPosition == 0) {
    3e54:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3e58:	fa00 fe0e 	lsl.w	lr, r0, lr
    3e5c:	fa20 f009 	lsr.w	r0, r0, r9
    3e60:	ea42 020e 	orr.w	r2, r2, lr
    3e64:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3e68:	d001      	beq.n	3e6e <ExFatFile::seekSet(unsigned long long)+0x92>
    3e6a:	4295      	cmp	r5, r2
    3e6c:	d229      	bcs.n	3ec2 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3e6e:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    3e70:	bf4c      	ite	mi
    3e72:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    3e76:	69e3      	ldrpl	r3, [r4, #28]
    3e78:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3e7a:	f104 0918 	add.w	r9, r4, #24
    3e7e:	e006      	b.n	3e8e <ExFatFile::seekSet(unsigned long long)+0xb2>
    3e80:	69a1      	ldr	r1, [r4, #24]
    3e82:	3d01      	subs	r5, #1
    3e84:	6a20      	ldr	r0, [r4, #32]
    3e86:	f001 fd2d 	bl	58e4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3e8a:	2800      	cmp	r0, #0
    3e8c:	dd03      	ble.n	3e96 <ExFatFile::seekSet(unsigned long long)+0xba>
    3e8e:	464a      	mov	r2, r9
  while (nNew--) {
    3e90:	2d00      	cmp	r5, #0
    3e92:	d1f5      	bne.n	3e80 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    3e94:	e007      	b.n	3ea6 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    3e96:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3e98:	f8c4 8018 	str.w	r8, [r4, #24]
}
    3e9c:	b003      	add	sp, #12
    3e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    3ea2:	2300      	movs	r3, #0
    3ea4:	6183      	str	r3, [r0, #24]
  return true;
    3ea6:	2001      	movs	r0, #1
  m_curPosition = pos;
    3ea8:	e9c4 6700 	strd	r6, r7, [r4]
}
    3eac:	b003      	add	sp, #12
    3eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3eb2:	69e3      	ldr	r3, [r4, #28]
    3eb4:	442b      	add	r3, r5
    3eb6:	61a3      	str	r3, [r4, #24]
    goto done;
    3eb8:	e7f5      	b.n	3ea6 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    3eba:	2001      	movs	r0, #1
}
    3ebc:	b003      	add	sp, #12
    3ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    3ec2:	1aad      	subs	r5, r5, r2
    3ec4:	e7d9      	b.n	3e7a <ExFatFile::seekSet(unsigned long long)+0x9e>
    3ec6:	bf00      	nop

00003ec8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ecc:	4617      	mov	r7, r2
    3ece:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    3ed2:	b08f      	sub	sp, #60	; 0x3c
    3ed4:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    3ed6:	2a00      	cmp	r2, #0
    3ed8:	f040 80d7 	bne.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    3edc:	468b      	mov	fp, r1
    3ede:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    3ee2:	f011 0f50 	tst.w	r1, #80	; 0x50
    3ee6:	f000 80d0 	beq.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    3eea:	f003 0103 	and.w	r1, r3, #3
    3eee:	469a      	mov	sl, r3
    3ef0:	2903      	cmp	r1, #3
    3ef2:	f000 80ca 	beq.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3ef6:	3101      	adds	r1, #1
    3ef8:	f003 0008 	and.w	r0, r3, #8
    3efc:	ea41 0300 	orr.w	r3, r1, r0
    3f00:	9302      	str	r3, [sp, #8]
  if (fname) {
    3f02:	2f00      	cmp	r7, #0
    3f04:	f000 80cb 	beq.w	409e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    3f08:	6939      	ldr	r1, [r7, #16]
    3f0a:	f101 080e 	add.w	r8, r1, #14
    3f0e:	49b6      	ldr	r1, [pc, #728]	; (41e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    3f10:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    3f14:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    3f18:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    3f1c:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    3f1e:	f108 0802 	add.w	r8, r8, #2
    3f22:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    3f26:	d005      	beq.n	3f34 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    3f28:	2000      	movs	r0, #0
    3f2a:	2100      	movs	r1, #0
    m_curCluster = 0;
    3f2c:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    3f30:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    3f34:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f36:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    3f38:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f3e:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    3f40:	2220      	movs	r2, #32
    3f42:	a906      	add	r1, sp, #24
    3f44:	4658      	mov	r0, fp
    3f46:	f7ff fe63 	bl	3c10 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3f4a:	b300      	cbz	r0, 3f8e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    3f4c:	2820      	cmp	r0, #32
    3f4e:	f040 809c 	bne.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    3f52:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    3f56:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3f5a:	2a00      	cmp	r2, #0
    3f5c:	f2c0 80a2 	blt.w	40a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    3f60:	b934      	cbnz	r4, 3f70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3f62:	f8db 2000 	ldr.w	r2, [fp]
    3f66:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    3f6a:	f8db 2018 	ldr.w	r2, [fp, #24]
    3f6e:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    3f70:	4544      	cmp	r4, r8
    3f72:	d201      	bcs.n	3f78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    3f74:	3401      	adds	r4, #1
    3f76:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    3f78:	2b00      	cmp	r3, #0
    3f7a:	f000 8113 	beq.w	41a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    3f7e:	2220      	movs	r2, #32
    3f80:	a906      	add	r1, sp, #24
    3f82:	4658      	mov	r0, fp
      inSet = false;
    3f84:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    3f86:	f7ff fe43 	bl	3c10 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3f8a:	2800      	cmp	r0, #0
    3f8c:	d1de      	bne.n	3f4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    3f8e:	f41a 7f00 	tst.w	sl, #512	; 0x200
    3f92:	d07a      	beq.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    3f94:	9b02      	ldr	r3, [sp, #8]
    3f96:	079b      	lsls	r3, r3, #30
    3f98:	d577      	bpl.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    3f9a:	2f00      	cmp	r7, #0
    3f9c:	d075      	beq.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    3f9e:	4544      	cmp	r4, r8
    3fa0:	d217      	bcs.n	3fd2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    3fa2:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    3fa6:	2220      	movs	r2, #32
    3fa8:	a906      	add	r1, sp, #24
    3faa:	4658      	mov	r0, fp
    3fac:	f7ff fe30 	bl	3c10 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    3fb0:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    3fb2:	2800      	cmp	r0, #0
    3fb4:	d061      	beq.n	407a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    3fb6:	2820      	cmp	r0, #32
    3fb8:	d167      	bne.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    3fba:	b92c      	cbnz	r4, 3fc8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3fbc:	f8db 2000 	ldr.w	r2, [fp]
    3fc0:	f8db a018 	ldr.w	sl, [fp, #24]
    3fc4:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    3fc8:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    3fca:	45a0      	cmp	r8, r4
    3fcc:	d8eb      	bhi.n	3fa6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    3fce:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    3fd2:	2238      	movs	r2, #56	; 0x38
    3fd4:	2100      	movs	r1, #0
    3fd6:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    3fd8:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    3fdc:	f00a fae0 	bl	e5a0 <memset>
  ExFatVolume* volume() const {return m_vol;}
    3fe0:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    3fe4:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    3fe8:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    3fea:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    3fec:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    3fee:	2600      	movs	r6, #0
  m_dirPos = freePos;
    3ff0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    3ff4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    3ff8:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    3ffa:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    3ffe:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    4000:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    4002:	f1b8 0f00 	cmp.w	r8, #0
    4006:	d033      	beq.n	4070 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    4008:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
    400c:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    400e:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 41ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    4012:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    4016:	2201      	movs	r2, #1
    4018:	4659      	mov	r1, fp
    401a:	4628      	mov	r0, r5
    401c:	f7ff fd4a 	bl	3ab4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4020:	4604      	mov	r4, r0
    4022:	b390      	cbz	r0, 408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    4024:	f990 2000 	ldrsb.w	r2, [r0]
    4028:	2a00      	cmp	r2, #0
    402a:	db2e      	blt.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    402c:	2220      	movs	r2, #32
    402e:	2100      	movs	r1, #0
    4030:	f00a fab6 	bl	e5a0 <memset>
    if (i == 0) {
    4034:	2e00      	cmp	r6, #0
    4036:	f000 80bc 	beq.w	41b2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    403a:	f1bb 0f01 	cmp.w	fp, #1
    403e:	f000 80d7 	beq.w	41f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    4042:	23c1      	movs	r3, #193	; 0xc1
    4044:	46a3      	mov	fp, r4
    4046:	341e      	adds	r4, #30
    4048:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    404c:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    404e:	4638      	mov	r0, r7
    4050:	b91b      	cbnz	r3, 405a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    4052:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    4056:	429a      	cmp	r2, r3
    4058:	d005      	beq.n	4066 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    405a:	f006 fc45 	bl	a8e8 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    405e:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    4062:	45a3      	cmp	fp, r4
    4064:	d1f2      	bne.n	404c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    4066:	3601      	adds	r6, #1
    4068:	fa5f fb86 	uxtb.w	fp, r6
    406c:	45d8      	cmp	r8, fp
    406e:	d8d2      	bhi.n	4016 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    4070:	4628      	mov	r0, r5
    4072:	f000 fafb 	bl	466c <ExFatFile::sync()>
    4076:	4606      	mov	r6, r0
    4078:	e00d      	b.n	4096 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    407a:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    407c:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    4080:	f000 fb24 	bl	46cc <ExFatFile::addDirCluster()>
    4084:	2800      	cmp	r0, #0
    4086:	f040 8091 	bne.w	41ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    408a:	2300      	movs	r3, #0
  return false;
    408c:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    408e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4092:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    4096:	4630      	mov	r0, r6
    4098:	b00f      	add	sp, #60	; 0x3c
    409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    409e:	f04f 0803 	mov.w	r8, #3
    40a2:	e747      	b.n	3f34 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    40a4:	bb56      	cbnz	r6, 40fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    40a6:	4544      	cmp	r4, r8
    40a8:	bf38      	it	cc
    40aa:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    40ac:	2b85      	cmp	r3, #133	; 0x85
    40ae:	f47f af47 	bne.w	3f40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    40b2:	4631      	mov	r1, r6
    40b4:	2238      	movs	r2, #56	; 0x38
    40b6:	4628      	mov	r0, r5
      inSet = true;
    40b8:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    40ba:	f00a fa71 	bl	e5a0 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    40be:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    40c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    40c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    40ca:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    40ce:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    40d0:	bf58      	it	pl
    40d2:	f043 0308 	orrpl.w	r3, r3, #8
    40d6:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    40da:	f8db 3000 	ldr.w	r3, [fp]
    40de:	f8db 2020 	ldr.w	r2, [fp, #32]
    40e2:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    40e4:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    40e6:	f8db 2018 	ldr.w	r2, [fp, #24]
    40ea:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    40ee:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    40f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    40f6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    40fa:	e721      	b.n	3f40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    40fc:	2bc0      	cmp	r3, #192	; 0xc0
    40fe:	d028      	beq.n	4152 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    4100:	2bc1      	cmp	r3, #193	; 0xc1
    4102:	f47f af3c 	bne.w	3f7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    4106:	463a      	mov	r2, r7
    4108:	a906      	add	r1, sp, #24
    410a:	4628      	mov	r0, r5
    410c:	f001 f9ee 	bl	54ec <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    4110:	b1e8      	cbz	r0, 414e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    4112:	89bb      	ldrh	r3, [r7, #12]
    4114:	b9db      	cbnz	r3, 414e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    4116:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    411a:	429a      	cmp	r2, r3
    411c:	d117      	bne.n	414e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    411e:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    4122:	d1b2      	bne.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4124:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    4128:	d170      	bne.n	420c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    412a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    412e:	0798      	lsls	r0, r3, #30
    4130:	d46c      	bmi.n	420c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    4132:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    4136:	d1a8      	bne.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4138:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    413c:	d0ab      	beq.n	4096 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    413e:	4628      	mov	r0, r5
    4140:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    4144:	f7ff fe4a 	bl	3ddc <ExFatFile::seekSet(unsigned long long)>
    4148:	2800      	cmp	r0, #0
    414a:	d1a4      	bne.n	4096 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    414c:	e79d      	b.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    414e:	4606      	mov	r6, r0
    4150:	e6f6      	b.n	3f40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    4152:	9b02      	ldr	r3, [sp, #8]
    4154:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4158:	f89d 3019 	ldrb.w	r3, [sp, #25]
    415c:	079b      	lsls	r3, r3, #30
    415e:	d502      	bpl.n	4166 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    4160:	9b03      	ldr	r3, [sp, #12]
    4162:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    4166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4168:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    416a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    416e:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    4172:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    4176:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    417a:	2f00      	cmp	r7, #0
    417c:	d0cf      	beq.n	411e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    417e:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    4182:	693a      	ldr	r2, [r7, #16]
    4184:	81bb      	strh	r3, [r7, #12]
    next = begin;
    4186:	683b      	ldr	r3, [r7, #0]
    4188:	607b      	str	r3, [r7, #4]
    418a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    418e:	429a      	cmp	r2, r3
    4190:	f47f aef5 	bne.w	3f7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    4194:	8abe      	ldrh	r6, [r7, #20]
    4196:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    419a:	1af6      	subs	r6, r6, r3
    419c:	fab6 f686 	clz	r6, r6
    41a0:	0976      	lsrs	r6, r6, #5
    41a2:	e6cd      	b.n	3f40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    41a4:	2f00      	cmp	r7, #0
    41a6:	f47f aef2 	bne.w	3f8e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    41aa:	e76e      	b.n	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    41ac:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    41b0:	e70b      	b.n	3fca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    41b2:	2385      	movs	r3, #133	; 0x85
    41b4:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    41b6:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    41ba:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    41be:	f8da 3000 	ldr.w	r3, [sl]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d046      	beq.n	4254 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    41c6:	f10d 0213 	add.w	r2, sp, #19
    41ca:	f10d 0116 	add.w	r1, sp, #22
    41ce:	a805      	add	r0, sp, #20
    41d0:	4798      	blx	r3
    41d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    41d6:	8163      	strh	r3, [r4, #10]
    41d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    41dc:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    41de:	f89d 3013 	ldrb.w	r3, [sp, #19]
    41e2:	7523      	strb	r3, [r4, #20]
    41e4:	e73f      	b.n	4066 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    41e6:	bf00      	nop
    41e8:	88888889 	.word	0x88888889
    41ec:	20004744 	.word	0x20004744
      dirStream->type = EXFAT_TYPE_STREAM;
    41f0:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    41f2:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    41f6:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    41f8:	9b02      	ldr	r3, [sp, #8]
    41fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    41fe:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    4202:	693b      	ldr	r3, [r7, #16]
    4204:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    4206:	8abb      	ldrh	r3, [r7, #20]
    4208:	80a3      	strh	r3, [r4, #4]
}
    420a:	e72c      	b.n	4066 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    420c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    4210:	06d9      	lsls	r1, r3, #27
    4212:	f53f af3a 	bmi.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    4216:	f013 0101 	ands.w	r1, r3, #1
    421a:	f47f af36 	bne.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    421e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    4222:	d089      	beq.n	4138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    4224:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    4228:	0792      	lsls	r2, r2, #30
    422a:	f57f af2e 	bpl.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    422e:	2b00      	cmp	r3, #0
    4230:	f43f af2b 	beq.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    4234:	e9d5 3200 	ldrd	r3, r2, [r5]
    4238:	4313      	orrs	r3, r2
    423a:	d004      	beq.n	4246 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    423c:	2200      	movs	r2, #0
    423e:	2300      	movs	r3, #0
    m_curCluster = 0;
    4240:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    4242:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    4246:	4628      	mov	r0, r5
    4248:	f000 fc42 	bl	4ad0 <ExFatFile::truncate()>
    424c:	2800      	cmp	r0, #0
    424e:	f43f af1c 	beq.w	408a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    4252:	e720      	b.n	4096 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    4254:	f645 0321 	movw	r3, #22561	; 0x5821
    4258:	8163      	strh	r3, [r4, #10]
    425a:	81e3      	strh	r3, [r4, #14]
    425c:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    425e:	e702      	b.n	4066 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

00004260 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    4260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    4264:	2500      	movs	r5, #0
    4266:	b097      	sub	sp, #92	; 0x5c
    4268:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    426a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    426e:	9201      	str	r2, [sp, #4]
    4270:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    4272:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    4276:	2b00      	cmp	r3, #0
    4278:	d13e      	bne.n	42f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    427a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    427e:	460f      	mov	r7, r1
    4280:	f013 0f50 	tst.w	r3, #80	; 0x50
    4284:	d038      	beq.n	42f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    4286:	7813      	ldrb	r3, [r2, #0]
    4288:	4604      	mov	r4, r0
    428a:	4616      	mov	r6, r2
    428c:	2b2f      	cmp	r3, #47	; 0x2f
    428e:	d037      	beq.n	4300 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    4290:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    4294:	ab01      	add	r3, sp, #4
    4296:	aa02      	add	r2, sp, #8
    4298:	4631      	mov	r1, r6
    429a:	4620      	mov	r0, r4
    429c:	f7ff fc6a 	bl	3b74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    42a0:	b350      	cbz	r0, 42f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    42a2:	9e01      	ldr	r6, [sp, #4]
    42a4:	7833      	ldrb	r3, [r6, #0]
    42a6:	2b00      	cmp	r3, #0
    42a8:	d03e      	beq.n	4328 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    42aa:	2300      	movs	r3, #0
    42ac:	aa02      	add	r2, sp, #8
    42ae:	4639      	mov	r1, r7
    42b0:	4620      	mov	r0, r4
    42b2:	f7ff fe09 	bl	3ec8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    42b6:	b1f8      	cbz	r0, 42f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    42b8:	46a4      	mov	ip, r4
    42ba:	ad08      	add	r5, sp, #32
    42bc:	f104 0730 	add.w	r7, r4, #48	; 0x30
    42c0:	f8dc 0000 	ldr.w	r0, [ip]
    42c4:	f10c 0c10 	add.w	ip, ip, #16
    42c8:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    42cc:	46ae      	mov	lr, r5
    42ce:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    42d2:	3510      	adds	r5, #16
    42d4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    42d8:	45bc      	cmp	ip, r7
    42da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    42de:	d1ef      	bne.n	42c0 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    42e0:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    42e4:	af08      	add	r7, sp, #32
    tmpDir = *this;
    42e6:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    42e8:	4620      	mov	r0, r4
    42ea:	f000 f9bf 	bl	466c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    42ee:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    42f2:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    42f6:	e7cd      	b.n	4294 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    42f8:	2000      	movs	r0, #0
}
    42fa:	b017      	add	sp, #92	; 0x5c
    42fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    4300:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    4304:	292f      	cmp	r1, #47	; 0x2f
    4306:	d0fb      	beq.n	4300 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    4308:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    430a:	b9b1      	cbnz	r1, 433a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    430c:	2238      	movs	r2, #56	; 0x38
    430e:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    4310:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    4312:	f00a f945 	bl	e5a0 <memset>
  m_flags = FILE_FLAG_READ;
    4316:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    4318:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    431a:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    431c:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    431e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    4322:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    4326:	e7e8      	b.n	42fa <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    4328:	464b      	mov	r3, r9
    432a:	aa02      	add	r2, sp, #8
    432c:	4639      	mov	r1, r7
    432e:	4620      	mov	r0, r4
    4330:	f7ff fdca 	bl	3ec8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4334:	b017      	add	sp, #92	; 0x5c
    4336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    433a:	2238      	movs	r2, #56	; 0x38
    433c:	2100      	movs	r1, #0
    433e:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4340:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    4342:	f00a f92d 	bl	e5a0 <memset>
  m_flags = FILE_FLAG_READ;
    4346:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    4348:	af08      	add	r7, sp, #32
  m_vol = vol;
    434a:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    434c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    4350:	2340      	movs	r3, #64	; 0x40
    4352:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    4356:	e79b      	b.n	4290 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

00004358 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    4358:	b119      	cbz	r1, 4362 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    435a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    435e:	f7ff bf7f 	b.w	4260 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4362:	4608      	mov	r0, r1
    4364:	4770      	bx	lr
    4366:	bf00      	nop

00004368 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4368:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    436c:	b963      	cbnz	r3, 4388 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    436e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    4372:	f013 0f50 	tst.w	r3, #80	; 0x50
    4376:	d007      	beq.n	4388 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    4378:	680b      	ldr	r3, [r1, #0]
    437a:	f013 0c1f 	ands.w	ip, r3, #31
    437e:	d103      	bne.n	4388 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    4380:	4613      	mov	r3, r2
    4382:	4662      	mov	r2, ip
    4384:	f7ff bda0 	b.w	3ec8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4388:	2000      	movs	r0, #0
    438a:	4770      	bx	lr

0000438c <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    438c:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    438e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4390:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4392:	6a00      	ldr	r0, [r0, #32]
    4394:	b101      	cbz	r1, 4398 <ExFatFile::addCluster()+0xc>
    4396:	3101      	adds	r1, #1
    4398:	2201      	movs	r2, #1
    439a:	f001 f969 	bl	5670 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    439e:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    43a0:	4605      	mov	r5, r0
  if (find < 2) {
    43a2:	d932      	bls.n	440a <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    43a4:	2301      	movs	r3, #1
    43a6:	4601      	mov	r1, r0
    43a8:	6a20      	ldr	r0, [r4, #32]
    43aa:	461a      	mov	r2, r3
    43ac:	f001 f9c0 	bl	5730 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    43b0:	4606      	mov	r6, r0
    43b2:	b350      	cbz	r0, 440a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    43b4:	69a3      	ldr	r3, [r4, #24]
    43b6:	b35b      	cbz	r3, 4410 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    43b8:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    43bc:	0651      	lsls	r1, r2, #25
    43be:	d512      	bpl.n	43e6 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    43c0:	1c59      	adds	r1, r3, #1
    43c2:	42a9      	cmp	r1, r5
    43c4:	d018      	beq.n	43f8 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    43c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    43ca:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    43cc:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    43d0:	e005      	b.n	43de <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    43d2:	6a20      	ldr	r0, [r4, #32]
    43d4:	f001 faa8 	bl	5928 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    43d8:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    43da:	b1b0      	cbz	r0, 440a <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    43dc:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    43de:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    43e0:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    43e2:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    43e4:	d3f5      	bcc.n	43d2 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    43e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43ea:	4629      	mov	r1, r5
    43ec:	6a20      	ldr	r0, [r4, #32]
    43ee:	f001 fa9b 	bl	5928 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    43f2:	b150      	cbz	r0, 440a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    43f4:	69a1      	ldr	r1, [r4, #24]
    43f6:	b911      	cbnz	r1, 43fe <ExFatFile::addCluster()+0x72>
}
    43f8:	4630      	mov	r0, r6
  m_curCluster = find;
    43fa:	61a5      	str	r5, [r4, #24]
}
    43fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    43fe:	462a      	mov	r2, r5
    4400:	6a20      	ldr	r0, [r4, #32]
    4402:	f001 fa91 	bl	5928 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4406:	2800      	cmp	r0, #0
    4408:	d1f6      	bne.n	43f8 <ExFatFile::addCluster()+0x6c>
  return false;
    440a:	2600      	movs	r6, #0
}
    440c:	4630      	mov	r0, r6
    440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4410:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4418:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    441c:	e7ec      	b.n	43f8 <ExFatFile::addCluster()+0x6c>
    441e:	bf00      	nop

00004420 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    4420:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    4424:	079a      	lsls	r2, r3, #30
    4426:	d536      	bpl.n	4496 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4428:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    442a:	b570      	push	{r4, r5, r6, lr}
    442c:	4605      	mov	r5, r0
  if (m_firstCluster) {
    442e:	b9a1      	cbnz	r1, 445a <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    4430:	2400      	movs	r4, #0
    4432:	4621      	mov	r1, r4
    4434:	e007      	b.n	4446 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4436:	7803      	ldrb	r3, [r0, #0]
    4438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    443c:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    443e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4442:	428b      	cmp	r3, r1
    4444:	d329      	bcc.n	449a <ExFatFile::remove()+0x7a>
    4446:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4448:	2201      	movs	r2, #1
    444a:	4628      	mov	r0, r5
    444c:	f7ff fb32 	bl	3ab4 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4450:	b2e1      	uxtb	r1, r4
    if (!cache) {
    4452:	2800      	cmp	r0, #0
    4454:	d1ef      	bne.n	4436 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4456:	2000      	movs	r0, #0
    4458:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    445a:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    445c:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    445e:	d534      	bpl.n	44ca <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4460:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4464:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    4468:	3309      	adds	r3, #9
    446a:	3a01      	subs	r2, #1
    446c:	b2db      	uxtb	r3, r3
    446e:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    4472:	f1c3 0c20 	rsb	ip, r3, #32
    4476:	40da      	lsrs	r2, r3
    4478:	3b20      	subs	r3, #32
    447a:	fa04 fc0c 	lsl.w	ip, r4, ip
    447e:	fa24 f303 	lsr.w	r3, r4, r3
    4482:	ea42 020c 	orr.w	r2, r2, ip
    4486:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4488:	2300      	movs	r3, #0
    448a:	3201      	adds	r2, #1
    448c:	f001 f950 	bl	5730 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4490:	2800      	cmp	r0, #0
    4492:	d1cd      	bne.n	4430 <ExFatFile::remove()+0x10>
    4494:	e7df      	b.n	4456 <ExFatFile::remove()+0x36>
}
    4496:	2000      	movs	r0, #0
    4498:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    449a:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    449c:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    449e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    44a2:	4620      	mov	r0, r4
  m_flags = 0;
    44a4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    44a8:	f006 f9ca 	bl	a840 <FsCache::sync()>
    44ac:	2800      	cmp	r0, #0
    44ae:	d0d2      	beq.n	4456 <ExFatFile::remove()+0x36>
    44b0:	f504 7004 	add.w	r0, r4, #528	; 0x210
    44b4:	f006 f9c4 	bl	a840 <FsCache::sync()>
    44b8:	2800      	cmp	r0, #0
    44ba:	d0cc      	beq.n	4456 <ExFatFile::remove()+0x36>
    44bc:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    44c0:	6803      	ldr	r3, [r0, #0]
}
    44c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    44c6:	6a1b      	ldr	r3, [r3, #32]
    44c8:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    44ca:	f001 fa4d 	bl	5968 <ExFatPartition::freeChain(unsigned long)>
    44ce:	2800      	cmp	r0, #0
    44d0:	d1ae      	bne.n	4430 <ExFatFile::remove()+0x10>
    44d2:	e7c0      	b.n	4456 <ExFatFile::remove()+0x36>

000044d4 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    44d4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    44d8:	06db      	lsls	r3, r3, #27
    44da:	d401      	bmi.n	44e0 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    44dc:	2000      	movs	r0, #0
}
    44de:	4770      	bx	lr
bool ExFatFile::rmdir() {
    44e0:	b510      	push	{r4, lr}
    seekSet(0);
    44e2:	2200      	movs	r2, #0
    44e4:	b088      	sub	sp, #32
    44e6:	2300      	movs	r3, #0
    44e8:	4604      	mov	r4, r0
    44ea:	f7ff fc77 	bl	3ddc <ExFatFile::seekSet(unsigned long long)>
  }
    44ee:	e008      	b.n	4502 <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    44f0:	2820      	cmp	r0, #32
    44f2:	d11b      	bne.n	452c <ExFatFile::rmdir()+0x58>
    44f4:	f99d 3000 	ldrsb.w	r3, [sp]
    44f8:	f89d 2000 	ldrb.w	r2, [sp]
    44fc:	2b00      	cmp	r3, #0
    44fe:	db15      	blt.n	452c <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    4500:	b132      	cbz	r2, 4510 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    4502:	2220      	movs	r2, #32
    4504:	4669      	mov	r1, sp
    4506:	4620      	mov	r0, r4
    4508:	f7ff fb82 	bl	3c10 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    450c:	2800      	cmp	r0, #0
    450e:	d1ef      	bne.n	44f0 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    4510:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    4514:	2208      	movs	r2, #8
  return remove();
    4516:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    4518:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    451c:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4520:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    4524:	f7ff ff7c 	bl	4420 <ExFatFile::remove()>
}
    4528:	b008      	add	sp, #32
    452a:	bd10      	pop	{r4, pc}
  return false;
    452c:	2000      	movs	r0, #0
}
    452e:	b008      	add	sp, #32
    4530:	bd10      	pop	{r4, pc}
    4532:	bf00      	nop

00004534 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4538:	f04f 0800 	mov.w	r8, #0
    453c:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    453e:	4f4a      	ldr	r7, [pc, #296]	; (4668 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    4540:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    4542:	4644      	mov	r4, r8
    4544:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4546:	2200      	movs	r2, #0
    4548:	4630      	mov	r0, r6
    454a:	f7ff fab3 	bl	3ab4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    454e:	4605      	mov	r5, r0
    4550:	b130      	cbz	r0, 4560 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    4552:	7801      	ldrb	r1, [r0, #0]
    4554:	29c0      	cmp	r1, #192	; 0xc0
    4556:	d069      	beq.n	462c <ExFatFile::syncDir()+0xf8>
    4558:	29c1      	cmp	r1, #193	; 0xc1
    455a:	d02b      	beq.n	45b4 <ExFatFile::syncDir()+0x80>
    455c:	2985      	cmp	r1, #133	; 0x85
    455e:	d009      	beq.n	4574 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4560:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    4564:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    4566:	f043 0301 	orr.w	r3, r3, #1
    456a:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    456e:	b002      	add	sp, #8
    4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    4574:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    4578:	f003 0337 	and.w	r3, r3, #55	; 0x37
    457c:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    457e:	683b      	ldr	r3, [r7, #0]
    4580:	b183      	cbz	r3, 45a4 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    4582:	f10d 0203 	add.w	r2, sp, #3
    4586:	f10d 0106 	add.w	r1, sp, #6
    458a:	a801      	add	r0, sp, #4
    458c:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    458e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4592:	81ab      	strh	r3, [r5, #12]
    4594:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    4596:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    459a:	81eb      	strh	r3, [r5, #14]
    459c:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    459e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    45a2:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    45a4:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    45a6:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    45aa:	f043 0301 	orr.w	r3, r3, #1
    45ae:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    45b2:	7829      	ldrb	r1, [r5, #0]
    45b4:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    45b8:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    45ba:	fab0 f080 	clz	r0, r0
    45be:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    45c0:	e001      	b.n	45c6 <ExFatFile::syncDir()+0x92>
    45c2:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    45c4:	5ca9      	ldrb	r1, [r5, r2]
    45c6:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    45c8:	2a01      	cmp	r2, #1
    45ca:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    45ce:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    45d2:	fa11 f383 	uxtah	r3, r1, r3
    45d6:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    45d8:	d101      	bne.n	45de <ExFatFile::syncDir()+0xaa>
    45da:	2800      	cmp	r0, #0
    45dc:	d1f1      	bne.n	45c2 <ExFatFile::syncDir()+0x8e>
    45de:	2a1f      	cmp	r2, #31
    45e0:	d9f0      	bls.n	45c4 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    45e2:	f108 0801 	add.w	r8, r8, #1
    45e6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    45ea:	fa5f f188 	uxtb.w	r1, r8
    45ee:	428b      	cmp	r3, r1
    45f0:	d2a9      	bcs.n	4546 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    45f2:	2201      	movs	r2, #1
    45f4:	f106 0124 	add.w	r1, r6, #36	; 0x24
    45f8:	6a30      	ldr	r0, [r6, #32]
    45fa:	f001 f915 	bl	5828 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    45fe:	2800      	cmp	r0, #0
    4600:	d0ae      	beq.n	4560 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    4602:	6a35      	ldr	r5, [r6, #32]
    4604:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4606:	4628      	mov	r0, r5
    4608:	f006 f91a 	bl	a840 <FsCache::sync()>
    460c:	2800      	cmp	r0, #0
    460e:	d0a7      	beq.n	4560 <ExFatFile::syncDir()+0x2c>
    4610:	f505 7004 	add.w	r0, r5, #528	; 0x210
    4614:	f006 f914 	bl	a840 <FsCache::sync()>
    4618:	2800      	cmp	r0, #0
    461a:	d0a1      	beq.n	4560 <ExFatFile::syncDir()+0x2c>
    461c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    4620:	6803      	ldr	r3, [r0, #0]
    4622:	6a1b      	ldr	r3, [r3, #32]
    4624:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4626:	2800      	cmp	r0, #0
    4628:	d1a1      	bne.n	456e <ExFatFile::syncDir()+0x3a>
    462a:	e799      	b.n	4560 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    462c:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    4630:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4634:	7843      	ldrb	r3, [r0, #1]
    4636:	bf14      	ite	ne
    4638:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    463c:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    4640:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    4642:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    4646:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    464a:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    464e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    4652:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4654:	e9c5 0106 	strd	r0, r1, [r5, #24]
    4658:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    465c:	f043 0301 	orr.w	r3, r3, #1
    4660:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4664:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    4666:	e7a5      	b.n	45b4 <ExFatFile::syncDir()+0x80>
    4668:	20004744 	.word	0x20004744

0000466c <ExFatFile::sync()>:
bool ExFatFile::sync() {
    466c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    466e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    4672:	b343      	cbz	r3, 46c6 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4674:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    4678:	4604      	mov	r4, r0
    467a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    467e:	2a00      	cmp	r2, #0
    4680:	db0c      	blt.n	469c <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    4682:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4684:	4628      	mov	r0, r5
    4686:	f006 f8db 	bl	a840 <FsCache::sync()>
    468a:	b978      	cbnz	r0, 46ac <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    468c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    4690:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    4692:	f043 0301 	orr.w	r3, r3, #1
    4696:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    469a:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    469c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    46a0:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    46a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    46a8:	f7ff bf44 	b.w	4534 <ExFatFile::syncDir()>
    46ac:	f505 7004 	add.w	r0, r5, #528	; 0x210
    46b0:	f006 f8c6 	bl	a840 <FsCache::sync()>
    46b4:	2800      	cmp	r0, #0
    46b6:	d0e9      	beq.n	468c <ExFatFile::sync()+0x20>
    46b8:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    46bc:	6803      	ldr	r3, [r0, #0]
    46be:	6a1b      	ldr	r3, [r3, #32]
    46c0:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    46c2:	2800      	cmp	r0, #0
    46c4:	d0e2      	beq.n	468c <ExFatFile::sync()+0x20>
    return true;
    46c6:	2001      	movs	r0, #1
}
    46c8:	bd38      	pop	{r3, r4, r5, pc}
    46ca:	bf00      	nop

000046cc <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    46cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    46ce:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    46d2:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    46d4:	065a      	lsls	r2, r3, #25
    46d6:	d44c      	bmi.n	4772 <ExFatFile::addDirCluster()+0xa6>
    46d8:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    46da:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    46dc:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    46e0:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    46e2:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    46e6:	d301      	bcc.n	46ec <ExFatFile::addDirCluster()+0x20>
}
    46e8:	2000      	movs	r0, #0
    46ea:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    46ec:	4628      	mov	r0, r5
    46ee:	f7ff fe4d 	bl	438c <ExFatFile::addCluster()>
    46f2:	2800      	cmp	r0, #0
    46f4:	d0f8      	beq.n	46e8 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    46f6:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    46f8:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    46fa:	69ae      	ldr	r6, [r5, #24]
    46fc:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    4700:	3e02      	subs	r6, #2
    4702:	409e      	lsls	r6, r3
    4704:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    4708:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    470a:	1931      	adds	r1, r6, r4
    470c:	2205      	movs	r2, #5
    470e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    4712:	3401      	adds	r4, #1
    4714:	f006 f8c0 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    4718:	f44f 7200 	mov.w	r2, #512	; 0x200
    471c:	2100      	movs	r1, #0
    if (!cache) {
    471e:	2800      	cmp	r0, #0
    4720:	d0e2      	beq.n	46e8 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    4722:	f009 ff3d 	bl	e5a0 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    4726:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    4728:	2301      	movs	r3, #1
    472a:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    472e:	4093      	lsls	r3, r2
    4730:	429c      	cmp	r4, r3
    4732:	d3ea      	bcc.n	470a <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    4734:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    4738:	065b      	lsls	r3, r3, #25
    473a:	d415      	bmi.n	4768 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    473c:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    4740:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    4744:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4748:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    474c:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    4750:	189b      	adds	r3, r3, r2
    4752:	f141 0000 	adc.w	r0, r1, #0
    4756:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4758:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    475c:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    475e:	189b      	adds	r3, r3, r2
    4760:	f141 0100 	adc.w	r1, r1, #0
    4764:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    4768:	4628      	mov	r0, r5
}
    476a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    476e:	f7ff bf7d 	b.w	466c <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4772:	6a00      	ldr	r0, [r0, #32]
    4774:	f001 f9fe 	bl	5b74 <ExFatPartition::rootLength()>
    4778:	e7af      	b.n	46da <ExFatFile::addDirCluster()+0xe>
    477a:	bf00      	nop

0000477c <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    477c:	b570      	push	{r4, r5, r6, lr}
    477e:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    4780:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4784:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    4786:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    4788:	f010 0f18 	tst.w	r0, #24
    478c:	930c      	str	r3, [sp, #48]	; 0x30
    478e:	931a      	str	r3, [sp, #104]	; 0x68
    4790:	d003      	beq.n	479a <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    4792:	6a20      	ldr	r0, [r4, #32]
    4794:	6a0b      	ldr	r3, [r1, #32]
    4796:	4298      	cmp	r0, r3
    4798:	d002      	beq.n	47a0 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    479a:	2000      	movs	r0, #0
}
    479c:	b01c      	add	sp, #112	; 0x70
    479e:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    47a0:	f640 2301 	movw	r3, #2561	; 0xa01
    47a4:	4668      	mov	r0, sp
    47a6:	f7ff fd5b 	bl	4260 <ExFatFile::open(ExFatFile*, char const*, int)>
    47aa:	2800      	cmp	r0, #0
    47ac:	d0f5      	beq.n	479a <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    47ae:	46a4      	mov	ip, r4
    47b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
    47b4:	ad0e      	add	r5, sp, #56	; 0x38
    47b6:	f8dc 0000 	ldr.w	r0, [ip]
    47ba:	f10c 0c10 	add.w	ip, ip, #16
    47be:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    47c2:	46ae      	mov	lr, r5
    47c4:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    47c8:	3510      	adds	r5, #16
    47ca:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    47ce:	45b4      	cmp	ip, r6
    47d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    47d4:	d1ef      	bne.n	47b6 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    47d6:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    47da:	aa09      	add	r2, sp, #36	; 0x24
    47dc:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    47e0:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    47e2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    47e6:	ca07      	ldmia	r2, {r0, r1, r2}
    47e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    47ec:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    47f0:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    47f2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    47f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47fa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    47fe:	f7ff ff35 	bl	466c <ExFatFile::sync()>
    4802:	2800      	cmp	r0, #0
    4804:	d0c9      	beq.n	479a <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    4806:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4808:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    480a:	2308      	movs	r3, #8
  return oldFile.remove();
    480c:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    480e:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4810:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4814:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4818:	f7ff fe02 	bl	4420 <ExFatFile::remove()>
    481c:	e7be      	b.n	479c <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    481e:	bf00      	nop

00004820 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4820:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    4822:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    4826:	f013 0f50 	tst.w	r3, #80	; 0x50
    482a:	d102      	bne.n	4832 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    482c:	2500      	movs	r5, #0
}
    482e:	4628      	mov	r0, r5
    4830:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4832:	f640 2302 	movw	r3, #2562	; 0xa02
    4836:	4604      	mov	r4, r0
    4838:	f7ff fb46 	bl	3ec8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    483c:	2800      	cmp	r0, #0
    483e:	d0f5      	beq.n	482c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    4840:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    4842:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    4844:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    4848:	f7ff ff40 	bl	46cc <ExFatFile::addDirCluster()>
    484c:	4605      	mov	r5, r0
    484e:	2800      	cmp	r0, #0
    4850:	d0ec      	beq.n	482c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    4852:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    4854:	2200      	movs	r2, #0
    4856:	2300      	movs	r3, #0
    4858:	4620      	mov	r0, r4
    485a:	61e1      	str	r1, [r4, #28]
    485c:	f7ff fabe 	bl	3ddc <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4860:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    4862:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4866:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    486a:	2b00      	cmp	r3, #0
    486c:	d0df      	beq.n	482e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    486e:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    4870:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4872:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    4876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    487a:	f7ff be5b 	b.w	4534 <ExFatFile::syncDir()>
    487e:	bf00      	nop

00004880 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4880:	b5f0      	push	{r4, r5, r6, r7, lr}
    4882:	2500      	movs	r5, #0
    4884:	b097      	sub	sp, #92	; 0x5c
    4886:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    4888:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    488c:	9201      	str	r2, [sp, #4]
    488e:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    4892:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    4894:	2b00      	cmp	r3, #0
    4896:	d146      	bne.n	4926 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    4898:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    489c:	460e      	mov	r6, r1
    489e:	f013 0f50 	tst.w	r3, #80	; 0x50
    48a2:	d040      	beq.n	4926 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    48a4:	7813      	ldrb	r3, [r2, #0]
    48a6:	4604      	mov	r4, r0
    48a8:	4611      	mov	r1, r2
    48aa:	2b2f      	cmp	r3, #47	; 0x2f
    48ac:	d03e      	beq.n	492c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    48ae:	ab01      	add	r3, sp, #4
    48b0:	aa02      	add	r2, sp, #8
    48b2:	4620      	mov	r0, r4
    48b4:	f7ff f95e 	bl	3b74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    48b8:	2800      	cmp	r0, #0
    48ba:	d034      	beq.n	4926 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    48bc:	9b01      	ldr	r3, [sp, #4]
    48be:	781b      	ldrb	r3, [r3, #0]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d041      	beq.n	4948 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    48c4:	2300      	movs	r3, #0
    48c6:	aa02      	add	r2, sp, #8
    48c8:	4631      	mov	r1, r6
    48ca:	4620      	mov	r0, r4
    48cc:	f7ff fafc 	bl	3ec8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    48d0:	b930      	cbnz	r0, 48e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    48d2:	b347      	cbz	r7, 4926 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    48d4:	aa02      	add	r2, sp, #8
    48d6:	4631      	mov	r1, r6
    48d8:	4620      	mov	r0, r4
    48da:	f7ff ffa1 	bl	4820 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    48de:	b310      	cbz	r0, 4926 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    48e0:	46a4      	mov	ip, r4
    48e2:	ad08      	add	r5, sp, #32
    48e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
    48e8:	f8dc 0000 	ldr.w	r0, [ip]
    48ec:	f10c 0c10 	add.w	ip, ip, #16
    48f0:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    48f4:	46ae      	mov	lr, r5
    48f6:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    48fa:	3510      	adds	r5, #16
    48fc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    4900:	45b4      	cmp	ip, r6
    4902:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    4906:	d1ef      	bne.n	48e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    4908:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    490c:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    490e:	6028      	str	r0, [r5, #0]
    close();
    4910:	4620      	mov	r0, r4
    4912:	f7ff f8ed 	bl	3af0 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    4916:	9901      	ldr	r1, [sp, #4]
    4918:	ab01      	add	r3, sp, #4
    491a:	aa02      	add	r2, sp, #8
    491c:	4620      	mov	r0, r4
    491e:	f7ff f929 	bl	3b74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4922:	2800      	cmp	r0, #0
    4924:	d1ca      	bne.n	48bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    4926:	2000      	movs	r0, #0
}
    4928:	b017      	add	sp, #92	; 0x5c
    492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    492c:	3101      	adds	r1, #1
    492e:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    4930:	780b      	ldrb	r3, [r1, #0]
    4932:	2b2f      	cmp	r3, #47	; 0x2f
    4934:	d0fa      	beq.n	492c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4936:	6a31      	ldr	r1, [r6, #32]
    4938:	a808      	add	r0, sp, #32
    493a:	f7ff f907 	bl	3b4c <ExFatFile::openRoot(ExFatVolume*)>
    493e:	2800      	cmp	r0, #0
    4940:	d0f1      	beq.n	4926 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    4942:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    4944:	ae08      	add	r6, sp, #32
    4946:	e7b2      	b.n	48ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    4948:	aa02      	add	r2, sp, #8
    494a:	4631      	mov	r1, r6
    494c:	4620      	mov	r0, r4
    494e:	f7ff ff67 	bl	4820 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    4952:	b017      	add	sp, #92	; 0x5c
    4954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4956:	bf00      	nop

00004958 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    495c:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    495e:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4962:	b083      	sub	sp, #12
      || second > 59) {
    4964:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4966:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    496a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    496e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    4972:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
      || second > 59) {
    4976:	f140 8085 	bpl.w	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || year > 2107
    497a:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    497e:	b294      	uxth	r4, r2
    4980:	2c7f      	cmp	r4, #127	; 0x7f
    4982:	d87f      	bhi.n	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || month > 12
    4984:	1e5a      	subs	r2, r3, #1
    4986:	2a0b      	cmp	r2, #11
    4988:	d87c      	bhi.n	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || day > 31
    498a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    498e:	2a1e      	cmp	r2, #30
    4990:	d878      	bhi.n	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || minute > 59
    4992:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    4996:	bf98      	it	ls
    4998:	f1b9 0f17 	cmpls.w	r9, #23
    499c:	bf8c      	ite	hi
    499e:	f04f 0a01 	movhi.w	sl, #1
    49a2:	f04f 0a00 	movls.w	sl, #0
    49a6:	2f3b      	cmp	r7, #59	; 0x3b
    49a8:	bf88      	it	hi
    49aa:	f04a 0a01 	orrhi.w	sl, sl, #1
      || second > 59) {
    49ae:	f1ba 0f00 	cmp.w	sl, #0
    49b2:	d167      	bne.n	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    49b4:	4605      	mov	r5, r0
    49b6:	9301      	str	r3, [sp, #4]
    49b8:	f7ff fe58 	bl	466c <ExFatFile::sync()>
    49bc:	2800      	cmp	r0, #0
    49be:	d061      	beq.n	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
         year << 9 | month << 5 | day;
    49c0:	9b01      	ldr	r3, [sp, #4]
    49c2:	4651      	mov	r1, sl
    49c4:	ea4b 1b43 	orr.w	fp, fp, r3, lsl #5
         hour << 11 | minute << 5 | second >> 1;
    49c8:	087b      	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    49ca:	f017 0701 	ands.w	r7, r7, #1
         year << 9 | month << 5 | day;
    49ce:	ea4b 2444 	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    49d2:	46d3      	mov	fp, sl
         hour << 11 | minute << 5 | second >> 1;
    49d4:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    49d8:	bf18      	it	ne
    49da:	2764      	movne	r7, #100	; 0x64
         year << 9 | month << 5 | day;
    49dc:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    49de:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    49e2:	f006 0901 	and.w	r9, r6, #1
    49e6:	fa1f f888 	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    49ea:	2200      	movs	r2, #0
    49ec:	4628      	mov	r0, r5
    49ee:	f7ff f861 	bl	3ab4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    49f2:	2800      	cmp	r0, #0
    49f4:	d046      	beq.n	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    49f6:	f890 c000 	ldrb.w	ip, [r0]
    49fa:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
    49fe:	d045      	beq.n	4a8c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    4a00:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    4a04:	b2db      	uxtb	r3, r3
    4a06:	2b01      	cmp	r3, #1
    4a08:	d83c      	bhi.n	4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4a0a:	f1ac 0185 	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a0e:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4a10:	fab1 f181 	clz	r1, r1
    4a14:	0949      	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a16:	e002      	b.n	4a1e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    4a18:	2304      	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4a1a:	f810 c003 	ldrb.w	ip, [r0, r3]
    4a1e:	ea4f 32cb 	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a22:	2b01      	cmp	r3, #1
    4a24:	f103 0301 	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4a28:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
    4a2c:	fa1c f282 	uxtah	r2, ip, r2
    4a30:	fa1f fb82 	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a34:	d101      	bne.n	4a3a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    4a36:	2900      	cmp	r1, #0
    4a38:	d1ee      	bne.n	4a18 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    4a3a:	2b1f      	cmp	r3, #31
    4a3c:	d9ed      	bls.n	4a1a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4a3e:	f10a 0a01 	add.w	sl, sl, #1
    4a42:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4a46:	fa5f f18a 	uxtb.w	r1, sl
    4a4a:	428b      	cmp	r3, r1
    4a4c:	d2cd      	bcs.n	49ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4a4e:	2201      	movs	r2, #1
    4a50:	f105 0124 	add.w	r1, r5, #36	; 0x24
    4a54:	6a28      	ldr	r0, [r5, #32]
    4a56:	f000 fee7 	bl	5828 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4a5a:	b198      	cbz	r0, 4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4a5c:	6a2c      	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4a5e:	f8a0 b002 	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a62:	4620      	mov	r0, r4
    4a64:	f005 feec 	bl	a840 <FsCache::sync()>
    4a68:	b160      	cbz	r0, 4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4a6a:	f504 7004 	add.w	r0, r4, #528	; 0x210
    4a6e:	f005 fee7 	bl	a840 <FsCache::sync()>
    4a72:	b138      	cbz	r0, 4a84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4a74:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    return m_blockDev->syncDevice();
    4a78:	6803      	ldr	r3, [r0, #0]
    4a7a:	6a1b      	ldr	r3, [r3, #32]
  }
  return true;

 fail:
  return false;
}
    4a7c:	b003      	add	sp, #12
    4a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a82:	4718      	bx	r3
    4a84:	2000      	movs	r0, #0
    4a86:	b003      	add	sp, #12
    4a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    4a8c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    4a90:	6a2a      	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    4a92:	f003 0337 	and.w	r3, r3, #55	; 0x37
    4a96:	8083      	strh	r3, [r0, #4]
    4a98:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    4a9c:	f043 0301 	orr.w	r3, r3, #1
    4aa0:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    4aa4:	f1b9 0f00 	cmp.w	r9, #0
    4aa8:	d002      	beq.n	4ab0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    4aaa:	f8a0 8010 	strh.w	r8, [r0, #16]
    4aae:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    4ab0:	07b2      	lsls	r2, r6, #30
    4ab2:	d503      	bpl.n	4abc <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    4ab4:	7507      	strb	r7, [r0, #20]
    4ab6:	f8a0 8008 	strh.w	r8, [r0, #8]
    4aba:	8144      	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    4abc:	0773      	lsls	r3, r6, #29
    4abe:	d503      	bpl.n	4ac8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    4ac0:	7547      	strb	r7, [r0, #21]
    4ac2:	f8a0 800c 	strh.w	r8, [r0, #12]
    4ac6:	81c4      	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4ac8:	f890 c000 	ldrb.w	ip, [r0]
}
    4acc:	e79d      	b.n	4a0a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    4ace:	bf00      	nop

00004ad0 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    4ad0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4ad4:	079a      	lsls	r2, r3, #30
    4ad6:	d562      	bpl.n	4b9e <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    4ad8:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4ada:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    4adc:	b082      	sub	sp, #8
    4ade:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    4ae0:	b3a5      	cbz	r5, 4b4c <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    4ae2:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    4ae6:	d034      	beq.n	4b52 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4ae8:	6a00      	ldr	r0, [r0, #32]
    4aea:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4aec:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    4af0:	3a01      	subs	r2, #1
    4af2:	68e1      	ldr	r1, [r4, #12]
    4af4:	f10c 0c09 	add.w	ip, ip, #9
    4af8:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    4afc:	fa5f fc8c 	uxtb.w	ip, ip
    4b00:	f1cc 0e20 	rsb	lr, ip, #32
    4b04:	fa22 f20c 	lsr.w	r2, r2, ip
    4b08:	f1ac 0c20 	sub.w	ip, ip, #32
    4b0c:	fa01 fe0e 	lsl.w	lr, r1, lr
    4b10:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    4b14:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4b16:	ea42 020e 	orr.w	r2, r2, lr
    4b1a:	ea42 020c 	orr.w	r2, r2, ip
    4b1e:	3201      	adds	r2, #1
    if (m_curCluster) {
    4b20:	b319      	cbz	r1, 4b6a <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4b22:	3d01      	subs	r5, #1
    4b24:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    4b26:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4b28:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    4b2a:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4b2c:	bb72      	cbnz	r2, 4b8c <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    4b32:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    4b34:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b38:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    4b3c:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    4b40:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    4b44:	f7ff fd92 	bl	466c <ExFatFile::sync()>

 fail:
  return false;
}
    4b48:	b002      	add	sp, #8
    4b4a:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    4b4c:	2001      	movs	r0, #1
}
    4b4e:	b002      	add	sp, #8
    4b50:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    4b52:	6981      	ldr	r1, [r0, #24]
    4b54:	b961      	cbnz	r1, 4b70 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    4b56:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    4b58:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    4b5a:	4629      	mov	r1, r5
    4b5c:	6a20      	ldr	r0, [r4, #32]
    4b5e:	f000 ff03 	bl	5968 <ExFatPartition::freeChain(unsigned long)>
    4b62:	b1c8      	cbz	r0, 4b98 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b64:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4b68:	e7e1      	b.n	4b2e <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    4b6a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    4b6c:	61e1      	str	r1, [r4, #28]
    4b6e:	e7dd      	b.n	4b2c <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b70:	aa01      	add	r2, sp, #4
    4b72:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    4b74:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b76:	f000 feb5 	bl	58e4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    4b7a:	2800      	cmp	r0, #0
    4b7c:	db0c      	blt.n	4b98 <ExFatFile::truncate()+0xc8>
      if (fg) {
    4b7e:	d110      	bne.n	4ba2 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    4b80:	9d01      	ldr	r5, [sp, #4]
    4b82:	2d00      	cmp	r5, #0
    4b84:	d1e9      	bne.n	4b5a <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b86:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4b8a:	e7d0      	b.n	4b2e <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4b8c:	2300      	movs	r3, #0
    4b8e:	9901      	ldr	r1, [sp, #4]
    4b90:	f000 fdce 	bl	5730 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4b94:	2800      	cmp	r0, #0
    4b96:	d1e5      	bne.n	4b64 <ExFatFile::truncate()+0x94>
  return false;
    4b98:	2000      	movs	r0, #0
}
    4b9a:	b002      	add	sp, #8
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    4b9e:	2000      	movs	r0, #0
}
    4ba0:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ba6:	69a1      	ldr	r1, [r4, #24]
    4ba8:	6a20      	ldr	r0, [r4, #32]
    4baa:	f000 febd 	bl	5928 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4bae:	2800      	cmp	r0, #0
    4bb0:	d1e6      	bne.n	4b80 <ExFatFile::truncate()+0xb0>
    4bb2:	e7f1      	b.n	4b98 <ExFatFile::truncate()+0xc8>

00004bb4 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4bb8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    4bbc:	b083      	sub	sp, #12
    4bbe:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4bc0:	079d      	lsls	r5, r3, #30
    4bc2:	f140 80a1 	bpl.w	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4bc6:	4691      	mov	r9, r2
    4bc8:	071a      	lsls	r2, r3, #28
    4bca:	460e      	mov	r6, r1
    4bcc:	f100 8095 	bmi.w	4cfa <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4bd0:	f1b9 0f00 	cmp.w	r9, #0
    4bd4:	f000 8128 	beq.w	4e28 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    4bd8:	6823      	ldr	r3, [r4, #0]
    4bda:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4bdc:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    4bde:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4be0:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    4be4:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4be8:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    4bec:	f1b8 0f00 	cmp.w	r8, #0
    4bf0:	f040 8094 	bne.w	4d1c <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    4bf4:	2900      	cmp	r1, #0
    4bf6:	f000 80d4 	beq.w	4da2 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    4bfa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4bfe:	065b      	lsls	r3, r3, #25
    4c00:	f140 80ec 	bpl.w	4ddc <ExFatFile::write(void const*, unsigned int)+0x228>
    4c04:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    4c08:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4c0c:	f10c 0c09 	add.w	ip, ip, #9
    4c10:	3b01      	subs	r3, #1
    4c12:	fa5f fc8c 	uxtb.w	ip, ip
    4c16:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    4c1a:	f1cc 0e20 	rsb	lr, ip, #32
    4c1e:	fa23 f30c 	lsr.w	r3, r3, ip
    4c22:	f1ac 0c20 	sub.w	ip, ip, #32
    4c26:	fa02 fe0e 	lsl.w	lr, r2, lr
    4c2a:	fa22 fc0c 	lsr.w	ip, r2, ip
    4c2e:	69e2      	ldr	r2, [r4, #28]
    4c30:	ea43 030e 	orr.w	r3, r3, lr
    4c34:	ea43 030c 	orr.w	r3, r3, ip
    4c38:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    4c3a:	4299      	cmp	r1, r3
    4c3c:	f080 80d5 	bcs.w	4dea <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    4c40:	3101      	adds	r1, #1
    4c42:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    4c44:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    4c48:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    4c4a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    4c4e:	4091      	lsls	r1, r2
    4c50:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4c52:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    4c56:	f0c0 808a 	bcc.w	4d6e <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    4c5a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    4c5e:	f0c0 80a6 	bcc.w	4dae <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    4c62:	2301      	movs	r3, #1
    4c64:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4c66:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4c68:	eba3 0308 	sub.w	r3, r3, r8
    4c6c:	4293      	cmp	r3, r2
    4c6e:	bf28      	it	cs
    4c70:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    4c72:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    4c76:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    4c78:	ea4f 2843 	mov.w	r8, r3, lsl #9
    4c7c:	d309      	bcc.n	4c92 <ExFatFile::write(void const*, unsigned int)+0xde>
    4c7e:	185f      	adds	r7, r3, r1
    4c80:	42ba      	cmp	r2, r7
    4c82:	d206      	bcs.n	4c92 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    4c84:	2200      	movs	r2, #0
    4c86:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4c8e:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    4c92:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    4c96:	4632      	mov	r2, r6
    4c98:	6807      	ldr	r7, [r0, #0]
    4c9a:	6abf      	ldr	r7, [r7, #40]	; 0x28
    4c9c:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    4c9e:	b398      	cbz	r0, 4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    4ca0:	4643      	mov	r3, r8
    src += n;
    4ca2:	4446      	add	r6, r8
    toWrite -= n;
    4ca4:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    4ca8:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    4cac:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    4cb0:	19db      	adds	r3, r3, r7
    4cb2:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    4cb6:	4298      	cmp	r0, r3
    4cb8:	4191      	sbcs	r1, r2
    m_curPosition += n;
    4cba:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    4cbe:	d207      	bcs.n	4cd0 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4cc0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    4cc4:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    4cc8:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4ccc:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    4cd0:	2d00      	cmp	r5, #0
    4cd2:	d183      	bne.n	4bdc <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    4cd4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    4cd8:	4298      	cmp	r0, r3
    4cda:	4191      	sbcs	r1, r2
    4cdc:	f0c0 8096 	bcc.w	4e0c <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4ce0:	4b53      	ldr	r3, [pc, #332]	; (4e30 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    4ce2:	681b      	ldr	r3, [r3, #0]
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	f000 809d 	beq.w	4e24 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4cea:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4cee:	4648      	mov	r0, r9
    4cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4cf4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    4cf8:	e00d      	b.n	4d16 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    4cfa:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    4cfe:	f7ff f86d 	bl	3ddc <ExFatFile::seekSet(unsigned long long)>
    4d02:	2800      	cmp	r0, #0
    4d04:	f47f af64 	bne.w	4bd0 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4d08:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    4d0c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    4d0e:	f043 0301 	orr.w	r3, r3, #1
    4d12:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    4d16:	b003      	add	sp, #12
    4d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    4d1c:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    4d20:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4d22:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    4d26:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    4d2a:	4091      	lsls	r1, r2
    4d2c:	4441      	add	r1, r8
    4d2e:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4d30:	2f00      	cmp	r7, #0
    4d32:	d08e      	beq.n	4c52 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    4d34:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    4d38:	2201      	movs	r2, #1
    4d3a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    4d3e:	45a8      	cmp	r8, r5
    4d40:	bf28      	it	cs
    4d42:	46a8      	movcs	r8, r5
    4d44:	f005 fda8 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4d48:	2800      	cmp	r0, #0
    4d4a:	d0dd      	beq.n	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    4d4c:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4d4e:	4447      	add	r7, r8
      memcpy(dst, src, n);
    4d50:	4642      	mov	r2, r8
    4d52:	4631      	mov	r1, r6
    4d54:	f007 f8a4 	bl	bea0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4d58:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    4d5c:	6a20      	ldr	r0, [r4, #32]
    4d5e:	d19f      	bne.n	4ca0 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    4d60:	f500 7004 	add.w	r0, r0, #528	; 0x210
    4d64:	f005 fd6c 	bl	a840 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    4d68:	2800      	cmp	r0, #0
    4d6a:	d199      	bne.n	4ca0 <ExFatFile::write(void const*, unsigned int)+0xec>
    4d6c:	e7cc      	b.n	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4d6e:	6862      	ldr	r2, [r4, #4]
    4d70:	6963      	ldr	r3, [r4, #20]
    4d72:	9200      	str	r2, [sp, #0]
    4d74:	9301      	str	r3, [sp, #4]
    4d76:	6922      	ldr	r2, [r4, #16]
    4d78:	6823      	ldr	r3, [r4, #0]
    4d7a:	4293      	cmp	r3, r2
    4d7c:	e9dd 2300 	ldrd	r2, r3, [sp]
    4d80:	419a      	sbcs	r2, r3
    4d82:	d212      	bcs.n	4daa <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4d84:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    4d86:	f500 7004 	add.w	r0, r0, #528	; 0x210
    4d8a:	f005 fd85 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4d8e:	2800      	cmp	r0, #0
    4d90:	d0ba      	beq.n	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    4d92:	462a      	mov	r2, r5
    4d94:	4631      	mov	r1, r6
    4d96:	4438      	add	r0, r7
    m_curPosition += n;
    4d98:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    4d9a:	f007 f881 	bl	bea0 <memcpy>
    m_curPosition += n;
    4d9e:	462b      	mov	r3, r5
    4da0:	e77f      	b.n	4ca2 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    4da2:	69e1      	ldr	r1, [r4, #28]
    4da4:	b349      	cbz	r1, 4dfa <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    4da6:	61a1      	str	r1, [r4, #24]
    4da8:	e74c      	b.n	4c44 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4daa:	2205      	movs	r2, #5
    4dac:	e7eb      	b.n	4d86 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    4dae:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    4db2:	428b      	cmp	r3, r1
    4db4:	d106      	bne.n	4dc4 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    4db6:	2300      	movs	r3, #0
    4db8:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4dc0:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    4dc4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    4dc8:	4632      	mov	r2, r6
    4dca:	6803      	ldr	r3, [r0, #0]
    4dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4dce:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d099      	beq.n	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
    4dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    4dd8:	4698      	mov	r8, r3
    4dda:	e762      	b.n	4ca2 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4ddc:	f104 0218 	add.w	r2, r4, #24
    4de0:	f000 fd80 	bl	58e4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    4de4:	2800      	cmp	r0, #0
    4de6:	db8f      	blt.n	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    4de8:	d104      	bne.n	4df4 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    4dea:	4620      	mov	r0, r4
    4dec:	f7ff face 	bl	438c <ExFatFile::addCluster()>
    4df0:	2800      	cmp	r0, #0
    4df2:	d089      	beq.n	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    4df4:	69a1      	ldr	r1, [r4, #24]
    4df6:	6a20      	ldr	r0, [r4, #32]
    4df8:	e724      	b.n	4c44 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    4dfa:	4620      	mov	r0, r4
    4dfc:	f7ff fac6 	bl	438c <ExFatFile::addCluster()>
    4e00:	2800      	cmp	r0, #0
    4e02:	d081      	beq.n	4d08 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    4e04:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    4e06:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    4e08:	61e1      	str	r1, [r4, #28]
    4e0a:	e71b      	b.n	4c44 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4e0c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    4e10:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    4e12:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4e16:	f061 037f 	orn	r3, r1, #127	; 0x7f
    4e1a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    4e1e:	b003      	add	sp, #12
    4e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4e24:	4648      	mov	r0, r9
    4e26:	e776      	b.n	4d16 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    4e28:	e9d4 3200 	ldrd	r3, r2, [r4]
    4e2c:	e752      	b.n	4cd4 <ExFatFile::write(void const*, unsigned int)+0x120>
    4e2e:	bf00      	nop
    4e30:	20004744 	.word	0x20004744

00004e34 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    4e34:	b169      	cbz	r1, 4e52 <Print::write(char const*) [clone .isra.0]+0x1e>
    4e36:	b570      	push	{r4, r5, r6, lr}
    4e38:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    4e3a:	4608      	mov	r0, r1
    4e3c:	460c      	mov	r4, r1
    4e3e:	f009 fedf 	bl	ec00 <strlen>
    4e42:	682b      	ldr	r3, [r5, #0]
    4e44:	4602      	mov	r2, r0
    4e46:	4621      	mov	r1, r4
    4e48:	4628      	mov	r0, r5
    4e4a:	685b      	ldr	r3, [r3, #4]
    4e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e50:	4718      	bx	r3
    4e52:	4770      	bx	lr

00004e54 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    4e54:	6883      	ldr	r3, [r0, #8]
    4e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    4e5a:	b183      	cbz	r3, 4e7e <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    4e5c:	2100      	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    4e5e:	b410      	push	{r4}
    m_secBuf[i] = 0;
    4e60:	6902      	ldr	r2, [r0, #16]
    4e62:	54d1      	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    4e64:	3301      	adds	r3, #1
    4e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4e6a:	d1f9      	bne.n	4e60 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    4e6c:	6801      	ldr	r1, [r0, #0]
    4e6e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    4e72:	681c      	ldr	r4, [r3, #0]
    4e74:	4618      	mov	r0, r3
    4e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
    4e78:	f85d 4b04 	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    4e7c:	4718      	bx	r3
}
    4e7e:	2001      	movs	r0, #1
    4e80:	4770      	bx	lr
    4e82:	bf00      	nop

00004e84 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    4e84:	6882      	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    4e86:	4603      	mov	r3, r0
  m_secBuf[index] = b;
    4e88:	6900      	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    4e8a:	f240 1cff 	movw	ip, #511	; 0x1ff
    4e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    4e92:	5481      	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    4e94:	4562      	cmp	r2, ip
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    4e96:	6858      	ldr	r0, [r3, #4]
    4e98:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    4e9c:	6898      	ldr	r0, [r3, #8]
    4e9e:	f100 0001 	add.w	r0, r0, #1
    4ea2:	e9c3 1001 	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    4ea6:	d001      	beq.n	4eac <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    4ea8:	2001      	movs	r0, #1
    4eaa:	4770      	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    4eac:	68d8      	ldr	r0, [r3, #12]
    4eae:	6819      	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    4eb0:	b410      	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    4eb2:	6804      	ldr	r4, [r0, #0]
    4eb4:	1c4a      	adds	r2, r1, #1
    4eb6:	6a64      	ldr	r4, [r4, #36]	; 0x24
    4eb8:	601a      	str	r2, [r3, #0]
    4eba:	691a      	ldr	r2, [r3, #16]
    4ebc:	4623      	mov	r3, r4
}
    4ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    4ec2:	4718      	bx	r3

00004ec4 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    4ec4:	b538      	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    4ec6:	6883      	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4ec8:	b2ca      	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    4eca:	460d      	mov	r5, r1
  m_secBuf[index] = b;
    4ecc:	6901      	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    4ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4ed2:	f240 1cff 	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    4ed6:	4604      	mov	r4, r0
  m_secBuf[index] = b;
    4ed8:	54ca      	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    4eda:	4563      	cmp	r3, ip
    4edc:	6841      	ldr	r1, [r0, #4]
    4ede:	eb02 0271 	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    4ee2:	6042      	str	r2, [r0, #4]
  m_upcaseSize++;
    4ee4:	6882      	ldr	r2, [r0, #8]
    4ee6:	f102 0201 	add.w	r2, r2, #1
    4eea:	6082      	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    4eec:	d005      	beq.n	4efa <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4eee:	0a29      	lsrs	r1, r5, #8
    4ef0:	4620      	mov	r0, r4
}
    4ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4ef6:	f7ff bfc5 	b.w	4e84 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    4efa:	6801      	ldr	r1, [r0, #0]
    4efc:	68c0      	ldr	r0, [r0, #12]
    4efe:	1c4a      	adds	r2, r1, #1
    4f00:	6803      	ldr	r3, [r0, #0]
    4f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f04:	6022      	str	r2, [r4, #0]
    4f06:	6922      	ldr	r2, [r4, #16]
    4f08:	4798      	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4f0a:	2800      	cmp	r0, #0
    4f0c:	d1ef      	bne.n	4eee <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    4f0e:	bd38      	pop	{r3, r4, r5, pc}

00004f10 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    4f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    4f12:	2300      	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    4f14:	4606      	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    4f16:	6001      	str	r1, [r0, #0]
  uint32_t ch = 0;
    4f18:	461d      	mov	r5, r3
  m_upcaseChecksum = 0;
    4f1a:	e9c0 3301 	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    4f1e:	b2a8      	uxth	r0, r5
    4f20:	f005 fdf6 	bl	ab10 <toUpcase(unsigned short)>
    if (uc != ch) {
    4f24:	42a8      	cmp	r0, r5
    uc = toUpcase(ch);
    4f26:	4604      	mov	r4, r0
    if (uc != ch) {
    4f28:	d007      	beq.n	4f3a <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4f2a:	b2c1      	uxtb	r1, r0
    4f2c:	4630      	mov	r0, r6
    4f2e:	f7ff ffa9 	bl	4e84 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    4f32:	2800      	cmp	r0, #0
    4f34:	d13b      	bne.n	4fae <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

 fail:
  return false;
}
    4f36:	2000      	movs	r0, #0
    4f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    4f3a:	1c6c      	adds	r4, r5, #1
    4f3c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    4f40:	d104      	bne.n	4f4c <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    4f42:	e02a      	b.n	4f9a <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    4f44:	3401      	adds	r4, #1
    4f46:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    4f4a:	d004      	beq.n	4f56 <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    4f4c:	b2a0      	uxth	r0, r4
    4f4e:	f005 fddf 	bl	ab10 <toUpcase(unsigned short)>
    4f52:	42a0      	cmp	r0, r4
    4f54:	d0f6      	beq.n	4f44 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    4f56:	1b67      	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    4f58:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    4f5c:	d31d      	bcc.n	4f9a <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    4f5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4f62:	4630      	mov	r0, r6
    4f64:	f7ff ffae 	bl	4ec4 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    4f68:	2800      	cmp	r0, #0
    4f6a:	d0e4      	beq.n	4f36 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    4f6c:	b2b9      	uxth	r1, r7
    4f6e:	4630      	mov	r0, r6
    4f70:	f7ff ffa8 	bl	4ec4 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    4f74:	2800      	cmp	r0, #0
    4f76:	d0de      	beq.n	4f36 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    4f78:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    4f7a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    4f7e:	d1ce      	bne.n	4f1e <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    4f80:	4630      	mov	r0, r6
}
    4f82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    4f86:	f7ff bf65 	b.w	4e54 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4f8a:	f3c5 2107 	ubfx	r1, r5, #8, #8
    4f8e:	4630      	mov	r0, r6
    4f90:	3501      	adds	r5, #1
    4f92:	f7ff ff77 	bl	4e84 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    4f96:	2800      	cmp	r0, #0
    4f98:	d0cd      	beq.n	4f36 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    4f9a:	42a5      	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4f9c:	b2e9      	uxtb	r1, r5
    4f9e:	4630      	mov	r0, r6
        while (ch < n) {
    4fa0:	d2eb      	bcs.n	4f7a <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4fa2:	f7ff ff6f 	bl	4e84 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    4fa6:	2800      	cmp	r0, #0
    4fa8:	d1ef      	bne.n	4f8a <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    4faa:	2000      	movs	r0, #0
    4fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    4fae:	f3c4 2107 	ubfx	r1, r4, #8, #8
    4fb2:	4630      	mov	r0, r6
    4fb4:	f7ff ff66 	bl	4e84 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    4fb8:	2800      	cmp	r0, #0
    4fba:	d0bc      	beq.n	4f36 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    4fbc:	3501      	adds	r5, #1
    4fbe:	e7dc      	b.n	4f7a <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

00004fc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    4fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fc4:	461f      	mov	r7, r3
    4fc6:	b089      	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    4fc8:	680b      	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    4fca:	460d      	mov	r5, r1
    4fcc:	9004      	str	r0, [sp, #16]
    4fce:	4614      	mov	r4, r2
  m_dev = dev;
    4fd0:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    4fd2:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    4fd4:	4608      	mov	r0, r1
    4fd6:	69db      	ldr	r3, [r3, #28]
    4fd8:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    4fda:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    4fde:	9000      	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    4fe0:	f0c0 80d8 	bcc.w	5194 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    4fe4:	2300      	movs	r3, #0
    4fe6:	2201      	movs	r2, #1
    4fe8:	9e00      	ldr	r6, [sp, #0]
    4fea:	3301      	adds	r3, #1
    4fec:	0052      	lsls	r2, r2, #1
    4fee:	b2db      	uxtb	r3, r3
    4ff0:	d001      	beq.n	4ff6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    4ff2:	4296      	cmp	r6, r2
    4ff4:	d8f9      	bhi.n	4fea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    4ff6:	2b1c      	cmp	r3, #28
    4ff8:	9600      	str	r6, [sp, #0]
    4ffa:	f240 80b7 	bls.w	516c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    4ffe:	f1a3 080b 	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    5002:	2201      	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    5004:	fa48 f102 	asr.w	r1, r8, r2
    5008:	f3c8 0847 	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    500c:	408a      	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    500e:	9102      	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    5010:	9207      	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    5012:	3301      	adds	r3, #1
    5014:	2201      	movs	r2, #1
    5016:	105b      	asrs	r3, r3, #1
    5018:	409a      	lsls	r2, r3
    501a:	9206      	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    501c:	2204      	movs	r2, #4
    501e:	409a      	lsls	r2, r3
    5020:	9203      	str	r2, [sp, #12]
  partitionOffset = 2*fatLength;
    5022:	2202      	movs	r2, #2
    5024:	fa02 f303 	lsl.w	r3, r2, r3
    5028:	9301      	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    502a:	9a00      	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    502c:	2100      	movs	r1, #0
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    502e:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    5030:	4620      	mov	r0, r4
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    5032:	9e02      	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    5034:	f04f 0a01 	mov.w	sl, #1
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    5038:	1ad3      	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    503a:	f44f 7200 	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    503e:	f64a 2b55 	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    5042:	40f3      	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    5044:	fa03 f906 	lsl.w	r9, r3, r6
    5048:	9305      	str	r3, [sp, #20]
    504a:	9e01      	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    504c:	f009 faa8 	bl	e5a0 <memset>
  mbr->part->endCHS[1] = 0XFF;
    5050:	23ff      	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    5052:	f884 a1bf 	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    5056:	f884 a1c0 	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    505a:	44b1      	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    505c:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    5060:	4622      	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    5062:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    5066:	2307      	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    5068:	2100      	movs	r1, #0
    506a:	4628      	mov	r0, r5
  mbr->part->type = 7;
    506c:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    5070:	23fe      	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    5072:	f8c4 61c6 	str.w	r6, [r4, #454]	; 0x1c6
    5076:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    507a:	682b      	ldr	r3, [r5, #0]
    507c:	f8c4 91ca 	str.w	r9, [r4, #458]	; 0x1ca
    5080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    5082:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    5086:	4798      	blx	r3
    5088:	2800      	cmp	r0, #0
    508a:	d063      	beq.n	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    508c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5090:	2100      	movs	r1, #0
    5092:	4620      	mov	r0, r4
    5094:	f009 fa84 	bl	e5a0 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    5098:	9b00      	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    509a:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    509e:	f04f 0800 	mov.w	r8, #0
    50a2:	6663      	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    50a4:	21f4      	movs	r1, #244	; 0xf4
    50a6:	9b05      	ldr	r3, [sp, #20]
    50a8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    50ac:	9a06      	ldr	r2, [sp, #24]
    50ae:	65e3      	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    50b0:	2320      	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    50b2:	6426      	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    50b4:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    50b6:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    50b8:	72a3      	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    50ba:	23eb      	movs	r3, #235	; 0xeb
    50bc:	65a6      	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    50be:	4646      	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    50c0:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    50c2:	2376      	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    50c4:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    50c8:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    50ca:	2390      	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    50cc:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    50d0:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    50d2:	2345      	movs	r3, #69	; 0x45
    50d4:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    50d6:	2358      	movs	r3, #88	; 0x58
    50d8:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    50da:	2346      	movs	r3, #70	; 0x46
    50dc:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    50de:	2341      	movs	r3, #65	; 0x41
    50e0:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    50e2:	2354      	movs	r3, #84	; 0x54
    50e4:	71e3      	strb	r3, [r4, #7]
    50e6:	2304      	movs	r3, #4
    50e8:	6623      	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    50ea:	f44f 7380 	mov.w	r3, #256	; 0x100
    50ee:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    50f2:	2309      	movs	r3, #9
    50f4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    50f8:	2380      	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    50fa:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
    50fe:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    5102:	f44f 72c3 	mov.w	r2, #390	; 0x186
    5106:	f009 fa4b 	bl	e5a0 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    510a:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    510e:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
    5112:	2b01      	cmp	r3, #1
    5114:	d906      	bls.n	5124 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    5116:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    511a:	d003      	beq.n	5124 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    511c:	f814 3008 	ldrb.w	r3, [r4, r8]
    5120:	eb03 0676 	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    5124:	f108 0801 	add.w	r8, r8, #1
    5128:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    512c:	d1ef      	bne.n	510e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf)  ||
    512e:	682b      	ldr	r3, [r5, #0]
    5130:	4622      	mov	r2, r4
    5132:	f8dd 9004 	ldr.w	r9, [sp, #4]
    5136:	4628      	mov	r0, r5
    5138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    513a:	4649      	mov	r1, r9
    513c:	4798      	blx	r3
    513e:	b148      	cbz	r0, 5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    5140:	682b      	ldr	r3, [r5, #0]
    5142:	4649      	mov	r1, r9
    5144:	4622      	mov	r2, r4
    5146:	4628      	mov	r0, r5
    5148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    514a:	310c      	adds	r1, #12
    514c:	f8cd 9004 	str.w	r9, [sp, #4]
    5150:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    5152:	bb40      	cbnz	r0, 51a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    5154:	b12f      	cbz	r7, 5162 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    5156:	683b      	ldr	r3, [r7, #0]
    5158:	220f      	movs	r2, #15
    515a:	49b8      	ldr	r1, [pc, #736]	; (543c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    515c:	4638      	mov	r0, r7
    515e:	685b      	ldr	r3, [r3, #4]
    5160:	4798      	blx	r3
  return false;
    5162:	2600      	movs	r6, #0
}
    5164:	4630      	mov	r0, r6
    5166:	b009      	add	sp, #36	; 0x24
    5168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    516c:	2b1a      	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    516e:	f04f 0808 	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    5172:	f200 81a6 	bhi.w	54c2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    5176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    517a:	f8cd 8008 	str.w	r8, [sp, #8]
    517e:	9301      	str	r3, [sp, #4]
    5180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5184:	9303      	str	r3, [sp, #12]
    5186:	f44f 7380 	mov.w	r3, #256	; 0x100
    518a:	9307      	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    518c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5190:	9306      	str	r3, [sp, #24]
    5192:	e74a      	b.n	502a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    5194:	2f00      	cmp	r7, #0
    5196:	d0e4      	beq.n	5162 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    5198:	683b      	ldr	r3, [r7, #0]
    519a:	2215      	movs	r2, #21
    519c:	49a8      	ldr	r1, [pc, #672]	; (5440 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    519e:	4638      	mov	r0, r7
    51a0:	685b      	ldr	r3, [r3, #4]
    51a2:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    51a4:	e7d7      	b.n	5156 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    51a6:	4642      	mov	r2, r8
    51a8:	2100      	movs	r1, #0
    51aa:	4620      	mov	r0, r4
  sector++;
    51ac:	f109 0a01 	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    51b0:	f009 f9f6 	bl	e5a0 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    51b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
    51b8:	f109 0209 	add.w	r2, r9, #9
    51bc:	f204 19ff 	addw	r9, r4, #511	; 0x1ff
    51c0:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
    51c4:	2300      	movs	r3, #0
    51c6:	4693      	mov	fp, r2
  uint32_t checksum = 0;
    51c8:	46a0      	mov	r8, r4
    51ca:	e001      	b.n	51d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    51cc:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    51d0:	45c1      	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    51d2:	eb03 0676 	add.w	r6, r3, r6, ror #1
    51d6:	d1f9      	bne.n	51cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf)  ||
    51d8:	682b      	ldr	r3, [r5, #0]
    51da:	4622      	mov	r2, r4
    51dc:	4651      	mov	r1, sl
    51de:	4628      	mov	r0, r5
    51e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    51e2:	4798      	blx	r3
    51e4:	2800      	cmp	r0, #0
    51e6:	d0b5      	beq.n	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    51e8:	682b      	ldr	r3, [r5, #0]
    51ea:	4622      	mov	r2, r4
    51ec:	f10a 010c 	add.w	r1, sl, #12
    51f0:	4628      	mov	r0, r5
    51f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    51f4:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    51f6:	2800      	cmp	r0, #0
    51f8:	d0ac      	beq.n	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    51fa:	f10a 0301 	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    51fe:	459b      	cmp	fp, r3
    5200:	d002      	beq.n	5208 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    5202:	469a      	mov	sl, r3
    5204:	7823      	ldrb	r3, [r4, #0]
    5206:	e7df      	b.n	51c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    5208:	f44f 7200 	mov.w	r2, #512	; 0x200
    520c:	2100      	movs	r1, #0
    520e:	4620      	mov	r0, r4
    5210:	469b      	mov	fp, r3
    5212:	f009 f9c5 	bl	e5a0 <memset>
    5216:	2200      	movs	r2, #0
    5218:	f10a 0a03 	add.w	sl, sl, #3
    521c:	4611      	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    521e:	4623      	mov	r3, r4
    5220:	e001      	b.n	5226 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    5222:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    5226:	4598      	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    5228:	eb01 0676 	add.w	r6, r1, r6, ror #1
    522c:	d1f9      	bne.n	5222 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf)  ||
    522e:	682b      	ldr	r3, [r5, #0]
    5230:	4622      	mov	r2, r4
    5232:	4659      	mov	r1, fp
    5234:	4628      	mov	r0, r5
    5236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5238:	4798      	blx	r3
    523a:	2800      	cmp	r0, #0
    523c:	d08a      	beq.n	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    523e:	682b      	ldr	r3, [r5, #0]
    5240:	4622      	mov	r2, r4
    5242:	f10b 010c 	add.w	r1, fp, #12
    5246:	4628      	mov	r0, r5
    5248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    524a:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    524c:	2800      	cmp	r0, #0
    524e:	d081      	beq.n	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    5250:	f10b 0101 	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    5254:	458a      	cmp	sl, r1
    5256:	d16a      	bne.n	532e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    5258:	1f23      	subs	r3, r4, #4
    525a:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    525e:	f843 6f04 	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    5262:	429a      	cmp	r2, r3
    5264:	d1fb      	bne.n	525e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf)  ||
    5266:	682b      	ldr	r3, [r5, #0]
    5268:	4622      	mov	r2, r4
    526a:	4628      	mov	r0, r5
    526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    526e:	4798      	blx	r3
    5270:	2800      	cmp	r0, #0
    5272:	f43f af6f 	beq.w	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    5276:	682b      	ldr	r3, [r5, #0]
    5278:	f10b 010d 	add.w	r1, fp, #13
    527c:	4622      	mov	r2, r4
    527e:	4628      	mov	r0, r5
    5280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5282:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    5284:	2800      	cmp	r0, #0
    5286:	f43f af65 	beq.w	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    528a:	b12f      	cbz	r7, 5298 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    528c:	683b      	ldr	r3, [r7, #0]
    528e:	220c      	movs	r2, #12
    5290:	496c      	ldr	r1, [pc, #432]	; (5444 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    5292:	4638      	mov	r0, r7
    5294:	685b      	ldr	r3, [r3, #4]
    5296:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    5298:	9a06      	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    529a:	2100      	movs	r1, #0
  sector = partitionOffset + fatOffset;
    529c:	9b01      	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    529e:	4620      	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    52a0:	2600      	movs	r6, #0
  sector = partitionOffset + fatOffset;
    52a2:	4413      	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    52a4:	f44f 7200 	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    52a8:	4699      	mov	r9, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    52aa:	9b05      	ldr	r3, [sp, #20]
    52ac:	ea4f 0883 	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    52b0:	f009 f976 	bl	e5a0 <memset>
  secBuf[0] = 0XF8;
    52b4:	4623      	mov	r3, r4
    secBuf[i] = 0XFF;
    52b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    52ba:	f208 2807 	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    52be:	21f8      	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    52c0:	f1b7 0b00 	subs.w	fp, r7, #0
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    52c4:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    52c8:	f803 1b01 	strb.w	r1, [r3], #1
    if (i%(ns/32) == 0) {
    52cc:	ea4f 3898 	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    52d0:	f8c4 2001 	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    52d4:	bf18      	it	ne
    52d6:	f04f 0b01 	movne.w	fp, #1
    secBuf[i] = 0XFF;
    52da:	60da      	str	r2, [r3, #12]
    52dc:	605a      	str	r2, [r3, #4]
    52de:	609a      	str	r2, [r3, #8]
    52e0:	f8c3 200f 	str.w	r2, [r3, #15]
    52e4:	e002      	b.n	52ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    52e6:	3601      	adds	r6, #1
    52e8:	45b2      	cmp	sl, r6
    52ea:	d023      	beq.n	5334 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i%(ns/32) == 0) {
    52ec:	fbb6 f3f8 	udiv	r3, r6, r8
    52f0:	fb08 6313 	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    52f4:	b943      	cbnz	r3, 5308 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    52f6:	f1bb 0f00 	cmp.w	fp, #0
    52fa:	d005      	beq.n	5308 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    52fc:	683b      	ldr	r3, [r7, #0]
    52fe:	2201      	movs	r2, #1
    5300:	4951      	ldr	r1, [pc, #324]	; (5448 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    5302:	4638      	mov	r0, r7
    5304:	685b      	ldr	r3, [r3, #4]
    5306:	4798      	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    5308:	682b      	ldr	r3, [r5, #0]
    530a:	eb09 0106 	add.w	r1, r9, r6
    530e:	4622      	mov	r2, r4
    5310:	4628      	mov	r0, r5
    5312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5314:	4798      	blx	r3
    5316:	2800      	cmp	r0, #0
    5318:	f43f af1c 	beq.w	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    531c:	2e00      	cmp	r6, #0
    531e:	d1e2      	bne.n	52e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    5320:	4631      	mov	r1, r6
    5322:	f44f 7200 	mov.w	r2, #512	; 0x200
    5326:	4620      	mov	r0, r4
    5328:	f009 f93a 	bl	e5a0 <memset>
    532c:	e7db      	b.n	52e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    532e:	468b      	mov	fp, r1
    5330:	7821      	ldrb	r1, [r4, #0]
    5332:	e774      	b.n	521e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    5334:	2f00      	cmp	r7, #0
    5336:	d034      	beq.n	53a2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    5338:	683b      	ldr	r3, [r7, #0]
    533a:	2202      	movs	r2, #2
    533c:	4943      	ldr	r1, [pc, #268]	; (544c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    533e:	4638      	mov	r0, r7
    5340:	685b      	ldr	r3, [r3, #4]
    5342:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    5344:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    5346:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    5348:	3607      	adds	r6, #7
    534a:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    534c:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    5350:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    5354:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    5358:	f4ff aefd 	bcc.w	5156 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    535c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5360:	2100      	movs	r1, #0
    5362:	4620      	mov	r0, r4
    5364:	f009 f91c 	bl	e5a0 <memset>
  secBuf[0] = 0X7;
    5368:	2307      	movs	r3, #7
    536a:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    536c:	f1b9 0f00 	cmp.w	r9, #0
    5370:	f000 808a 	beq.w	5488 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    5374:	f04f 0800 	mov.w	r8, #0
    5378:	e008      	b.n	538c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    537a:	f1b8 0f00 	cmp.w	r8, #0
    537e:	d101      	bne.n	5384 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    5380:	f884 8000 	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    5384:	f108 0801 	add.w	r8, r8, #1
    5388:	45c1      	cmp	r9, r8
    538a:	d97b      	bls.n	5484 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    538c:	9a03      	ldr	r2, [sp, #12]
    538e:	4628      	mov	r0, r5
    5390:	682b      	ldr	r3, [r5, #0]
    5392:	eb02 0108 	add.w	r1, r2, r8
    5396:	4622      	mov	r2, r4
    5398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    539a:	4798      	blx	r3
    539c:	2800      	cmp	r0, #0
    539e:	d1ec      	bne.n	537a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    53a0:	e6d8      	b.n	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7)/8;
    53a2:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    53a4:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    53a6:	3607      	adds	r6, #7
    53a8:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    53aa:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    53ae:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    53b2:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    53b6:	f4ff aed4 	bcc.w	5162 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    53ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    53be:	4639      	mov	r1, r7
    53c0:	4620      	mov	r0, r4
    53c2:	f009 f8ed 	bl	e5a0 <memset>
  secBuf[0] = 0X7;
    53c6:	2307      	movs	r3, #7
    53c8:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    53ca:	f1b9 0f00 	cmp.w	r9, #0
    53ce:	d1d1      	bne.n	5374 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    53d0:	9b03      	ldr	r3, [sp, #12]
    53d2:	9a07      	ldr	r2, [sp, #28]
    53d4:	9804      	ldr	r0, [sp, #16]
    53d6:	1899      	adds	r1, r3, r2
    53d8:	f7ff fd9a 	bl	4f10 <ExFatFormatter::writeUpcase(unsigned long)>
    53dc:	2800      	cmp	r0, #0
    53de:	f43f aec0 	beq.w	5162 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    53e2:	9a02      	ldr	r2, [sp, #8]
    53e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    53e8:	4093      	lsls	r3, r2
    53ea:	9a04      	ldr	r2, [sp, #16]
    53ec:	6892      	ldr	r2, [r2, #8]
    53ee:	429a      	cmp	r2, r3
    53f0:	f63f aeb7 	bhi.w	5162 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    53f4:	f04f 0802 	mov.w	r8, #2
    53f8:	9b02      	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    53fa:	f44f 7200 	mov.w	r2, #512	; 0x200
    53fe:	2100      	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    5400:	fa08 f903 	lsl.w	r9, r8, r3
    5404:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    5406:	4620      	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    5408:	4499      	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    540a:	f009 f8c9 	bl	e5a0 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    540e:	2281      	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    5410:	2303      	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    5412:	9904      	ldr	r1, [sp, #16]
    5414:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  dbm->type = EXFAT_TYPE_BITMAP;
    5418:	f884 2020 	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    541c:	2282      	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    541e:	7023      	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    5420:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    5424:	e9c4 860d 	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    5428:	684a      	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    542a:	f04f 0801 	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    542e:	6563      	str	r3, [r4, #84]	; 0x54
    5430:	6462      	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    5432:	688b      	ldr	r3, [r1, #8]
    5434:	65a3      	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    5436:	2300      	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    5438:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    543a:	e00e      	b.n	545a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    543c:	20000738 	.word	0x20000738
    5440:	200006d4 	.word	0x200006d4
    5444:	200006ec 	.word	0x200006ec
    5448:	200006fc 	.word	0x200006fc
    544c:	20000714 	.word	0x20000714
    5450:	9b07      	ldr	r3, [sp, #28]
    5452:	4598      	cmp	r8, r3
    5454:	d23b      	bcs.n	54ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    5456:	f108 0801 	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    545a:	682b      	ldr	r3, [r5, #0]
    545c:	eb09 0108 	add.w	r1, r9, r8
    5460:	4622      	mov	r2, r4
    5462:	4628      	mov	r0, r5
    5464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5466:	4798      	blx	r3
    5468:	4606      	mov	r6, r0
    546a:	2800      	cmp	r0, #0
    546c:	f43f ae72 	beq.w	5154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    5470:	f1b8 0f01 	cmp.w	r8, #1
    5474:	d1ec      	bne.n	5450 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    5476:	f44f 7200 	mov.w	r2, #512	; 0x200
    547a:	2100      	movs	r1, #0
    547c:	4620      	mov	r0, r4
    547e:	f009 f88f 	bl	e5a0 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    5482:	e7e8      	b.n	5456 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    5484:	2f00      	cmp	r7, #0
    5486:	d0a3      	beq.n	53d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    5488:	683b      	ldr	r3, [r7, #0]
    548a:	2216      	movs	r2, #22
    548c:	4914      	ldr	r1, [pc, #80]	; (54e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    548e:	4638      	mov	r0, r7
    5490:	685b      	ldr	r3, [r3, #4]
    5492:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    5494:	9b03      	ldr	r3, [sp, #12]
    5496:	9a07      	ldr	r2, [sp, #28]
    5498:	9804      	ldr	r0, [sp, #16]
    549a:	1899      	adds	r1, r3, r2
    549c:	f7ff fd38 	bl	4f10 <ExFatFormatter::writeUpcase(unsigned long)>
    54a0:	2800      	cmp	r0, #0
    54a2:	f43f ae58 	beq.w	5156 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    54a6:	9a02      	ldr	r2, [sp, #8]
    54a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    54ac:	4093      	lsls	r3, r2
    54ae:	9a04      	ldr	r2, [sp, #16]
    54b0:	6892      	ldr	r2, [r2, #8]
    54b2:	429a      	cmp	r2, r3
    54b4:	f63f ae4f 	bhi.w	5156 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    54b8:	490a      	ldr	r1, [pc, #40]	; (54e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    54ba:	4638      	mov	r0, r7
    54bc:	f7ff fcba 	bl	4e34 <Print::write(char const*) [clone .isra.0]>
    54c0:	e798      	b.n	53f4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    54c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    54c6:	f8cd 8008 	str.w	r8, [sp, #8]
    54ca:	9207      	str	r2, [sp, #28]
    54cc:	e5a1      	b.n	5012 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    54ce:	2f00      	cmp	r7, #0
    54d0:	f43f ae48 	beq.w	5164 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    54d4:	4904      	ldr	r1, [pc, #16]	; (54e8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    54d6:	4638      	mov	r0, r7
    54d8:	f7ff fcac 	bl	4e34 <Print::write(char const*) [clone .isra.0]>
    54dc:	e642      	b.n	5164 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    54de:	bf00      	nop
    54e0:	20000700 	.word	0x20000700
    54e4:	20000718 	.word	0x20000718
    54e8:	20000728 	.word	0x20000728

000054ec <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    54ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54f0:	460c      	mov	r4, r1
    54f2:	4615      	mov	r5, r2
    54f4:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    54f8:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    54fa:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    54fc:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    5500:	b91b      	cbnz	r3, 550a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    5502:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    5506:	429a      	cmp	r2, r3
    5508:	d00e      	beq.n	5528 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    550a:	f005 f9ed 	bl	a8e8 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    550e:	f005 faff 	bl	ab10 <toUpcase(unsigned short)>
    5512:	4606      	mov	r6, r0
    5514:	4638      	mov	r0, r7
    5516:	f005 fafb 	bl	ab10 <toUpcase(unsigned short)>
    551a:	4286      	cmp	r6, r0
    551c:	d109      	bne.n	5532 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    551e:	4544      	cmp	r4, r8
    5520:	d1ea      	bne.n	54f8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    5522:	2001      	movs	r0, #1
}
    5524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    5528:	fab7 f087 	clz	r0, r7
    552c:	0940      	lsrs	r0, r0, #5
}
    552e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    5532:	2000      	movs	r0, #0
}
    5534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005538 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    5538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    553c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    5540:	b083      	sub	sp, #12
    5542:	4688      	mov	r8, r1
  if (!isOpen()) {
    5544:	2b00      	cmp	r3, #0
    5546:	d04f      	beq.n	55e8 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5548:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    554c:	4607      	mov	r7, r0
    554e:	2b01      	cmp	r3, #1
    5550:	d953      	bls.n	55fa <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5552:	3a01      	subs	r2, #1
  char* str = name;
    5554:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5556:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    555a:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    555c:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    555e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 5600 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    5562:	2200      	movs	r2, #0
    5564:	4651      	mov	r1, sl
    5566:	4638      	mov	r0, r7
    5568:	9301      	str	r3, [sp, #4]
    556a:	f7fe faa3 	bl	3ab4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    556e:	2800      	cmp	r0, #0
    5570:	d03a      	beq.n	55e8 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    5572:	7802      	ldrb	r2, [r0, #0]
    5574:	2ac1      	cmp	r2, #193	; 0xc1
    5576:	d137      	bne.n	55e8 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    5578:	4605      	mov	r5, r0
    557a:	f100 091e 	add.w	r9, r0, #30
    557e:	9b01      	ldr	r3, [sp, #4]
    5580:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    5584:	b324      	cbz	r4, 55d0 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    5586:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    558a:	b292      	uxth	r2, r2
    558c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    5590:	d22a      	bcs.n	55e8 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5592:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    5596:	f3c0 0009 	ubfx	r0, r0, #0, #10
    559a:	4320      	orrs	r0, r4
    559c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    55a0:	4619      	mov	r1, r3
    55a2:	4632      	mov	r2, r6
    55a4:	f005 fa16 	bl	a9d4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    55a8:	4603      	mov	r3, r0
    55aa:	b1e8      	cbz	r0, 55e8 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    55ac:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    55ae:	454d      	cmp	r5, r9
    55b0:	d1e6      	bne.n	5580 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    55b2:	f10a 0a01 	add.w	sl, sl, #1
    55b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    55ba:	fa5f fa8a 	uxtb.w	sl, sl
    55be:	4552      	cmp	r2, sl
    55c0:	d2cf      	bcs.n	5562 <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    55c2:	eba3 0008 	sub.w	r0, r3, r8
    55c6:	4698      	mov	r8, r3
  *str = '\0';
    55c8:	2300      	movs	r3, #0
    55ca:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    55ce:	e00f      	b.n	55f0 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    55d0:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    55d4:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    55d6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    55da:	d302      	bcc.n	55e2 <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    55dc:	2800      	cmp	r0, #0
    55de:	d1df      	bne.n	55a0 <ExFatFile::getName8(char*, unsigned int)+0x68>
    55e0:	e7ef      	b.n	55c2 <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    55e2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    55e6:	d306      	bcc.n	55f6 <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    55e8:	2300      	movs	r3, #0
  return 0;
    55ea:	4618      	mov	r0, r3
  *name = 0;
    55ec:	f888 3000 	strb.w	r3, [r8]
}
    55f0:	b003      	add	sp, #12
    55f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55f6:	4604      	mov	r4, r0
    55f8:	e7d9      	b.n	55ae <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    55fa:	2000      	movs	r0, #0
    55fc:	e7e4      	b.n	55c8 <ExFatFile::getName8(char*, unsigned int)+0x90>
    55fe:	bf00      	nop
    5600:	000ffc00 	.word	0x000ffc00

00005604 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    5604:	b570      	push	{r4, r5, r6, lr}
    5606:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    5608:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    560a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    560e:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    5610:	4619      	mov	r1, r3
  uint16_t hash = 0;
    5612:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    5614:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    5616:	6123      	str	r3, [r4, #16]
    next = begin;
    5618:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    561a:	e017      	b.n	564c <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    561c:	f005 f964 	bl	a8e8 <FsName::get16()>
    if (u == 0XFFFF) {
    5620:	42a8      	cmp	r0, r5
    5622:	d022      	beq.n	566a <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    5624:	f005 fa74 	bl	ab10 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    5628:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    562a:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    562c:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    562e:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5630:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5634:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    5636:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5638:	fa52 f080 	uxtab	r0, r2, r0
    563c:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    563e:	f3c0 004e 	ubfx	r0, r0, #1, #15
    5642:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    5646:	fa16 f080 	uxtah	r0, r6, r0
    564a:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    564c:	4620      	mov	r0, r4
    564e:	2900      	cmp	r1, #0
    5650:	d1e4      	bne.n	561c <ExFatFile::hashName(ExName_t*)+0x18>
    5652:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    5656:	429a      	cmp	r2, r3
    5658:	d1e0      	bne.n	561c <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    565a:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    565c:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    565e:	3801      	subs	r0, #1
    5660:	28fe      	cmp	r0, #254	; 0xfe
    5662:	bf8c      	ite	hi
    5664:	2000      	movhi	r0, #0
    5666:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5668:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    566a:	2000      	movs	r0, #0
}
    566c:	bd70      	pop	{r4, r5, r6, pc}
    566e:	bf00      	nop

00005670 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    5670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5674:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5676:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    5678:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    567a:	2900      	cmp	r1, #0
    567c:	d042      	beq.n	5704 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    567e:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    5682:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    5686:	4543      	cmp	r3, r8
    5688:	d942      	bls.n	5710 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint8_t mask = 1 << (start & 7);
    568a:	f008 0307 	and.w	r3, r8, #7
    568e:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    5690:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    5694:	409d      	lsls	r5, r3
    5696:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    5698:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    569a:	4644      	mov	r4, r8
    uint32_t sector = m_clusterHeapStartSector +
    569c:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    56a0:	2200      	movs	r2, #0
    56a2:	4638      	mov	r0, r7
    56a4:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    56a8:	f005 f8f6 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    56ac:	b1e8      	cbz	r0, 56ea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    56ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    56b2:	4483      	add	fp, r0
    56b4:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (!(mask & cache[i])) {
    56b8:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    56bc:	e00a      	b.n	56d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    56be:	454a      	cmp	r2, r9
    56c0:	d02b      	beq.n	571a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
        if (endAlloc == start) {
    56c2:	45a0      	cmp	r8, r4
    56c4:	d010      	beq.n	56e8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
        if (endAlloc >= m_clusterCount) {
    56c6:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    56ca:	42a5      	cmp	r5, r4
    56cc:	d914      	bls.n	56f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    56ce:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    56d2:	d00c      	beq.n	56ee <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    56d4:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    56d6:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    56d8:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    56dc:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    56e0:	d0ed      	beq.n	56be <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    56e2:	45a0      	cmp	r8, r4
        endAlloc++;
    56e4:	4626      	mov	r6, r4
        if (endAlloc == start) {
    56e6:	d1ee      	bne.n	56c6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    56e8:	2001      	movs	r0, #1
}
    56ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    56ee:	4558      	cmp	r0, fp
      mask = 1;
    56f0:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    56f4:	d1e0      	bne.n	56b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    56f6:	e001      	b.n	56fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    56f8:	2600      	movs	r6, #0
    56fa:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    56fc:	2501      	movs	r5, #1
    i = 0;
    56fe:	f04f 0b00 	mov.w	fp, #0
    5702:	e7cb      	b.n	569c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5704:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    5708:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    570c:	4543      	cmp	r3, r8
    570e:	d8bc      	bhi.n	568a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    5710:	f04f 0800 	mov.w	r8, #0
    5714:	2501      	movs	r5, #1
    start = 0;
    5716:	46c3      	mov	fp, r8
    5718:	e7be      	b.n	5698 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    571a:	f1ba 0f00 	cmp.w	sl, #0
    571e:	d104      	bne.n	572a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    5720:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    5724:	bf08      	it	eq
    5726:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    572a:	1cb0      	adds	r0, r6, #2
}
    572c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005730 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
                                  uint32_t count, bool value) {
    5730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5734:	4680      	mov	r8, r0
  uint32_t start = cluster - 2;
    5736:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    5738:	4615      	mov	r5, r2
    573a:	461e      	mov	r6, r3
  if ((start + count) > m_clusterCount) {
    573c:	1883      	adds	r3, r0, r2
    573e:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    5742:	4293      	cmp	r3, r2
    5744:	d837      	bhi.n	57b6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
  if (value) {
    5746:	bbce      	cbnz	r6, 57bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start < m_bitmapStart) {
    5748:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    574c:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    574e:	bf88      	it	hi
    5750:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
  mask = 1 << (start & 7);
    5754:	f000 0307 	and.w	r3, r0, #7
    5758:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    575a:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    575e:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    5762:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    5764:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    5768:	b2e4      	uxtb	r4, r4
    576a:	2201      	movs	r2, #1
    576c:	4640      	mov	r0, r8
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    576e:	188f      	adds	r7, r1, r2
    5770:	f005 f892 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5774:	b1f8      	cbz	r0, 57b6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    5776:	f109 3eff 	add.w	lr, r9, #4294967295	; 0xffffffff
    577a:	4486      	add	lr, r0
    577c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (value == static_cast<bool>(cache[i] & mask)) {
    5780:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    5784:	ea1c 0f04 	tst.w	ip, r4
        cache[i] ^= mask;
    5788:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    578c:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    5790:	bf14      	ite	ne
    5792:	2201      	movne	r2, #1
    5794:	2200      	moveq	r2, #0
    5796:	42b2      	cmp	r2, r6
    5798:	d00d      	beq.n	57b6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    579a:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    579c:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    57a0:	d018      	beq.n	57d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    57a2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    57a6:	d1ed      	bne.n	5784 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    57a8:	4570      	cmp	r0, lr
    i = 0;
    57aa:	46a1      	mov	r9, r4
    57ac:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    57b0:	d1e6      	bne.n	5780 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    57b2:	4639      	mov	r1, r7
    57b4:	e7d9      	b.n	576a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  return false;
    57b6:	2000      	movs	r0, #0
}
    57b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    57bc:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    57c0:	428b      	cmp	r3, r1
    57c2:	d9c7      	bls.n	5754 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    57c4:	4281      	cmp	r1, r0
    57c6:	d3c5      	bcc.n	5754 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    57c8:	4293      	cmp	r3, r2
    57ca:	bf28      	it	cs
    57cc:	2300      	movcs	r3, #0
    57ce:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    57d2:	e7bf      	b.n	5754 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    57d4:	2001      	movs	r0, #1
}
    57d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    57da:	bf00      	nop

000057dc <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    57dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cluster > (m_clusterCount + 1)) {
    57de:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    57e2:	3301      	adds	r3, #1
    57e4:	428b      	cmp	r3, r1
    57e6:	d201      	bcs.n	57ec <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    57e8:	2000      	movs	r0, #0
}
    57ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57ec:	4607      	mov	r7, r0
    57ee:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    57f0:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    57f4:	2500      	movs	r5, #0
    57f6:	e005      	b.n	5804 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    57f8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    57fc:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    57fe:	3301      	adds	r3, #1
    5800:	42a3      	cmp	r3, r4
    5802:	d3f1      	bcc.n	57e8 <ExFatPartition::chainSize(unsigned long)+0xc>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5804:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    5808:	2200      	movs	r2, #0
    580a:	4630      	mov	r0, r6
    580c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    5810:	f005 f842 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    5814:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    5816:	2800      	cmp	r0, #0
    5818:	d0e6      	beq.n	57e8 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    581a:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    581e:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    5820:	1c63      	adds	r3, r4, #1
    5822:	d1e9      	bne.n	57f8 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    5824:	1c68      	adds	r0, r5, #1
}
    5826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005828 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5828:	b538      	push	{r3, r4, r5, lr}
    582a:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    582c:	680b      	ldr	r3, [r1, #0]
    582e:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    5832:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5836:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    583a:	3b02      	subs	r3, #2
    583c:	6865      	ldr	r5, [r4, #4]
    583e:	fa03 f30c 	lsl.w	r3, r3, ip
    5842:	4029      	ands	r1, r5
    5844:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    5848:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    584c:	4419      	add	r1, r3
    584e:	f005 f823 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    5852:	b118      	cbz	r0, 585c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    5854:	6863      	ldr	r3, [r4, #4]
    5856:	f3c3 0308 	ubfx	r3, r3, #0, #9
    585a:	4418      	add	r0, r3
}
    585c:	bd38      	pop	{r3, r4, r5, pc}
    585e:	bf00      	nop

00005860 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5864:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5866:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    586a:	6849      	ldr	r1, [r1, #4]
    586c:	400b      	ands	r3, r1
  pos->position += offset;
    586e:	4411      	add	r1, r2
    5870:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5872:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5874:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    5878:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    587c:	b2d2      	uxtb	r2, r2
    587e:	40d3      	lsrs	r3, r2
  while (tmp--) {
    5880:	b32b      	cbz	r3, 58ce <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    5882:	4680      	mov	r8, r0
    5884:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    5886:	f500 7904 	add.w	r9, r0, #528	; 0x210
    588a:	e005      	b.n	5898 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    588c:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    588e:	3d01      	subs	r5, #1
      pos->cluster++;
    5890:	f103 0301 	add.w	r3, r3, #1
    5894:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    5896:	d31a      	bcc.n	58ce <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    5898:	7a26      	ldrb	r6, [r4, #8]
    589a:	2e00      	cmp	r6, #0
    589c:	d1f6      	bne.n	588c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    589e:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    58a2:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    58a4:	6827      	ldr	r7, [r4, #0]
    58a6:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    58a8:	3301      	adds	r3, #1
    58aa:	429f      	cmp	r7, r3
    58ac:	d812      	bhi.n	58d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    58ae:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    58b2:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    58b6:	f004 ffef 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    58ba:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    58bc:	b150      	cbz	r0, 58d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    58be:	f3c7 0708 	ubfx	r7, r7, #0, #9
    58c2:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    58c4:	1c5a      	adds	r2, r3, #1
    58c6:	d009      	beq.n	58dc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    58c8:	3d01      	subs	r5, #1
  *value = next;
    58ca:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    58cc:	d2e4      	bcs.n	5898 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    58ce:	2001      	movs	r0, #1
}
    58d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    58d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    58d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    58dc:	4630      	mov	r0, r6
}
    58de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    58e2:	bf00      	nop

000058e4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    58e4:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    58e6:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    58ea:	3301      	adds	r3, #1
    58ec:	428b      	cmp	r3, r1
    58ee:	d202      	bcs.n	58f6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    58f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    58f4:	bd38      	pop	{r3, r4, r5, pc}
    58f6:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    58f8:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    58fc:	4615      	mov	r5, r2
    58fe:	f500 7004 	add.w	r0, r0, #528	; 0x210
    5902:	2200      	movs	r2, #0
    5904:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    5908:	f004 ffc6 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    590c:	2800      	cmp	r0, #0
    590e:	d0ef      	beq.n	58f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    5910:	00a4      	lsls	r4, r4, #2
    5912:	f3c4 0408 	ubfx	r4, r4, #0, #9
    5916:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    5918:	1c5a      	adds	r2, r3, #1
    591a:	d002      	beq.n	5922 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    591c:	2001      	movs	r0, #1
  *value = next;
    591e:	602b      	str	r3, [r5, #0]
}
    5920:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    5922:	2000      	movs	r0, #0
}
    5924:	bd38      	pop	{r3, r4, r5, pc}
    5926:	bf00      	nop

00005928 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5928:	2901      	cmp	r1, #1
    592a:	d91b      	bls.n	5964 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    592c:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    592e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    5932:	460c      	mov	r4, r1
    5934:	3301      	adds	r3, #1
    5936:	428b      	cmp	r3, r1
    5938:	d201      	bcs.n	593e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    593a:	2000      	movs	r0, #0
}
    593c:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    593e:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    5942:	4615      	mov	r5, r2
    5944:	f500 7004 	add.w	r0, r0, #528	; 0x210
    5948:	2201      	movs	r2, #1
    594a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    594e:	f004 ffa3 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5952:	4603      	mov	r3, r0
    5954:	2800      	cmp	r0, #0
    5956:	d0f0      	beq.n	593a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    5958:	00a4      	lsls	r4, r4, #2
  return true;
    595a:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    595c:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    5960:	511d      	str	r5, [r3, r4]
}
    5962:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5964:	2000      	movs	r0, #0
}
    5966:	4770      	bx	lr

00005968 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    5968:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    596c:	3301      	adds	r3, #1
    596e:	4299      	cmp	r1, r3
    5970:	d901      	bls.n	5976 <ExFatPartition::freeChain(unsigned long)+0xe>
}
    5972:	2000      	movs	r0, #0
    5974:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    5976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    597a:	4605      	mov	r5, r0
    597c:	b083      	sub	sp, #12
    597e:	460c      	mov	r4, r1
    5980:	f500 7904 	add.w	r9, r0, #528	; 0x210
    5984:	460f      	mov	r7, r1
    5986:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    598a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    598e:	2200      	movs	r2, #0
    5990:	4648      	mov	r0, r9
    5992:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    5996:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    599a:	f004 ff7d 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    599e:	b190      	cbz	r0, 59c6 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    59a0:	00a3      	lsls	r3, r4, #2
    59a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    59a6:	58c2      	ldr	r2, [r0, r3]
    59a8:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    59aa:	1c53      	adds	r3, r2, #1
    59ac:	bf16      	itet	ne
    59ae:	4616      	movne	r6, r2
    59b0:	f04f 0a00 	moveq.w	sl, #0
    59b4:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    59b8:	2c01      	cmp	r4, #1
    59ba:	d904      	bls.n	59c6 <ExFatPartition::freeChain(unsigned long)+0x5e>
    59bc:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    59c0:	3201      	adds	r2, #1
    59c2:	4294      	cmp	r4, r2
    59c4:	d903      	bls.n	59ce <ExFatPartition::freeChain(unsigned long)+0x66>
}
    59c6:	2000      	movs	r0, #0
    59c8:	b003      	add	sp, #12
    59ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    59ce:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    59d2:	2201      	movs	r2, #1
    59d4:	4648      	mov	r0, r9
    59d6:	4459      	add	r1, fp
    59d8:	f004 ff5e 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    59dc:	2800      	cmp	r0, #0
    59de:	d0f2      	beq.n	59c6 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    59e0:	9b01      	ldr	r3, [sp, #4]
    59e2:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    59e6:	f1ba 0f00 	cmp.w	sl, #0
    59ea:	d012      	beq.n	5a12 <ExFatPartition::freeChain(unsigned long)+0xaa>
    59ec:	3401      	adds	r4, #1
    59ee:	42b4      	cmp	r4, r6
    59f0:	d008      	beq.n	5a04 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    59f2:	2300      	movs	r3, #0
    59f4:	1be2      	subs	r2, r4, r7
    59f6:	4639      	mov	r1, r7
    59f8:	4628      	mov	r0, r5
    59fa:	f7ff fe99 	bl	5730 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    59fe:	2800      	cmp	r0, #0
    5a00:	d0e1      	beq.n	59c6 <ExFatPartition::freeChain(unsigned long)+0x5e>
    5a02:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    5a04:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    5a08:	3301      	adds	r3, #1
    5a0a:	42b3      	cmp	r3, r6
    5a0c:	d3db      	bcc.n	59c6 <ExFatPartition::freeChain(unsigned long)+0x5e>
    5a0e:	4634      	mov	r4, r6
    5a10:	e7bb      	b.n	598a <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5a12:	1c62      	adds	r2, r4, #1
    5a14:	4653      	mov	r3, sl
    5a16:	4639      	mov	r1, r7
    5a18:	4628      	mov	r0, r5
    5a1a:	1bd2      	subs	r2, r2, r7
}
    5a1c:	b003      	add	sp, #12
    5a1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5a22:	f7ff be85 	b.w	5730 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5a26:	bf00      	nop

00005a28 <ExFatPartition::freeClusterCount()>:
uint32_t ExFatPartition::freeClusterCount() {
    5a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t usedCount = 0;
    5a2c:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    5a2e:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    5a30:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    5a34:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    5a38:	462c      	mov	r4, r5
    5a3a:	2200      	movs	r2, #0
    5a3c:	4640      	mov	r0, r8
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    5a3e:	1c4f      	adds	r7, r1, #1
    5a40:	f004 ff2a 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5a44:	b1a8      	cbz	r0, 5a72 <ExFatPartition::freeClusterCount()+0x4a>
    5a46:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    5a4a:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
      if (nc >= m_clusterCount) {
    5a4e:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    5a52:	e005      	b.n	5a60 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    5a54:	b979      	cbnz	r1, 5a76 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    5a56:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    5a58:	4284      	cmp	r4, r0
    5a5a:	d209      	bcs.n	5a70 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    5a5c:	454c      	cmp	r4, r9
    5a5e:	d016      	beq.n	5a8e <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    5a60:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    5a64:	29ff      	cmp	r1, #255	; 0xff
    5a66:	d1f5      	bne.n	5a54 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    5a68:	3408      	adds	r4, #8
        usedCount+= 8;
    5a6a:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    5a6c:	4284      	cmp	r4, r0
    5a6e:	d3f5      	bcc.n	5a5c <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    5a70:	1b40      	subs	r0, r0, r5
}
    5a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a76:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5a78:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    5a7a:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    5a80:	bf18      	it	ne
    5a82:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5a84:	3a01      	subs	r2, #1
    5a86:	fa5f f38c 	uxtb.w	r3, ip
    5a8a:	d1f6      	bne.n	5a7a <ExFatPartition::freeClusterCount()+0x52>
    5a8c:	e7e3      	b.n	5a56 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    5a8e:	4639      	mov	r1, r7
    5a90:	e7d3      	b.n	5a3a <ExFatPartition::freeClusterCount()+0x12>
    5a92:	bf00      	nop

00005a94 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_fatType = 0;
    5a96:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    5a98:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    5a9c:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5aa0:	4615      	mov	r5, r2
  m_blockDev = dev;
    5aa2:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5aa6:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    5aa8:	6041      	str	r1, [r0, #4]
    5aaa:	461a      	mov	r2, r3
    5aac:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    5ab0:	4619      	mov	r1, r3
  m_fatType = 0;
    5ab2:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    5ab6:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    5ab8:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    5aba:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5abe:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    5ac2:	4638      	mov	r0, r7
    5ac4:	f004 fee8 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (part > 4 || !cache) {
    5ac8:	2d04      	cmp	r5, #4
    5aca:	d80d      	bhi.n	5ae8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    5acc:	4606      	mov	r6, r0
    5ace:	b158      	cbz	r0, 5ae8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (part >= 1) {
    5ad0:	b1bd      	cbz	r5, 5b02 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mp = &mbr->part[part - 1];
    5ad2:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    5ad4:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5ad8:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    5adc:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    5ae0:	d102      	bne.n	5ae8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    5ae2:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    5ae6:	b90b      	cbnz	r3, 5aec <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  return false;
    5ae8:	2000      	movs	r0, #0
}
    5aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    5aec:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    5af0:	4638      	mov	r0, r7
    5af2:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    5af6:	4629      	mov	r1, r5
    5af8:	f004 fece 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5afc:	4606      	mov	r6, r0
    5afe:	2800      	cmp	r0, #0
    5b00:	d0f2      	beq.n	5ae8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    5b02:	2205      	movs	r2, #5
    5b04:	491a      	ldr	r1, [pc, #104]	; (5b70 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    5b06:	1cf0      	adds	r0, r6, #3
    5b08:	f008 fd9c 	bl	e644 <strncmp>
    5b0c:	2800      	cmp	r0, #0
    5b0e:	d1eb      	bne.n	5ae8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    5b10:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    5b14:	2b09      	cmp	r3, #9
    5b16:	d1e7      	bne.n	5ae8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    5b18:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    5b1a:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    5b1c:	442b      	add	r3, r5
    5b1e:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    5b22:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    5b24:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    5b28:	6db3      	ldr	r3, [r6, #88]	; 0x58
    5b2a:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5b2c:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    5b2e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    5b32:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    5b34:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    5b38:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    5b3a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    5b3e:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    5b42:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    5b46:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5b48:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    5b4c:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5b50:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    5b54:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5b56:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    5b5a:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    5b5e:	462a      	mov	r2, r5
    5b60:	f7ff fd86 	bl	5670 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    5b64:	2340      	movs	r3, #64	; 0x40
  return true;
    5b66:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    5b68:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    5b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b6e:	bf00      	nop
    5b70:	20000748 	.word	0x20000748

00005b74 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    5b74:	b510      	push	{r4, lr}
    5b76:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    5b78:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    5b7c:	f7ff fe2e 	bl	57dc <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5b80:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    5b84:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    5b86:	b2db      	uxtb	r3, r3
}
    5b88:	4098      	lsls	r0, r3
    5b8a:	bd10      	pop	{r4, pc}

00005b8c <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5b8c:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5b8e:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    5b92:	b082      	sub	sp, #8
    5b94:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5b96:	2b00      	cmp	r3, #0
    5b98:	db0d      	blt.n	5bb6 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5b9a:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b9c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5ba0:	f004 fe4e 	bl	a840 <FsCache::sync()>
    5ba4:	2800      	cmp	r0, #0
    5ba6:	d13b      	bne.n	5c20 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5ba8:	7863      	ldrb	r3, [r4, #1]
  return false;
    5baa:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    5bac:	f043 0301 	orr.w	r3, r3, #1
    5bb0:	7063      	strb	r3, [r4, #1]
}
    5bb2:	b002      	add	sp, #8
    5bb4:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5bb6:	6880      	ldr	r0, [r0, #8]
    5bb8:	2201      	movs	r2, #1
    5bba:	69a1      	ldr	r1, [r4, #24]
    5bbc:	3028      	adds	r0, #40	; 0x28
    5bbe:	f004 fe6b 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d0f0      	beq.n	5ba8 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    5bc6:	88a5      	ldrh	r5, [r4, #4]
    5bc8:	f005 050f 	and.w	r5, r5, #15
    5bcc:	016b      	lsls	r3, r5, #5
    5bce:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5bd2:	5cc3      	ldrb	r3, [r0, r3]
    5bd4:	2be5      	cmp	r3, #229	; 0xe5
    5bd6:	d0e7      	beq.n	5ba8 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    5bd8:	7823      	ldrb	r3, [r4, #0]
    5bda:	071b      	lsls	r3, r3, #28
    5bdc:	d501      	bpl.n	5be2 <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    5bde:	69e3      	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5be0:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5be2:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    5be4:	4915      	ldr	r1, [pc, #84]	; (5c3c <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5be6:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5be8:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    5bea:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5bec:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    5bee:	b166      	cbz	r6, 5c0a <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    5bf0:	f10d 0203 	add.w	r2, sp, #3
    5bf4:	f10d 0106 	add.w	r1, sp, #6
    5bf8:	a801      	add	r0, sp, #4
    5bfa:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    5bfc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5c00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5c04:	832b      	strh	r3, [r5, #24]
    5c06:	826b      	strh	r3, [r5, #18]
    5c08:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5c0a:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    5c0c:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5c12:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5c16:	70a3      	strb	r3, [r4, #2]
    5c18:	f004 fe12 	bl	a840 <FsCache::sync()>
    5c1c:	2800      	cmp	r0, #0
    5c1e:	d0c3      	beq.n	5ba8 <FatFile::sync() [clone .part.0]+0x1c>
    5c20:	f505 700e 	add.w	r0, r5, #568	; 0x238
    5c24:	f004 fe0c 	bl	a840 <FsCache::sync()>
    5c28:	2800      	cmp	r0, #0
    5c2a:	d0bd      	beq.n	5ba8 <FatFile::sync() [clone .part.0]+0x1c>
    5c2c:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    5c2e:	6803      	ldr	r3, [r0, #0]
    5c30:	6a1b      	ldr	r3, [r3, #32]
    5c32:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5c34:	2800      	cmp	r0, #0
    5c36:	d0b7      	beq.n	5ba8 <FatFile::sync() [clone .part.0]+0x1c>
    5c38:	e7bb      	b.n	5bb2 <FatFile::sync() [clone .part.0]+0x26>
    5c3a:	bf00      	nop
    5c3c:	20004744 	.word	0x20004744

00005c40 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    5c40:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    5c42:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    5c44:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    5c48:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5c4a:	6880      	ldr	r0, [r0, #8]
    5c4c:	4629      	mov	r1, r5
    5c4e:	f002 f921 	bl	7e94 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5c52:	b150      	cbz	r0, 5c6a <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    5c54:	b155      	cbz	r5, 5c6c <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    5c56:	6923      	ldr	r3, [r4, #16]
    5c58:	3501      	adds	r5, #1
    5c5a:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5c5c:	78a3      	ldrb	r3, [r4, #2]
    5c5e:	bf18      	it	ne
    5c60:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c68:	70a3      	strb	r3, [r4, #2]
}
    5c6a:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5c6c:	78a3      	ldrb	r3, [r4, #2]
    5c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5c72:	e7f7      	b.n	5c64 <FatFile::addCluster()+0x24>

00005c74 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    5c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    5c76:	7804      	ldrb	r4, [r0, #0]
    5c78:	f014 0420 	ands.w	r4, r4, #32
    5c7c:	d104      	bne.n	5c88 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    5c7e:	4b1a      	ldr	r3, [pc, #104]	; (5ce8 <FatFile::addDirCluster()+0x74>)
    5c80:	4605      	mov	r5, r0
    5c82:	6942      	ldr	r2, [r0, #20]
    5c84:	429a      	cmp	r2, r3
    5c86:	d302      	bcc.n	5c8e <FatFile::addDirCluster()+0x1a>
  return false;
    5c88:	2700      	movs	r7, #0
}
    5c8a:	4638      	mov	r0, r7
    5c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    5c8e:	f7ff ffd7 	bl	5c40 <FatFile::addCluster()>
    5c92:	4607      	mov	r7, r0
    5c94:	2800      	cmp	r0, #0
    5c96:	d0f7      	beq.n	5c88 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    5c98:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5c9a:	692e      	ldr	r6, [r5, #16]
    5c9c:	7982      	ldrb	r2, [r0, #6]
    5c9e:	3e02      	subs	r6, #2
    5ca0:	6941      	ldr	r1, [r0, #20]
    5ca2:	4096      	lsls	r6, r2
    5ca4:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5ca6:	7901      	ldrb	r1, [r0, #4]
    5ca8:	b1a9      	cbz	r1, 5cd6 <FatFile::addDirCluster()+0x62>
    5caa:	4621      	mov	r1, r4
    5cac:	e006      	b.n	5cbc <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    5cae:	f008 fc77 	bl	e5a0 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5cb2:	68a8      	ldr	r0, [r5, #8]
    5cb4:	b2e1      	uxtb	r1, r4
    5cb6:	7902      	ldrb	r2, [r0, #4]
    5cb8:	428a      	cmp	r2, r1
    5cba:	d90b      	bls.n	5cd4 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    5cbc:	4431      	add	r1, r6
    5cbe:	2205      	movs	r2, #5
    5cc0:	3028      	adds	r0, #40	; 0x28
    5cc2:	3401      	adds	r4, #1
    5cc4:	f004 fde8 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    5cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
    5ccc:	2100      	movs	r1, #0
    if (!pc) {
    5cce:	2800      	cmp	r0, #0
    5cd0:	d1ed      	bne.n	5cae <FatFile::addDirCluster()+0x3a>
    5cd2:	e7d9      	b.n	5c88 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5cd4:	7982      	ldrb	r2, [r0, #6]
    5cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    5cda:	6969      	ldr	r1, [r5, #20]
}
    5cdc:	4638      	mov	r0, r7
    5cde:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    5ce0:	fa11 f383 	uxtah	r3, r1, r3
    5ce4:	616b      	str	r3, [r5, #20]
}
    5ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ce8:	001ffe00 	.word	0x001ffe00

00005cec <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5cec:	b510      	push	{r4, lr}
    5cee:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    5cf0:	6880      	ldr	r0, [r0, #8]
    5cf2:	460a      	mov	r2, r1
    5cf4:	3028      	adds	r0, #40	; 0x28
    5cf6:	69a1      	ldr	r1, [r4, #24]
    5cf8:	f004 fdce 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5cfc:	b120      	cbz	r0, 5d08 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    5cfe:	88a3      	ldrh	r3, [r4, #4]
    5d00:	f003 030f 	and.w	r3, r3, #15
    5d04:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    5d08:	bd10      	pop	{r4, pc}
    5d0a:	bf00      	nop

00005d0c <FatFile::close()>:
bool FatFile::close() {
    5d0c:	b510      	push	{r4, lr}
  if (!isOpen()) {
    5d0e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    5d10:	4604      	mov	r4, r0
  if (!isOpen()) {
    5d12:	b12b      	cbz	r3, 5d20 <FatFile::close()+0x14>
    5d14:	f7ff ff3a 	bl	5b8c <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    5d18:	2300      	movs	r3, #0
    5d1a:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    5d1c:	70a3      	strb	r3, [r4, #2]
}
    5d1e:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    5d20:	2300      	movs	r3, #0
    return true;
    5d22:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    5d24:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    5d26:	70a3      	strb	r3, [r4, #2]
}
    5d28:	bd10      	pop	{r4, pc}
    5d2a:	bf00      	nop

00005d2c <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    5d2c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5d2e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    5d30:	4605      	mov	r5, r0
    5d32:	460c      	mov	r4, r1
  if (!isOpen()) {
    5d34:	b113      	cbz	r3, 5d3c <FatFile::dirEntry(DirFat_t*)+0x10>
    5d36:	f7ff ff29 	bl	5b8c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5d3a:	b1f0      	cbz	r0, 5d7a <FatFile::dirEntry(DirFat_t*)+0x4e>
    5d3c:	68a8      	ldr	r0, [r5, #8]
    5d3e:	2200      	movs	r2, #0
    5d40:	69a9      	ldr	r1, [r5, #24]
    5d42:	3028      	adds	r0, #40	; 0x28
    5d44:	f004 fda8 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5d48:	b1b8      	cbz	r0, 5d7a <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    5d4a:	88aa      	ldrh	r2, [r5, #4]
    5d4c:	f002 020f 	and.w	r2, r2, #15
    5d50:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    5d54:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    5d56:	685d      	ldr	r5, [r3, #4]
    5d58:	5880      	ldr	r0, [r0, r2]
    5d5a:	6899      	ldr	r1, [r3, #8]
    5d5c:	68da      	ldr	r2, [r3, #12]
    5d5e:	6020      	str	r0, [r4, #0]
    5d60:	6065      	str	r5, [r4, #4]
    5d62:	60a1      	str	r1, [r4, #8]
    5d64:	60e2      	str	r2, [r4, #12]
    5d66:	6918      	ldr	r0, [r3, #16]
    5d68:	695d      	ldr	r5, [r3, #20]
    5d6a:	6999      	ldr	r1, [r3, #24]
    5d6c:	69da      	ldr	r2, [r3, #28]
    5d6e:	6120      	str	r0, [r4, #16]
  return true;
    5d70:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    5d72:	6165      	str	r5, [r4, #20]
    5d74:	61a1      	str	r1, [r4, #24]
    5d76:	61e2      	str	r2, [r4, #28]
}
    5d78:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5d7a:	2000      	movs	r0, #0
}
    5d7c:	bd38      	pop	{r3, r4, r5, pc}
    5d7e:	bf00      	nop

00005d80 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5d80:	b530      	push	{r4, r5, lr}
    5d82:	b089      	sub	sp, #36	; 0x24
    5d84:	460d      	mov	r5, r1
    5d86:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    5d88:	4669      	mov	r1, sp
    5d8a:	f7ff ffcf 	bl	5d2c <FatFile::dirEntry(DirFat_t*)>
    5d8e:	b128      	cbz	r0, 5d9c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    5d90:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    5d94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    5d98:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5d9a:	8023      	strh	r3, [r4, #0]
}
    5d9c:	b009      	add	sp, #36	; 0x24
    5d9e:	bd30      	pop	{r4, r5, pc}

00005da0 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5da0:	b530      	push	{r4, r5, lr}
    5da2:	b089      	sub	sp, #36	; 0x24
    5da4:	460d      	mov	r5, r1
    5da6:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    5da8:	4669      	mov	r1, sp
    5daa:	f7ff ffbf 	bl	5d2c <FatFile::dirEntry(DirFat_t*)>
    5dae:	b128      	cbz	r0, 5dbc <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    5db0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    5db4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    5db8:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5dba:	8023      	strh	r3, [r4, #0]
}
    5dbc:	b009      	add	sp, #36	; 0x24
    5dbe:	bd30      	pop	{r4, r5, pc}

00005dc0 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    5dc0:	780b      	ldrb	r3, [r1, #0]
    5dc2:	f013 0f70 	tst.w	r3, #112	; 0x70
    5dc6:	d101      	bne.n	5dcc <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    5dc8:	2000      	movs	r0, #0
    5dca:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5dce:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5dd2:	b089      	sub	sp, #36	; 0x24
    5dd4:	460d      	mov	r5, r1
    5dd6:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5dd8:	f001 f8f0 	bl	6fbc <FatFile::open(FatFile*, FatLfn_t*, int)>
    5ddc:	b138      	cbz	r0, 5dee <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    5dde:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5de0:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    5de2:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    5de4:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5de6:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    5de8:	f7ff ff44 	bl	5c74 <FatFile::addDirCluster()>
    5dec:	b910      	cbnz	r0, 5df4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    5dee:	2000      	movs	r0, #0
    5df0:	b009      	add	sp, #36	; 0x24
    5df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    5df4:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    5df6:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    5df8:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    5dfa:	b16b      	cbz	r3, 5e18 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    5dfc:	6963      	ldr	r3, [r4, #20]
    5dfe:	b133      	cbz	r3, 5e0e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5e00:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    5e02:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5e04:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    5e08:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5e0c:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    5e0e:	4620      	mov	r0, r4
    5e10:	f7ff febc 	bl	5b8c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5e14:	2800      	cmp	r0, #0
    5e16:	d0ea      	beq.n	5dee <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5e18:	68a0      	ldr	r0, [r4, #8]
    5e1a:	2201      	movs	r2, #1
    5e1c:	69a1      	ldr	r1, [r4, #24]
    5e1e:	3028      	adds	r0, #40	; 0x28
    5e20:	f004 fd3a 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5e24:	2800      	cmp	r0, #0
    5e26:	d0e2      	beq.n	5dee <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    5e28:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5e2c:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    5e2e:	f00c 0c0f 	and.w	ip, ip, #15
    5e32:	ea4f 134c 	mov.w	r3, ip, lsl #5
    5e36:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5e3a:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    5e3e:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    5e40:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5e42:	6a23      	ldr	r3, [r4, #32]
    5e44:	f897 e006 	ldrb.w	lr, [r7, #6]
    5e48:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    5e4a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    5e4e:	f8dc 2008 	ldr.w	r2, [ip, #8]
    5e52:	f8dc 300c 	ldr.w	r3, [ip, #12]
    5e56:	fa06 f60e 	lsl.w	r6, r6, lr
    5e5a:	46ee      	mov	lr, sp
    5e5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5e60:	f8dc 0010 	ldr.w	r0, [ip, #16]
    5e64:	f8dc 1014 	ldr.w	r1, [ip, #20]
    5e68:	f8dc 2018 	ldr.w	r2, [ip, #24]
    5e6c:	f8dc 301c 	ldr.w	r3, [ip, #28]
    5e70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    5e74:	697b      	ldr	r3, [r7, #20]
    5e76:	f107 0028 	add.w	r0, r7, #40	; 0x28
    5e7a:	2201      	movs	r2, #1
    5e7c:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    5e7e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    5e82:	f8cd 3001 	str.w	r3, [sp, #1]
    5e86:	f8cd 3005 	str.w	r3, [sp, #5]
    5e8a:	f8ad 3009 	strh.w	r3, [sp, #9]
    5e8e:	f004 fd03 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5e92:	4684      	mov	ip, r0
    5e94:	2800      	cmp	r0, #0
    5e96:	d0aa      	beq.n	5dee <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    5e98:	272e      	movs	r7, #46	; 0x2e
    5e9a:	46ee      	mov	lr, sp
    5e9c:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    5ea0:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    5ea2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5ea6:	f8cc 0000 	str.w	r0, [ip]
    5eaa:	f8cc 1004 	str.w	r1, [ip, #4]
    5eae:	f8cc 2008 	str.w	r2, [ip, #8]
    5eb2:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5eb6:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    5eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5ebe:	f8cc 0010 	str.w	r0, [ip, #16]
    5ec2:	f8cc 1014 	str.w	r1, [ip, #20]
    5ec6:	f8cc 2018 	str.w	r2, [ip, #24]
    5eca:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5ece:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5ed0:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5ed2:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5ed6:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    5eda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5edc:	f8cc 0020 	str.w	r0, [ip, #32]
    5ee0:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    5ee4:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    5ee8:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    5eec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5eee:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    5ef2:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    5ef6:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    5efa:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    5efe:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5f00:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5f04:	f004 fc9c 	bl	a840 <FsCache::sync()>
    5f08:	2800      	cmp	r0, #0
    5f0a:	f43f af70 	beq.w	5dee <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5f0e:	f504 700e 	add.w	r0, r4, #568	; 0x238
    5f12:	f004 fc95 	bl	a840 <FsCache::sync()>
    5f16:	2800      	cmp	r0, #0
    5f18:	f43f af69 	beq.w	5dee <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5f1c:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    5f1e:	6803      	ldr	r3, [r0, #0]
    5f20:	6a1b      	ldr	r3, [r3, #32]
}
    5f22:	b009      	add	sp, #36	; 0x24
    5f24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5f28:	4718      	bx	r3
    5f2a:	bf00      	nop

00005f2c <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    5f30:	2600      	movs	r6, #0
    5f32:	b094      	sub	sp, #80	; 0x50
    5f34:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    5f36:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5f38:	9201      	str	r2, [sp, #4]
    5f3a:	f8ad 6014 	strh.w	r6, [sp, #20]
    5f3e:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5f40:	2b00      	cmp	r3, #0
    5f42:	d141      	bne.n	5fc8 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    5f44:	780b      	ldrb	r3, [r1, #0]
    5f46:	460d      	mov	r5, r1
    5f48:	f013 0f70 	tst.w	r3, #112	; 0x70
    5f4c:	d03c      	beq.n	5fc8 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    5f4e:	7813      	ldrb	r3, [r2, #0]
    5f50:	4604      	mov	r4, r0
    5f52:	4616      	mov	r6, r2
    5f54:	2b2f      	cmp	r3, #47	; 0x2f
    5f56:	d03b      	beq.n	5fd0 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    5f58:	2700      	movs	r7, #0
    5f5a:	e028      	b.n	5fae <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    5f5c:	9e01      	ldr	r6, [sp, #4]
    5f5e:	7836      	ldrb	r6, [r6, #0]
    5f60:	2e00      	cmp	r6, #0
    5f62:	d050      	beq.n	6006 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    5f64:	f001 f82a 	bl	6fbc <FatFile::open(FatFile*, FatLfn_t*, int)>
    5f68:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    5f6a:	aa02      	add	r2, sp, #8
    5f6c:	4629      	mov	r1, r5
    5f6e:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    5f70:	b92b      	cbnz	r3, 5f7e <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    5f72:	f1b8 0f00 	cmp.w	r8, #0
    5f76:	d027      	beq.n	5fc8 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    5f78:	f7ff ff22 	bl	5dc0 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5f7c:	b320      	cbz	r0, 5fc8 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    5f7e:	46a6      	mov	lr, r4
    5f80:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    5f84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5f88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5f8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5f90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5f94:	f8de 5000 	ldr.w	r5, [lr]
    5f98:	4620      	mov	r0, r4
  if (!isOpen()) {
    5f9a:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    5f9c:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    5fa0:	b10b      	cbz	r3, 5fa6 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    5fa2:	f7ff fdf3 	bl	5b8c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5fa6:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    5fa8:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    5faa:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    5fac:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5fae:	4631      	mov	r1, r6
    5fb0:	ab01      	add	r3, sp, #4
    5fb2:	aa02      	add	r2, sp, #8
    5fb4:	4620      	mov	r0, r4
    5fb6:	f001 f94d 	bl	7254 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5fba:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    5fbc:	aa02      	add	r2, sp, #8
    5fbe:	4629      	mov	r1, r5
    5fc0:	2300      	movs	r3, #0
    5fc2:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5fc4:	2e00      	cmp	r6, #0
    5fc6:	d1c9      	bne.n	5f5c <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    5fc8:	2000      	movs	r0, #0
}
    5fca:	b014      	add	sp, #80	; 0x50
    5fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5fd0:	3601      	adds	r6, #1
    5fd2:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    5fd4:	7833      	ldrb	r3, [r6, #0]
    5fd6:	2b2f      	cmp	r3, #47	; 0x2f
    5fd8:	d0fa      	beq.n	5fd0 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5fda:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    5fdc:	2224      	movs	r2, #36	; 0x24
    5fde:	2100      	movs	r1, #0
    5fe0:	a80b      	add	r0, sp, #44	; 0x2c
    5fe2:	f008 fadd 	bl	e5a0 <memset>
  m_vol = vol;
    5fe6:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    5fe8:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5fea:	2b10      	cmp	r3, #16
    5fec:	d003      	beq.n	5ff6 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    5fee:	2b20      	cmp	r3, #32
    5ff0:	d00f      	beq.n	6012 <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    5ff2:	2b0c      	cmp	r3, #12
    5ff4:	d1e8      	bne.n	5fc8 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    5ff6:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5ff8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5ffc:	2301      	movs	r3, #1
    parent = &tmpDir;
    5ffe:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    6000:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    6004:	e7a8      	b.n	5f58 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    6006:	aa02      	add	r2, sp, #8
    6008:	f7ff feda 	bl	5dc0 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    600c:	b014      	add	sp, #80	; 0x50
    600e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    6012:	2340      	movs	r3, #64	; 0x40
    6014:	e7f0      	b.n	5ff8 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    6016:	bf00      	nop

00006018 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    6018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    601c:	2500      	movs	r5, #0
    601e:	b094      	sub	sp, #80	; 0x50
    6020:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    6022:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    6024:	9201      	str	r2, [sp, #4]
    6026:	9502      	str	r5, [sp, #8]
    6028:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    602c:	2b00      	cmp	r3, #0
    602e:	d137      	bne.n	60a0 <FatFile::open(FatFile*, char const*, int)+0x88>
    6030:	780b      	ldrb	r3, [r1, #0]
    6032:	460e      	mov	r6, r1
    6034:	f013 0f70 	tst.w	r3, #112	; 0x70
    6038:	d032      	beq.n	60a0 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    603a:	7813      	ldrb	r3, [r2, #0]
    603c:	4604      	mov	r4, r0
    603e:	4615      	mov	r5, r2
    6040:	2b2f      	cmp	r3, #47	; 0x2f
    6042:	d031      	beq.n	60a8 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    6044:	2700      	movs	r7, #0
    6046:	e01e      	b.n	6086 <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    6048:	9d01      	ldr	r5, [sp, #4]
    604a:	782d      	ldrb	r5, [r5, #0]
    604c:	2d00      	cmp	r5, #0
    604e:	d040      	beq.n	60d2 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    6050:	f000 ffb4 	bl	6fbc <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    6054:	46a6      	mov	lr, r4
    6056:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    605a:	b308      	cbz	r0, 60a0 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    605c:	4666      	mov	r6, ip
  if (!isOpen()) {
    605e:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    6060:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    6064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6068:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    606c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6070:	f8de 3000 	ldr.w	r3, [lr]
    6074:	4620      	mov	r0, r4
    6076:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    607a:	b10d      	cbz	r5, 6080 <FatFile::open(FatFile*, char const*, int)+0x68>
    607c:	f7ff fd86 	bl	5b8c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    6080:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    6082:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    6084:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    6086:	4629      	mov	r1, r5
    6088:	ab01      	add	r3, sp, #4
    608a:	aa0b      	add	r2, sp, #44	; 0x2c
    608c:	4620      	mov	r0, r4
    608e:	f001 f8e1 	bl	7254 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    6092:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    6094:	aa0b      	add	r2, sp, #44	; 0x2c
    6096:	4631      	mov	r1, r6
    6098:	2300      	movs	r3, #0
    609a:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    609c:	2d00      	cmp	r5, #0
    609e:	d1d3      	bne.n	6048 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    60a0:	2000      	movs	r0, #0
}
    60a2:	b014      	add	sp, #80	; 0x50
    60a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    60a8:	3501      	adds	r5, #1
    60aa:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    60ac:	7829      	ldrb	r1, [r5, #0]
    60ae:	292f      	cmp	r1, #47	; 0x2f
    60b0:	d0fa      	beq.n	60a8 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    60b2:	b9a9      	cbnz	r1, 60e0 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    60b4:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    60b6:	2224      	movs	r2, #36	; 0x24
    60b8:	4620      	mov	r0, r4
    60ba:	f008 fa71 	bl	e5a0 <memset>
  m_vol = vol;
    60be:	60a5      	str	r5, [r4, #8]
    60c0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    60c2:	2b10      	cmp	r3, #16
    60c4:	d003      	beq.n	60ce <FatFile::open(FatFile*, char const*, int)+0xb6>
    60c6:	2b20      	cmp	r3, #32
    60c8:	d022      	beq.n	6110 <FatFile::open(FatFile*, char const*, int)+0xf8>
    60ca:	2b0c      	cmp	r3, #12
    60cc:	d1e8      	bne.n	60a0 <FatFile::open(FatFile*, char const*, int)+0x88>
    60ce:	2220      	movs	r2, #32
    60d0:	e01f      	b.n	6112 <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    60d2:	4643      	mov	r3, r8
    60d4:	aa0b      	add	r2, sp, #44	; 0x2c
    60d6:	f000 ff71 	bl	6fbc <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    60da:	b014      	add	sp, #80	; 0x50
    60dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    60e0:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    60e2:	2224      	movs	r2, #36	; 0x24
    60e4:	2100      	movs	r1, #0
    60e6:	a802      	add	r0, sp, #8
    60e8:	f008 fa5a 	bl	e5a0 <memset>
  m_vol = vol;
    60ec:	9604      	str	r6, [sp, #16]
    60ee:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    60f0:	2b10      	cmp	r3, #16
    60f2:	d003      	beq.n	60fc <FatFile::open(FatFile*, char const*, int)+0xe4>
    60f4:	2b20      	cmp	r3, #32
    60f6:	d003      	beq.n	6100 <FatFile::open(FatFile*, char const*, int)+0xe8>
    60f8:	2b0c      	cmp	r3, #12
    60fa:	d1d1      	bne.n	60a0 <FatFile::open(FatFile*, char const*, int)+0x88>
    60fc:	2320      	movs	r3, #32
    60fe:	e000      	b.n	6102 <FatFile::open(FatFile*, char const*, int)+0xea>
    6100:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6102:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    6106:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    6108:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    610a:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    610e:	e799      	b.n	6044 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    6110:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    6112:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6114:	7022      	strb	r2, [r4, #0]
  return true;
    6116:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6118:	70a3      	strb	r3, [r4, #2]
  return true;
    611a:	e7c2      	b.n	60a2 <FatFile::open(FatFile*, char const*, int)+0x8a>

0000611c <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    611c:	b119      	cbz	r1, 6126 <FatFile::open(FatVolume*, char const*, int)+0xa>
    611e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6122:	f7ff bf79 	b.w	6018 <FatFile::open(FatFile*, char const*, int)>
}
    6126:	4608      	mov	r0, r1
    6128:	4770      	bx	lr
    612a:	bf00      	nop

0000612c <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    612c:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    612e:	b570      	push	{r4, r5, r6, lr}
    6130:	460d      	mov	r5, r1
    6132:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    6134:	b993      	cbnz	r3, 615c <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    6136:	7806      	ldrb	r6, [r0, #0]
    6138:	b10e      	cbz	r6, 613e <FatFile::openCluster(FatFile*)+0x12>
  return false;
    613a:	4618      	mov	r0, r3
}
    613c:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    613e:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    6140:	2224      	movs	r2, #36	; 0x24
    6142:	4631      	mov	r1, r6
    6144:	f008 fa2c 	bl	e5a0 <memset>
  m_vol = vol;
    6148:	60a5      	str	r5, [r4, #8]
    614a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    614c:	2b10      	cmp	r3, #16
    614e:	d018      	beq.n	6182 <FatFile::openCluster(FatFile*)+0x56>
    6150:	2b20      	cmp	r3, #32
    6152:	d010      	beq.n	6176 <FatFile::openCluster(FatFile*)+0x4a>
    6154:	2b0c      	cmp	r3, #12
    6156:	d014      	beq.n	6182 <FatFile::openCluster(FatFile*)+0x56>
    6158:	4630      	mov	r0, r6
}
    615a:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    615c:	2224      	movs	r2, #36	; 0x24
    615e:	2100      	movs	r1, #0
    6160:	f008 fa1e 	bl	e5a0 <memset>
  m_flags = FILE_FLAG_READ;
    6164:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6166:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6168:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    616a:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    616c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    6170:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6172:	6223      	str	r3, [r4, #32]
}
    6174:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6176:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    6178:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    617a:	7022      	strb	r2, [r4, #0]
  return true;
    617c:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    617e:	70a3      	strb	r3, [r4, #2]
}
    6180:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6182:	2220      	movs	r2, #32
    6184:	e7f8      	b.n	6178 <FatFile::openCluster(FatFile*)+0x4c>
    6186:	bf00      	nop

00006188 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    6188:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    618a:	7805      	ldrb	r5, [r0, #0]
    618c:	b10d      	cbz	r5, 6192 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    618e:	2000      	movs	r0, #0
}
    6190:	bd70      	pop	{r4, r5, r6, pc}
    6192:	460e      	mov	r6, r1
    6194:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    6196:	2224      	movs	r2, #36	; 0x24
    6198:	4629      	mov	r1, r5
    619a:	f008 fa01 	bl	e5a0 <memset>
  m_vol = vol;
    619e:	60a6      	str	r6, [r4, #8]
    61a0:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    61a2:	2b10      	cmp	r3, #16
    61a4:	d00b      	beq.n	61be <FatFile::openRoot(FatVolume*)+0x36>
    61a6:	2b20      	cmp	r3, #32
    61a8:	d003      	beq.n	61b2 <FatFile::openRoot(FatVolume*)+0x2a>
    61aa:	2b0c      	cmp	r3, #12
    61ac:	d007      	beq.n	61be <FatFile::openRoot(FatVolume*)+0x36>
    61ae:	4628      	mov	r0, r5
}
    61b0:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    61b2:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    61b4:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    61b6:	7022      	strb	r2, [r4, #0]
  return true;
    61b8:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    61ba:	70a3      	strb	r3, [r4, #2]
}
    61bc:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    61be:	2220      	movs	r2, #32
    61c0:	e7f8      	b.n	61b4 <FatFile::openRoot(FatVolume*)+0x2c>
    61c2:	bf00      	nop

000061c4 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    61c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61c8:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    61cc:	7883      	ldrb	r3, [r0, #2]
    61ce:	b083      	sub	sp, #12
    61d0:	4605      	mov	r5, r0
  if (!isReadable()) {
    61d2:	07df      	lsls	r7, r3, #31
    61d4:	f140 808c 	bpl.w	62f0 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    61d8:	4688      	mov	r8, r1
    61da:	7801      	ldrb	r1, [r0, #0]
    61dc:	4692      	mov	sl, r2
  if (isFile()) {
    61de:	070e      	lsls	r6, r1, #28
    61e0:	f100 8091 	bmi.w	6306 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    61e4:	068c      	lsls	r4, r1, #26
    61e6:	d508      	bpl.n	61fa <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    61e8:	6883      	ldr	r3, [r0, #8]
    61ea:	895a      	ldrh	r2, [r3, #10]
    61ec:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    61ee:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    61f2:	b29b      	uxth	r3, r3
    61f4:	459a      	cmp	sl, r3
    61f6:	bf28      	it	cs
    61f8:	469a      	movcs	sl, r3
  while (toRead) {
    61fa:	f1ba 0f00 	cmp.w	sl, #0
    61fe:	f000 80af 	beq.w	6360 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6202:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6204:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    6208:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    620a:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    620c:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6210:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6214:	68af      	ldr	r7, [r5, #8]
    6216:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    621a:	d53d      	bpl.n	6298 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    621c:	6a39      	ldr	r1, [r7, #32]
    621e:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    6222:	f1bb 0f00 	cmp.w	fp, #0
    6226:	d151      	bne.n	62cc <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6228:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    622c:	d34e      	bcc.n	62cc <FatFile::read(void*, unsigned int)+0x108>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    622e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    6230:	4291      	cmp	r1, r2
    6232:	d04b      	beq.n	62cc <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6234:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    6238:	f0c0 8082 	bcc.w	6340 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    623c:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    623e:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6240:	0680      	lsls	r0, r0, #26
    6242:	d405      	bmi.n	6250 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6244:	7938      	ldrb	r0, [r7, #4]
    6246:	eba0 0009 	sub.w	r0, r0, r9
    624a:	4283      	cmp	r3, r0
    624c:	bf28      	it	cs
    624e:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6250:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6252:	ea4f 2443 	mov.w	r4, r3, lsl #9
    6256:	d80c      	bhi.n	6272 <FatFile::read(void*, unsigned int)+0xae>
    6258:	18c8      	adds	r0, r1, r3
    625a:	4282      	cmp	r2, r0
    625c:	d209      	bcs.n	6272 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    625e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    6262:	e9cd 1300 	strd	r1, r3, [sp]
    6266:	f004 faeb 	bl	a840 <FsCache::sync()>
    626a:	e9dd 1300 	ldrd	r1, r3, [sp]
    626e:	2800      	cmp	r0, #0
    6270:	d03e      	beq.n	62f0 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    6272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6274:	6802      	ldr	r2, [r0, #0]
    6276:	6957      	ldr	r7, [r2, #20]
    6278:	4642      	mov	r2, r8
    627a:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    627c:	2800      	cmp	r0, #0
    627e:	d037      	beq.n	62f0 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    6280:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    6282:	1b36      	subs	r6, r6, r4
    dst += n;
    6284:	44a0      	add	r8, r4
    m_curPosition += n;
    6286:	4422      	add	r2, r4
    6288:	616a      	str	r2, [r5, #20]
  while (toRead) {
    628a:	d069      	beq.n	6360 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    628c:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    628e:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    6292:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    6294:	0688      	lsls	r0, r1, #26
    6296:	d4c1      	bmi.n	621c <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    6298:	f897 9005 	ldrb.w	r9, [r7, #5]
    629c:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    62a0:	f1bb 0f00 	cmp.w	fp, #0
    62a4:	d136      	bne.n	6314 <FatFile::read(void*, unsigned int)+0x150>
    62a6:	f1b9 0f00 	cmp.w	r9, #0
    62aa:	d133      	bne.n	6314 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    62ac:	2a00      	cmp	r2, #0
    62ae:	d133      	bne.n	6318 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    62b0:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    62b2:	bf4c      	ite	mi
    62b4:	6a3a      	ldrmi	r2, [r7, #32]
    62b6:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    62b8:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    62ba:	3a02      	subs	r2, #2
    62bc:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    62be:	6979      	ldr	r1, [r7, #20]
    62c0:	4082      	lsls	r2, r0
    62c2:	4449      	add	r1, r9
    62c4:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    62c6:	f1bb 0f00 	cmp.w	fp, #0
    62ca:	d0ad      	beq.n	6228 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    62cc:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    62d0:	2200      	movs	r2, #0
    62d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
    62d6:	42b4      	cmp	r4, r6
    62d8:	bf28      	it	cs
    62da:	4634      	movcs	r4, r6
    62dc:	f004 fadc 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    62e0:	b130      	cbz	r0, 62f0 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    62e2:	eb00 010b 	add.w	r1, r0, fp
    62e6:	4622      	mov	r2, r4
    62e8:	4640      	mov	r0, r8
    62ea:	f005 fdd9 	bl	bea0 <memcpy>
    62ee:	e7c7      	b.n	6280 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    62f0:	786b      	ldrb	r3, [r5, #1]
  return -1;
    62f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    62f6:	f043 0302 	orr.w	r3, r3, #2
    62fa:	706b      	strb	r3, [r5, #1]
}
    62fc:	b003      	add	sp, #12
    62fe:	ecbd 8b02 	vpop	{d8}
    6302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6306:	69c3      	ldr	r3, [r0, #28]
    6308:	6942      	ldr	r2, [r0, #20]
    630a:	1a9b      	subs	r3, r3, r2
    630c:	459a      	cmp	sl, r3
    630e:	bf28      	it	cs
    6310:	469a      	movcs	sl, r3
    6312:	e772      	b.n	61fa <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    6314:	692a      	ldr	r2, [r5, #16]
    6316:	e7d0      	b.n	62ba <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    6318:	070b      	lsls	r3, r1, #28
    631a:	d505      	bpl.n	6328 <FatFile::read(void*, unsigned int)+0x164>
    631c:	78aa      	ldrb	r2, [r5, #2]
    631e:	0654      	lsls	r4, r2, #25
    6320:	d502      	bpl.n	6328 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    6322:	692a      	ldr	r2, [r5, #16]
    6324:	3201      	adds	r2, #1
    6326:	e7c7      	b.n	62b8 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6328:	ee18 2a10 	vmov	r2, s16
    632c:	4638      	mov	r0, r7
    632e:	6929      	ldr	r1, [r5, #16]
    6330:	f001 fdfe 	bl	7f30 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6334:	2800      	cmp	r0, #0
    6336:	dbdb      	blt.n	62f0 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    6338:	d00c      	beq.n	6354 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    633a:	68af      	ldr	r7, [r5, #8]
    633c:	692a      	ldr	r2, [r5, #16]
    633e:	e7bc      	b.n	62ba <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    6340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6342:	4642      	mov	r2, r8
    6344:	6803      	ldr	r3, [r0, #0]
    6346:	691b      	ldr	r3, [r3, #16]
    6348:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    634a:	2800      	cmp	r0, #0
    634c:	d0d0      	beq.n	62f0 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    634e:	f44f 7400 	mov.w	r4, #512	; 0x200
    6352:	e795      	b.n	6280 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    6354:	782b      	ldrb	r3, [r5, #0]
    6356:	f013 0f70 	tst.w	r3, #112	; 0x70
    635a:	d0c9      	beq.n	62f0 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    635c:	ebaa 0a06 	sub.w	sl, sl, r6
    6360:	4650      	mov	r0, sl
}
    6362:	b003      	add	sp, #12
    6364:	ecbd 8b02 	vpop	{d8}
    6368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000636c <FatFile::peek()>:
int FatFile::peek() {
    636c:	b570      	push	{r4, r5, r6, lr}
    636e:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    6370:	2201      	movs	r2, #1
    6372:	4604      	mov	r4, r0
    6374:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    6378:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    637c:	f7ff ff22 	bl	61c4 <FatFile::read(void*, unsigned int)>
    6380:	2801      	cmp	r0, #1
    6382:	bf0c      	ite	eq
    6384:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    6388:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = curCluster;
    638c:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    6390:	b002      	add	sp, #8
    6392:	bd70      	pop	{r4, r5, r6, pc}

00006394 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6394:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    6396:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    639a:	b530      	push	{r4, r5, lr}
    639c:	4604      	mov	r4, r0
    639e:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    63a0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    63a4:	d009      	beq.n	63ba <FatFile::readDirCache(bool)+0x26>
    63a6:	2901      	cmp	r1, #1
    63a8:	d107      	bne.n	63ba <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    63aa:	3320      	adds	r3, #32
    63ac:	6143      	str	r3, [r0, #20]
    return m_buffer;
    63ae:	68a0      	ldr	r0, [r4, #8]
    63b0:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    63b2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    63b6:	b003      	add	sp, #12
    63b8:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    63ba:	2201      	movs	r2, #1
    63bc:	f10d 0107 	add.w	r1, sp, #7
    63c0:	4620      	mov	r0, r4
    63c2:	f7ff feff 	bl	61c4 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    63c6:	b240      	sxtb	r0, r0
    63c8:	2801      	cmp	r0, #1
    63ca:	d103      	bne.n	63d4 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    63cc:	6963      	ldr	r3, [r4, #20]
    63ce:	331f      	adds	r3, #31
    63d0:	6163      	str	r3, [r4, #20]
    63d2:	e7ec      	b.n	63ae <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    63d4:	2000      	movs	r0, #0
    63d6:	e7ee      	b.n	63b6 <FatFile::readDirCache(bool)+0x22>

000063d8 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    63d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    63dc:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    63de:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    63e0:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    63e2:	f013 0f18 	tst.w	r3, #24
    63e6:	9608      	str	r6, [sp, #32]
    63e8:	9611      	str	r6, [sp, #68]	; 0x44
    63ea:	d006      	beq.n	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    63ec:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    63ee:	6883      	ldr	r3, [r0, #8]
    63f0:	688a      	ldr	r2, [r1, #8]
    63f2:	4604      	mov	r4, r0
    63f4:	460d      	mov	r5, r1
    63f6:	429a      	cmp	r2, r3
    63f8:	d003      	beq.n	6402 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    63fa:	2000      	movs	r0, #0
}
    63fc:	b01a      	add	sp, #104	; 0x68
    63fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6402:	f7ff fbc3 	bl	5b8c <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    6406:	46a6      	mov	lr, r4
    6408:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    640c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    6410:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6414:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    6418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    641c:	f8de 3000 	ldr.w	r3, [lr]
    6420:	4632      	mov	r2, r6
    6422:	69a1      	ldr	r1, [r4, #24]
    6424:	f8cc 3000 	str.w	r3, [ip]
    6428:	68a3      	ldr	r3, [r4, #8]
    642a:	f103 0028 	add.w	r0, r3, #40	; 0x28
    642e:	f004 fa33 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6432:	2800      	cmp	r0, #0
    6434:	d0e1      	beq.n	63fa <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    6436:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    6438:	46ec      	mov	ip, sp
  if (isFile()) {
    643a:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    643e:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    6442:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    6446:	0152      	lsls	r2, r2, #5
    6448:	f8de 1004 	ldr.w	r1, [lr, #4]
    644c:	5880      	ldr	r0, [r0, r2]
    644e:	f8de 300c 	ldr.w	r3, [lr, #12]
    6452:	f8de 2008 	ldr.w	r2, [lr, #8]
    6456:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    645a:	f8de 1014 	ldr.w	r1, [lr, #20]
    645e:	f8de 2018 	ldr.w	r2, [lr, #24]
    6462:	f8de 301c 	ldr.w	r3, [lr, #28]
    6466:	f8de 0010 	ldr.w	r0, [lr, #16]
    646a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    646e:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6472:	463a      	mov	r2, r7
    6474:	4629      	mov	r1, r5
  if (isFile()) {
    6476:	f040 809b 	bne.w	65b0 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    647a:	a808      	add	r0, sp, #32
    647c:	f7ff fd56 	bl	5f2c <FatFile::mkdir(FatFile*, char const*, bool)>
    6480:	2800      	cmp	r0, #0
    6482:	d0ba      	beq.n	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    6484:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    6486:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    648a:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    648c:	990e      	ldr	r1, [sp, #56]	; 0x38
    648e:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    6490:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    6492:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    6496:	68a0      	ldr	r0, [r4, #8]
    6498:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    649a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    649c:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    649e:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    64a0:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    64a2:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    64a6:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    64aa:	f004 f9f5 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    64ae:	2800      	cmp	r0, #0
    64b0:	d0a3      	beq.n	63fa <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    64b2:	88a3      	ldrh	r3, [r4, #4]
    64b4:	f003 030f 	and.w	r3, r3, #15
    64b8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    64bc:	f8dd 300d 	ldr.w	r3, [sp, #13]
    64c0:	f8c0 300d 	str.w	r3, [r0, #13]
    64c4:	f8dd 3011 	ldr.w	r3, [sp, #17]
    64c8:	f8c0 3011 	str.w	r3, [r0, #17]
    64cc:	f8dd 3015 	ldr.w	r3, [sp, #21]
    64d0:	f8c0 3015 	str.w	r3, [r0, #21]
    64d4:	f8dd 3019 	ldr.w	r3, [sp, #25]
    64d8:	f8c0 3019 	str.w	r3, [r0, #25]
    64dc:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    64e0:	f8a0 301d 	strh.w	r3, [r0, #29]
    64e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    64e8:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    64ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    64ee:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    64f0:	2e00      	cmp	r6, #0
    64f2:	d03b      	beq.n	656c <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    64f4:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64f6:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    64f8:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64fa:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    64fc:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64fe:	408b      	lsls	r3, r1
    6500:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    6504:	4419      	add	r1, r3
    6506:	f004 f9c7 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    650a:	4605      	mov	r5, r0
    650c:	2800      	cmp	r0, #0
    650e:	f43f af74 	beq.w	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    6512:	6a00      	ldr	r0, [r0, #32]
    6514:	466f      	mov	r7, sp
    6516:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6518:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    651a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    651c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    651e:	6b28      	ldr	r0, [r5, #48]	; 0x30
    6520:	6b69      	ldr	r1, [r5, #52]	; 0x34
    6522:	6baa      	ldr	r2, [r5, #56]	; 0x38
    6524:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    6526:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    6528:	4631      	mov	r1, r6
    652a:	68a0      	ldr	r0, [r4, #8]
    652c:	f001 fd22 	bl	7f74 <FatPartition::freeChain(unsigned long)>
    6530:	2800      	cmp	r0, #0
    6532:	f43f af62 	beq.w	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    6536:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6538:	6a23      	ldr	r3, [r4, #32]
    653a:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    653c:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    653e:	3b02      	subs	r3, #2
    6540:	f850 1c14 	ldr.w	r1, [r0, #-20]
    6544:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    6546:	2201      	movs	r2, #1
    6548:	4419      	add	r1, r3
    654a:	f004 f9a5 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    654e:	4606      	mov	r6, r0
    6550:	2800      	cmp	r0, #0
    6552:	f43f af52 	beq.w	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    6556:	466d      	mov	r5, sp
    6558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    655a:	6230      	str	r0, [r6, #32]
    655c:	6271      	str	r1, [r6, #36]	; 0x24
    655e:	62b2      	str	r2, [r6, #40]	; 0x28
    6560:	62f3      	str	r3, [r6, #44]	; 0x2c
    6562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6564:	6330      	str	r0, [r6, #48]	; 0x30
    6566:	6371      	str	r1, [r6, #52]	; 0x34
    6568:	63b2      	str	r2, [r6, #56]	; 0x38
    656a:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    656c:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    656e:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6570:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    6572:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    6574:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6576:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    657a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    657e:	f000 fed3 	bl	7328 <FatFile::remove()>
    6582:	2800      	cmp	r0, #0
    6584:	f43f af39 	beq.w	63fa <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    6588:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    658a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    658e:	f004 f957 	bl	a840 <FsCache::sync()>
    6592:	2800      	cmp	r0, #0
    6594:	f43f af31 	beq.w	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    6598:	f504 700e 	add.w	r0, r4, #568	; 0x238
    659c:	f004 f950 	bl	a840 <FsCache::sync()>
    65a0:	2800      	cmp	r0, #0
    65a2:	f43f af2a 	beq.w	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    65a6:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    65a8:	6803      	ldr	r3, [r0, #0]
    65aa:	6a1b      	ldr	r3, [r3, #32]
    65ac:	4798      	blx	r3
    65ae:	e725      	b.n	63fc <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    65b0:	f640 2301 	movw	r3, #2561	; 0xa01
    65b4:	4660      	mov	r0, ip
    65b6:	f7ff fd2f 	bl	6018 <FatFile::open(FatFile*, char const*, int)>
    65ba:	2800      	cmp	r0, #0
    65bc:	f47f af63 	bne.w	6486 <FatFile::rename(FatFile*, char const*)+0xae>
    65c0:	e71b      	b.n	63fa <FatFile::rename(FatFile*, char const*)+0x22>
    65c2:	bf00      	nop

000065c4 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    65c4:	7803      	ldrb	r3, [r0, #0]
    65c6:	06da      	lsls	r2, r3, #27
    65c8:	d401      	bmi.n	65ce <FatFile::rmdir()+0xa>
}
    65ca:	2000      	movs	r0, #0
    65cc:	4770      	bx	lr
  if (pos == m_curPosition) {
    65ce:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    65d0:	b530      	push	{r4, r5, lr}
    65d2:	4604      	mov	r4, r0
    65d4:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    65d6:	b133      	cbz	r3, 65e6 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65d8:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    65da:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65dc:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    65e0:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65e4:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    65e6:	2300      	movs	r3, #0
    65e8:	e00f      	b.n	660a <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    65ea:	6163      	str	r3, [r4, #20]
    65ec:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    65ee:	016a      	lsls	r2, r5, #5
    65f0:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    65f2:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    65f4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    65f8:	b1ea      	cbz	r2, 6636 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    65fa:	2ae5      	cmp	r2, #229	; 0xe5
    65fc:	d004      	beq.n	6608 <FatFile::rmdir()+0x44>
    65fe:	2a2e      	cmp	r2, #46	; 0x2e
    6600:	d002      	beq.n	6608 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    6602:	7adb      	ldrb	r3, [r3, #11]
    6604:	071b      	lsls	r3, r3, #28
    6606:	d522      	bpl.n	664e <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6608:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    660a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    660e:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    6612:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    6616:	d1e8      	bne.n	65ea <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    6618:	2201      	movs	r2, #1
    661a:	f10d 0107 	add.w	r1, sp, #7
    661e:	4620      	mov	r0, r4
    6620:	f7ff fdd0 	bl	61c4 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    6624:	b240      	sxtb	r0, r0
    6626:	2801      	cmp	r0, #1
    6628:	d103      	bne.n	6632 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    662a:	6963      	ldr	r3, [r4, #20]
    662c:	331f      	adds	r3, #31
    662e:	6163      	str	r3, [r4, #20]
    6630:	e7dc      	b.n	65ec <FatFile::rmdir()+0x28>
      if (!getError()) {
    6632:	7863      	ldrb	r3, [r4, #1]
    6634:	b95b      	cbnz	r3, 664e <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    6636:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    6638:	2208      	movs	r2, #8
  return remove();
    663a:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    663c:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    6640:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6642:	70a3      	strb	r3, [r4, #2]
}
    6644:	b003      	add	sp, #12
    6646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    664a:	f000 be6d 	b.w	7328 <FatFile::remove()>
}
    664e:	2000      	movs	r0, #0
    6650:	b003      	add	sp, #12
    6652:	bd30      	pop	{r4, r5, pc}

00006654 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    6654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    6658:	7803      	ldrb	r3, [r0, #0]
    665a:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    665c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    665e:	2b00      	cmp	r3, #0
    6660:	d039      	beq.n	66d6 <FatFile::seekSet(unsigned long)+0x82>
    6662:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    6664:	6941      	ldr	r1, [r0, #20]
    6666:	42a9      	cmp	r1, r5
    6668:	d042      	beq.n	66f0 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    666a:	2d00      	cmp	r5, #0
    666c:	d037      	beq.n	66de <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    666e:	0718      	lsls	r0, r3, #28
    6670:	d52a      	bpl.n	66c8 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    6672:	69e2      	ldr	r2, [r4, #28]
    6674:	42aa      	cmp	r2, r5
    6676:	d32e      	bcc.n	66d6 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6678:	f8d4 c008 	ldr.w	ip, [r4, #8]
    667c:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    667e:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6680:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    6684:	f012 0f40 	tst.w	r2, #64	; 0x40
    6688:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    668c:	b2c0      	uxtb	r0, r0
    668e:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    6692:	d130      	bne.n	66f6 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6694:	1e4a      	subs	r2, r1, #1
    6696:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    6698:	b109      	cbz	r1, 669e <FatFile::seekSet(unsigned long)+0x4a>
    669a:	4296      	cmp	r6, r2
    669c:	d22f      	bcs.n	66fe <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    669e:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    66a0:	bf4c      	ite	mi
    66a2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    66a6:	6a23      	ldrpl	r3, [r4, #32]
    66a8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    66aa:	f104 0810 	add.w	r8, r4, #16
    66ae:	e006      	b.n	66be <FatFile::seekSet(unsigned long)+0x6a>
    66b0:	6921      	ldr	r1, [r4, #16]
    66b2:	3e01      	subs	r6, #1
    66b4:	68a0      	ldr	r0, [r4, #8]
    66b6:	f001 fc3b 	bl	7f30 <FatPartition::fatGet(unsigned long, unsigned long*)>
    66ba:	2800      	cmp	r0, #0
    66bc:	dd0b      	ble.n	66d6 <FatFile::seekSet(unsigned long)+0x82>
    66be:	4642      	mov	r2, r8
  while (nNew--) {
    66c0:	2e00      	cmp	r6, #0
    66c2:	d1f5      	bne.n	66b0 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    66c4:	78a2      	ldrb	r2, [r4, #2]
    66c6:	e00c      	b.n	66e2 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    66c8:	069a      	lsls	r2, r3, #26
    66ca:	d5d5      	bpl.n	6678 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    66cc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    66ce:	895b      	ldrh	r3, [r3, #10]
    66d0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    66d4:	d9f6      	bls.n	66c4 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    66d6:	2000      	movs	r0, #0
  m_curCluster = tmp;
    66d8:	6127      	str	r7, [r4, #16]
}
    66da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66de:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    66e0:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    66e2:	f022 0220 	bic.w	r2, r2, #32
  return true;
    66e6:	2001      	movs	r0, #1
  m_curPosition = pos;
    66e8:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    66ea:	70a2      	strb	r2, [r4, #2]
}
    66ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    66f0:	2001      	movs	r0, #1
}
    66f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    66f6:	6a23      	ldr	r3, [r4, #32]
    66f8:	4433      	add	r3, r6
    66fa:	6123      	str	r3, [r4, #16]
    goto done;
    66fc:	e7f1      	b.n	66e2 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    66fe:	1ab6      	subs	r6, r6, r2
    6700:	e7d3      	b.n	66aa <FatFile::seekSet(unsigned long)+0x56>
    6702:	bf00      	nop

00006704 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    6704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6708:	460e      	mov	r6, r1
    670a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    670c:	2100      	movs	r1, #0
    670e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    6710:	4604      	mov	r4, r0
    6712:	4698      	mov	r8, r3
    6714:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    6718:	f007 ff42 	bl	e5a0 <memset>
  m_vol = dirFile->m_vol;
    671c:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    671e:	6a33      	ldr	r3, [r6, #32]
    6720:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    6724:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    6726:	f005 050f 	and.w	r5, r5, #15
    672a:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    672e:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6732:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    6734:	070b      	lsls	r3, r1, #28
    6736:	d411      	bmi.n	675c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    6738:	f001 0117 	and.w	r1, r1, #23
    673c:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    673e:	7ad3      	ldrb	r3, [r2, #11]
    6740:	f013 0f18 	tst.w	r3, #24
    6744:	d102      	bne.n	674c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    6746:	f041 0108 	orr.w	r1, r1, #8
    674a:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    674c:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    6750:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    6752:	2b01      	cmp	r3, #1
    6754:	d038      	beq.n	67c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    6756:	2b02      	cmp	r3, #2
    6758:	d006      	beq.n	6768 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    675a:	b1f3      	cbz	r3, 679a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    675c:	2300      	movs	r3, #0
  return false;
    675e:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    6760:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    6762:	70a3      	strb	r3, [r4, #2]
}
    6764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    6768:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    676a:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    676c:	06cd      	lsls	r5, r1, #27
    676e:	d4f5      	bmi.n	675c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    6770:	07ce      	lsls	r6, r1, #31
    6772:	d4f3      	bmi.n	675c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6774:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    6778:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    677c:	ea43 0301 	orr.w	r3, r3, r1
    6780:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    6782:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    6784:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    6786:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    6788:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    678a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    678e:	d012      	beq.n	67b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6790:	bb19      	cbnz	r1, 67da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6792:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6796:	70a3      	strb	r3, [r4, #2]
    6798:	e010      	b.n	67bc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    679a:	f418 6f80 	tst.w	r8, #1024	; 0x400
    679e:	d1dd      	bne.n	675c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    67a0:	f008 0308 	and.w	r3, r8, #8
    67a4:	f043 0301 	orr.w	r3, r3, #1
    67a8:	70a3      	strb	r3, [r4, #2]
    67aa:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    67ac:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    67ae:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    67b0:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    67b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    67b6:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    67b8:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    67ba:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    67bc:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    67c0:	d104      	bne.n	67cc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    67c2:	2001      	movs	r0, #1
}
    67c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    67c8:	2302      	movs	r3, #2
    67ca:	e7ce      	b.n	676a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    67cc:	69e1      	ldr	r1, [r4, #28]
    67ce:	4620      	mov	r0, r4
    67d0:	f7ff ff40 	bl	6654 <FatFile::seekSet(unsigned long)>
    67d4:	2800      	cmp	r0, #0
    67d6:	d1f4      	bne.n	67c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    67d8:	e7c0      	b.n	675c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    67da:	f001 fbcb 	bl	7f74 <FatPartition::freeChain(unsigned long)>
    67de:	2800      	cmp	r0, #0
    67e0:	d0bc      	beq.n	675c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    67e2:	78a3      	ldrb	r3, [r4, #2]
    67e4:	e7d5      	b.n	6792 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    67e6:	bf00      	nop

000067e8 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    67e8:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    67ea:	2b00      	cmp	r3, #0
    67ec:	d145      	bne.n	687a <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    67ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    67f2:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    67f4:	b084      	sub	sp, #16
    67f6:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    67f8:	f013 0f70 	tst.w	r3, #112	; 0x70
    67fc:	d030      	beq.n	6860 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    67fe:	694b      	ldr	r3, [r1, #20]
    6800:	f013 051f 	ands.w	r5, r3, #31
    6804:	d12c      	bne.n	6860 <FatFile::openNext(FatFile*, int)+0x78>
    6806:	4606      	mov	r6, r0
    6808:	4690      	mov	r8, r2
    680a:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    680c:	2201      	movs	r2, #1
    680e:	f10d 010f 	add.w	r1, sp, #15
    6812:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6814:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    6818:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    681a:	f7ff fcd3 	bl	61c4 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    681e:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6820:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    6824:	2801      	cmp	r0, #1
    6826:	d11b      	bne.n	6860 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    6828:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    682a:	68a1      	ldr	r1, [r4, #8]
    682c:	331f      	adds	r3, #31
    682e:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    6832:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    6834:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6838:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    683c:	b182      	cbz	r2, 6860 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    683e:	2a2e      	cmp	r2, #46	; 0x2e
    6840:	d012      	beq.n	6868 <FatFile::openNext(FatFile*, int)+0x80>
    6842:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    6846:	fab0 f080 	clz	r0, r0
    684a:	0940      	lsrs	r0, r0, #5
    684c:	b960      	cbnz	r0, 6868 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    684e:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    6852:	f011 0e08 	ands.w	lr, r1, #8
    6856:	d012      	beq.n	687e <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    6858:	290f      	cmp	r1, #15
    685a:	d007      	beq.n	686c <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    685c:	4605      	mov	r5, r0
    685e:	e7d5      	b.n	680c <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6860:	2000      	movs	r0, #0
}
    6862:	b004      	add	sp, #16
    6864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    6868:	2500      	movs	r5, #0
    686a:	e7cf      	b.n	680c <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    686c:	0651      	lsls	r1, r2, #25
    686e:	d5cd      	bpl.n	680c <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    6870:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    6874:	f89c 900d 	ldrb.w	r9, [ip, #13]
    6878:	e7c8      	b.n	680c <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    687a:	2000      	movs	r0, #0
}
    687c:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    687e:	b185      	cbz	r5, 68a2 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6880:	f10c 010a 	add.w	r1, ip, #10
    6884:	e001      	b.n	688a <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6886:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    688a:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    688e:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6890:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    6894:	fa52 f383 	uxtab	r3, r2, r3
    6898:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    689c:	d1f3      	bne.n	6886 <FatFile::openNext(FatFile*, int)+0x9e>
    689e:	45ce      	cmp	lr, r9
    68a0:	d1de      	bne.n	6860 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    68a2:	4643      	mov	r3, r8
    68a4:	b2ba      	uxth	r2, r7
    68a6:	4621      	mov	r1, r4
    68a8:	4630      	mov	r0, r6
    68aa:	9500      	str	r5, [sp, #0]
    68ac:	f7ff ff2a 	bl	6704 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    68b0:	e7d7      	b.n	6862 <FatFile::openNext(FatFile*, int)+0x7a>
    68b2:	bf00      	nop

000068b4 <FatFile::sync()>:
  if (!isOpen()) {
    68b4:	7803      	ldrb	r3, [r0, #0]
    68b6:	b10b      	cbz	r3, 68bc <FatFile::sync()+0x8>
    68b8:	f7ff b968 	b.w	5b8c <FatFile::sync() [clone .part.0]>
}
    68bc:	2001      	movs	r0, #1
    68be:	4770      	bx	lr

000068c0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    68c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68c4:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    68c6:	7801      	ldrb	r1, [r0, #0]
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    68c8:	b082      	sub	sp, #8
      || second > 59) {
    68ca:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    68cc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    68d0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    68d4:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
    68d8:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
      || second > 59) {
    68dc:	d518      	bpl.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || year > 2107
    68de:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    68e2:	b294      	uxth	r4, r2
    68e4:	2c7f      	cmp	r4, #127	; 0x7f
    68e6:	d813      	bhi.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || month > 12
    68e8:	1e5a      	subs	r2, r3, #1
    68ea:	9301      	str	r3, [sp, #4]
    68ec:	2a0b      	cmp	r2, #11
    68ee:	d80f      	bhi.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || day > 31
    68f0:	1e7a      	subs	r2, r7, #1
    68f2:	2a1e      	cmp	r2, #30
    68f4:	d80c      	bhi.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || second > 59) {
    68f6:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    68fa:	bf98      	it	ls
    68fc:	f1b9 0f17 	cmpls.w	r9, #23
    6900:	d806      	bhi.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6902:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    6906:	d803      	bhi.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    6908:	4605      	mov	r5, r0
  if (!isOpen()) {
    690a:	f7ff f93f 	bl	5b8c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    690e:	b918      	cbnz	r0, 6918 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
    6910:	2000      	movs	r0, #0
    6912:	b002      	add	sp, #8
    6914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    6918:	68a8      	ldr	r0, [r5, #8]
    691a:	2201      	movs	r2, #1
    691c:	69a9      	ldr	r1, [r5, #24]
    691e:	3028      	adds	r0, #40	; 0x28
    6920:	f003 ffba 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6924:	2800      	cmp	r0, #0
    6926:	d0f3      	beq.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    6928:	9b01      	ldr	r3, [sp, #4]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    692a:	ea4f 0258 	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    692e:	88a9      	ldrh	r1, [r5, #4]
         year << 9 | month << 5 | day;
    6930:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    6934:	07f7      	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    6936:	f001 010f 	and.w	r1, r1, #15
         hour << 11 | minute << 5 | second >> 1;
    693a:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
         year << 9 | month << 5 | day;
    693e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    6942:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    6946:	b29b      	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
    6948:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    694c:	bf48      	it	mi
    694e:	8243      	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    6950:	07b4      	lsls	r4, r6, #30
    6952:	b292      	uxth	r2, r2
    6954:	d508      	bpl.n	6968 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    6956:	f018 0801 	ands.w	r8, r8, #1
    695a:	8203      	strh	r3, [r0, #16]
    695c:	81c2      	strh	r2, [r0, #14]
    695e:	bf18      	it	ne
    6960:	f04f 0864 	movne.w	r8, #100	; 0x64
    6964:	f880 800d 	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    6968:	0771      	lsls	r1, r6, #29
    696a:	d501      	bpl.n	6970 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    696c:	8303      	strh	r3, [r0, #24]
    696e:	82c2      	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    6970:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6972:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6976:	f003 ff63 	bl	a840 <FsCache::sync()>
    697a:	2800      	cmp	r0, #0
    697c:	d0c8      	beq.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    697e:	f504 700e 	add.w	r0, r4, #568	; 0x238
    6982:	f003 ff5d 	bl	a840 <FsCache::sync()>
    6986:	2800      	cmp	r0, #0
    6988:	d0c2      	beq.n	6910 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    698a:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    698c:	6803      	ldr	r3, [r0, #0]
    698e:	6a1b      	ldr	r3, [r3, #32]
}
    6990:	b002      	add	sp, #8
    6992:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6996:	4718      	bx	r3

00006998 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6998:	7883      	ldrb	r3, [r0, #2]
    699a:	079b      	lsls	r3, r3, #30
    699c:	d527      	bpl.n	69ee <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    699e:	6a03      	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    69a0:	b510      	push	{r4, lr}
    69a2:	4604      	mov	r4, r0
    69a4:	b082      	sub	sp, #8
  if (m_firstCluster == 0) {
    69a6:	b1ab      	cbz	r3, 69d4 <FatFile::truncate()+0x3c>
      return true;
  }
  if (m_curCluster) {
    69a8:	6901      	ldr	r1, [r0, #16]
    69aa:	bb11      	cbnz	r1, 69f2 <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    69ac:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
    69ae:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    69b0:	4619      	mov	r1, r3
    69b2:	68a0      	ldr	r0, [r4, #8]
    69b4:	f001 fade 	bl	7f74 <FatPartition::freeChain(unsigned long)>
    69b8:	b1b0      	cbz	r0, 69e8 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    69ba:	78a3      	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    69bc:	6961      	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    69be:	f063 037f 	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    69c2:	7822      	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    69c4:	61e1      	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    69c6:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    69c8:	b122      	cbz	r2, 69d4 <FatFile::truncate()+0x3c>
    69ca:	4620      	mov	r0, r4
    69cc:	f7ff f8de 	bl	5b8c <FatFile::sync() [clone .part.0]>
  return sync();

 fail:
  return false;
}
    69d0:	b002      	add	sp, #8
    69d2:	bd10      	pop	{r4, pc}
      return true;
    69d4:	2001      	movs	r0, #1
}
    69d6:	b002      	add	sp, #8
    69d8:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    69da:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    69de:	6921      	ldr	r1, [r4, #16]
    69e0:	68a0      	ldr	r0, [r4, #8]
    69e2:	f001 fab7 	bl	7f54 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    69e6:	b968      	cbnz	r0, 6a04 <FatFile::truncate()+0x6c>
  return false;
    69e8:	2000      	movs	r0, #0
}
    69ea:	b002      	add	sp, #8
    69ec:	bd10      	pop	{r4, pc}
  return false;
    69ee:	2000      	movs	r0, #0
}
    69f0:	4770      	bx	lr
    toFree = 0;
    69f2:	2300      	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    69f4:	aa01      	add	r2, sp, #4
    69f6:	6880      	ldr	r0, [r0, #8]
    toFree = 0;
    69f8:	9301      	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    69fa:	f001 fa99 	bl	7f30 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    69fe:	2800      	cmp	r0, #0
    6a00:	dbf2      	blt.n	69e8 <FatFile::truncate()+0x50>
    if (fg) {
    6a02:	d1ea      	bne.n	69da <FatFile::truncate()+0x42>
  if (toFree) {
    6a04:	9b01      	ldr	r3, [sp, #4]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d0d7      	beq.n	69ba <FatFile::truncate()+0x22>
    6a0a:	e7d1      	b.n	69b0 <FatFile::truncate()+0x18>

00006a0c <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6a10:	7883      	ldrb	r3, [r0, #2]
    6a12:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6a14:	079c      	lsls	r4, r3, #30
    6a16:	d577      	bpl.n	6b08 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6a18:	4688      	mov	r8, r1
    6a1a:	0719      	lsls	r1, r3, #28
    6a1c:	4691      	mov	r9, r2
    6a1e:	f100 80b5 	bmi.w	6b8c <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6a22:	696b      	ldr	r3, [r5, #20]
    6a24:	eb13 0209 	adds.w	r2, r3, r9
    6a28:	d26e      	bcs.n	6b08 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6a2a:	f1b9 0f00 	cmp.w	r9, #0
    6a2e:	d040      	beq.n	6ab2 <FatFile::write(void const*, unsigned int)+0xa6>
    6a30:	464f      	mov	r7, r9
    m_status = 0;
    6a32:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6a36:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6a38:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6a3c:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    6a3e:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6a40:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    6a44:	d13f      	bne.n	6ac6 <FatFile::write(void const*, unsigned int)+0xba>
    6a46:	2e00      	cmp	r6, #0
    6a48:	d13d      	bne.n	6ac6 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    6a4a:	2900      	cmp	r1, #0
    6a4c:	d06e      	beq.n	6b2c <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6a4e:	78aa      	ldrb	r2, [r5, #2]
    6a50:	0652      	lsls	r2, r2, #25
    6a52:	d576      	bpl.n	6b42 <FatFile::write(void const*, unsigned int)+0x136>
    6a54:	69ea      	ldr	r2, [r5, #28]
    6a56:	429a      	cmp	r2, r3
    6a58:	d973      	bls.n	6b42 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    6a5a:	3101      	adds	r1, #1
    6a5c:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6a5e:	3902      	subs	r1, #2
    6a60:	7982      	ldrb	r2, [r0, #6]
    6a62:	6943      	ldr	r3, [r0, #20]
    6a64:	4091      	lsls	r1, r2
    6a66:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6a68:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    6a6c:	d353      	bcc.n	6b16 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6a6e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    6a72:	d370      	bcc.n	6b56 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a74:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6a76:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a78:	1b1b      	subs	r3, r3, r4
    6a7a:	4293      	cmp	r3, r2
    6a7c:	bf28      	it	cs
    6a7e:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6a80:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6a82:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6a84:	ea4f 2443 	mov.w	r4, r3, lsl #9
    6a88:	d307      	bcc.n	6a9a <FatFile::write(void const*, unsigned int)+0x8e>
    6a8a:	185e      	adds	r6, r3, r1
    6a8c:	42b2      	cmp	r2, r6
    6a8e:	d204      	bcs.n	6a9a <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    6a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
    6a94:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6a98:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    6a9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6a9c:	4642      	mov	r2, r8
    6a9e:	6806      	ldr	r6, [r0, #0]
    6aa0:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    6aa2:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    6aa4:	b380      	cbz	r0, 6b08 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6aa6:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    6aa8:	1b3f      	subs	r7, r7, r4
    src += n;
    6aaa:	44a0      	add	r8, r4
    m_curPosition += n;
    6aac:	4423      	add	r3, r4
    6aae:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    6ab0:	d1c1      	bne.n	6a36 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6ab2:	69ea      	ldr	r2, [r5, #28]
    6ab4:	429a      	cmp	r2, r3
    6ab6:	d276      	bcs.n	6ba6 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ab8:	78aa      	ldrb	r2, [r5, #2]
    6aba:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    6abc:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6abe:	f062 037f 	orn	r3, r2, #127	; 0x7f
    6ac2:	70ab      	strb	r3, [r5, #2]
    6ac4:	e025      	b.n	6b12 <FatFile::write(void const*, unsigned int)+0x106>
    6ac6:	7982      	ldrb	r2, [r0, #6]
    6ac8:	3902      	subs	r1, #2
    6aca:	6943      	ldr	r3, [r0, #20]
    6acc:	4091      	lsls	r1, r2
    6ace:	4419      	add	r1, r3
                      + sectorOfCluster;
    6ad0:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6ad2:	2e00      	cmp	r6, #0
    6ad4:	d0c8      	beq.n	6a68 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    6ad6:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6ada:	2201      	movs	r2, #1
    6adc:	42bc      	cmp	r4, r7
    6ade:	bf28      	it	cs
    6ae0:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    6ae2:	3028      	adds	r0, #40	; 0x28
    6ae4:	f003 fed8 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6ae8:	b170      	cbz	r0, 6b08 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    6aea:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6aec:	4426      	add	r6, r4
      memcpy(dst, src, n);
    6aee:	4622      	mov	r2, r4
    6af0:	4641      	mov	r1, r8
    6af2:	f005 f9d5 	bl	bea0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6af6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6afa:	68a8      	ldr	r0, [r5, #8]
    6afc:	d1d3      	bne.n	6aa6 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    6afe:	3028      	adds	r0, #40	; 0x28
    6b00:	f003 fe9e 	bl	a840 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    6b04:	2800      	cmp	r0, #0
    6b06:	d1ce      	bne.n	6aa6 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6b08:	786b      	ldrb	r3, [r5, #1]
  return 0;
    6b0a:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    6b0c:	f043 0301 	orr.w	r3, r3, #1
    6b10:	706b      	strb	r3, [r5, #1]
}
    6b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    6b16:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    6b1a:	696a      	ldr	r2, [r5, #20]
    6b1c:	69eb      	ldr	r3, [r5, #28]
    6b1e:	42bc      	cmp	r4, r7
    6b20:	bf28      	it	cs
    6b22:	463c      	movcs	r4, r7
    6b24:	429a      	cmp	r2, r3
    6b26:	d305      	bcc.n	6b34 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6b28:	2205      	movs	r2, #5
    6b2a:	e7da      	b.n	6ae2 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    6b2c:	6a29      	ldr	r1, [r5, #32]
    6b2e:	b321      	cbz	r1, 6b7a <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    6b30:	6129      	str	r1, [r5, #16]
    6b32:	e794      	b.n	6a5e <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6b34:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6b36:	f013 0f20 	tst.w	r3, #32
    6b3a:	bf14      	ite	ne
    6b3c:	2205      	movne	r2, #5
    6b3e:	2201      	moveq	r2, #1
    6b40:	e7cf      	b.n	6ae2 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6b42:	f105 0210 	add.w	r2, r5, #16
    6b46:	f001 f9f3 	bl	7f30 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6b4a:	2800      	cmp	r0, #0
    6b4c:	dbdc      	blt.n	6b08 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    6b4e:	d024      	beq.n	6b9a <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6b50:	68a8      	ldr	r0, [r5, #8]
    6b52:	6929      	ldr	r1, [r5, #16]
    6b54:	e783      	b.n	6a5e <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    6b56:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6b58:	428b      	cmp	r3, r1
    6b5a:	d104      	bne.n	6b66 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    6b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
    6b60:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6b64:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    6b66:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6b68:	4642      	mov	r2, r8
    6b6a:	6803      	ldr	r3, [r0, #0]
    6b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b6e:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6b70:	2800      	cmp	r0, #0
    6b72:	d0c9      	beq.n	6b08 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    6b74:	f44f 7400 	mov.w	r4, #512	; 0x200
    6b78:	e795      	b.n	6aa6 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    6b7a:	4628      	mov	r0, r5
    6b7c:	f7ff f860 	bl	5c40 <FatFile::addCluster()>
    6b80:	2800      	cmp	r0, #0
    6b82:	d0c1      	beq.n	6b08 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    6b84:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6b86:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    6b88:	6229      	str	r1, [r5, #32]
    6b8a:	e768      	b.n	6a5e <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    6b8c:	69c1      	ldr	r1, [r0, #28]
    6b8e:	f7ff fd61 	bl	6654 <FatFile::seekSet(unsigned long)>
    6b92:	2800      	cmp	r0, #0
    6b94:	f47f af45 	bne.w	6a22 <FatFile::write(void const*, unsigned int)+0x16>
    6b98:	e7b6      	b.n	6b08 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    6b9a:	4628      	mov	r0, r5
    6b9c:	f7ff f850 	bl	5c40 <FatFile::addCluster()>
    6ba0:	2800      	cmp	r0, #0
    6ba2:	d1d5      	bne.n	6b50 <FatFile::write(void const*, unsigned int)+0x144>
    6ba4:	e7b0      	b.n	6b08 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    6ba6:	4b05      	ldr	r3, [pc, #20]	; (6bbc <FatFile::write(void const*, unsigned int)+0x1b0>)
    6ba8:	681b      	ldr	r3, [r3, #0]
    6baa:	b12b      	cbz	r3, 6bb8 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6bac:	78ab      	ldrb	r3, [r5, #2]
    6bae:	4648      	mov	r0, r9
    6bb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6bb4:	70ab      	strb	r3, [r5, #2]
    6bb6:	e7ac      	b.n	6b12 <FatFile::write(void const*, unsigned int)+0x106>
    6bb8:	4648      	mov	r0, r9
    6bba:	e7aa      	b.n	6b12 <FatFile::write(void const*, unsigned int)+0x106>
    6bbc:	20004744 	.word	0x20004744

00006bc0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    6bc4:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6bc6:	b08d      	sub	sp, #52	; 0x34
    6bc8:	4614      	mov	r4, r2
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    6bca:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6bcc:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6bce:	4606      	mov	r6, r0
    6bd0:	4689      	mov	r9, r1
  FatFile dir = *this;
    6bd2:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6bd4:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    6bd6:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    6bda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6bde:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    6be0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6be4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    6be6:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    6bea:	6065      	str	r5, [r4, #4]
    6bec:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6bee:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    6bf0:	f8a4 e00c 	strh.w	lr, [r4, #12]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d03f      	beq.n	6c78 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    6bf8:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6bfc:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6c00:	a803      	add	r0, sp, #12
    6c02:	b289      	uxth	r1, r1
    6c04:	0149      	lsls	r1, r1, #5
    6c06:	f7ff fd25 	bl	6654 <FatFile::seekSet(unsigned long)>
    6c0a:	b350      	cbz	r0, 6c62 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    6c0c:	2100      	movs	r1, #0
    6c0e:	a803      	add	r0, sp, #12
    6c10:	f7ff fbc0 	bl	6394 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6c14:	4607      	mov	r7, r0
    6c16:	b320      	cbz	r0, 6c62 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    6c18:	2500      	movs	r5, #0
    6c1a:	e00d      	b.n	6c38 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    6c1c:	f003 fe64 	bl	a8e8 <FsName::get16()>
    6c20:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    6c22:	4658      	mov	r0, fp
    6c24:	f003 ff74 	bl	ab10 <toUpcase(unsigned short)>
    6c28:	4683      	mov	fp, r0
    6c2a:	4640      	mov	r0, r8
    6c2c:	f003 ff70 	bl	ab10 <toUpcase(unsigned short)>
    6c30:	4583      	cmp	fp, r0
    6c32:	d116      	bne.n	6c62 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    6c34:	2d0d      	cmp	r5, #13
    6c36:	d018      	beq.n	6c6a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    6c38:	b2ea      	uxtb	r2, r5
    6c3a:	4639      	mov	r1, r7
    6c3c:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    6c3e:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    6c40:	f000 fee4 	bl	7a0c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    6c44:	89a3      	ldrh	r3, [r4, #12]
    6c46:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    6c48:	4620      	mov	r0, r4
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d1e6      	bne.n	6c1c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    6c4e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6c52:	4293      	cmp	r3, r2
    6c54:	d1e2      	bne.n	6c1c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    6c56:	fabb f08b 	clz	r0, fp
    6c5a:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    6c5c:	b00d      	add	sp, #52	; 0x34
    6c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    6c62:	2000      	movs	r0, #0
}
    6c64:	b00d      	add	sp, #52	; 0x34
    6c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6c6a:	f10a 0a01 	add.w	sl, sl, #1
    6c6e:	9b01      	ldr	r3, [sp, #4]
    6c70:	fa5f fa8a 	uxtb.w	sl, sl
    6c74:	4553      	cmp	r3, sl
    6c76:	d2c1      	bcs.n	6bfc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    6c78:	2001      	movs	r0, #1
    6c7a:	e7ef      	b.n	6c5c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00006c7c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    6c80:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6c82:	b08d      	sub	sp, #52	; 0x34
    6c84:	4616      	mov	r6, r2
    6c86:	469a      	mov	sl, r3
  FatFile dir = *this;
    6c88:	f10d 0c0c 	add.w	ip, sp, #12
    6c8c:	f102 0415 	add.w	r4, r2, #21
    6c90:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6c94:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    6c96:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    6c9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    6c9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6ca0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    6ca2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6ca6:	683b      	ldr	r3, [r7, #0]
    6ca8:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6cac:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    6cb0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    6cb4:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    6cb8:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6cba:	fa52 f383 	uxtab	r3, r2, r3
    6cbe:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    6cc2:	d1f3      	bne.n	6cac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    6cc4:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    6cc6:	f04f 0800 	mov.w	r8, #0
    next = begin;
    6cca:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    6ccc:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6cd0:	f1ba 0f00 	cmp.w	sl, #0
    6cd4:	d04e      	beq.n	6d74 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    6cd6:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6cd8:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6cda:	a803      	add	r0, sp, #12
    6cdc:	1bd9      	subs	r1, r3, r7
    6cde:	b289      	uxth	r1, r1
    6ce0:	0149      	lsls	r1, r1, #5
    6ce2:	f7ff fcb7 	bl	6654 <FatFile::seekSet(unsigned long)>
    6ce6:	2800      	cmp	r0, #0
    6ce8:	d055      	beq.n	6d96 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    6cea:	2100      	movs	r1, #0
    6cec:	a803      	add	r0, sp, #12
    6cee:	f7ff fb51 	bl	6394 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6cf2:	2800      	cmp	r0, #0
    6cf4:	d04f      	beq.n	6d96 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    6cf6:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6cf8:	4557      	cmp	r7, sl
    6cfa:	f100 0b01 	add.w	fp, r0, #1
    6cfe:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    6d02:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    6d06:	f04f 0500 	mov.w	r5, #0
    6d0a:	f043 0301 	orr.w	r3, r3, #1
    6d0e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6d12:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6d16:	bf0c      	ite	eq
    6d18:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    6d1c:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6d1e:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    6d20:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6d24:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    6d26:	7303      	strb	r3, [r0, #12]
    6d28:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    6d2c:	f880 900d 	strb.w	r9, [r0, #13]
    6d30:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    6d32:	e006      	b.n	6d42 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    6d34:	f8ab 0000 	strh.w	r0, [fp]
    6d38:	3401      	adds	r4, #1
    6d3a:	3501      	adds	r5, #1
    6d3c:	f10b 0b02 	add.w	fp, fp, #2
    6d40:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    6d42:	89b0      	ldrh	r0, [r6, #12]
    6d44:	b918      	cbnz	r0, 6d4e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    6d46:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    6d4a:	429a      	cmp	r2, r3
    6d4c:	d016      	beq.n	6d7c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    6d4e:	4630      	mov	r0, r6
    6d50:	f003 fdca 	bl	a8e8 <FsName::get16()>
  if (i < 5) {
    6d54:	2d04      	cmp	r5, #4
    6d56:	b2eb      	uxtb	r3, r5
    6d58:	d9ec      	bls.n	6d34 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    6d5a:	2b0a      	cmp	r3, #10
    6d5c:	d802      	bhi.n	6d64 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    6d5e:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    6d62:	e7e9      	b.n	6d38 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    6d64:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    6d66:	f8ab 0005 	strh.w	r0, [fp, #5]
    6d6a:	d1e5      	bne.n	6d38 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6d6c:	3701      	adds	r7, #1
    6d6e:	b2ff      	uxtb	r7, r7
    6d70:	45ba      	cmp	sl, r7
    6d72:	d2b1      	bcs.n	6cd8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    6d74:	2001      	movs	r0, #1

 fail:
  return false;
}
    6d76:	b00d      	add	sp, #52	; 0x34
    6d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    6d7c:	f1b8 0f00 	cmp.w	r8, #0
    6d80:	d006      	beq.n	6d90 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    6d82:	f108 0801 	add.w	r8, r8, #1
    6d86:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6d8a:	fa5f f888 	uxtb.w	r8, r8
    6d8e:	e7e1      	b.n	6d54 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    6d90:	f04f 0801 	mov.w	r8, #1
    6d94:	e7de      	b.n	6d54 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    6d96:	2000      	movs	r0, #0
}
    6d98:	b00d      	add	sp, #52	; 0x34
    6d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d9e:	bf00      	nop

00006da0 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    6da0:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6da2:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    6da6:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    6daa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    6dae:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    6db2:	4686      	mov	lr, r0
  const char* end = fname->end;
    6db4:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    6db6:	6051      	str	r1, [r2, #4]
    6db8:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    6dbc:	781a      	ldrb	r2, [r3, #0]
    6dbe:	2a2e      	cmp	r2, #46	; 0x2e
    6dc0:	bf14      	ite	ne
    6dc2:	2001      	movne	r0, #1
    6dc4:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    6dc6:	d103      	bne.n	6dd0 <FatFile::makeSFN(FatLfn_t*)+0x30>
    6dc8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6dcc:	2a2e      	cmp	r2, #46	; 0x2e
    6dce:	d0fb      	beq.n	6dc8 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    6dd0:	1e61      	subs	r1, r4, #1
    6dd2:	4299      	cmp	r1, r3
    6dd4:	d90b      	bls.n	6dee <FatFile::makeSFN(FatLfn_t*)+0x4e>
    6dd6:	460a      	mov	r2, r1
    6dd8:	e002      	b.n	6de0 <FatFile::makeSFN(FatLfn_t*)+0x40>
    6dda:	4293      	cmp	r3, r2
    6ddc:	4611      	mov	r1, r2
    6dde:	d006      	beq.n	6dee <FatFile::makeSFN(FatLfn_t*)+0x4e>
    6de0:	4611      	mov	r1, r2
    6de2:	3a01      	subs	r2, #1
    6de4:	f891 c000 	ldrb.w	ip, [r1]
    6de8:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    6dec:	d1f5      	bne.n	6dda <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    6dee:	429c      	cmp	r4, r3
    6df0:	f04f 0500 	mov.w	r5, #0
    6df4:	f240 8086 	bls.w	6f04 <FatFile::makeSFN(FatLfn_t*)+0x164>
    6df8:	2607      	movs	r6, #7
    6dfa:	2708      	movs	r7, #8
    6dfc:	46a9      	mov	r9, r5
    6dfe:	46a8      	mov	r8, r5
    6e00:	e006      	b.n	6e10 <FatFile::makeSFN(FatLfn_t*)+0x70>
    6e02:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    6e04:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    6e06:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6e0a:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    6e0c:	429c      	cmp	r4, r3
    6e0e:	d95b      	bls.n	6ec8 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    6e10:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    6e12:	2a2e      	cmp	r2, #46	; 0x2e
    6e14:	bf08      	it	eq
    6e16:	4299      	cmpeq	r1, r3
    6e18:	d0f3      	beq.n	6e02 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    6e1a:	2a22      	cmp	r2, #34	; 0x22
    6e1c:	d00d      	beq.n	6e3a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    6e1e:	2a7c      	cmp	r2, #124	; 0x7c
    6e20:	d00b      	beq.n	6e3a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    6e22:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    6e26:	f1bc 0f02 	cmp.w	ip, #2
    6e2a:	d906      	bls.n	6e3a <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    6e2c:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    6e30:	f1bc 0f05 	cmp.w	ip, #5
    6e34:	d821      	bhi.n	6e7a <FatFile::makeSFN(FatLfn_t*)+0xda>
    6e36:	2a2d      	cmp	r2, #45	; 0x2d
    6e38:	d01f      	beq.n	6e7a <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    6e3a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    6e3e:	2a80      	cmp	r2, #128	; 0x80
    6e40:	d05d      	beq.n	6efe <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    6e42:	454e      	cmp	r6, r9
    6e44:	d22f      	bcs.n	6ea6 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    6e46:	4299      	cmp	r1, r3
    6e48:	bf2c      	ite	cs
    6e4a:	2000      	movcs	r0, #0
    6e4c:	2001      	movcc	r0, #1
    6e4e:	2e0a      	cmp	r6, #10
    6e50:	bf08      	it	eq
    6e52:	f040 0001 	orreq.w	r0, r0, #1
    6e56:	2800      	cmp	r0, #0
    6e58:	d047      	beq.n	6eea <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6e5a:	f89e 3016 	ldrb.w	r3, [lr, #22]
    6e5e:	2b20      	cmp	r3, #32
    6e60:	d040      	beq.n	6ee4 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6e62:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6e66:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6e68:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    6e6a:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    6e6c:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6e6e:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    6e72:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    6e74:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    6e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6e7a:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    6e7e:	f1bc 0f05 	cmp.w	ip, #5
    6e82:	d9da      	bls.n	6e3a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    6e84:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    6e88:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    6e8c:	d8d5      	bhi.n	6e3a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    6e8e:	454e      	cmp	r6, r9
    6e90:	d3d9      	bcc.n	6e46 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    6e92:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    6e96:	f1bc 0f19 	cmp.w	ip, #25
    6e9a:	d828      	bhi.n	6eee <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    6e9c:	3a20      	subs	r2, #32
        lc |= bit;
    6e9e:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    6ea0:	b2d2      	uxtb	r2, r2
        lc |= bit;
    6ea2:	b2ed      	uxtb	r5, r5
    6ea4:	e001      	b.n	6eaa <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    6ea6:	2000      	movs	r0, #0
        c = '_';
    6ea8:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    6eaa:	f109 0c01 	add.w	ip, r9, #1
    6eae:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    6eb0:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    6eb2:	f889 2016 	strb.w	r2, [r9, #22]
    6eb6:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    6eba:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    6ebc:	4691      	mov	r9, r2
    6ebe:	bf98      	it	ls
    6ec0:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    6ec4:	429c      	cmp	r4, r3
    6ec6:	d8a3      	bhi.n	6e10 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    6ec8:	f89e 3016 	ldrb.w	r3, [lr, #22]
    6ecc:	2b20      	cmp	r3, #32
    6ece:	d009      	beq.n	6ee4 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    6ed0:	2800      	cmp	r0, #0
    6ed2:	d0c6      	beq.n	6e62 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6ed4:	ea18 0f05 	tst.w	r8, r5
    6ed8:	bf18      	it	ne
    6eda:	2502      	movne	r5, #2
    6edc:	f88e 5015 	strb.w	r5, [lr, #21]
}
    6ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    6ee4:	2000      	movs	r0, #0
}
    6ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6eea:	460b      	mov	r3, r1
    6eec:	e78e      	b.n	6e0c <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    6eee:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    6ef2:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    6ef6:	bf98      	it	ls
    6ef8:	ea47 0808 	orrls.w	r8, r7, r8
    6efc:	e7d5      	b.n	6eaa <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    6efe:	3301      	adds	r3, #1
        is83 = false;
    6f00:	2000      	movs	r0, #0
    6f02:	e783      	b.n	6e0c <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    6f04:	46a8      	mov	r8, r5
    6f06:	e7df      	b.n	6ec8 <FatFile::makeSFN(FatLfn_t*)+0x128>

00006f08 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    6f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    6f0c:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    6f10:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    6f12:	460f      	mov	r7, r1
    6f14:	4604      	mov	r4, r0
    6f16:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 6fb8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    6f1a:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    6f1e:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6f22:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
    6f26:	f1b8 0f03 	cmp.w	r8, #3
    6f2a:	f8db 3000 	ldr.w	r3, [fp]
    6f2e:	bf28      	it	cs
    6f30:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    6f34:	442b      	add	r3, r5
    6f36:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6f38:	f108 0304 	add.w	r3, r8, #4
    6f3c:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    6f3e:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6f42:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    6f44:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6f46:	2a09      	cmp	r2, #9
    6f48:	f102 0137 	add.w	r1, r2, #55	; 0x37
    6f4c:	bf98      	it	ls
    6f4e:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    6f52:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6f54:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6f56:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6f58:	4598      	cmp	r8, r3
    6f5a:	d1f0      	bne.n	6f3e <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    6f5c:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    6f60:	2100      	movs	r1, #0
    6f62:	4620      	mov	r0, r4
    6f64:	f883 a016 	strb.w	sl, [r3, #22]
    6f68:	f7ff fb74 	bl	6654 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    6f6c:	2101      	movs	r1, #1
    6f6e:	4620      	mov	r0, r4
    6f70:	f7ff fa10 	bl	6394 <FatFile::readDirCache(bool)>
    6f74:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6f76:	220b      	movs	r2, #11
    6f78:	4630      	mov	r0, r6
      if (!dir) {
    6f7a:	b19b      	cbz	r3, 6fa4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    6f7c:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6f80:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    6f82:	f1bc 0f00 	cmp.w	ip, #0
    6f86:	d013      	beq.n	6fb0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6f88:	7adb      	ldrb	r3, [r3, #11]
    6f8a:	071b      	lsls	r3, r3, #28
    6f8c:	d4ee      	bmi.n	6f6c <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    6f8e:	f007 fa5b 	bl	e448 <memcmp>
    6f92:	2800      	cmp	r0, #0
    6f94:	d1ea      	bne.n	6f6c <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    6f96:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    6f9a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    6f9e:	d1c2      	bne.n	6f26 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    6fa0:	4648      	mov	r0, r9
 fail:
    6fa2:	e003      	b.n	6fac <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    6fa4:	7860      	ldrb	r0, [r4, #1]
    6fa6:	fab0 f080 	clz	r0, r0
    6faa:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    6fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    6fb0:	2001      	movs	r0, #1
}
    6fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fb6:	bf00      	nop
    6fb8:	200086a8 	.word	0x200086a8

00006fbc <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    6fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fc0:	ed2d 8b02 	vpush	{d8}
    6fc4:	b08b      	sub	sp, #44	; 0x2c
    6fc6:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    6fca:	688b      	ldr	r3, [r1, #8]
    6fcc:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    6fce:	780b      	ldrb	r3, [r1, #0]
    6fd0:	f013 0f70 	tst.w	r3, #112	; 0x70
    6fd4:	d053      	beq.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    6fd6:	9b02      	ldr	r3, [sp, #8]
    6fd8:	781b      	ldrb	r3, [r3, #0]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d14f      	bne.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    6fde:	6913      	ldr	r3, [r2, #16]
    6fe0:	4690      	mov	r8, r2
    6fe2:	4a9a      	ldr	r2, [pc, #616]	; (724c <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    6fe4:	460e      	mov	r6, r1
    6fe6:	330c      	adds	r3, #12
    6fe8:	fba2 2303 	umull	r2, r3, r2, r3
    6fec:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6ff0:	f898 3015 	ldrb.w	r3, [r8, #21]
    6ff4:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    6ff6:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6ff8:	f000 80a7 	beq.w	714a <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    6ffc:	1c57      	adds	r7, r2, #1
    6ffe:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    7000:	2300      	movs	r3, #0
    seekSet(0);
    7002:	4630      	mov	r0, r6
    7004:	4619      	mov	r1, r3
    7006:	461c      	mov	r4, r3
    7008:	9306      	str	r3, [sp, #24]
    700a:	f7ff fb23 	bl	6654 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    700e:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    7012:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    7014:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    7016:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7018:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    701c:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    701e:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    7020:	2100      	movs	r1, #0
    7022:	4630      	mov	r0, r6
    7024:	f7ff f9b6 	bl	6394 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7028:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    702c:	4603      	mov	r3, r0
    702e:	b320      	cbz	r0, 707a <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    7030:	7802      	ldrb	r2, [r0, #0]
    7032:	2ae5      	cmp	r2, #229	; 0xe5
    7034:	d029      	beq.n	708a <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    7036:	b342      	cbz	r2, 708a <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    7038:	42bc      	cmp	r4, r7
    703a:	bf38      	it	cc
    703c:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    703e:	2a2e      	cmp	r2, #46	; 0x2e
    7040:	d02b      	beq.n	709a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    7042:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    7046:	f1bc 0f0f 	cmp.w	ip, #15
    704a:	d054      	beq.n	70f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    704c:	f01c 0c08 	ands.w	ip, ip, #8
    7050:	d123      	bne.n	709a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    7052:	f1b9 0f00 	cmp.w	r9, #0
    7056:	f040 80d5 	bne.w	7204 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    705a:	220b      	movs	r2, #11
    705c:	ee18 1a10 	vmov	r1, s16
    7060:	f007 f9f2 	bl	e448 <memcmp>
    7064:	2800      	cmp	r0, #0
    7066:	d1da      	bne.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    7068:	f898 3015 	ldrb.w	r3, [r8, #21]
    706c:	f013 0301 	ands.w	r3, r3, #1
    7070:	f000 80e4 	beq.w	723c <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    7074:	2301      	movs	r3, #1
    7076:	9305      	str	r3, [sp, #20]
    7078:	e7d1      	b.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    707a:	7873      	ldrb	r3, [r6, #1]
    707c:	b183      	cbz	r3, 70a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    707e:	2000      	movs	r0, #0
}
    7080:	b00b      	add	sp, #44	; 0x2c
    7082:	ecbd 8b02 	vpop	{d8}
    7086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    708a:	2c00      	cmp	r4, #0
    708c:	bf08      	it	eq
    708e:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    7090:	42bc      	cmp	r4, r7
    7092:	d201      	bcs.n	7098 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    7094:	3401      	adds	r4, #1
    7096:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    7098:	b112      	cbz	r2, 70a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    709a:	f04f 0900 	mov.w	r9, #0
    709e:	e7be      	b.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    70a0:	9b03      	ldr	r3, [sp, #12]
    70a2:	059a      	lsls	r2, r3, #22
    70a4:	d5eb      	bpl.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    70a6:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    70aa:	3b01      	subs	r3, #1
    70ac:	2b01      	cmp	r3, #1
    70ae:	d8e6      	bhi.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    70b0:	2c00      	cmp	r4, #0
    70b2:	bf08      	it	eq
    70b4:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    70b6:	42bc      	cmp	r4, r7
    70b8:	d303      	bcc.n	70c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    70ba:	e048      	b.n	714e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    70bc:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    70be:	42a7      	cmp	r7, r4
    70c0:	d045      	beq.n	714e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    70c2:	2100      	movs	r1, #0
    70c4:	4630      	mov	r0, r6
    70c6:	f7ff f965 	bl	6394 <FatFile::readDirCache(bool)>
    freeFound++;
    70ca:	1c63      	adds	r3, r4, #1
    if (!dir) {
    70cc:	2800      	cmp	r0, #0
    70ce:	d1f5      	bne.n	70bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    70d0:	7873      	ldrb	r3, [r6, #1]
    70d2:	2b00      	cmp	r3, #0
    70d4:	d1d3      	bne.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    70d6:	42a7      	cmp	r7, r4
    70d8:	d939      	bls.n	714e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    70da:	9d07      	ldr	r5, [sp, #28]
    70dc:	e005      	b.n	70ea <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    70de:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    70e0:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    70e4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    70e6:	42a7      	cmp	r7, r4
    70e8:	d931      	bls.n	714e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    70ea:	4630      	mov	r0, r6
    70ec:	f7fe fdc2 	bl	5c74 <FatFile::addDirCluster()>
    70f0:	2800      	cmp	r0, #0
    70f2:	d1f4      	bne.n	70de <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    70f4:	e7c3      	b.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    70f6:	f1b9 0f00 	cmp.w	r9, #0
    70fa:	d119      	bne.n	7130 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    70fc:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    7100:	9904      	ldr	r1, [sp, #16]
    7102:	4559      	cmp	r1, fp
    7104:	d18b      	bne.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    7106:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    710a:	d088      	beq.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    710c:	7b43      	ldrb	r3, [r0, #13]
    710e:	4689      	mov	r9, r1
    7110:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    7112:	f1bb 0f01 	cmp.w	fp, #1
    7116:	d182      	bne.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    7118:	1c69      	adds	r1, r5, #1
    711a:	464b      	mov	r3, r9
    711c:	4642      	mov	r2, r8
    711e:	4630      	mov	r0, r6
    7120:	b289      	uxth	r1, r1
    7122:	f7ff fd4d 	bl	6bc0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    7126:	2800      	cmp	r0, #0
    7128:	bf08      	it	eq
    712a:	f04f 0900 	moveq.w	r9, #0
    712e:	e776      	b.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7130:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    7134:	fa5f fb8b 	uxtb.w	fp, fp
    7138:	455a      	cmp	r2, fp
    713a:	d1ae      	bne.n	709a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    713c:	7b43      	ldrb	r3, [r0, #13]
    713e:	9a06      	ldr	r2, [sp, #24]
    7140:	4293      	cmp	r3, r2
    7142:	d0e6      	beq.n	7112 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    7144:	f04f 0900 	mov.w	r9, #0
    7148:	e769      	b.n	701e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    714a:	2701      	movs	r7, #1
    714c:	e758      	b.n	7000 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    714e:	9b05      	ldr	r3, [sp, #20]
    7150:	b12b      	cbz	r3, 715e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    7152:	4641      	mov	r1, r8
    7154:	4630      	mov	r0, r6
    7156:	f7ff fed7 	bl	6f08 <FatFile::makeUniqueSfn(FatLfn_t*)>
    715a:	2800      	cmp	r0, #0
    715c:	d08f      	beq.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    715e:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7160:	4642      	mov	r2, r8
    7162:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    7164:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    7166:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    716a:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    716c:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    716e:	4629      	mov	r1, r5
    7170:	f7ff fd84 	bl	6c7c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7174:	2800      	cmp	r0, #0
    7176:	d082      	beq.n	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7178:	0169      	lsls	r1, r5, #5
    717a:	4630      	mov	r0, r6
    717c:	f7ff fa6a 	bl	6654 <FatFile::seekSet(unsigned long)>
    7180:	2800      	cmp	r0, #0
    7182:	f43f af7c 	beq.w	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    7186:	2100      	movs	r1, #0
    7188:	4630      	mov	r0, r6
    718a:	f7ff f903 	bl	6394 <FatFile::readDirCache(bool)>
  if (!dir) {
    718e:	4604      	mov	r4, r0
    7190:	2800      	cmp	r0, #0
    7192:	f43f af74 	beq.w	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    7196:	2220      	movs	r2, #32
    7198:	2100      	movs	r1, #0
    719a:	f007 fa01 	bl	e5a0 <memset>
  memcpy(dir->name, fname->sfn, 11);
    719e:	f8d8 2016 	ldr.w	r2, [r8, #22]
    71a2:	f8d8 301a 	ldr.w	r3, [r8, #26]
    71a6:	6022      	str	r2, [r4, #0]
    71a8:	6063      	str	r3, [r4, #4]
    71aa:	f898 3020 	ldrb.w	r3, [r8, #32]
    71ae:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    71b2:	72a3      	strb	r3, [r4, #10]
    71b4:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    71b6:	f898 3015 	ldrb.w	r3, [r8, #21]
    71ba:	f003 0318 	and.w	r3, r3, #24
    71be:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    71c0:	4b23      	ldr	r3, [pc, #140]	; (7250 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    71c2:	681b      	ldr	r3, [r3, #0]
    71c4:	2b00      	cmp	r3, #0
    71c6:	d03b      	beq.n	7240 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    71c8:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    71cc:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    71d0:	a809      	add	r0, sp, #36	; 0x24
    71d2:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    71d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71d8:	8223      	strh	r3, [r4, #16]
    71da:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    71de:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    71e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    71e4:	7363      	strb	r3, [r4, #13]
    71e6:	9a07      	ldr	r2, [sp, #28]
    71e8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    71ec:	f043 0301 	orr.w	r3, r3, #1
    71f0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    71f4:	9b03      	ldr	r3, [sp, #12]
    71f6:	462a      	mov	r2, r5
    71f8:	4631      	mov	r1, r6
    71fa:	9802      	ldr	r0, [sp, #8]
    71fc:	9700      	str	r7, [sp, #0]
    71fe:	f7ff fa81 	bl	6704 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7202:	e73d      	b.n	7080 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7204:	f1bb 0f01 	cmp.w	fp, #1
    7208:	f47f af39 	bne.w	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    720c:	300a      	adds	r0, #10
    720e:	e001      	b.n	7214 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7210:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7214:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    7218:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    721a:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    721e:	fa52 f281 	uxtab	r2, r2, r1
    7222:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7226:	d1f3      	bne.n	7210 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    7228:	9b06      	ldr	r3, [sp, #24]
    722a:	4563      	cmp	r3, ip
    722c:	f47f af27 	bne.w	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    7230:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    7232:	9b03      	ldr	r3, [sp, #12]
    7234:	0519      	lsls	r1, r3, #20
    7236:	f53f af22 	bmi.w	707e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    723a:	e7db      	b.n	71f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    723c:	461f      	mov	r7, r3
    723e:	e7f8      	b.n	7232 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    7240:	f645 0321 	movw	r3, #22561	; 0x5821
    7244:	8223      	strh	r3, [r4, #16]
    7246:	8323      	strh	r3, [r4, #24]
    7248:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    724a:	e7cc      	b.n	71e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    724c:	4ec4ec4f 	.word	0x4ec4ec4f
    7250:	20004744 	.word	0x20004744

00007254 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    7254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7258:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    725a:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    725c:	b082      	sub	sp, #8
    725e:	460c      	mov	r4, r1
  while (*path == ' ') {
    7260:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    7262:	4615      	mov	r5, r2
  while (*path == ' ') {
    7264:	d103      	bne.n	726e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    7266:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    726a:	2b20      	cmp	r3, #32
    726c:	d0fb      	beq.n	7266 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    726e:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    7270:	7823      	ldrb	r3, [r4, #0]
    7272:	b363      	cbz	r3, 72ce <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    7274:	2b2f      	cmp	r3, #47	; 0x2f
    7276:	d02a      	beq.n	72ce <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    7278:	f04f 0800 	mov.w	r8, #0
    727c:	4e29      	ldr	r6, [pc, #164]	; (7324 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    727e:	1d21      	adds	r1, r4, #4
    7280:	4620      	mov	r0, r4
    7282:	aa01      	add	r2, sp, #4
    7284:	f003 fbf8 	bl	aa78 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    7288:	4604      	mov	r4, r0
    728a:	b170      	cbz	r0, 72aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    728c:	9b01      	ldr	r3, [sp, #4]
    728e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7292:	d240      	bcs.n	7316 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    7294:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    7296:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    729a:	d831      	bhi.n	7300 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    729c:	2b3c      	cmp	r3, #60	; 0x3c
    729e:	b2d9      	uxtb	r1, r3
    72a0:	d829      	bhi.n	72f6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    72a2:	2921      	cmp	r1, #33	; 0x21
    72a4:	d805      	bhi.n	72b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    72a6:	291f      	cmp	r1, #31
    72a8:	d809      	bhi.n	72be <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    72aa:	2000      	movs	r0, #0
    72ac:	b002      	add	sp, #8
    72ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72b2:	3922      	subs	r1, #34	; 0x22
    72b4:	b2c9      	uxtb	r1, r1
    72b6:	fa26 f101 	lsr.w	r1, r6, r1
    72ba:	07ca      	lsls	r2, r1, #31
    72bc:	d4f5      	bmi.n	72aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    72be:	2b2e      	cmp	r3, #46	; 0x2e
    72c0:	d001      	beq.n	72c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    72c2:	2b20      	cmp	r3, #32
    72c4:	d11c      	bne.n	7300 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    72c6:	7823      	ldrb	r3, [r4, #0]
    72c8:	b10b      	cbz	r3, 72ce <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    72ca:	2b2f      	cmp	r3, #47	; 0x2f
    72cc:	d1d7      	bne.n	727e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    72ce:	692b      	ldr	r3, [r5, #16]
    72d0:	3b01      	subs	r3, #1
    72d2:	2bfe      	cmp	r3, #254	; 0xfe
    72d4:	d8e9      	bhi.n	72aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    72d6:	7823      	ldrb	r3, [r4, #0]
    72d8:	2b20      	cmp	r3, #32
    72da:	d103      	bne.n	72e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    72dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    72e0:	2b20      	cmp	r3, #32
    72e2:	d0fb      	beq.n	72dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    72e4:	2b2f      	cmp	r3, #47	; 0x2f
    72e6:	d0f9      	beq.n	72dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    72e8:	4628      	mov	r0, r5
  *ptr = path;
    72ea:	603c      	str	r4, [r7, #0]
}
    72ec:	b002      	add	sp, #8
    72ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    72f2:	f7ff bd55 	b.w	6da0 <FatFile::makeSFN(FatLfn_t*)>
    72f6:	295c      	cmp	r1, #92	; 0x5c
    72f8:	d0d7      	beq.n	72aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    72fa:	d905      	bls.n	7308 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    72fc:	297c      	cmp	r1, #124	; 0x7c
    72fe:	d0d4      	beq.n	72aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    7300:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    7304:	60ac      	str	r4, [r5, #8]
    7306:	e7de      	b.n	72c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    7308:	393e      	subs	r1, #62	; 0x3e
    730a:	2901      	cmp	r1, #1
    730c:	d8f8      	bhi.n	7300 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    730e:	2000      	movs	r0, #0
    7310:	b002      	add	sp, #8
    7312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    7316:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    731a:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    731c:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    7320:	e7d1      	b.n	72c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    7322:	bf00      	nop
    7324:	05002101 	.word	0x05002101

00007328 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7328:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    732a:	2300      	movs	r3, #0
    732c:	b08b      	sub	sp, #44	; 0x2c
    732e:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7330:	7883      	ldrb	r3, [r0, #2]
    7332:	079a      	lsls	r2, r3, #30
    7334:	d524      	bpl.n	7380 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7336:	6a01      	ldr	r1, [r0, #32]
    7338:	4605      	mov	r5, r0
    733a:	b119      	cbz	r1, 7344 <FatFile::remove()+0x1c>
    733c:	6880      	ldr	r0, [r0, #8]
    733e:	f000 fe19 	bl	7f74 <FatPartition::freeChain(unsigned long)>
    7342:	b1e8      	cbz	r0, 7380 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7344:	2101      	movs	r1, #1
    7346:	4628      	mov	r0, r5
    7348:	f7fe fcd0 	bl	5cec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    734c:	b1c0      	cbz	r0, 7380 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    734e:	1e42      	subs	r2, r0, #1
    7350:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    7354:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7356:	01e3      	lsls	r3, r4, #7
    7358:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    735c:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    7360:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7362:	fa51 f383 	uxtab	r3, r1, r3
    7366:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    7368:	d1f5      	bne.n	7356 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    736a:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    736c:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    736e:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    7370:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    7372:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7374:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    7378:	70ab      	strb	r3, [r5, #2]
    737a:	f003 fa61 	bl	a840 <FsCache::sync()>
    737e:	b910      	cbnz	r0, 7386 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    7380:	2000      	movs	r0, #0
}
    7382:	b00b      	add	sp, #44	; 0x2c
    7384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7386:	f507 700e 	add.w	r0, r7, #568	; 0x238
    738a:	f003 fa59 	bl	a840 <FsCache::sync()>
    738e:	2800      	cmp	r0, #0
    7390:	d0f6      	beq.n	7380 <FatFile::remove()+0x58>
    7392:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    7394:	6803      	ldr	r3, [r0, #0]
    7396:	6a1b      	ldr	r3, [r3, #32]
    7398:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    739a:	2800      	cmp	r0, #0
    739c:	d0f0      	beq.n	7380 <FatFile::remove()+0x58>
  if (!isLFN()) {
    739e:	78eb      	ldrb	r3, [r5, #3]
    73a0:	2b00      	cmp	r3, #0
    73a2:	d0ee      	beq.n	7382 <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    73a4:	4629      	mov	r1, r5
    73a6:	a801      	add	r0, sp, #4
    73a8:	f7fe fec0 	bl	612c <FatFile::openCluster(FatFile*)>
    73ac:	2800      	cmp	r0, #0
    73ae:	d0e7      	beq.n	7380 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    73b0:	78eb      	ldrb	r3, [r5, #3]
    73b2:	2b00      	cmp	r3, #0
    73b4:	d0e4      	beq.n	7380 <FatFile::remove()+0x58>
    73b6:	2701      	movs	r7, #1
    73b8:	e021      	b.n	73fe <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    73ba:	a801      	add	r0, sp, #4
    73bc:	f7fe ffea 	bl	6394 <FatFile::readDirCache(bool)>
    73c0:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    73c2:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    73c4:	2800      	cmp	r0, #0
    73c6:	d0db      	beq.n	7380 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    73c8:	7ac2      	ldrb	r2, [r0, #11]
    73ca:	2a0f      	cmp	r2, #15
    73cc:	d1d8      	bne.n	7380 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    73ce:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    73d0:	fa5f fc83 	uxtb.w	ip, r3
    73d4:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    73d6:	f002 031f 	and.w	r3, r2, #31
    73da:	428b      	cmp	r3, r1
    73dc:	d1d0      	bne.n	7380 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    73de:	7b43      	ldrb	r3, [r0, #13]
    73e0:	42a3      	cmp	r3, r4
    73e2:	d1cd      	bne.n	7380 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    73e4:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    73e6:	68a9      	ldr	r1, [r5, #8]
    73e8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    73ec:	f043 0301 	orr.w	r3, r3, #1
    73f0:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    73f4:	0653      	lsls	r3, r2, #25
    73f6:	d40d      	bmi.n	7414 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    73f8:	78eb      	ldrb	r3, [r5, #3]
    73fa:	4563      	cmp	r3, ip
    73fc:	d3c0      	bcc.n	7380 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    73fe:	88a9      	ldrh	r1, [r5, #4]
    7400:	a801      	add	r0, sp, #4
    7402:	1bc9      	subs	r1, r1, r7
    7404:	b289      	uxth	r1, r1
    7406:	0149      	lsls	r1, r1, #5
    7408:	f7ff f924 	bl	6654 <FatFile::seekSet(unsigned long)>
    740c:	2100      	movs	r1, #0
    740e:	2800      	cmp	r0, #0
    7410:	d1d3      	bne.n	73ba <FatFile::remove()+0x92>
    7412:	e7b5      	b.n	7380 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    7414:	68ac      	ldr	r4, [r5, #8]
    7416:	f104 0028 	add.w	r0, r4, #40	; 0x28
    741a:	f003 fa11 	bl	a840 <FsCache::sync()>
    741e:	2800      	cmp	r0, #0
    7420:	d0ae      	beq.n	7380 <FatFile::remove()+0x58>
    7422:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7426:	f003 fa0b 	bl	a840 <FsCache::sync()>
    742a:	2800      	cmp	r0, #0
    742c:	d0a8      	beq.n	7380 <FatFile::remove()+0x58>
    742e:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7430:	6803      	ldr	r3, [r0, #0]
    7432:	6a1b      	ldr	r3, [r3, #32]
    7434:	4798      	blx	r3
    7436:	e7a4      	b.n	7382 <FatFile::remove()+0x5a>

00007438 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    7438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    743c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    7440:	b1a2      	cbz	r2, 746c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    7442:	4605      	mov	r5, r0
    7444:	460c      	mov	r4, r1
    7446:	4698      	mov	r8, r3
    7448:	1857      	adds	r7, r2, r1
    744a:	e001      	b.n	7450 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    744c:	42bc      	cmp	r4, r7
    744e:	d00d      	beq.n	746c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    7450:	682b      	ldr	r3, [r5, #0]
    7452:	4620      	mov	r0, r4
    7454:	4649      	mov	r1, r9
    7456:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    7458:	47c0      	blx	r8
    745a:	4621      	mov	r1, r4
    745c:	4602      	mov	r2, r0
    745e:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    7460:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    7462:	47b0      	blx	r6
    7464:	2800      	cmp	r0, #0
    7466:	d1f1      	bne.n	744c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    7468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    746c:	2001      	movs	r0, #1
  }
    746e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7472:	bf00      	nop

00007474 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    7474:	6848      	ldr	r0, [r1, #4]
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    7476:	b510      	push	{r4, lr}
    7478:	460c      	mov	r4, r1
  if (state->pr && ++state->count >= state->dotcount) {
    747a:	b130      	cbz	r0, 748a <initFatDirCallback(unsigned long, void*)+0x16>
    747c:	890b      	ldrh	r3, [r1, #8]
    747e:	894a      	ldrh	r2, [r1, #10]
    7480:	3301      	adds	r3, #1
    7482:	b29b      	uxth	r3, r3
    7484:	429a      	cmp	r2, r3
    7486:	810b      	strh	r3, [r1, #8]
    7488:	d901      	bls.n	748e <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    748a:	6820      	ldr	r0, [r4, #0]
    748c:	bd10      	pop	{r4, pc}
    748e:	6803      	ldr	r3, [r0, #0]
    7490:	2201      	movs	r2, #1
    7492:	4903      	ldr	r1, [pc, #12]	; (74a0 <initFatDirCallback(unsigned long, void*)+0x2c>)
    7494:	685b      	ldr	r3, [r3, #4]
    7496:	4798      	blx	r3
    state->count = 0;
    7498:	2300      	movs	r3, #0
}
    749a:	6820      	ldr	r0, [r4, #0]
    state->count = 0;
    749c:	8123      	strh	r3, [r4, #8]
}
    749e:	bd10      	pop	{r4, pc}
    74a0:	200006fc 	.word	0x200006fc

000074a4 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    74a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74a8:	4605      	mov	r5, r0
    74aa:	b087      	sub	sp, #28
    74ac:	4688      	mov	r8, r1
    74ae:	4692      	mov	sl, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    74b0:	2100      	movs	r1, #0
    74b2:	f44f 7200 	mov.w	r2, #512	; 0x200
    74b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
    74b8:	f007 f872 	bl	e5a0 <memset>
  writeMsg("Writing FAT ");
    74bc:	6a28      	ldr	r0, [r5, #32]
    74be:	b128      	cbz	r0, 74cc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x28>
    74c0:	6803      	ldr	r3, [r0, #0]
    74c2:	220c      	movs	r2, #12
    74c4:	493a      	ldr	r1, [pc, #232]	; (75b0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x10c>)
    74c6:	685b      	ldr	r3, [r3, #4]
    74c8:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    74ca:	6a28      	ldr	r0, [r5, #32]
  state.buffer = m_secBuf;
    74cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  state.count = 0;
    74ce:	f04f 0900 	mov.w	r9, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    74d2:	69ee      	ldr	r6, [r5, #28]
    74d4:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
    74d8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 75bc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x118>
    74dc:	68e9      	ldr	r1, [r5, #12]
  state.count = 0;
    74de:	f8ad 9014 	strh.w	r9, [sp, #20]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    74e2:	1c4c      	adds	r4, r1, #1
  state.buffer = m_secBuf;
    74e4:	e9cd 3003 	strd	r3, r0, [sp, #12]
  state.dotcount = sectorCount/32;
    74e8:	ea4f 135a 	mov.w	r3, sl, lsr #5
    74ec:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    74f0:	6833      	ldr	r3, [r6, #0]
    74f2:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    74f4:	4567      	cmp	r7, ip
    74f6:	d126      	bne.n	7546 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa2>
     for (size_t i = 0; i < ns; i++) {
    74f8:	b36a      	cbz	r2, 7556 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb2>
    74fa:	eb01 070a 	add.w	r7, r1, sl
    74fe:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 75c0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x11c>
    7502:	e00a      	b.n	751a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x76>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    7504:	4621      	mov	r1, r4
    7506:	9a03      	ldr	r2, [sp, #12]
    7508:	4630      	mov	r0, r6
     for (size_t i = 0; i < ns; i++) {
    750a:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    750c:	47d8      	blx	fp
    750e:	2800      	cmp	r0, #0
    7510:	d03f      	beq.n	7592 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     for (size_t i = 0; i < ns; i++) {
    7512:	42a7      	cmp	r7, r4
    7514:	d01e      	beq.n	7554 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    7516:	6833      	ldr	r3, [r6, #0]
  if (state->pr && ++state->count >= state->dotcount) {
    7518:	9804      	ldr	r0, [sp, #16]
    751a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    751e:	2800      	cmp	r0, #0
    7520:	d0f0      	beq.n	7504 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    7522:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7526:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    752a:	3301      	adds	r3, #1
    752c:	b29b      	uxth	r3, r3
    752e:	429a      	cmp	r2, r3
    7530:	f8ad 3014 	strh.w	r3, [sp, #20]
    7534:	d8e6      	bhi.n	7504 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    7536:	6803      	ldr	r3, [r0, #0]
    7538:	4651      	mov	r1, sl
    753a:	2201      	movs	r2, #1
    753c:	685b      	ldr	r3, [r3, #4]
    753e:	4798      	blx	r3
    state->count = 0;
    7540:	f8ad 9014 	strh.w	r9, [sp, #20]
    7544:	e7de      	b.n	7504 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    7546:	ab03      	add	r3, sp, #12
    7548:	4621      	mov	r1, r4
    754a:	4630      	mov	r0, r6
    754c:	9300      	str	r3, [sp, #0]
    754e:	4b19      	ldr	r3, [pc, #100]	; (75b4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x110>)
    7550:	47b8      	blx	r7
    7552:	b1f0      	cbz	r0, 7592 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     return false;
  }
  writeMsg("\r\n");
    7554:	6a28      	ldr	r0, [r5, #32]
    7556:	b120      	cbz	r0, 7562 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xbe>
    7558:	6803      	ldr	r3, [r0, #0]
    755a:	2202      	movs	r2, #2
    755c:	4916      	ldr	r1, [pc, #88]	; (75b8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x114>)
    755e:	685b      	ldr	r3, [r3, #4]
    7560:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    7562:	f1b8 0f10 	cmp.w	r8, #16
  m_secBuf[0] = 0XF8;
    7566:	f04f 01f8 	mov.w	r1, #248	; 0xf8
    756a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    756c:	f04f 0301 	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    7570:	bf0c      	ite	eq
    7572:	2004      	moveq	r0, #4
    7574:	200c      	movne	r0, #12
  m_secBuf[0] = 0XF8;
    7576:	7011      	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    7578:	21ff      	movs	r1, #255	; 0xff
    757a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    757c:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    757e:	3301      	adds	r3, #1
    7580:	4298      	cmp	r0, r3
    7582:	d1fa      	bne.n	757a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd6>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    7584:	69e8      	ldr	r0, [r5, #28]
    7586:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7588:	6803      	ldr	r3, [r0, #0]
    758a:	68e9      	ldr	r1, [r5, #12]
    758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    758e:	4798      	blx	r3
    7590:	b918      	cbnz	r0, 759a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xf6>
     return false;
    7592:	2000      	movs	r0, #0
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    7594:	b007      	add	sp, #28
    7596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    759a:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    759e:	69e8      	ldr	r0, [r5, #28]
    75a0:	4419      	add	r1, r3
    75a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    75a4:	6803      	ldr	r3, [r0, #0]
    75a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    75a8:	4798      	blx	r3
}
    75aa:	b007      	add	sp, #28
    75ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75b0:	200006ec 	.word	0x200006ec
    75b4:	00007475 	.word	0x00007475
    75b8:	20000714 	.word	0x20000714
    75bc:	00007439 	.word	0x00007439
    75c0:	200006fc 	.word	0x200006fc

000075c4 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    75c4:	b538      	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    75c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    75c8:	f44f 7500 	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    75cc:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    75ce:	2100      	movs	r1, #0
    75d0:	462a      	mov	r2, r5
    75d2:	4618      	mov	r0, r3
    75d4:	f006 ffe4 	bl	e5a0 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    75d8:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    75dc:	22eb      	movs	r2, #235	; 0xeb
    75de:	f8a0 500b 	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    75e2:	f8c0 1003 	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    75e6:	4603      	mov	r3, r0
    pbs->oemName[i] = ' ';
    75e8:	f8c0 1007 	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    75ec:	2190      	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    75ee:	7002      	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    75f0:	2076      	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    75f2:	7099      	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    75f4:	2202      	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    75f6:	7058      	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    75f8:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
    75fc:	7359      	strb	r1, [r3, #13]
    75fe:	f64a 2155 	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    7602:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    7604:	741a      	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    7606:	22f8      	movs	r2, #248	; 0xf8
    7608:	81d8      	strh	r0, [r3, #14]
    760a:	755a      	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    760c:	6922      	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    760e:	61da      	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    7610:	69a2      	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7612:	f8a3 11fe 	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    7616:	621a      	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    7618:	bd38      	pop	{r3, r4, r5, pc}
    761a:	bf00      	nop

0000761c <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    761c:	b570      	push	{r4, r5, r6, lr}
    761e:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    7620:	f44f 7200 	mov.w	r2, #512	; 0x200
    7624:	2100      	movs	r1, #0
    7626:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7628:	f006 ffba 	bl	e5a0 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    762c:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    762e:	6922      	ldr	r2, [r4, #16]
    7630:	6821      	ldr	r1, [r4, #0]
    7632:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    7636:	f003 f97d 	bl	a934 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    763a:	69a3      	ldr	r3, [r4, #24]
    763c:	6922      	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    763e:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    7642:	6821      	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors -1);
    7644:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    7646:	3a01      	subs	r2, #1
    7648:	f003 f974 	bl	a934 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    764c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    7650:	f64a 2355 	movw	r3, #43605	; 0xaa55
    7654:	f885 21c2 	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    7658:	6922      	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    765a:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    765c:	f8c5 21c6 	str.w	r2, [r5, #454]	; 0x1c6
    7660:	6a62      	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    7662:	69a1      	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7664:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    7668:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    766a:	f8c5 11ca 	str.w	r1, [r5, #458]	; 0x1ca
    766e:	2100      	movs	r1, #0
    7670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    7676:	4718      	bx	r3

00007678 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    7678:	b570      	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    767a:	6946      	ldr	r6, [r0, #20]
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    767c:	f44f 7380 	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    7680:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    7684:	4604      	mov	r4, r0
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    7686:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    768a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    768c:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    768e:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    7692:	f202 1c01 	addw	ip, r2, #257	; 0x101
    7696:	ea4f 211c 	mov.w	r1, ip, lsr #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    769a:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    769e:	6081      	str	r1, [r0, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    76a0:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    76a4:	4298      	cmp	r0, r3
    76a6:	d90e      	bls.n	76c6 <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    76a8:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    76aa:	1af2      	subs	r2, r6, r3
    76ac:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    76b0:	f202 1101 	addw	r1, r2, #257	; 0x101
    76b4:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    76b6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    76ba:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    76be:	4283      	cmp	r3, r0
    76c0:	d3f2      	bcc.n	76a8 <FatFormatter::makeFat16()+0x30>
    76c2:	e9c4 3101 	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    76c6:	1a1b      	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    76c8:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    76cc:	f103 0080 	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    76d0:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    76d4:	6120      	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    76d6:	d24f      	bcs.n	7778 <FatFormatter::makeFat16()+0x100>
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    76d8:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    76dc:	3381      	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    76de:	4620      	mov	r0, r4
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    76e0:	fb02 c20e 	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    76e4:	60e3      	str	r3, [r4, #12]
    m_partType = 0X06;
    76e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  m_totalSectors = nc*m_sectorsPerCluster
    76ea:	61a2      	str	r2, [r4, #24]
    m_partType = 0X06;
    76ec:	bf34      	ite	cc
    76ee:	2304      	movcc	r3, #4
    76f0:	2306      	movcs	r3, #6
    76f2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    76f6:	2301      	movs	r3, #1
    76f8:	8523      	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    76fa:	f7ff ff8f 	bl	761c <FatFormatter::writeMbr()>
    76fe:	b908      	cbnz	r0, 7704 <FatFormatter::makeFat16()+0x8c>
}
    7700:	2000      	movs	r0, #0
    7702:	bd70      	pop	{r4, r5, r6, pc}
  initPbs();
    7704:	4620      	mov	r0, r4
    7706:	f7ff ff5d 	bl	75c4 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    770a:	2229      	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    770c:	68a1      	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    770e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    7712:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    7716:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    7718:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    771c:	2080      	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    771e:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    7722:	2254      	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    7724:	f8c5 302b 	str.w	r3, [r5, #43]	; 0x2b
    7728:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    772c:	2331      	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    772e:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    7732:	2236      	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    7734:	82e9      	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    7736:	2141      	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    7738:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    773c:	f885 1037 	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    7740:	f44f 7100 	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    7744:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    7748:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    774c:	4b0f      	ldr	r3, [pc, #60]	; (778c <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    774e:	69e0      	ldr	r0, [r4, #28]
    7750:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
    7754:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7756:	f8a5 1011 	strh.w	r1, [r5, #17]
    775a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    775c:	6921      	ldr	r1, [r4, #16]
    775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7760:	4798      	blx	r3
    7762:	2800      	cmp	r0, #0
    7764:	d0cc      	beq.n	7700 <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    7766:	6862      	ldr	r2, [r4, #4]
    7768:	4620      	mov	r0, r4
    776a:	68e3      	ldr	r3, [r4, #12]
    776c:	2110      	movs	r1, #16
    776e:	1ad2      	subs	r2, r2, r3
}
    7770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    7774:	f7ff be96 	b.w	74a4 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    7778:	6a20      	ldr	r0, [r4, #32]
    777a:	2800      	cmp	r0, #0
    777c:	d0c0      	beq.n	7700 <FatFormatter::makeFat16()+0x88>
    777e:	6803      	ldr	r3, [r0, #0]
    7780:	2213      	movs	r2, #19
    7782:	4903      	ldr	r1, [pc, #12]	; (7790 <FatFormatter::makeFat16()+0x118>)
    7784:	685b      	ldr	r3, [r3, #4]
    7786:	4798      	blx	r3
}
    7788:	2000      	movs	r0, #0
    778a:	bd70      	pop	{r4, r5, r6, pc}
    778c:	0012d687 	.word	0x0012d687
    7790:	20000644 	.word	0x20000644

00007794 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    7794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    7796:	6946      	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    7798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    779c:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    77a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    77a4:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    77a8:	6103      	str	r3, [r0, #16]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    77aa:	f242 0e09 	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    77ae:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    77b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    77b2:	6042      	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    77b4:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    77b8:	f101 0381 	add.w	r3, r1, #129	; 0x81
    77bc:	09db      	lsrs	r3, r3, #7
    77be:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    77c0:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    77c4:	4290      	cmp	r0, r2
    77c6:	f240 80b6 	bls.w	7936 <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    77ca:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    77ce:	1ab1      	subs	r1, r6, r2
    77d0:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    77d4:	f101 0381 	add.w	r3, r1, #129	; 0x81
    77d8:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    77da:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    77de:	005f      	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    77e0:	4282      	cmp	r2, r0
    77e2:	d3f2      	bcc.n	77ca <FatFormatter::makeFat32()+0x36>
    77e4:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    77e8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
    77ec:	4299      	cmp	r1, r3
    77ee:	f240 8097 	bls.w	7920 <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    77f2:	fb01 2c0c 	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    77f6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    77fa:	4620      	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    77fc:	1bd2      	subs	r2, r2, r7
    77fe:	b292      	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    7800:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    7804:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    7806:	4a4d      	ldr	r2, [pc, #308]	; (793c <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    7808:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    780a:	f5ac 5300 	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    780e:	4594      	cmp	ip, r2
    7810:	bf94      	ite	ls
    7812:	f04f 0c0b 	movls.w	ip, #11
    7816:	f04f 0c0c 	movhi.w	ip, #12
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    781a:	61a3      	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    781c:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    7820:	f7ff fefc 	bl	761c <FatFormatter::writeMbr()>
    7824:	b908      	cbnz	r0, 782a <FatFormatter::makeFat32()+0x96>
}
    7826:	2000      	movs	r0, #0
    7828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    782a:	4620      	mov	r0, r4
    782c:	f7ff feca 	bl	75c4 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    7830:	68a1      	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    7832:	2229      	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    7834:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    7838:	2080      	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    783a:	6269      	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    783c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    7840:	2154      	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    7842:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    7844:	f8c5 304b 	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    7848:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    784c:	2041      	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    784e:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
    7852:	f8c5 304e 	str.w	r3, [r5, #78]	; 0x4e
    7856:	2302      	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    7858:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    785c:	2233      	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    785e:	f885 1054 	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    7862:	2132      	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    7864:	f885 2055 	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    7868:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    786c:	f885 1056 	strb.w	r1, [r5, #86]	; 0x56
    7870:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    7872:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7874:	4b32      	ldr	r3, [pc, #200]	; (7940 <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    7876:	4a33      	ldr	r2, [pc, #204]	; (7944 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    7878:	632b      	str	r3, [r5, #48]	; 0x30
    787a:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    787c:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
    7880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7882:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7884:	6921      	ldr	r1, [r4, #16]
    7886:	4798      	blx	r3
    7888:	2800      	cmp	r0, #0
    788a:	d0cc      	beq.n	7826 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    788c:	69e0      	ldr	r0, [r4, #28]
    788e:	6921      	ldr	r1, [r4, #16]
    7890:	6803      	ldr	r3, [r0, #0]
    7892:	3106      	adds	r1, #6
    7894:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7898:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    789a:	2800      	cmp	r0, #0
    789c:	d0c3      	beq.n	7826 <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    789e:	f44f 7200 	mov.w	r2, #512	; 0x200
    78a2:	2100      	movs	r1, #0
    78a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    78a6:	f006 fe7b 	bl	e5a0 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    78aa:	69e0      	ldr	r0, [r4, #28]
    78ac:	4a26      	ldr	r2, [pc, #152]	; (7948 <FatFormatter::makeFat32()+0x1b4>)
    78ae:	6803      	ldr	r3, [r0, #0]
    78b0:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
    78b4:	6921      	ldr	r1, [r4, #16]
    78b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78b8:	3102      	adds	r1, #2
    78ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    78bc:	4798      	blx	r3
    78be:	2800      	cmp	r0, #0
    78c0:	d0b1      	beq.n	7826 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    78c2:	69e0      	ldr	r0, [r4, #28]
    78c4:	6921      	ldr	r1, [r4, #16]
    78c6:	6803      	ldr	r3, [r0, #0]
    78c8:	3108      	adds	r1, #8
    78ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
    78cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78ce:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    78d0:	2800      	cmp	r0, #0
    78d2:	d0a8      	beq.n	7826 <FatFormatter::makeFat32()+0x92>
    78d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    78d8:	69e0      	ldr	r0, [r4, #28]
    78da:	4a1c      	ldr	r2, [pc, #112]	; (794c <FatFormatter::makeFat32()+0x1b8>)
    78dc:	e9c5 337a 	strd	r3, r3, [r5, #488]	; 0x1e8
    78e0:	4b1b      	ldr	r3, [pc, #108]	; (7950 <FatFormatter::makeFat32()+0x1bc>)
    78e2:	602a      	str	r2, [r5, #0]
    78e4:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    78e8:	6803      	ldr	r3, [r0, #0]
    78ea:	6921      	ldr	r1, [r4, #16]
    78ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    78ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78f0:	3101      	adds	r1, #1
    78f2:	4798      	blx	r3
    78f4:	2800      	cmp	r0, #0
    78f6:	d096      	beq.n	7826 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    78f8:	69e0      	ldr	r0, [r4, #28]
    78fa:	6921      	ldr	r1, [r4, #16]
    78fc:	6803      	ldr	r3, [r0, #0]
    78fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7900:	3107      	adds	r1, #7
    7902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7904:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    7906:	2800      	cmp	r0, #0
    7908:	d08d      	beq.n	7826 <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    790a:	68a2      	ldr	r2, [r4, #8]
    790c:	4620      	mov	r0, r4
    790e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    7912:	2120      	movs	r1, #32
    7914:	eb03 0242 	add.w	r2, r3, r2, lsl #1
}
    7918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    791c:	f7ff bdc2 	b.w	74a4 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    7920:	6a20      	ldr	r0, [r4, #32]
    7922:	2800      	cmp	r0, #0
    7924:	f43f af7f 	beq.w	7826 <FatFormatter::makeFat32()+0x92>
    7928:	6803      	ldr	r3, [r0, #0]
    792a:	2213      	movs	r2, #19
    792c:	4909      	ldr	r1, [pc, #36]	; (7954 <FatFormatter::makeFat32()+0x1c0>)
    792e:	685b      	ldr	r3, [r3, #4]
    7930:	4798      	blx	r3
}
    7932:	2000      	movs	r0, #0
    7934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7936:	005f      	lsls	r7, r3, #1
    7938:	e756      	b.n	77e8 <FatFormatter::makeFat32()+0x54>
    793a:	bf00      	nop
    793c:	00fb0400 	.word	0x00fb0400
    7940:	00060001 	.word	0x00060001
    7944:	0012d687 	.word	0x0012d687
    7948:	aa550000 	.word	0xaa550000
    794c:	41615252 	.word	0x41615252
    7950:	61417272 	.word	0x61417272
    7954:	20000644 	.word	0x20000644

00007958 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    7958:	b538      	push	{r3, r4, r5, lr}
    795a:	4604      	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    795c:	680d      	ldr	r5, [r1, #0]
  m_dev = dev;
    795e:	61c1      	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    7960:	4608      	mov	r0, r1
  m_secBuf = secBuf;
    7962:	6262      	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    7964:	69ea      	ldr	r2, [r5, #28]
  m_pr = pr;
    7966:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    7968:	4790      	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    796a:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    796e:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    7970:	0adb      	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    7972:	2b06      	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    7974:	6023      	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    7976:	d924      	bls.n	79c2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    7978:	2b10      	cmp	r3, #16
    797a:	d813      	bhi.n	79a4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    797c:	2302      	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    797e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    7982:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    7986:	4620      	mov	r0, r4
    7988:	d22e      	bcs.n	79e8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    798a:	f7ff fe75 	bl	7678 <FatFormatter::makeFat16()>
    798e:	4605      	mov	r5, r0
    writeMsg("Format Done\r\n");
    7990:	6a20      	ldr	r0, [r4, #32]
  if (rtn) {
    7992:	b305      	cbz	r5, 79d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    7994:	b120      	cbz	r0, 79a0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    7996:	6803      	ldr	r3, [r0, #0]
    7998:	220d      	movs	r2, #13
    799a:	4919      	ldr	r1, [pc, #100]	; (7a00 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    799c:	685b      	ldr	r3, [r3, #4]
    799e:	4798      	blx	r3
}
    79a0:	4628      	mov	r0, r5
    79a2:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    79a4:	2b20      	cmp	r3, #32
    79a6:	d923      	bls.n	79f0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    79a8:	2b40      	cmp	r3, #64	; 0x40
    79aa:	d923      	bls.n	79f4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    79ac:	2b80      	cmp	r3, #128	; 0x80
    79ae:	d923      	bls.n	79f8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    79b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    79b4:	d922      	bls.n	79fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    79b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    79ba:	bf8c      	ite	hi
    79bc:	2380      	movhi	r3, #128	; 0x80
    79be:	2340      	movls	r3, #64	; 0x40
    79c0:	e7dd      	b.n	797e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    79c2:	6a20      	ldr	r0, [r4, #32]
    79c4:	b120      	cbz	r0, 79d0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    79c6:	6803      	ldr	r3, [r0, #0]
    79c8:	2214      	movs	r2, #20
    79ca:	490e      	ldr	r1, [pc, #56]	; (7a04 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    79cc:	685b      	ldr	r3, [r3, #4]
    79ce:	4798      	blx	r3
    return false;
    79d0:	2500      	movs	r5, #0
}
    79d2:	4628      	mov	r0, r5
    79d4:	bd38      	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    79d6:	2800      	cmp	r0, #0
    79d8:	d0fa      	beq.n	79d0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    79da:	6803      	ldr	r3, [r0, #0]
    79dc:	220f      	movs	r2, #15
    79de:	490a      	ldr	r1, [pc, #40]	; (7a08 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    79e0:	685b      	ldr	r3, [r3, #4]
    79e2:	4798      	blx	r3
}
    79e4:	4628      	mov	r0, r5
    79e6:	bd38      	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    79e8:	f7ff fed4 	bl	7794 <FatFormatter::makeFat32()>
    79ec:	4605      	mov	r5, r0
    79ee:	e7cf      	b.n	7990 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    79f0:	2304      	movs	r3, #4
    79f2:	e7c4      	b.n	797e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    79f4:	2308      	movs	r3, #8
    79f6:	e7c2      	b.n	797e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    79f8:	2310      	movs	r3, #16
    79fa:	e7c0      	b.n	797e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    79fc:	2320      	movs	r3, #32
    79fe:	e7be      	b.n	797e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    7a00:	20000624 	.word	0x20000624
    7a04:	2000060c 	.word	0x2000060c
    7a08:	20000634 	.word	0x20000634

00007a0c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    7a0c:	2a04      	cmp	r2, #4
    7a0e:	d804      	bhi.n	7a1a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    7a10:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    7a14:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    7a18:	4770      	bx	lr
  } else if (i < 11) {
    7a1a:	2a0a      	cmp	r2, #10
    7a1c:	d803      	bhi.n	7a26 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    7a1e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    7a22:	8890      	ldrh	r0, [r2, #4]
    7a24:	4770      	bx	lr
  } else if (i < 13) {
    7a26:	2a0c      	cmp	r2, #12
    7a28:	d803      	bhi.n	7a32 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    7a2a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    7a2e:	88c8      	ldrh	r0, [r1, #6]
    7a30:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    7a32:	2000      	movs	r0, #0
}
    7a34:	4770      	bx	lr
    7a36:	bf00      	nop

00007a38 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    7a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    7a3a:	7804      	ldrb	r4, [r0, #0]
    7a3c:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    7a3e:	b17c      	cbz	r4, 7a60 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    7a40:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    7a44:	4617      	mov	r7, r2
    7a46:	d007      	beq.n	7a58 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    7a48:	2a01      	cmp	r2, #1
    7a4a:	d909      	bls.n	7a60 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    7a4c:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    7a4e:	2300      	movs	r3, #0
    return 1;
    7a50:	2001      	movs	r0, #1
    name[0] = '/';
    7a52:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    7a54:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    7a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7a58:	4621      	mov	r1, r4
    7a5a:	f7fe f947 	bl	5cec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7a5e:	b918      	cbnz	r0, 7a68 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    7a60:	2300      	movs	r3, #0
  return 0;
    7a62:	4618      	mov	r0, r3
  name[0] = '\0';
    7a64:	7033      	strb	r3, [r6, #0]
}
    7a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    7a68:	4603      	mov	r3, r0
    7a6a:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    7a6c:	2108      	movs	r1, #8
    7a6e:	e011      	b.n	7a94 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7a70:	7b02      	ldrb	r2, [r0, #12]
    7a72:	4211      	tst	r1, r2
    7a74:	d003      	beq.n	7a7e <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    7a76:	f10e 0e20 	add.w	lr, lr, #32
    7a7a:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    7a7e:	1c65      	adds	r5, r4, #1
    7a80:	42bd      	cmp	r5, r7
    7a82:	d2ed      	bcs.n	7a60 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    7a84:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    7a88:	f806 e004 	strb.w	lr, [r6, r4]
    7a8c:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    7a8e:	f1bc 0f0c 	cmp.w	ip, #12
    7a92:	d010      	beq.n	7ab6 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    7a94:	f1bc 0f08 	cmp.w	ip, #8
    7a98:	d011      	beq.n	7abe <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    7a9a:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7a9e:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    7aa2:	2a19      	cmp	r2, #25
    7aa4:	d9e4      	bls.n	7a70 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    7aa6:	f1be 0f20 	cmp.w	lr, #32
    7aaa:	d1e8      	bne.n	7a7e <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    7aac:	f10c 0c01 	add.w	ip, ip, #1
    7ab0:	f1bc 0f0c 	cmp.w	ip, #12
    7ab4:	d1ee      	bne.n	7a94 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    7ab6:	2300      	movs	r3, #0
    7ab8:	4620      	mov	r0, r4
    7aba:	5533      	strb	r3, [r6, r4]
}
    7abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    7abe:	781a      	ldrb	r2, [r3, #0]
    7ac0:	2a20      	cmp	r2, #32
    7ac2:	d0f8      	beq.n	7ab6 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    7ac4:	2110      	movs	r1, #16
      c = '.';
    7ac6:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    7aca:	e7d8      	b.n	7a7e <FatFile::getSFN(char*, unsigned int)+0x46>

00007acc <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    7acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    7ad0:	2400      	movs	r4, #0
    7ad2:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    7ad4:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    7ad6:	4689      	mov	r9, r1
    7ad8:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    7ada:	2b00      	cmp	r3, #0
    7adc:	d055      	beq.n	7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    7ade:	78c3      	ldrb	r3, [r0, #3]
    7ae0:	4606      	mov	r6, r0
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	d058      	beq.n	7b98 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    7ae6:	4601      	mov	r1, r0
    7ae8:	a801      	add	r0, sp, #4
    7aea:	4690      	mov	r8, r2
    7aec:	f7fe fb1e 	bl	612c <FatFile::openCluster(FatFile*)>
    7af0:	2800      	cmp	r0, #0
    7af2:	d04a      	beq.n	7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7af4:	78f0      	ldrb	r0, [r6, #3]
    7af6:	2800      	cmp	r0, #0
    7af8:	d043      	beq.n	7b82 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7afa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  char* str = name;
    7afe:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7b00:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7b04:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    7b06:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7b08:	a801      	add	r0, sp, #4
    7b0a:	eba1 010a 	sub.w	r1, r1, sl
    7b0e:	b289      	uxth	r1, r1
    7b10:	0149      	lsls	r1, r1, #5
    7b12:	f7fe fd9f 	bl	6654 <FatFile::seekSet(unsigned long)>
    7b16:	b3c0      	cbz	r0, 7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
    7b18:	2100      	movs	r1, #0
    7b1a:	a801      	add	r0, sp, #4
    7b1c:	f7fe fc3a 	bl	6394 <FatFile::readDirCache(bool)>
    if (!ldir) {
    7b20:	b398      	cbz	r0, 7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7b22:	7ac3      	ldrb	r3, [r0, #11]
    7b24:	2b0f      	cmp	r3, #15
    7b26:	d130      	bne.n	7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
    7b28:	7803      	ldrb	r3, [r0, #0]
    7b2a:	fa5f f18a 	uxtb.w	r1, sl
    7b2e:	f003 031f 	and.w	r3, r3, #31
    7b32:	428b      	cmp	r3, r1
    7b34:	d129      	bne.n	7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
    7b36:	1c47      	adds	r7, r0, #1
    7b38:	2500      	movs	r5, #0
  if (i < 5) {
    7b3a:	2d04      	cmp	r5, #4
    7b3c:	b2eb      	uxtb	r3, r5
    7b3e:	d83f      	bhi.n	7bc0 <FatFile::getName8(char*, unsigned int)+0xf4>
    7b40:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    7b42:	bb74      	cbnz	r4, 7ba2 <FatFile::getName8(char*, unsigned int)+0xd6>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    7b44:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    7b48:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    7b4a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    7b4e:	d33e      	bcc.n	7bce <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    7b50:	b1a3      	cbz	r3, 7b7c <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    7b52:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7b54:	4659      	mov	r1, fp
    7b56:	4642      	mov	r2, r8
    7b58:	f002 ff3c 	bl	a9d4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    7b5c:	4683      	mov	fp, r0
    7b5e:	b1a0      	cbz	r0, 7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
    7b60:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    7b62:	3501      	adds	r5, #1
    7b64:	3702      	adds	r7, #2
    7b66:	2d0d      	cmp	r5, #13
    7b68:	d1e7      	bne.n	7b3a <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7b6a:	f10a 0a01 	add.w	sl, sl, #1
    7b6e:	78f1      	ldrb	r1, [r6, #3]
    7b70:	fa5f f38a 	uxtb.w	r3, sl
    7b74:	fa1f fa8a 	uxth.w	sl, sl
    7b78:	4299      	cmp	r1, r3
    7b7a:	d2c4      	bcs.n	7b06 <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    7b7c:	ebab 0009 	sub.w	r0, fp, r9
    7b80:	46d9      	mov	r9, fp
  *str = '\0';
    7b82:	2300      	movs	r3, #0
    7b84:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    7b88:	e003      	b.n	7b92 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    7b8a:	2300      	movs	r3, #0
  return 0;
    7b8c:	4618      	mov	r0, r3
  *name = 0;
    7b8e:	f889 3000 	strb.w	r3, [r9]
}
    7b92:	b00b      	add	sp, #44	; 0x2c
    7b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    7b98:	f7ff ff4e 	bl	7a38 <FatFile::getSFN(char*, unsigned int)>
}
    7b9c:	b00b      	add	sp, #44	; 0x2c
    7b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    7ba2:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    7ba6:	b289      	uxth	r1, r1
    7ba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    7bac:	d2ed      	bcs.n	7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7bae:	4a0a      	ldr	r2, [pc, #40]	; (7bd8 <FatFile::getName8(char*, unsigned int)+0x10c>)
    7bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7bb4:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    7bb8:	4318      	orrs	r0, r3
    7bba:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    7bbe:	e7c9      	b.n	7b54 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    7bc0:	2b0a      	cmp	r3, #10
    7bc2:	bf94      	ite	ls
    7bc4:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    7bc8:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    7bcc:	e7b9      	b.n	7b42 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    7bce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    7bd2:	d2da      	bcs.n	7b8a <FatFile::getName8(char*, unsigned int)+0xbe>
    7bd4:	461c      	mov	r4, r3
    7bd6:	e7c4      	b.n	7b62 <FatFile::getName8(char*, unsigned int)+0x96>
    7bd8:	000ffc00 	.word	0x000ffc00

00007bdc <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    7bdc:	f7ff bf76 	b.w	7acc <FatFile::getName8(char*, unsigned int)>

00007be0 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    7be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7be4:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    7be8:	b1c3      	cbz	r3, 7c1c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    7bea:	4681      	mov	r9, r0
    7bec:	460c      	mov	r4, r1
    7bee:	4615      	mov	r5, r2
    7bf0:	185e      	adds	r6, r3, r1
    7bf2:	e002      	b.n	7bfa <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    7bf4:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    7bf6:	42b4      	cmp	r4, r6
    7bf8:	d010      	beq.n	7c1c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    7bfa:	f8d9 3000 	ldr.w	r3, [r9]
    7bfe:	4621      	mov	r1, r4
    7c00:	462a      	mov	r2, r5
    7c02:	4648      	mov	r0, r9
    7c04:	691b      	ldr	r3, [r3, #16]
    7c06:	4798      	blx	r3
    7c08:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    7c0a:	463a      	mov	r2, r7
    7c0c:	4620      	mov	r0, r4
    7c0e:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    7c10:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    7c12:	2b00      	cmp	r3, #0
    7c14:	d1ee      	bne.n	7bf4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    7c16:	4618      	mov	r0, r3
    7c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    7c1c:	2301      	movs	r3, #1
  }
    7c1e:	4618      	mov	r0, r3
    7c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007c24 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    7c24:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    7c26:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    7c28:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    7c2c:	46a4      	mov	ip, r4
    7c2e:	bf28      	it	cs
    7c30:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    7c34:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    7c38:	4281      	cmp	r1, r0
    7c3a:	d207      	bcs.n	7c4c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    7c3c:	f831 3b02 	ldrh.w	r3, [r1], #2
    7c40:	b913      	cbnz	r3, 7c48 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    7c42:	6853      	ldr	r3, [r2, #4]
    7c44:	3301      	adds	r3, #1
    7c46:	6053      	str	r3, [r2, #4]
  while (p < e) {
    7c48:	4288      	cmp	r0, r1
    7c4a:	d8f7      	bhi.n	7c3c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    7c4c:	eba4 040c 	sub.w	r4, r4, ip
    7c50:	6014      	str	r4, [r2, #0]
}
    7c52:	f85d 4b04 	ldr.w	r4, [sp], #4
    7c56:	4770      	bx	lr

00007c58 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    7c58:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    7c5a:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    7c5c:	2c80      	cmp	r4, #128	; 0x80
    7c5e:	46a4      	mov	ip, r4
    7c60:	bf28      	it	cs
    7c62:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    7c66:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    7c6a:	4281      	cmp	r1, r0
    7c6c:	d207      	bcs.n	7c7e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    7c6e:	f851 3b04 	ldr.w	r3, [r1], #4
    7c72:	b913      	cbnz	r3, 7c7a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    7c74:	6853      	ldr	r3, [r2, #4]
    7c76:	3301      	adds	r3, #1
    7c78:	6053      	str	r3, [r2, #4]
  while (p < e) {
    7c7a:	4288      	cmp	r0, r1
    7c7c:	d8f7      	bhi.n	7c6e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    7c7e:	eba4 040c 	sub.w	r4, r4, ip
    7c82:	6014      	str	r4, [r2, #0]
}
    7c84:	f85d 4b04 	ldr.w	r4, [sp], #4
    7c88:	4770      	bx	lr
    7c8a:	bf00      	nop

00007c8c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    7c90:	79c3      	ldrb	r3, [r0, #7]
    7c92:	4604      	mov	r4, r0
    7c94:	460d      	mov	r5, r1
    7c96:	4617      	mov	r7, r2
  if (fatType() == 32) {
    7c98:	2b20      	cmp	r3, #32
    7c9a:	d059      	beq.n	7d50 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    7c9c:	2b10      	cmp	r3, #16
    7c9e:	d030      	beq.n	7d02 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    7ca0:	2b0c      	cmp	r3, #12
    7ca2:	d151      	bne.n	7d48 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7ca4:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    7ca6:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7caa:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    7cac:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    7cb0:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7cb4:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7cb8:	4648      	mov	r0, r9
    7cba:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7cbc:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7cc0:	f3c1 2146 	ubfx	r1, r1, #9, #7
    7cc4:	0952      	lsrs	r2, r2, #5
    7cc6:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    7cca:	0052      	lsls	r2, r2, #1
    7ccc:	4641      	mov	r1, r8
    7cce:	f002 fde3 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7cd2:	2800      	cmp	r0, #0
    7cd4:	d038      	beq.n	7d48 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    7cd6:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    7cda:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    7cdc:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    7cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7ce2:	d023      	beq.n	7d2c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    7ce4:	4418      	add	r0, r3
    7ce6:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7ce8:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    7cea:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    7cec:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7cf0:	bf4c      	ite	mi
    7cf2:	091b      	lsrmi	r3, r3, #4
    7cf4:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    7cf8:	429a      	cmp	r2, r3
    7cfa:	d240      	bcs.n	7d7e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    7cfc:	2000      	movs	r0, #0
}
    7cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d02:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7d04:	f3c1 2107 	ubfx	r1, r1, #8, #8
    7d08:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    7d0a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d0e:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7d12:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d14:	fab2 f282 	clz	r2, r2
    7d18:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    7d1a:	0052      	lsls	r2, r2, #1
    7d1c:	f002 fdbc 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7d20:	b190      	cbz	r0, 7d48 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7d22:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    7d24:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    7d28:	5b43      	ldrh	r3, [r0, r5]
    7d2a:	e025      	b.n	7d78 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d2c:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    7d2e:	f108 0101 	add.w	r1, r8, #1
    7d32:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d34:	f1a2 0202 	sub.w	r2, r2, #2
    7d38:	fab2 f282 	clz	r2, r2
    7d3c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    7d3e:	0052      	lsls	r2, r2, #1
    7d40:	f002 fdaa 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7d44:	2800      	cmp	r0, #0
    7d46:	d1ce      	bne.n	7ce6 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    7d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d50:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7d52:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    7d54:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d58:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7d5c:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7d60:	fab2 f282 	clz	r2, r2
    7d64:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    7d66:	0052      	lsls	r2, r2, #1
    7d68:	f002 fd96 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7d6c:	2800      	cmp	r0, #0
    7d6e:	d0eb      	beq.n	7d48 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7d70:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    7d72:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    7d76:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    7d78:	69e2      	ldr	r2, [r4, #28]
    7d7a:	429a      	cmp	r2, r3
    7d7c:	d3be      	bcc.n	7cfc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    7d7e:	2001      	movs	r0, #1
  *value = next;
    7d80:	603b      	str	r3, [r7, #0]
}
    7d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d86:	bf00      	nop

00007d88 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    7d8c:	79c3      	ldrb	r3, [r0, #7]
    7d8e:	4605      	mov	r5, r0
    7d90:	460c      	mov	r4, r1
    7d92:	4616      	mov	r6, r2
  if (fatType() == 32) {
    7d94:	2b20      	cmp	r3, #32
    7d96:	d048      	beq.n	7e2a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    7d98:	2b10      	cmp	r3, #16
    7d9a:	d02d      	beq.n	7df8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    7d9c:	2b0c      	cmp	r3, #12
    7d9e:	d141      	bne.n	7e24 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    7da0:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7da4:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    7da6:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    7daa:	fa11 f184 	uxtah	r1, r1, r4
    7dae:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7db2:	f3c1 2146 	ubfx	r1, r1, #9, #7
    7db6:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7db8:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    7dba:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7dbc:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    7dbe:	4639      	mov	r1, r7
    7dc0:	bf14      	ite	ne
    7dc2:	2201      	movne	r2, #1
    7dc4:	2203      	moveq	r2, #3
    7dc6:	f002 fd67 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7dca:	b358      	cbz	r0, 7e24 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    7dcc:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    7dd0:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    7dd4:	d03f      	beq.n	7e56 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    7dd6:	5cc2      	ldrb	r2, [r0, r3]
    7dd8:	f002 020f 	and.w	r2, r2, #15
    7ddc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    7de0:	54c2      	strb	r2, [r0, r3]
    index++;
    7de2:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    7de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7de8:	d03a      	beq.n	7e60 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    7dea:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    7dee:	4403      	add	r3, r0
    return true;
    7df0:	2001      	movs	r0, #1
    pc[index] = tmp;
    7df2:	701a      	strb	r2, [r3, #0]
}
    7df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7df8:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7dfa:	f3c1 2107 	ubfx	r1, r1, #8, #8
    7dfe:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    7e00:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7e04:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    7e06:	4419      	add	r1, r3
    7e08:	bf14      	ite	ne
    7e0a:	2201      	movne	r2, #1
    7e0c:	2203      	moveq	r2, #3
    7e0e:	f002 fd43 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7e12:	4603      	mov	r3, r0
    7e14:	b130      	cbz	r0, 7e24 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7e16:	0064      	lsls	r4, r4, #1
    return true;
    7e18:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    7e1a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    7e1e:	531e      	strh	r6, [r3, r4]
}
    7e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    7e24:	2000      	movs	r0, #0
}
    7e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7e2a:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7e2c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    7e2e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7e32:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    7e34:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7e38:	bf14      	ite	ne
    7e3a:	2201      	movne	r2, #1
    7e3c:	2203      	moveq	r2, #3
    7e3e:	f002 fd2b 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7e42:	4603      	mov	r3, r0
    7e44:	2800      	cmp	r0, #0
    7e46:	d0ed      	beq.n	7e24 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7e48:	00a4      	lsls	r4, r4, #2
    return true;
    7e4a:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    7e4c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7e50:	511e      	str	r6, [r3, r4]
}
    7e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    7e56:	54c6      	strb	r6, [r0, r3]
    index++;
    7e58:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    7e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7e5e:	d115      	bne.n	7e8c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7e60:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    7e62:	1c79      	adds	r1, r7, #1
    7e64:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7e66:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    7e68:	bf14      	ite	ne
    7e6a:	2201      	movne	r2, #1
    7e6c:	2203      	moveq	r2, #3
    7e6e:	f002 fd13 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7e72:	4603      	mov	r3, r0
    7e74:	2800      	cmp	r0, #0
    7e76:	d0d5      	beq.n	7e24 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    7e78:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    7e7c:	2c00      	cmp	r4, #0
    7e7e:	d1b7      	bne.n	7df0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7e80:	7819      	ldrb	r1, [r3, #0]
    7e82:	f021 010f 	bic.w	r1, r1, #15
    7e86:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    7e8a:	e7b1      	b.n	7df0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    7e8c:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    7e90:	4403      	add	r3, r0
    7e92:	e7f5      	b.n	7e80 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

00007e94 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    7e98:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7e9a:	b082      	sub	sp, #8
    7e9c:	4605      	mov	r5, r0
    7e9e:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    7ea0:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7ea2:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    7ea4:	d340      	bcc.n	7f28 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    7ea6:	2701      	movs	r7, #1
    find++;
    7ea8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    7eaa:	69eb      	ldr	r3, [r5, #28]
    7eac:	aa01      	add	r2, sp, #4
    7eae:	4628      	mov	r0, r5
    7eb0:	42a3      	cmp	r3, r4
    7eb2:	d205      	bcs.n	7ec0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    7eb4:	bb9f      	cbnz	r7, 7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    7eb6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    7eb8:	2701      	movs	r7, #1
    find++;
    7eba:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    7ebc:	42a3      	cmp	r3, r4
    7ebe:	d32e      	bcc.n	7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    7ec0:	42a6      	cmp	r6, r4
    7ec2:	bf18      	it	ne
    7ec4:	2c01      	cmpne	r4, #1
    7ec6:	4621      	mov	r1, r4
    7ec8:	d929      	bls.n	7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    7eca:	f7ff fedf 	bl	7c8c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    7ece:	2800      	cmp	r0, #0
    7ed0:	db25      	blt.n	7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    7ed2:	d0e9      	beq.n	7ea8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    7ed4:	9b01      	ldr	r3, [sp, #4]
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d1e6      	bne.n	7ea8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    7eda:	b107      	cbz	r7, 7ede <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    7edc:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    7ede:	69eb      	ldr	r3, [r5, #28]
    7ee0:	42a3      	cmp	r3, r4
    7ee2:	d31c      	bcc.n	7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    7ee4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    7ee8:	4621      	mov	r1, r4
    7eea:	4628      	mov	r0, r5
    7eec:	f7ff ff4c 	bl	7d88 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    7ef0:	4607      	mov	r7, r0
    7ef2:	b1a0      	cbz	r0, 7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    7ef4:	b93e      	cbnz	r6, 7f06 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    7ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7ef8:	2b00      	cmp	r3, #0
    7efa:	db01      	blt.n	7f00 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    7efc:	3b01      	subs	r3, #1
    7efe:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    7f00:	f8c8 4000 	str.w	r4, [r8]
  return true;
    7f04:	e00c      	b.n	7f20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    7f06:	2e01      	cmp	r6, #1
    7f08:	d009      	beq.n	7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    7f0a:	69eb      	ldr	r3, [r5, #28]
    7f0c:	429e      	cmp	r6, r3
    7f0e:	d806      	bhi.n	7f1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    7f10:	4631      	mov	r1, r6
    7f12:	4622      	mov	r2, r4
    7f14:	4628      	mov	r0, r5
    7f16:	f7ff ff37 	bl	7d88 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    7f1a:	2800      	cmp	r0, #0
    7f1c:	d1eb      	bne.n	7ef6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    7f1e:	2700      	movs	r7, #0
}
    7f20:	4638      	mov	r0, r7
    7f22:	b002      	add	sp, #8
    7f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f28:	460c      	mov	r4, r1
    setStart = false;
    7f2a:	2700      	movs	r7, #0
    7f2c:	e7bc      	b.n	7ea8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    7f2e:	bf00      	nop

00007f30 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7f30:	2901      	cmp	r1, #1
    7f32:	d90c      	bls.n	7f4e <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7f34:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    7f36:	69c4      	ldr	r4, [r0, #28]
    7f38:	428c      	cmp	r4, r1
    7f3a:	d303      	bcc.n	7f44 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    7f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    7f40:	f7ff bea4 	b.w	7c8c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    7f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f48:	f85d 4b04 	ldr.w	r4, [sp], #4
    7f4c:	4770      	bx	lr
    7f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f52:	4770      	bx	lr

00007f54 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7f54:	2901      	cmp	r1, #1
    7f56:	d90b      	bls.n	7f70 <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7f58:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    7f5a:	69c4      	ldr	r4, [r0, #28]
    7f5c:	428c      	cmp	r4, r1
    7f5e:	d303      	bcc.n	7f68 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
}
    7f60:	f85d 4b04 	ldr.w	r4, [sp], #4
    7f64:	f7ff bf10 	b.w	7d88 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    7f68:	2000      	movs	r0, #0
    7f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    7f6e:	4770      	bx	lr
    7f70:	2000      	movs	r0, #0
    7f72:	4770      	bx	lr

00007f74 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    7f74:	b570      	push	{r4, r5, r6, lr}
    7f76:	4605      	mov	r5, r0
    7f78:	b082      	sub	sp, #8
    7f7a:	460c      	mov	r4, r1
    7f7c:	e01d      	b.n	7fba <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    7f7e:	69eb      	ldr	r3, [r5, #28]
    7f80:	429c      	cmp	r4, r3
    7f82:	d81f      	bhi.n	7fc4 <FatPartition::freeChain(unsigned long)+0x50>
    7f84:	f7ff fe82 	bl	7c8c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    7f88:	4606      	mov	r6, r0
    if (fg < 0) {
    7f8a:	4621      	mov	r1, r4
    7f8c:	2200      	movs	r2, #0
    7f8e:	2e00      	cmp	r6, #0
    7f90:	4628      	mov	r0, r5
    7f92:	db17      	blt.n	7fc4 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    7f94:	69eb      	ldr	r3, [r5, #28]
    7f96:	429c      	cmp	r4, r3
    7f98:	d814      	bhi.n	7fc4 <FatPartition::freeChain(unsigned long)+0x50>
    7f9a:	f7ff fef5 	bl	7d88 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    7f9e:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    7fa0:	b180      	cbz	r0, 7fc4 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    7fa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7fa4:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    7fa6:	f103 0301 	add.w	r3, r3, #1
    7faa:	bfa8      	it	ge
    7fac:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7fae:	68eb      	ldr	r3, [r5, #12]
    7fb0:	42a3      	cmp	r3, r4
    cluster = next;
    7fb2:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    7fb4:	bf88      	it	hi
    7fb6:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    7fb8:	b12e      	cbz	r6, 7fc6 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    7fba:	2c01      	cmp	r4, #1
    7fbc:	4621      	mov	r1, r4
    7fbe:	aa01      	add	r2, sp, #4
    7fc0:	4628      	mov	r0, r5
    7fc2:	d8dc      	bhi.n	7f7e <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    7fc4:	2000      	movs	r0, #0
}
    7fc6:	b002      	add	sp, #8
    7fc8:	bd70      	pop	{r4, r5, r6, pc}
    7fca:	bf00      	nop

00007fcc <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7fd0:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7fd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7fd4:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    7fd6:	2800      	cmp	r0, #0
    7fd8:	da1b      	bge.n	8012 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    7fda:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    7fdc:	2a0c      	cmp	r2, #12
    7fde:	d11b      	bne.n	8018 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7fe0:	69f7      	ldr	r7, [r6, #28]
    7fe2:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    7fe4:	2b02      	cmp	r3, #2
    7fe6:	f240 80cd 	bls.w	8184 <FatPartition::freeClusterCount()+0x1b8>
    7fea:	2402      	movs	r4, #2
    uint32_t free = 0;
    7fec:	2500      	movs	r5, #0
    7fee:	4621      	mov	r1, r4
    7ff0:	aa02      	add	r2, sp, #8
    7ff2:	4630      	mov	r0, r6
    7ff4:	f7ff fe4a 	bl	7c8c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    7ff8:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    7ffa:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    7ffe:	db06      	blt.n	800e <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    8000:	d157      	bne.n	80b2 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    8002:	42a7      	cmp	r7, r4
    8004:	461c      	mov	r4, r3
    8006:	d05c      	beq.n	80c2 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    8008:	69f2      	ldr	r2, [r6, #28]
    800a:	4293      	cmp	r3, r2
    800c:	d9ef      	bls.n	7fee <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    800e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    8012:	b004      	add	sp, #16
    8014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    8018:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    801a:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    801c:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    8020:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    8022:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    8024:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    8026:	e9cd 1002 	strd	r1, r0, [sp, #8]
    802a:	f100 8085 	bmi.w	8138 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    802e:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    8030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (fatType() == FAT_TYPE_FAT32) {
    8034:	2a20      	cmp	r2, #32
    return m_buffer;
    8036:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    803a:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    803e:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    8042:	d042      	beq.n	80ca <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    8044:	f8d6 8000 	ldr.w	r8, [r6]
    8048:	4b4f      	ldr	r3, [pc, #316]	; (8188 <FatPartition::freeClusterCount()+0x1bc>)
    804a:	f8d8 2000 	ldr.w	r2, [r8]
    804e:	f8d6 a018 	ldr.w	sl, [r6, #24]
    8052:	6995      	ldr	r5, [r2, #24]
    8054:	429d      	cmp	r5, r3
    8056:	d178      	bne.n	814a <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    8058:	2c00      	cmp	r4, #0
    805a:	f000 8082 	beq.w	8162 <FatPartition::freeClusterCount()+0x196>
    805e:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    8062:	6913      	ldr	r3, [r2, #16]
    8064:	4651      	mov	r1, sl
    8066:	463a      	mov	r2, r7
    8068:	4640      	mov	r0, r8
    806a:	4798      	blx	r3
    806c:	2800      	cmp	r0, #0
    806e:	d0ce      	beq.n	800e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    8070:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    8072:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8076:	468e      	mov	lr, r1
    8078:	bf28      	it	cs
    807a:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    807e:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    8082:	45bc      	cmp	ip, r7
    8084:	d90b      	bls.n	809e <FatPartition::freeClusterCount()+0xd2>
    8086:	9d03      	ldr	r5, [sp, #12]
    8088:	463b      	mov	r3, r7
    808a:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    808c:	f833 4b02 	ldrh.w	r4, [r3], #2
    8090:	b90c      	cbnz	r4, 8096 <FatPartition::freeClusterCount()+0xca>
    8092:	3501      	adds	r5, #1
    8094:	4602      	mov	r2, r0
  while (p < e) {
    8096:	459c      	cmp	ip, r3
    8098:	d8f8      	bhi.n	808c <FatPartition::freeClusterCount()+0xc0>
    809a:	b102      	cbz	r2, 809e <FatPartition::freeClusterCount()+0xd2>
    809c:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    809e:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    80a2:	eba1 010e 	sub.w	r1, r1, lr
    80a6:	45d1      	cmp	r9, sl
    80a8:	9102      	str	r1, [sp, #8]
    80aa:	d05a      	beq.n	8162 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    80ac:	f8d8 2000 	ldr.w	r2, [r8]
    80b0:	e7d7      	b.n	8062 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    80b2:	9a02      	ldr	r2, [sp, #8]
    80b4:	2a00      	cmp	r2, #0
    80b6:	d1a4      	bne.n	8002 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    80b8:	42a7      	cmp	r7, r4
        free++;
    80ba:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    80be:	461c      	mov	r4, r3
    80c0:	d1a2      	bne.n	8008 <FatPartition::freeClusterCount()+0x3c>
    return free;
    80c2:	4628      	mov	r0, r5
}
    80c4:	b004      	add	sp, #16
    80c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    80ca:	f8d6 a000 	ldr.w	sl, [r6]
    80ce:	4b2e      	ldr	r3, [pc, #184]	; (8188 <FatPartition::freeClusterCount()+0x1bc>)
    80d0:	f8da 2000 	ldr.w	r2, [sl]
    80d4:	f8d6 9018 	ldr.w	r9, [r6, #24]
    80d8:	6995      	ldr	r5, [r2, #24]
    80da:	429d      	cmp	r5, r3
    80dc:	d146      	bne.n	816c <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    80de:	2c00      	cmp	r4, #0
    80e0:	d03f      	beq.n	8162 <FatPartition::freeClusterCount()+0x196>
    80e2:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    80e6:	6913      	ldr	r3, [r2, #16]
    80e8:	4649      	mov	r1, r9
    80ea:	463a      	mov	r2, r7
    80ec:	4650      	mov	r0, sl
    80ee:	4798      	blx	r3
    80f0:	2800      	cmp	r0, #0
    80f2:	d08c      	beq.n	800e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    80f4:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    80f8:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    80fc:	46e6      	mov	lr, ip
    80fe:	bf28      	it	cs
    8100:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    8104:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    8108:	42ba      	cmp	r2, r7
    810a:	d90b      	bls.n	8124 <FatPartition::freeClusterCount()+0x158>
    810c:	9d03      	ldr	r5, [sp, #12]
    810e:	463b      	mov	r3, r7
    8110:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    8112:	f853 4b04 	ldr.w	r4, [r3], #4
    8116:	b90c      	cbnz	r4, 811c <FatPartition::freeClusterCount()+0x150>
    8118:	3501      	adds	r5, #1
    811a:	4601      	mov	r1, r0
  while (p < e) {
    811c:	429a      	cmp	r2, r3
    811e:	d8f8      	bhi.n	8112 <FatPartition::freeClusterCount()+0x146>
    8120:	b101      	cbz	r1, 8124 <FatPartition::freeClusterCount()+0x158>
    8122:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    8124:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    8128:	ebac 030e 	sub.w	r3, ip, lr
    812c:	45c8      	cmp	r8, r9
    812e:	9302      	str	r3, [sp, #8]
    8130:	d017      	beq.n	8162 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    8132:	f8da 2000 	ldr.w	r2, [sl]
    8136:	e7d6      	b.n	80e6 <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    8138:	f506 700e 	add.w	r0, r6, #568	; 0x238
    813c:	f002 fb80 	bl	a840 <FsCache::sync()>
    8140:	2800      	cmp	r0, #0
    8142:	f43f af64 	beq.w	800e <FatPartition::freeClusterCount()+0x42>
    8146:	79f2      	ldrb	r2, [r6, #7]
    8148:	e771      	b.n	802e <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    814a:	4623      	mov	r3, r4
    814c:	ac02      	add	r4, sp, #8
    814e:	463a      	mov	r2, r7
    8150:	4651      	mov	r1, sl
    8152:	9401      	str	r4, [sp, #4]
    8154:	4640      	mov	r0, r8
    8156:	4c0d      	ldr	r4, [pc, #52]	; (818c <FatPartition::freeClusterCount()+0x1c0>)
    8158:	9400      	str	r4, [sp, #0]
    815a:	47a8      	blx	r5
    815c:	2800      	cmp	r0, #0
    815e:	f43f af56 	beq.w	800e <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    8162:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    8164:	6270      	str	r0, [r6, #36]	; 0x24
}
    8166:	b004      	add	sp, #16
    8168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    816c:	4623      	mov	r3, r4
    816e:	ac02      	add	r4, sp, #8
    8170:	463a      	mov	r2, r7
    8172:	4649      	mov	r1, r9
    8174:	9401      	str	r4, [sp, #4]
    8176:	4650      	mov	r0, sl
    8178:	4c05      	ldr	r4, [pc, #20]	; (8190 <FatPartition::freeClusterCount()+0x1c4>)
    817a:	9400      	str	r4, [sp, #0]
    817c:	47a8      	blx	r5
    817e:	2800      	cmp	r0, #0
    8180:	d1ef      	bne.n	8162 <FatPartition::freeClusterCount()+0x196>
    8182:	e744      	b.n	800e <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    8184:	2000      	movs	r0, #0
    8186:	e744      	b.n	8012 <FatPartition::freeClusterCount()+0x46>
    8188:	00007be1 	.word	0x00007be1
    818c:	00007c25 	.word	0x00007c25
    8190:	00007c59 	.word	0x00007c59

00008194 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8194:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    8196:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8198:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    819a:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    819c:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    819e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  m_cache.init(dev);
    81a2:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    81a6:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    81a8:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    81aa:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    81ac:	62e1      	str	r1, [r4, #44]	; 0x2c
    81ae:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    81b2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    81b6:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    81ba:	6362      	str	r2, [r4, #52]	; 0x34
    81bc:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    81c0:	b1cd      	cbz	r5, 81f6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    81c2:	2d04      	cmp	r5, #4
    81c4:	d901      	bls.n	81ca <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    81c6:	2000      	movs	r0, #0
}
    81c8:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    81ca:	461a      	mov	r2, r3
    81cc:	4619      	mov	r1, r3
    81ce:	4630      	mov	r0, r6
    81d0:	f002 fb62 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    81d4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    81d8:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    81dc:	442b      	add	r3, r5
    81de:	011d      	lsls	r5, r3, #4
    81e0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    81e4:	2800      	cmp	r0, #0
    81e6:	d0ee      	beq.n	81c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    81e8:	7919      	ldrb	r1, [r3, #4]
    81ea:	2900      	cmp	r1, #0
    81ec:	d0eb      	beq.n	81c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    81ee:	5d52      	ldrb	r2, [r2, r5]
    81f0:	0652      	lsls	r2, r2, #25
    81f2:	d1e8      	bne.n	81c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    81f4:	689d      	ldr	r5, [r3, #8]
    81f6:	2200      	movs	r2, #0
    81f8:	4629      	mov	r1, r5
    81fa:	4630      	mov	r0, r6
    81fc:	f002 fb4c 	bl	a898 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    8200:	2800      	cmp	r0, #0
    8202:	d0e0      	beq.n	81c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    8204:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    8208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    820c:	d1db      	bne.n	81c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    820e:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    8210:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    8212:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    8214:	2a01      	cmp	r2, #1
    8216:	d8d6      	bhi.n	81c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    8218:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    821a:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    821c:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    821e:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    8220:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    8222:	f04f 0300 	mov.w	r3, #0
    8226:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8228:	d044      	beq.n	82b4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    822a:	2201      	movs	r2, #1
    822c:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    822e:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8230:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    8232:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8234:	4291      	cmp	r1, r2
    8236:	d004      	beq.n	8242 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    8238:	2b08      	cmp	r3, #8
    823a:	d1f7      	bne.n	822c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    823c:	2000      	movs	r0, #0
    823e:	71a3      	strb	r3, [r4, #6]
}
    8240:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    8242:	461e      	mov	r6, r3
    8244:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    8246:	8ac1      	ldrh	r1, [r0, #22]
    8248:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    824a:	b909      	cbnz	r1, 8250 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    824c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    824e:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8250:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    8252:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    8256:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    8258:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    825a:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    825c:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    825e:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    8262:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    8266:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    826a:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    826e:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    8270:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    8274:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    8276:	b902      	cbnz	r2, 827a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    8278:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    827a:	1aed      	subs	r5, r5, r3
    827c:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    827e:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    8280:	1c5a      	adds	r2, r3, #1
    8282:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    8284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8288:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    828a:	f640 72f4 	movw	r2, #4084	; 0xff4
    828e:	4293      	cmp	r3, r2
    8290:	d90c      	bls.n	82ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    8292:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    8296:	4293      	cmp	r3, r2
    8298:	d90a      	bls.n	82b0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    829a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    829c:	2320      	movs	r3, #32
    829e:	6222      	str	r2, [r4, #32]
  return true;
    82a0:	2001      	movs	r0, #1
    m_fatType = 12;
    82a2:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    82a4:	6321      	str	r1, [r4, #48]	; 0x30
    82a6:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    82aa:	bd70      	pop	{r4, r5, r6, pc}
    82ac:	230c      	movs	r3, #12
    82ae:	e7f7      	b.n	82a0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    82b0:	2310      	movs	r3, #16
    82b2:	e7f5      	b.n	82a0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    82b4:	461e      	mov	r6, r3
    82b6:	e7c6      	b.n	8246 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

000082b8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    82b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82ba:	2600      	movs	r6, #0
  if (from.m_fFile) {
    82bc:	6b8f      	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    82be:	460d      	mov	r5, r1
    82c0:	4604      	mov	r4, r0
    82c2:	e9c0 660e 	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    82c6:	b19f      	cbz	r7, 82f0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    82c8:	4601      	mov	r1, r0
    82ca:	2024      	movs	r0, #36	; 0x24
    82cc:	f000 f8dc 	bl	8488 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    82d0:	8006      	strh	r6, [r0, #0]
    82d2:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    82d4:	4684      	mov	ip, r0
    82d6:	6bad      	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    82d8:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    82da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    82dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    82e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    82e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    82e6:	682b      	ldr	r3, [r5, #0]
    82e8:	f8cc 3000 	str.w	r3, [ip]
}
    82ec:	4620      	mov	r0, r4
    82ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    82f0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    82f2:	2b00      	cmp	r3, #0
    82f4:	d0fa      	beq.n	82ec <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    82f6:	4601      	mov	r1, r0
    82f8:	2038      	movs	r0, #56	; 0x38
    82fa:	f000 f8c5 	bl	8488 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    82fe:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    8302:	8647      	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    8304:	4602      	mov	r2, r0
    8306:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    8308:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    830a:	f103 0730 	add.w	r7, r3, #48	; 0x30
    830e:	681e      	ldr	r6, [r3, #0]
    8310:	3310      	adds	r3, #16
    8312:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    8316:	3210      	adds	r2, #16
    8318:	f853 0c08 	ldr.w	r0, [r3, #-8]
    831c:	f853 1c04 	ldr.w	r1, [r3, #-4]
    8320:	42bb      	cmp	r3, r7
    8322:	f842 6c10 	str.w	r6, [r2, #-16]
    8326:	f842 5c0c 	str.w	r5, [r2, #-12]
    832a:	f842 0c08 	str.w	r0, [r2, #-8]
    832e:	f842 1c04 	str.w	r1, [r2, #-4]
    8332:	d1ec      	bne.n	830e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    8334:	681b      	ldr	r3, [r3, #0]
}
    8336:	4620      	mov	r0, r4
    *m_xFile = *from.m_xFile;
    8338:	6013      	str	r3, [r2, #0]
}
    833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000833c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    833c:	b510      	push	{r4, lr}
    833e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8340:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8342:	b110      	cbz	r0, 834a <FsBaseFile::close()+0xe>
    8344:	f7fd fce2 	bl	5d0c <FatFile::close()>
    8348:	b930      	cbnz	r0, 8358 <FsBaseFile::close()+0x1c>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    834a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    834c:	b110      	cbz	r0, 8354 <FsBaseFile::close()+0x18>
    834e:	f7fb fbcf 	bl	3af0 <ExFatFile::close()>
    8352:	b920      	cbnz	r0, 835e <FsBaseFile::close()+0x22>
    m_xFile = nullptr;
    return true;
  }
  return false;
    8354:	2000      	movs	r0, #0
}
    8356:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    8358:	2300      	movs	r3, #0
    835a:	63a3      	str	r3, [r4, #56]	; 0x38
}
    835c:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    835e:	2300      	movs	r3, #0
    8360:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    8362:	bd10      	pop	{r4, pc}

00008364 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    8364:	2900      	cmp	r1, #0
    8366:	d052      	beq.n	840e <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    8368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    836c:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    836e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8370:	460d      	mov	r5, r1
    8372:	4617      	mov	r7, r2
    8374:	461e      	mov	r6, r3
    8376:	b110      	cbz	r0, 837e <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    8378:	f7fd fcc8 	bl	5d0c <FatFile::close()>
    837c:	bba0      	cbnz	r0, 83e8 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    837e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    8380:	b110      	cbz	r0, 8388 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    8382:	f7fb fbb5 	bl	3af0 <ExFatFile::close()>
    8386:	bbb8      	cbnz	r0, 83f8 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    8388:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    838c:	f1b8 0f00 	cmp.w	r8, #0
    8390:	d011      	beq.n	83b6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    8392:	4621      	mov	r1, r4
    8394:	2024      	movs	r0, #36	; 0x24
    8396:	f000 f877 	bl	8488 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    839a:	4633      	mov	r3, r6
    839c:	2600      	movs	r6, #0
    839e:	463a      	mov	r2, r7
    83a0:	8006      	strh	r6, [r0, #0]
    83a2:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    83a4:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    83a6:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    83aa:	f7fd feb7 	bl	611c <FatFile::open(FatVolume*, char const*, int)>
    83ae:	bb58      	cbnz	r0, 8408 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    83b0:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    83b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    83b6:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    83ba:	b193      	cbz	r3, 83e2 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    83bc:	4621      	mov	r1, r4
    83be:	2038      	movs	r0, #56	; 0x38
    83c0:	f000 f862 	bl	8488 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    83c4:	4633      	mov	r3, r6
    83c6:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    83ca:	463a      	mov	r2, r7
    83cc:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    83d0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    83d2:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    83d6:	f7fb ffbf 	bl	4358 <ExFatFile::open(ExFatVolume*, char const*, int)>
    83da:	b9a8      	cbnz	r0, 8408 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    83dc:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    83de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    83e2:	2000      	movs	r0, #0
}
    83e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    83e8:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    83ea:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    83ee:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    83f0:	f1b8 0f00 	cmp.w	r8, #0
    83f4:	d1cd      	bne.n	8392 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    83f6:	e7de      	b.n	83b6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    83f8:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    83fa:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    83fe:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    8400:	f1b8 0f00 	cmp.w	r8, #0
    8404:	d1c5      	bne.n	8392 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    8406:	e7d6      	b.n	83b6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    8408:	2001      	movs	r0, #1
}
    840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    840e:	2000      	movs	r0, #0
}
    8410:	4770      	bx	lr
    8412:	bf00      	nop

00008414 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8416:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8418:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    841a:	460d      	mov	r5, r1
    841c:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    841e:	b110      	cbz	r0, 8426 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    8420:	f7fd fc74 	bl	5d0c <FatFile::close()>
    8424:	bb38      	cbnz	r0, 8476 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    8426:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    8428:	b110      	cbz	r0, 8430 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    842a:	f7fb fb61 	bl	3af0 <ExFatFile::close()>
    842e:	bb38      	cbnz	r0, 8480 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    8430:	6bae      	ldr	r6, [r5, #56]	; 0x38
    8432:	b176      	cbz	r6, 8452 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    8434:	4621      	mov	r1, r4
    8436:	2024      	movs	r0, #36	; 0x24
    8438:	f000 f826 	bl	8488 <operator new(unsigned int, unsigned long*)>
    843c:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    843e:	463a      	mov	r2, r7
    8440:	8001      	strh	r1, [r0, #0]
    8442:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8444:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8446:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8448:	f7fe f9ce 	bl	67e8 <FatFile::openNext(FatFile*, int)>
    844c:	b988      	cbnz	r0, 8472 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    844e:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    8452:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    8454:	2800      	cmp	r0, #0
    8456:	d0fb      	beq.n	8450 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    8458:	4621      	mov	r1, r4
    845a:	2038      	movs	r0, #56	; 0x38
    845c:	f000 f814 	bl	8488 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8460:	463a      	mov	r2, r7
    8462:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    8466:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    8468:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    846a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    846c:	f7fb ff7c 	bl	4368 <ExFatFile::openNext(ExFatFile*, int)>
    8470:	b120      	cbz	r0, 847c <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    8472:	2001      	movs	r0, #1
}
    8474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    8476:	2300      	movs	r3, #0
    8478:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    847a:	e7d9      	b.n	8430 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    847c:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    847e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    8480:	2300      	movs	r3, #0
    8482:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    8484:	e7d4      	b.n	8430 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    8486:	bf00      	nop

00008488 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8488:	4608      	mov	r0, r1
    848a:	4770      	bx	lr

0000848c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    848c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8490:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8492:	4604      	mov	r4, r0
    8494:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    8496:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    849a:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    849e:	4601      	mov	r1, r0
    84a0:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    84a4:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    84a6:	f7ff ffef 	bl	8488 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    84aa:	4642      	mov	r2, r8
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    84ac:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    84b0:	4605      	mov	r5, r0
    84b2:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    84b6:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    84ba:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    84be:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    84c2:	f7fd fae7 	bl	5a94 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    84c6:	bba0      	cbnz	r0, 8532 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    84c8:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    84ca:	4621      	mov	r1, r4
    84cc:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    84d0:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    84d4:	f7ff ffd8 	bl	8488 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    84d8:	2302      	movs	r3, #2
    84da:	71c6      	strb	r6, [r0, #7]
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    84dc:	4642      	mov	r2, r8
    84de:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    84e2:	4605      	mov	r5, r0
    84e4:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    84e8:	7203      	strb	r3, [r0, #8]
    84ea:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    84ee:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    84f2:	f7ff fe4f 	bl	8194 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    84f6:	b938      	cbnz	r0, 8508 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    84f8:	2300      	movs	r3, #0
    84fa:	4a1a      	ldr	r2, [pc, #104]	; (8564 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    84fc:	4618      	mov	r0, r3
  m_cwv = nullptr;
    84fe:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    8500:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    8504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8508:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    850c:	4630      	mov	r0, r6
    850e:	f7fd fbfd 	bl	5d0c <FatFile::close()>
    return m_vwd.openRoot(this);
    8512:	4629      	mov	r1, r5
    8514:	4630      	mov	r0, r6
    8516:	f7fd fe37 	bl	6188 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    851a:	2800      	cmp	r0, #0
    851c:	d0ec      	beq.n	84f8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    851e:	4b12      	ldr	r3, [pc, #72]	; (8568 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    8520:	681a      	ldr	r2, [r3, #0]
    8522:	b9aa      	cbnz	r2, 8550 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    8524:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    8526:	4b0f      	ldr	r3, [pc, #60]	; (8564 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    8528:	b1af      	cbz	r7, 8556 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    852a:	2001      	movs	r0, #1
    m_cwv = this;
    852c:	601c      	str	r4, [r3, #0]
}
    852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8532:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    8536:	4630      	mov	r0, r6
    8538:	f7fb fada 	bl	3af0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    853c:	4629      	mov	r1, r5
    853e:	4630      	mov	r0, r6
    8540:	f7fb fb04 	bl	3b4c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    8544:	2800      	cmp	r0, #0
    8546:	d0bf      	beq.n	84c8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    8548:	4b08      	ldr	r3, [pc, #32]	; (856c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    854a:	681a      	ldr	r2, [r3, #0]
    854c:	2a00      	cmp	r2, #0
    854e:	d0e9      	beq.n	8524 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    8550:	4b04      	ldr	r3, [pc, #16]	; (8564 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    8552:	2f00      	cmp	r7, #0
    8554:	d1e9      	bne.n	852a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    8556:	681a      	ldr	r2, [r3, #0]
    8558:	2a00      	cmp	r2, #0
    855a:	d0e6      	beq.n	852a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    855c:	2001      	movs	r0, #1
}
    855e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8562:	bf00      	nop
    8564:	200048dc 	.word	0x200048dc
    8568:	200048e0 	.word	0x200048e0
    856c:	200047c4 	.word	0x200047c4

00008570 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8570:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    8572:	2500      	movs	r5, #0
    8574:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    8578:	4604      	mov	r4, r0
    857a:	6045      	str	r5, [r0, #4]
    857c:	7305      	strb	r5, [r0, #12]
    857e:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    8580:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8584:	4d03      	ldr	r5, [pc, #12]	; (8594 <FsVolume::open(char const*, int)+0x24>)
    8586:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    858a:	f7ff feeb 	bl	8364 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    858e:	4620      	mov	r0, r4
    8590:	bd70      	pop	{r4, r5, r6, pc}
    8592:	bf00      	nop
    8594:	200021e0 	.word	0x200021e0

00008598 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    8598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    859c:	4770      	bx	lr
    859e:	bf00      	nop

000085a0 <SharedSpiCard::errorCode() const>:
  }
    85a0:	7c40      	ldrb	r0, [r0, #17]
    85a2:	4770      	bx	lr

000085a4 <SharedSpiCard::errorData() const>:
  }
    85a4:	7d00      	ldrb	r0, [r0, #20]
    85a6:	4770      	bx	lr

000085a8 <SharedSpiCard::type() const>:
  }
    85a8:	7d40      	ldrb	r0, [r0, #21]
    85aa:	4770      	bx	lr

000085ac <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    85ac:	2001      	movs	r0, #1
    85ae:	4770      	bx	lr

000085b0 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    85b0:	7f00      	ldrb	r0, [r0, #28]
    85b2:	4770      	bx	lr

000085b4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    85b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85b8:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    85ba:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    85bc:	4605      	mov	r5, r0
    85be:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    85c0:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    85c2:	4691      	mov	r9, r2
    85c4:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    85c6:	d028      	beq.n	861a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    85c8:	682b      	ldr	r3, [r5, #0]
    85ca:	4621      	mov	r1, r4
    85cc:	4628      	mov	r0, r5
    85ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    85d0:	4798      	blx	r3
    85d2:	b198      	cbz	r0, 85fc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    85d4:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    85d6:	f1b9 0f00 	cmp.w	r9, #0
    85da:	d012      	beq.n	8602 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    85dc:	eb04 0809 	add.w	r8, r4, r9
    85e0:	e001      	b.n	85e6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    85e2:	45a0      	cmp	r8, r4
    85e4:	d00d      	beq.n	8602 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    85e6:	4639      	mov	r1, r7
    85e8:	4620      	mov	r0, r4
    85ea:	47b0      	blx	r6
    if (!writeData(src)) {
    85ec:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    85ee:	4601      	mov	r1, r0
    if (!writeData(src)) {
    85f0:	4628      	mov	r0, r5
    85f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    85f4:	3401      	adds	r4, #1
    if (!writeData(src)) {
    85f6:	4798      	blx	r3
    85f8:	2800      	cmp	r0, #0
    85fa:	d1f2      	bne.n	85e2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    85fc:	2000      	movs	r0, #0
}
    85fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    8602:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    8604:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    8606:	444b      	add	r3, r9
    8608:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    860a:	2800      	cmp	r0, #0
    860c:	d1f7      	bne.n	85fe <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    860e:	682b      	ldr	r3, [r5, #0]
    8610:	4628      	mov	r0, r5
    8612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    8614:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    8618:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    861a:	6983      	ldr	r3, [r0, #24]
    861c:	428b      	cmp	r3, r1
    861e:	d1d3      	bne.n	85c8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    8620:	e7d9      	b.n	85d6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    8622:	bf00      	nop

00008624 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8624:	4770      	bx	lr
    8626:	bf00      	nop

00008628 <SharedSpiCard::end()>:
    m_spiDriver.end();
    8628:	3004      	adds	r0, #4
    862a:	f002 b8b5 	b.w	a798 <SdSpiArduinoDriver::end()>
    862e:	bf00      	nop

00008630 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8630:	b510      	push	{r4, lr}
    8632:	4604      	mov	r4, r0
    8634:	2120      	movs	r1, #32
    8636:	f003 fccf 	bl	bfd8 <operator delete(void*, unsigned int)>
    863a:	4620      	mov	r0, r4
    863c:	bd10      	pop	{r4, pc}
    863e:	bf00      	nop

00008640 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    8640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8644:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8646:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8648:	4605      	mov	r5, r0
    864a:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    864c:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    864e:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8650:	d024      	beq.n	869c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    8652:	682b      	ldr	r3, [r5, #0]
    8654:	4631      	mov	r1, r6
    8656:	4628      	mov	r0, r5
    8658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    865a:	4798      	blx	r3
    865c:	b178      	cbz	r0, 867e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    865e:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    8660:	b187      	cbz	r7, 8684 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    8662:	2600      	movs	r6, #0
    8664:	e001      	b.n	866a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8666:	42b7      	cmp	r7, r6
    8668:	d00c      	beq.n	8684 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    866a:	682a      	ldr	r2, [r5, #0]
    866c:	4621      	mov	r1, r4
    866e:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    8670:	3601      	adds	r6, #1
    if (!writeData(src)) {
    8672:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    8674:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    8678:	4790      	blx	r2
    867a:	2800      	cmp	r0, #0
    867c:	d1f3      	bne.n	8666 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    867e:	2000      	movs	r0, #0
}
    8680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    8684:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    8686:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    8688:	443b      	add	r3, r7
    868a:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    868c:	2800      	cmp	r0, #0
    868e:	d1f7      	bne.n	8680 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    8690:	682b      	ldr	r3, [r5, #0]
    8692:	4628      	mov	r0, r5
    8694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    8696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    869a:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    869c:	6983      	ldr	r3, [r0, #24]
    869e:	428b      	cmp	r3, r1
    86a0:	d1d7      	bne.n	8652 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    86a2:	e7dd      	b.n	8660 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

000086a4 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    86a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86a8:	4e20      	ldr	r6, [pc, #128]	; (872c <SharedSpiCard::writeStop()+0x88>)
    86aa:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    86ac:	f100 0804 	add.w	r8, r0, #4
    86b0:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    86b2:	f505 7516 	add.w	r5, r5, #600	; 0x258
    86b6:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    86b8:	e003      	b.n	86c2 <SharedSpiCard::writeStop()+0x1e>
    86ba:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    86bc:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    86be:	041b      	lsls	r3, r3, #16
    86c0:	d410      	bmi.n	86e4 <SharedSpiCard::writeStop()+0x40>
    86c2:	4640      	mov	r0, r8
    86c4:	f002 f86c 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    86c8:	28ff      	cmp	r0, #255	; 0xff
    86ca:	4604      	mov	r4, r0
    86cc:	d1f5      	bne.n	86ba <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    86ce:	21fd      	movs	r1, #253	; 0xfd
    86d0:	4640      	mov	r0, r8
    86d2:	f002 f883 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    86d6:	7cbb      	ldrb	r3, [r7, #18]
    86d8:	b9cb      	cbnz	r3, 870e <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    86da:	2300      	movs	r3, #0
    86dc:	2001      	movs	r0, #1
    86de:	74fb      	strb	r3, [r7, #19]
}
    86e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    86e4:	231e      	movs	r3, #30
  if (m_spiActive) {
    86e6:	7cb8      	ldrb	r0, [r7, #18]
    86e8:	747b      	strb	r3, [r7, #17]
    86ea:	2800      	cmp	r0, #0
    86ec:	d0f8      	beq.n	86e0 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    86ee:	7c38      	ldrb	r0, [r7, #16]
    86f0:	2101      	movs	r1, #1
    86f2:	f002 f809 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86f6:	21ff      	movs	r1, #255	; 0xff
    86f8:	4640      	mov	r0, r8
    86fa:	f002 f86f 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    86fe:	4640      	mov	r0, r8
    8700:	f002 f822 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8704:	2300      	movs	r3, #0
  return false;
    8706:	4618      	mov	r0, r3
    m_spiActive = false;
    8708:	74bb      	strb	r3, [r7, #18]
}
    870a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    870e:	2101      	movs	r1, #1
    8710:	7c38      	ldrb	r0, [r7, #16]
    8712:	f001 fff9 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8716:	4621      	mov	r1, r4
    8718:	4640      	mov	r0, r8
    871a:	f002 f85f 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    871e:	4640      	mov	r0, r8
    8720:	f002 f812 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8724:	2300      	movs	r3, #0
    8726:	74bb      	strb	r3, [r7, #18]
}
    8728:	e7d7      	b.n	86da <SharedSpiCard::writeStop()+0x36>
    872a:	bf00      	nop
    872c:	200086a8 	.word	0x200086a8

00008730 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    8730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    8734:	7cc3      	ldrb	r3, [r0, #19]
    8736:	2b01      	cmp	r3, #1
    8738:	d035      	beq.n	87a6 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    873a:	7c86      	ldrb	r6, [r0, #18]
    873c:	4604      	mov	r4, r0
    873e:	b14e      	cbz	r6, 8754 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    8740:	3004      	adds	r0, #4
    8742:	f002 f82d 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    8746:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    874a:	bf18      	it	ne
    874c:	2501      	movne	r5, #1
}
    874e:	4628      	mov	r0, r5
    8750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    8754:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    8756:	f04f 0801 	mov.w	r8, #1
    875a:	4638      	mov	r0, r7
    875c:	f001 ffd6 	bl	a70c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8760:	4631      	mov	r1, r6
    8762:	7c20      	ldrb	r0, [r4, #16]
    8764:	f001 ffd0 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8768:	21ff      	movs	r1, #255	; 0xff
    876a:	4638      	mov	r0, r7
    876c:	f002 f836 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8770:	4638      	mov	r0, r7
    8772:	f884 8012 	strb.w	r8, [r4, #18]
    8776:	f002 f813 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    877a:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    877c:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    8780:	bf18      	it	ne
    8782:	2501      	movne	r5, #1
  if (m_spiActive) {
    8784:	2b00      	cmp	r3, #0
    8786:	d0e2      	beq.n	874e <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    8788:	4641      	mov	r1, r8
    878a:	7c20      	ldrb	r0, [r4, #16]
    878c:	f001 ffbc 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8790:	21ff      	movs	r1, #255	; 0xff
    8792:	4638      	mov	r0, r7
    8794:	f002 f822 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8798:	4638      	mov	r0, r7
    879a:	f001 ffd5 	bl	a748 <SdSpiArduinoDriver::deactivate()>
}
    879e:	4628      	mov	r0, r5
    m_spiActive = false;
    87a0:	74a6      	strb	r6, [r4, #18]
}
    87a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    87a6:	2500      	movs	r5, #0
}
    87a8:	4628      	mov	r0, r5
    87aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87ae:	bf00      	nop

000087b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    87b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    87b4:	4f20      	ldr	r7, [pc, #128]	; (8838 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    87b6:	4604      	mov	r4, r0
    87b8:	4688      	mov	r8, r1
    87ba:	4691      	mov	r9, r2
    87bc:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    87be:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    87c0:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    87c4:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    87c6:	e003      	b.n	87d0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    87c8:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    87ca:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    87cc:	041b      	lsls	r3, r3, #16
    87ce:	d40d      	bmi.n	87ec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    87d0:	4630      	mov	r0, r6
    87d2:	f001 ffe5 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    87d6:	28ff      	cmp	r0, #255	; 0xff
    87d8:	7520      	strb	r0, [r4, #20]
    87da:	d0f5      	beq.n	87c8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    87dc:	28fe      	cmp	r0, #254	; 0xfe
    87de:	d01a      	beq.n	8816 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    87e0:	2318      	movs	r3, #24
  if (m_spiActive) {
    87e2:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    87e4:	7463      	strb	r3, [r4, #17]
    87e6:	b930      	cbnz	r0, 87f6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    87e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    87ec:	231d      	movs	r3, #29
  if (m_spiActive) {
    87ee:	7ca0      	ldrb	r0, [r4, #18]
    87f0:	7463      	strb	r3, [r4, #17]
    87f2:	2800      	cmp	r0, #0
    87f4:	d0f8      	beq.n	87e8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    87f6:	7c20      	ldrb	r0, [r4, #16]
    87f8:	2101      	movs	r1, #1
    87fa:	f001 ff85 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    87fe:	21ff      	movs	r1, #255	; 0xff
    8800:	4630      	mov	r0, r6
    8802:	f001 ffeb 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8806:	4630      	mov	r0, r6
    8808:	f001 ff9e 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    880c:	2300      	movs	r3, #0
  return false;
    880e:	4618      	mov	r0, r3
    m_spiActive = false;
    8810:	74a3      	strb	r3, [r4, #18]
}
    8812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    8816:	464a      	mov	r2, r9
    8818:	4641      	mov	r1, r8
    881a:	4630      	mov	r0, r6
    881c:	f001 ffcc 	bl	a7b8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8820:	7520      	strb	r0, [r4, #20]
    8822:	b938      	cbnz	r0, 8834 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    8824:	4630      	mov	r0, r6
    8826:	f001 ffbb 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    882a:	4630      	mov	r0, r6
    882c:	f001 ffb8 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  return true;
    8830:	2001      	movs	r0, #1
    8832:	e7d9      	b.n	87e8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    8834:	2325      	movs	r3, #37	; 0x25
    8836:	e7d4      	b.n	87e2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    8838:	200086a8 	.word	0x200086a8

0000883c <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    883c:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    883e:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    8840:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    8842:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    8844:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    8846:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    8848:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    884a:	f000 f85b 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    884e:	b9b0      	cbnz	r0, 887e <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    8850:	7ca6      	ldrb	r6, [r4, #18]
    8852:	b91e      	cbnz	r6, 885c <SharedSpiCard::readStop()+0x20>
  return true;
    8854:	2601      	movs	r6, #1
}
    8856:	4630      	mov	r0, r6
    8858:	b003      	add	sp, #12
    885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    885c:	4605      	mov	r5, r0
    885e:	2101      	movs	r1, #1
    8860:	7c20      	ldrb	r0, [r4, #16]
    8862:	f001 ff51 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8866:	1d20      	adds	r0, r4, #4
    8868:	21ff      	movs	r1, #255	; 0xff
    886a:	9001      	str	r0, [sp, #4]
    886c:	f001 ffb6 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8870:	9801      	ldr	r0, [sp, #4]
    8872:	f001 ff69 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    8876:	4630      	mov	r0, r6
    m_spiActive = false;
    8878:	74a5      	strb	r5, [r4, #18]
}
    887a:	b003      	add	sp, #12
    887c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    887e:	2309      	movs	r3, #9
  if (m_spiActive) {
    8880:	7ca6      	ldrb	r6, [r4, #18]
    8882:	7463      	strb	r3, [r4, #17]
    8884:	2e00      	cmp	r6, #0
    8886:	d0e6      	beq.n	8856 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    8888:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    888a:	7c20      	ldrb	r0, [r4, #16]
    888c:	2101      	movs	r1, #1
}
    888e:	463e      	mov	r6, r7
    8890:	f001 ff3a 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8894:	21ff      	movs	r1, #255	; 0xff
    8896:	4628      	mov	r0, r5
    8898:	f001 ffa0 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    889c:	4628      	mov	r0, r5
    889e:	f001 ff53 	bl	a748 <SdSpiArduinoDriver::deactivate()>
}
    88a2:	4630      	mov	r0, r6
    m_spiActive = false;
    88a4:	74a7      	strb	r7, [r4, #18]
}
    88a6:	b003      	add	sp, #12
    88a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88aa:	bf00      	nop

000088ac <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    88ac:	7cc2      	ldrb	r2, [r0, #19]
    88ae:	2a02      	cmp	r2, #2
    88b0:	d003      	beq.n	88ba <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    88b2:	2a01      	cmp	r2, #1
    88b4:	d004      	beq.n	88c0 <SharedSpiCard::syncDevice()+0x14>
}
    88b6:	2001      	movs	r0, #1
    88b8:	4770      	bx	lr
    return writeStop();
    88ba:	6803      	ldr	r3, [r0, #0]
    88bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    88be:	4718      	bx	r3
    return readStop();
    88c0:	f7ff bfbc 	b.w	883c <SharedSpiCard::readStop()>

000088c4 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    88c4:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    88c6:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    88c8:	460d      	mov	r5, r1
    88ca:	490d      	ldr	r1, [pc, #52]	; (8900 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    88cc:	4604      	mov	r4, r0
  if (!syncDevice()) {
    88ce:	6a1a      	ldr	r2, [r3, #32]
    88d0:	428a      	cmp	r2, r1
    88d2:	d10c      	bne.n	88ee <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    88d4:	7cc2      	ldrb	r2, [r0, #19]
    88d6:	2a02      	cmp	r2, #2
    88d8:	d004      	beq.n	88e4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    88da:	2a01      	cmp	r2, #1
    88dc:	d00b      	beq.n	88f6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    88de:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    88e0:	7725      	strb	r5, [r4, #28]
}
    88e2:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    88e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    88e6:	4798      	blx	r3
  if (!syncDevice()) {
    88e8:	2800      	cmp	r0, #0
    88ea:	d1f8      	bne.n	88de <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    88ec:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    88ee:	4790      	blx	r2
    88f0:	2800      	cmp	r0, #0
    88f2:	d0fb      	beq.n	88ec <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    88f4:	e7f3      	b.n	88de <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    88f6:	f7ff ffa1 	bl	883c <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    88fa:	2800      	cmp	r0, #0
    88fc:	d0f6      	beq.n	88ec <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    88fe:	e7ee      	b.n	88de <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    8900:	000088ad 	.word	0x000088ad

00008904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8908:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    890a:	b082      	sub	sp, #8
    890c:	460f      	mov	r7, r1
    890e:	4935      	ldr	r1, [pc, #212]	; (89e4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    8910:	9201      	str	r2, [sp, #4]
    8912:	4606      	mov	r6, r0
  if (!syncDevice()) {
    8914:	6a1a      	ldr	r2, [r3, #32]
    8916:	428a      	cmp	r2, r1
    8918:	d15e      	bne.n	89d8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    891a:	7cc2      	ldrb	r2, [r0, #19]
    891c:	2a02      	cmp	r2, #2
    891e:	d041      	beq.n	89a4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    8920:	2a01      	cmp	r2, #1
    8922:	d05b      	beq.n	89dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    8924:	7cb4      	ldrb	r4, [r6, #18]
    8926:	2c00      	cmp	r4, #0
    8928:	d047      	beq.n	89ba <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    892a:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    892c:	2f0c      	cmp	r7, #12
    892e:	d011      	beq.n	8954 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    8930:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 89e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    8934:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    8938:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    893c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    893e:	e004      	b.n	894a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    8940:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    8944:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8946:	041a      	lsls	r2, r3, #16
    8948:	d434      	bmi.n	89b4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    894a:	4628      	mov	r0, r5
    894c:	f001 ff28 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8950:	28ff      	cmp	r0, #255	; 0xff
    8952:	d1f5      	bne.n	8940 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    8954:	f10d 0804 	add.w	r8, sp, #4
    8958:	ac02      	add	r4, sp, #8
    895a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    895e:	4628      	mov	r0, r5
    8960:	f001 ff3c 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    8964:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    8968:	4628      	mov	r0, r5
    896a:	f001 ff37 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    896e:	45a0      	cmp	r8, r4
    8970:	d1f8      	bne.n	8964 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8972:	2f00      	cmp	r7, #0
    8974:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    8976:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    897a:	bf0c      	ite	eq
    897c:	2195      	moveq	r1, #149	; 0x95
    897e:	2187      	movne	r1, #135	; 0x87
    8980:	f001 ff2c 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8984:	4628      	mov	r0, r5
    8986:	f001 ff0b 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    898a:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    898c:	3c01      	subs	r4, #1
    898e:	f001 ff07 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    8992:	0603      	lsls	r3, r0, #24
    8994:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    8996:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    8998:	d501      	bpl.n	899e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    899a:	2c00      	cmp	r4, #0
    899c:	d1f5      	bne.n	898a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    899e:	b002      	add	sp, #8
    89a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    89a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    89a6:	4798      	blx	r3
  if (!syncDevice()) {
    89a8:	2800      	cmp	r0, #0
    89aa:	d1bb      	bne.n	8924 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    89ac:	20ff      	movs	r0, #255	; 0xff
}
    89ae:	b002      	add	sp, #8
    89b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    89b4:	2f00      	cmp	r7, #0
    89b6:	d0cd      	beq.n	8954 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    89b8:	e7f8      	b.n	89ac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    89ba:	1d35      	adds	r5, r6, #4
    89bc:	4628      	mov	r0, r5
    89be:	f001 fea5 	bl	a70c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    89c2:	4621      	mov	r1, r4
    89c4:	7c30      	ldrb	r0, [r6, #16]
    89c6:	f001 fe9f 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    89ca:	21ff      	movs	r1, #255	; 0xff
    89cc:	4628      	mov	r0, r5
    89ce:	f001 ff05 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    89d2:	2301      	movs	r3, #1
    89d4:	74b3      	strb	r3, [r6, #18]
}
    89d6:	e7a9      	b.n	892c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    89d8:	4790      	blx	r2
    89da:	e7e5      	b.n	89a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    89dc:	f7ff ff2e 	bl	883c <SharedSpiCard::readStop()>
    89e0:	e7e2      	b.n	89a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    89e2:	bf00      	nop
    89e4:	000088ad 	.word	0x000088ad
    89e8:	200086a8 	.word	0x200086a8

000089ec <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    89ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89f0:	b088      	sub	sp, #32
    89f2:	4605      	mov	r5, r0
  m_spiActive = false;
    89f4:	f04f 0800 	mov.w	r8, #0
    89f8:	4617      	mov	r7, r2
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    89fa:	ac01      	add	r4, sp, #4
    m_spiDriver.begin(spiConfig);
    89fc:	1d2e      	adds	r6, r5, #4
  m_spiActive = false;
    89fe:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    8a02:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    8a06:	f885 8015 	strb.w	r8, [r5, #21]
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    8a0a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    8a0e:	f89d 0004 	ldrb.w	r0, [sp, #4]
  m_csPin = spiConfig.csPin;
    8a12:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    8a14:	f001 fe74 	bl	a700 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    8a18:	2101      	movs	r1, #1
    8a1a:	7c28      	ldrb	r0, [r5, #16]
    8a1c:	f001 fe74 	bl	a708 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    8a20:	496c      	ldr	r1, [pc, #432]	; (8bd4 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>)
    8a22:	2307      	movs	r3, #7
    8a24:	e9c5 1302 	strd	r1, r3, [r5, #8]
  spiBegin(spiConfig);
    8a28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    8a2c:	ab05      	add	r3, sp, #20
    8a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    8a32:	4630      	mov	r0, r6
    8a34:	cb0e      	ldmia	r3, {r1, r2, r3}
    8a36:	f001 fe73 	bl	a720 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    8a3a:	7cac      	ldrb	r4, [r5, #18]
  m_state = IDLE_STATE;
    8a3c:	f885 8013 	strb.w	r8, [r5, #19]
  if (!m_spiActive) {
    8a40:	2c00      	cmp	r4, #0
    8a42:	d067      	beq.n	8b14 <SharedSpiCard::begin(SdSpiConfig)+0x128>
    sdCsWrite(m_csPin, true);
    8a44:	240a      	movs	r4, #10
    8a46:	2101      	movs	r1, #1
    8a48:	7c28      	ldrb	r0, [r5, #16]
    8a4a:	f001 fe5d 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8a4e:	21ff      	movs	r1, #255	; 0xff
    8a50:	4630      	mov	r0, r6
    8a52:	f001 fec3 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    8a56:	1e61      	subs	r1, r4, #1
    8a58:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    8a5c:	d1f7      	bne.n	8a4e <SharedSpiCard::begin(SdSpiConfig)+0x62>
    sdCsWrite(m_csPin, false);
    8a5e:	4621      	mov	r1, r4
    8a60:	240a      	movs	r4, #10
    8a62:	7c28      	ldrb	r0, [r5, #16]
    8a64:	f001 fe50 	bl	a708 <sdCsWrite(unsigned char, bool)>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    8a68:	2200      	movs	r2, #0
    8a6a:	4628      	mov	r0, r5
    8a6c:	4611      	mov	r1, r2
    8a6e:	f7ff ff49 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8a72:	2801      	cmp	r0, #1
    if (i == SD_CMD0_RETRY) {
    8a74:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    8a78:	4604      	mov	r4, r0
    8a7a:	d00a      	beq.n	8a92 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (i == SD_CMD0_RETRY) {
    8a7c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    8a80:	d1f2      	bne.n	8a68 <SharedSpiCard::begin(SdSpiConfig)+0x7c>
    8a82:	2301      	movs	r3, #1
  if (m_spiActive) {
    8a84:	7ca8      	ldrb	r0, [r5, #18]
    m_errorCode = code;
    8a86:	746b      	strb	r3, [r5, #17]
    8a88:	2800      	cmp	r0, #0
    8a8a:	d151      	bne.n	8b30 <SharedSpiCard::begin(SdSpiConfig)+0x144>
}
    8a8c:	b008      	add	sp, #32
    8a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    8a92:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    8a96:	2108      	movs	r1, #8
    8a98:	4628      	mov	r0, r5
    8a9a:	f7ff ff33 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8a9e:	0742      	lsls	r2, r0, #29
    8aa0:	d557      	bpl.n	8b52 <SharedSpiCard::begin(SdSpiConfig)+0x166>
    m_type = value;
    8aa2:	756c      	strb	r4, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    8aa4:	682b      	ldr	r3, [r5, #0]
    8aa6:	f8df a130 	ldr.w	sl, [pc, #304]	; 8bd8 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
    8aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    8aac:	4553      	cmp	r3, sl
    8aae:	d161      	bne.n	8b74 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    return m_type;
    8ab0:	7d68      	ldrb	r0, [r5, #21]
    8ab2:	f1a0 0402 	sub.w	r4, r0, #2
    8ab6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8bdc <SharedSpiCard::begin(SdSpiConfig)+0x1f0>
    8aba:	fab4 f484 	clz	r4, r4
    8abe:	f8d9 3000 	ldr.w	r3, [r9]
    8ac2:	0964      	lsrs	r4, r4, #5
    m_endTime = ms + millis16();
    8ac4:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    8ac8:	07a4      	lsls	r4, r4, #30
    m_endTime = ms + millis16();
    8aca:	fa1f f888 	uxth.w	r8, r8
  }
    8ace:	e005      	b.n	8adc <SharedSpiCard::begin(SdSpiConfig)+0xf0>
    8ad0:	f8d9 3000 	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
    8ad4:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    8ad8:	041b      	lsls	r3, r3, #16
    8ada:	d449      	bmi.n	8b70 <SharedSpiCard::begin(SdSpiConfig)+0x184>
    cardCommand(CMD55, 0);
    8adc:	2137      	movs	r1, #55	; 0x37
    8ade:	2200      	movs	r2, #0
    8ae0:	4628      	mov	r0, r5
    8ae2:	f7ff ff0f 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8ae6:	4622      	mov	r2, r4
    8ae8:	2129      	movs	r1, #41	; 0x29
    8aea:	4628      	mov	r0, r5
    8aec:	f7ff ff0a 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    8af0:	2800      	cmp	r0, #0
    8af2:	d1ed      	bne.n	8ad0 <SharedSpiCard::begin(SdSpiConfig)+0xe4>
  if (type() == SD_CARD_TYPE_SD2) {
    8af4:	682b      	ldr	r3, [r5, #0]
    8af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    8af8:	4553      	cmp	r3, sl
    8afa:	d165      	bne.n	8bc8 <SharedSpiCard::begin(SdSpiConfig)+0x1dc>
    return m_type;
    8afc:	7d68      	ldrb	r0, [r5, #21]
    8afe:	2802      	cmp	r0, #2
    8b00:	d049      	beq.n	8b96 <SharedSpiCard::begin(SdSpiConfig)+0x1aa>
  if (m_spiActive) {
    8b02:	7cab      	ldrb	r3, [r5, #18]
    8b04:	bbcb      	cbnz	r3, 8b7a <SharedSpiCard::begin(SdSpiConfig)+0x18e>
    8b06:	2307      	movs	r3, #7
  return true;
    8b08:	2001      	movs	r0, #1
    8b0a:	e9c5 7302 	strd	r7, r3, [r5, #8]
}
    8b0e:	b008      	add	sp, #32
    8b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_spiDriver.activate();
    8b14:	4630      	mov	r0, r6
    8b16:	f001 fdf9 	bl	a70c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8b1a:	4621      	mov	r1, r4
    8b1c:	7c28      	ldrb	r0, [r5, #16]
    8b1e:	f001 fdf3 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8b22:	21ff      	movs	r1, #255	; 0xff
    8b24:	4630      	mov	r0, r6
    8b26:	f001 fe59 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    8b2a:	2301      	movs	r3, #1
    8b2c:	74ab      	strb	r3, [r5, #18]
}
    8b2e:	e789      	b.n	8a44 <SharedSpiCard::begin(SdSpiConfig)+0x58>
    sdCsWrite(m_csPin, true);
    8b30:	7c28      	ldrb	r0, [r5, #16]
    8b32:	2101      	movs	r1, #1
    8b34:	f001 fde8 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8b38:	21ff      	movs	r1, #255	; 0xff
    8b3a:	4630      	mov	r0, r6
    8b3c:	f001 fe4e 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8b40:	4630      	mov	r0, r6
    8b42:	f001 fe01 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8b46:	2300      	movs	r3, #0
  return false;
    8b48:	4618      	mov	r0, r3
    m_spiActive = false;
    8b4a:	74ab      	strb	r3, [r5, #18]
}
    8b4c:	b008      	add	sp, #32
    8b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_type = value;
    8b52:	2302      	movs	r3, #2
    8b54:	2404      	movs	r4, #4
    8b56:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    8b58:	4630      	mov	r0, r6
    8b5a:	f001 fe21 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    8b5e:	1e63      	subs	r3, r4, #1
      m_status = spiReceive();
    8b60:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    8b62:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    8b66:	d1f7      	bne.n	8b58 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (m_status != 0XAA) {
    8b68:	28aa      	cmp	r0, #170	; 0xaa
    8b6a:	d09b      	beq.n	8aa4 <SharedSpiCard::begin(SdSpiConfig)+0xb8>
    8b6c:	2306      	movs	r3, #6
    8b6e:	e789      	b.n	8a84 <SharedSpiCard::begin(SdSpiConfig)+0x98>
    8b70:	2317      	movs	r3, #23
    8b72:	e787      	b.n	8a84 <SharedSpiCard::begin(SdSpiConfig)+0x98>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    8b74:	4628      	mov	r0, r5
    8b76:	4798      	blx	r3
    8b78:	e79b      	b.n	8ab2 <SharedSpiCard::begin(SdSpiConfig)+0xc6>
    sdCsWrite(m_csPin, true);
    8b7a:	2101      	movs	r1, #1
    8b7c:	7c28      	ldrb	r0, [r5, #16]
    8b7e:	f001 fdc3 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8b82:	21ff      	movs	r1, #255	; 0xff
    8b84:	4630      	mov	r0, r6
    8b86:	f001 fe29 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8b8a:	4630      	mov	r0, r6
    8b8c:	f001 fddc 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8b90:	2300      	movs	r3, #0
    8b92:	74ab      	strb	r3, [r5, #18]
}
    8b94:	e7b7      	b.n	8b06 <SharedSpiCard::begin(SdSpiConfig)+0x11a>
    if (cardCommand(CMD58, 0)) {
    8b96:	2200      	movs	r2, #0
    8b98:	213a      	movs	r1, #58	; 0x3a
    8b9a:	4628      	mov	r0, r5
    8b9c:	f7ff feb2 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8ba0:	b9a8      	cbnz	r0, 8bce <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
    return m_spiDriver.receive();
    8ba2:	4630      	mov	r0, r6
    8ba4:	f001 fdfc 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    8ba8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8bac:	28c0      	cmp	r0, #192	; 0xc0
    8bae:	d101      	bne.n	8bb4 <SharedSpiCard::begin(SdSpiConfig)+0x1c8>
    m_type = value;
    8bb0:	2303      	movs	r3, #3
    8bb2:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    8bb4:	4630      	mov	r0, r6
    8bb6:	f001 fdf3 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    8bba:	4630      	mov	r0, r6
    8bbc:	f001 fdf0 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    8bc0:	4630      	mov	r0, r6
    8bc2:	f001 fded 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    8bc6:	e79c      	b.n	8b02 <SharedSpiCard::begin(SdSpiConfig)+0x116>
  if (type() == SD_CARD_TYPE_SD2) {
    8bc8:	4628      	mov	r0, r5
    8bca:	4798      	blx	r3
    8bcc:	e797      	b.n	8afe <SharedSpiCard::begin(SdSpiConfig)+0x112>
    8bce:	2312      	movs	r3, #18
    8bd0:	e758      	b.n	8a84 <SharedSpiCard::begin(SdSpiConfig)+0x98>
    8bd2:	bf00      	nop
    8bd4:	00061a80 	.word	0x00061a80
    8bd8:	000085a9 	.word	0x000085a9
    8bdc:	200086a8 	.word	0x200086a8

00008be0 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8be2:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8be4:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    8be6:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8be8:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    8bea:	f7ff fe8b 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8bee:	b9e0      	cbnz	r0, 8c2a <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    8bf0:	1d37      	adds	r7, r6, #4
    8bf2:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    8bf4:	4638      	mov	r0, r7
    8bf6:	f001 fdd3 	bl	a7a0 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    8bfa:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8bfe:	42a5      	cmp	r5, r4
    8c00:	d1f8      	bne.n	8bf4 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    8c02:	7cb4      	ldrb	r4, [r6, #18]
    8c04:	b914      	cbnz	r4, 8c0c <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    8c06:	2401      	movs	r4, #1
}
    8c08:	4620      	mov	r0, r4
    8c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    8c0c:	7c30      	ldrb	r0, [r6, #16]
    8c0e:	2101      	movs	r1, #1
    8c10:	f001 fd7a 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8c14:	21ff      	movs	r1, #255	; 0xff
    8c16:	4638      	mov	r0, r7
    8c18:	f001 fde0 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8c1c:	4638      	mov	r0, r7
    8c1e:	f001 fd93 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8c22:	2300      	movs	r3, #0
}
    8c24:	4620      	mov	r0, r4
    m_spiActive = false;
    8c26:	74b3      	strb	r3, [r6, #18]
}
    8c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    8c2a:	2312      	movs	r3, #18
  if (m_spiActive) {
    8c2c:	7cb4      	ldrb	r4, [r6, #18]
    8c2e:	7473      	strb	r3, [r6, #17]
    8c30:	2c00      	cmp	r4, #0
    8c32:	d0e9      	beq.n	8c08 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    8c34:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    8c36:	7c30      	ldrb	r0, [r6, #16]
    8c38:	2101      	movs	r1, #1
    8c3a:	f001 fd65 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8c3e:	21ff      	movs	r1, #255	; 0xff
    8c40:	4620      	mov	r0, r4
    8c42:	f001 fdcb 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8c46:	4620      	mov	r0, r4
    8c48:	f001 fd7e 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8c4c:	2300      	movs	r3, #0
  return false;
    8c4e:	461c      	mov	r4, r3
    m_spiActive = false;
    8c50:	74b3      	strb	r3, [r6, #18]
}
    8c52:	4620      	mov	r0, r4
    8c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c56:	bf00      	nop

00008c58 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8c58:	b570      	push	{r4, r5, r6, lr}
    8c5a:	4616      	mov	r6, r2
    8c5c:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    8c5e:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8c60:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    8c62:	f7ff fe4f 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8c66:	b1b0      	cbz	r0, 8c96 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    8c68:	231b      	movs	r3, #27
    8c6a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    8c6c:	7ca0      	ldrb	r0, [r4, #18]
    8c6e:	b908      	cbnz	r0, 8c74 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    8c70:	b002      	add	sp, #8
    8c72:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    8c74:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    8c76:	7c20      	ldrb	r0, [r4, #16]
    8c78:	2101      	movs	r1, #1
    8c7a:	f001 fd45 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8c7e:	21ff      	movs	r1, #255	; 0xff
    8c80:	4628      	mov	r0, r5
    8c82:	f001 fdab 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8c86:	4628      	mov	r0, r5
    8c88:	f001 fd5e 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8c8c:	2300      	movs	r3, #0
  return false;
    8c8e:	4618      	mov	r0, r3
    m_spiActive = false;
    8c90:	74a3      	strb	r3, [r4, #18]
}
    8c92:	b002      	add	sp, #8
    8c94:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8c96:	4605      	mov	r5, r0
    8c98:	2210      	movs	r2, #16
    8c9a:	4631      	mov	r1, r6
    8c9c:	4620      	mov	r0, r4
    8c9e:	f7ff fd87 	bl	87b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8ca2:	2800      	cmp	r0, #0
    8ca4:	d0e2      	beq.n	8c6c <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    8ca6:	7ca6      	ldrb	r6, [r4, #18]
    8ca8:	2e00      	cmp	r6, #0
    8caa:	d0e1      	beq.n	8c70 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    8cac:	7c20      	ldrb	r0, [r4, #16]
    8cae:	2101      	movs	r1, #1
    8cb0:	f001 fd2a 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8cb4:	1d20      	adds	r0, r4, #4
    8cb6:	21ff      	movs	r1, #255	; 0xff
    8cb8:	9001      	str	r0, [sp, #4]
    8cba:	f001 fd8f 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8cbe:	9801      	ldr	r0, [sp, #4]
    8cc0:	f001 fd42 	bl	a748 <SdSpiArduinoDriver::deactivate()>
}
    8cc4:	4630      	mov	r0, r6
    m_spiActive = false;
    8cc6:	74a5      	strb	r5, [r4, #18]
}
    8cc8:	b002      	add	sp, #8
    8cca:	bd70      	pop	{r4, r5, r6, pc}

00008ccc <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8ccc:	6803      	ldr	r3, [r0, #0]
    8cce:	4a25      	ldr	r2, [pc, #148]	; (8d64 <SharedSpiCard::sectorCount()+0x98>)
    8cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8cd2:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    8cd4:	b500      	push	{lr}
    8cd6:	b085      	sub	sp, #20
    8cd8:	d10f      	bne.n	8cfa <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    8cda:	466a      	mov	r2, sp
    8cdc:	2109      	movs	r1, #9
    8cde:	f7ff ffbb 	bl	8c58 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8ce2:	b138      	cbz	r0, 8cf4 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8ce4:	f89d 3000 	ldrb.w	r3, [sp]
    8ce8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    8cec:	d008      	beq.n	8d00 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8cee:	2b40      	cmp	r3, #64	; 0x40
    8cf0:	d027      	beq.n	8d42 <SharedSpiCard::sectorCount()+0x76>
    8cf2:	2000      	movs	r0, #0
}
    8cf4:	b005      	add	sp, #20
    8cf6:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8cfa:	4669      	mov	r1, sp
    8cfc:	4798      	blx	r3
    8cfe:	e7f0      	b.n	8ce2 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8d00:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    8d04:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8d08:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8d0c:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8d10:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    8d14:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8d16:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8d1a:	0080      	lsls	r0, r0, #2
    8d1c:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8d20:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8d24:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8d28:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8d2c:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8d30:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8d34:	4413      	add	r3, r2
    8d36:	3001      	adds	r0, #1
    8d38:	3b07      	subs	r3, #7
    8d3a:	4098      	lsls	r0, r3
}
    8d3c:	b005      	add	sp, #20
    8d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8d42:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8d46:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8d4a:	3001      	adds	r0, #1
    8d4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8d54:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    8d58:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    8d5c:	0280      	lsls	r0, r0, #10
    8d5e:	b005      	add	sp, #20
    8d60:	f85d fb04 	ldr.w	pc, [sp], #4
    8d64:	00009089 	.word	0x00009089

00008d68 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8d68:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8d6a:	460a      	mov	r2, r1
    8d6c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    8d70:	b083      	sub	sp, #12
    8d72:	4d16      	ldr	r5, [pc, #88]	; (8dcc <SharedSpiCard::readStart(unsigned long)+0x64>)
    8d74:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8d76:	42ab      	cmp	r3, r5
    8d78:	d124      	bne.n	8dc4 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    8d7a:	7d40      	ldrb	r0, [r0, #21]
    8d7c:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8d7e:	f04f 0112 	mov.w	r1, #18
    8d82:	4620      	mov	r0, r4
    sector <<= 9;
    8d84:	bf18      	it	ne
    8d86:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    8d88:	f7ff fdbc 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8d8c:	b920      	cbnz	r0, 8d98 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    8d8e:	2301      	movs	r3, #1
  return true;
    8d90:	4618      	mov	r0, r3
  m_state = READ_STATE;
    8d92:	74e3      	strb	r3, [r4, #19]
}
    8d94:	b003      	add	sp, #12
    8d96:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    8d98:	230c      	movs	r3, #12
  if (m_spiActive) {
    8d9a:	7ca0      	ldrb	r0, [r4, #18]
    8d9c:	7463      	strb	r3, [r4, #17]
    8d9e:	2800      	cmp	r0, #0
    8da0:	d0f8      	beq.n	8d94 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    8da2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    8da4:	7c20      	ldrb	r0, [r4, #16]
    8da6:	2101      	movs	r1, #1
    8da8:	f001 fcae 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8dac:	21ff      	movs	r1, #255	; 0xff
    8dae:	4628      	mov	r0, r5
    8db0:	f001 fd14 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8db4:	4628      	mov	r0, r5
    8db6:	f001 fcc7 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8dba:	2300      	movs	r3, #0
}
    8dbc:	4618      	mov	r0, r3
    m_spiActive = false;
    8dbe:	74a3      	strb	r3, [r4, #18]
}
    8dc0:	b003      	add	sp, #12
    8dc2:	bd30      	pop	{r4, r5, pc}
    8dc4:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    8dc6:	4798      	blx	r3
    8dc8:	9a01      	ldr	r2, [sp, #4]
    8dca:	e7d7      	b.n	8d7c <SharedSpiCard::readStart(unsigned long)+0x14>
    8dcc:	000085a9 	.word	0x000085a9

00008dd0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    8dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8dd2:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8dd4:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8dd6:	4606      	mov	r6, r0
    8dd8:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8dda:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8ddc:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8dde:	d102      	bne.n	8de6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    8de0:	6983      	ldr	r3, [r0, #24]
    8de2:	428b      	cmp	r3, r1
    8de4:	d005      	beq.n	8df2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    8de6:	4629      	mov	r1, r5
    8de8:	4630      	mov	r0, r6
    8dea:	f7ff ffbd 	bl	8d68 <SharedSpiCard::readStart(unsigned long)>
    8dee:	b180      	cbz	r0, 8e12 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    8df0:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8df2:	b187      	cbz	r7, 8e16 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    8df4:	2500      	movs	r5, #0
    8df6:	e001      	b.n	8dfc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8df8:	42af      	cmp	r7, r5
    8dfa:	d00c      	beq.n	8e16 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    8dfc:	4621      	mov	r1, r4
    8dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
    8e02:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8e04:	3501      	adds	r5, #1
    8e06:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    8e0a:	f7ff fcd1 	bl	87b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    8e0e:	2800      	cmp	r0, #0
    8e10:	d1f2      	bne.n	8df8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    8e12:	2000      	movs	r0, #0
}
    8e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    8e16:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    8e18:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    8e1a:	443b      	add	r3, r7
    8e1c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    8e1e:	2800      	cmp	r0, #0
    8e20:	d1f8      	bne.n	8e14 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    8e22:	4630      	mov	r0, r6
}
    8e24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    8e28:	f7ff bd08 	b.w	883c <SharedSpiCard::readStop()>

00008e2c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e30:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e32:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e34:	4606      	mov	r6, r0
    8e36:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e38:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e3a:	4615      	mov	r5, r2
    8e3c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    8e40:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e44:	d102      	bne.n	8e4c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    8e46:	6983      	ldr	r3, [r0, #24]
    8e48:	428b      	cmp	r3, r1
    8e4a:	d005      	beq.n	8e58 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    8e4c:	4621      	mov	r1, r4
    8e4e:	4630      	mov	r0, r6
    8e50:	f7ff ff8a 	bl	8d68 <SharedSpiCard::readStart(unsigned long)>
    8e54:	b1b0      	cbz	r0, 8e84 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    8e56:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    8e58:	f1bb 0f00 	cmp.w	fp, #0
    8e5c:	d015      	beq.n	8e8a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    8e5e:	eb04 0a0b 	add.w	sl, r4, fp
    8e62:	e002      	b.n	8e6a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    8e64:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    8e66:	45a2      	cmp	sl, r4
    8e68:	d00f      	beq.n	8e8a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    8e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
    8e6e:	4629      	mov	r1, r5
    8e70:	4630      	mov	r0, r6
    8e72:	f7ff fc9d 	bl	87b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8e76:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    8e78:	4642      	mov	r2, r8
    8e7a:	4620      	mov	r0, r4
    8e7c:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    8e7e:	3401      	adds	r4, #1
    if (readData(dst)) {
    8e80:	2f00      	cmp	r7, #0
    8e82:	d1ef      	bne.n	8e64 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    8e84:	2000      	movs	r0, #0
}
    8e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    8e8a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    8e8c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    8e8e:	445b      	add	r3, fp
    8e90:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    8e92:	2800      	cmp	r0, #0
    8e94:	d1f7      	bne.n	8e86 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    8e96:	4630      	mov	r0, r6
}
    8e98:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    8e9c:	f7ff bcce 	b.w	883c <SharedSpiCard::readStop()>

00008ea0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    8ea0:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    8ea6:	695f      	ldr	r7, [r3, #20]
    8ea8:	4b16      	ldr	r3, [pc, #88]	; (8f04 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    8eaa:	429f      	cmp	r7, r3
    8eac:	d11f      	bne.n	8eee <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    8eae:	7cc3      	ldrb	r3, [r0, #19]
    8eb0:	4604      	mov	r4, r0
    8eb2:	460d      	mov	r5, r1
    8eb4:	4616      	mov	r6, r2
    8eb6:	2b01      	cmp	r3, #1
    8eb8:	d102      	bne.n	8ec0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    8eba:	6983      	ldr	r3, [r0, #24]
    8ebc:	4299      	cmp	r1, r3
    8ebe:	d005      	beq.n	8ecc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    8ec0:	4629      	mov	r1, r5
    8ec2:	4620      	mov	r0, r4
    8ec4:	f7ff ff50 	bl	8d68 <SharedSpiCard::readStart(unsigned long)>
    8ec8:	b170      	cbz	r0, 8ee8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    8eca:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    8ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
    8ed0:	4631      	mov	r1, r6
    8ed2:	4620      	mov	r0, r4
    8ed4:	f7ff fc6c 	bl	87b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    8ed8:	b130      	cbz	r0, 8ee8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    8eda:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8edc:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8ede:	3301      	adds	r3, #1
    8ee0:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8ee2:	b148      	cbz	r0, 8ef8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    8ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    8ee8:	2000      	movs	r0, #0
}
    8eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    8eee:	46bc      	mov	ip, r7
    8ef0:	2301      	movs	r3, #1
}
    8ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    8ef6:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    8ef8:	4620      	mov	r0, r4
}
    8efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    8efe:	f7ff bc9d 	b.w	883c <SharedSpiCard::readStop()>
    8f02:	bf00      	nop
    8f04:	00008dd1 	.word	0x00008dd1

00008f08 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8f08:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8f0a:	460a      	mov	r2, r1
    8f0c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    8f10:	b083      	sub	sp, #12
    8f12:	4d16      	ldr	r5, [pc, #88]	; (8f6c <SharedSpiCard::writeStart(unsigned long)+0x64>)
    8f14:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8f16:	42ab      	cmp	r3, r5
    8f18:	d124      	bne.n	8f64 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    8f1a:	7d40      	ldrb	r0, [r0, #21]
    8f1c:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8f1e:	f04f 0119 	mov.w	r1, #25
    8f22:	4620      	mov	r0, r4
    sector <<= 9;
    8f24:	bf18      	it	ne
    8f26:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    8f28:	f7ff fcec 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8f2c:	b920      	cbnz	r0, 8f38 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    8f2e:	2302      	movs	r3, #2
  return true;
    8f30:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    8f32:	74e3      	strb	r3, [r4, #19]
}
    8f34:	b003      	add	sp, #12
    8f36:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    8f38:	230e      	movs	r3, #14
  if (m_spiActive) {
    8f3a:	7ca0      	ldrb	r0, [r4, #18]
    8f3c:	7463      	strb	r3, [r4, #17]
    8f3e:	2800      	cmp	r0, #0
    8f40:	d0f8      	beq.n	8f34 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    8f42:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    8f44:	7c20      	ldrb	r0, [r4, #16]
    8f46:	2101      	movs	r1, #1
    8f48:	f001 fbde 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8f4c:	21ff      	movs	r1, #255	; 0xff
    8f4e:	4628      	mov	r0, r5
    8f50:	f001 fc44 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8f54:	4628      	mov	r0, r5
    8f56:	f001 fbf7 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8f5a:	2300      	movs	r3, #0
}
    8f5c:	4618      	mov	r0, r3
    m_spiActive = false;
    8f5e:	74a3      	strb	r3, [r4, #18]
}
    8f60:	b003      	add	sp, #12
    8f62:	bd30      	pop	{r4, r5, pc}
    8f64:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    8f66:	4798      	blx	r3
    8f68:	9a01      	ldr	r2, [sp, #4]
    8f6a:	e7d7      	b.n	8f1c <SharedSpiCard::writeStart(unsigned long)+0x14>
    8f6c:	000085a9 	.word	0x000085a9

00008f70 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    8f70:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    8f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8f78:	4617      	mov	r7, r2
    8f7a:	4a41      	ldr	r2, [pc, #260]	; (9080 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    8f7c:	b085      	sub	sp, #20
    8f7e:	4604      	mov	r4, r0
    8f80:	460e      	mov	r6, r1
    8f82:	4293      	cmp	r3, r2
    8f84:	d145      	bne.n	9012 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    8f86:	466a      	mov	r2, sp
    8f88:	2109      	movs	r1, #9
    8f8a:	f7ff fe65 	bl	8c58 <SharedSpiCard::readRegister(unsigned char, void*)>
    8f8e:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    8f90:	b1b5      	cbz	r5, 8fc0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    8f92:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8f96:	065a      	lsls	r2, r3, #25
    8f98:	d518      	bpl.n	8fcc <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8f9a:	7d63      	ldrb	r3, [r4, #21]
    8f9c:	2b03      	cmp	r3, #3
    8f9e:	d001      	beq.n	8fa4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    8fa0:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    8fa2:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    8fa4:	4632      	mov	r2, r6
    8fa6:	2120      	movs	r1, #32
    8fa8:	4620      	mov	r0, r4
    8faa:	f7ff fcab 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    8fae:	b928      	cbnz	r0, 8fbc <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    8fb0:	463a      	mov	r2, r7
    8fb2:	2121      	movs	r1, #33	; 0x21
    8fb4:	4620      	mov	r0, r4
    8fb6:	f7ff fca5 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8fba:	b370      	cbz	r0, 901a <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    8fbc:	2326      	movs	r3, #38	; 0x26
    8fbe:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    8fc0:	7ca5      	ldrb	r5, [r4, #18]
    8fc2:	b99d      	cbnz	r5, 8fec <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    8fc4:	4628      	mov	r0, r5
    8fc6:	b005      	add	sp, #20
    8fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8fd0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8fd4:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8fd6:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    8fda:	1c7a      	adds	r2, r7, #1
    8fdc:	4332      	orrs	r2, r6
    8fde:	4213      	tst	r3, r2
    8fe0:	d0db      	beq.n	8f9a <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    8fe2:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    8fe4:	7ca5      	ldrb	r5, [r4, #18]
    8fe6:	7463      	strb	r3, [r4, #17]
    8fe8:	2d00      	cmp	r5, #0
    8fea:	d0eb      	beq.n	8fc4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    8fec:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    8fee:	7c20      	ldrb	r0, [r4, #16]
    8ff0:	2101      	movs	r1, #1
    8ff2:	f001 fb89 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8ff6:	21ff      	movs	r1, #255	; 0xff
    8ff8:	4628      	mov	r0, r5
    8ffa:	f001 fbef 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8ffe:	4628      	mov	r0, r5
    9000:	f001 fba2 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9004:	2300      	movs	r3, #0
  return false;
    9006:	461d      	mov	r5, r3
    m_spiActive = false;
    9008:	74a3      	strb	r3, [r4, #18]
}
    900a:	4628      	mov	r0, r5
    900c:	b005      	add	sp, #20
    900e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    9012:	4669      	mov	r1, sp
    9014:	4798      	blx	r3
    9016:	4605      	mov	r5, r0
    9018:	e7ba      	b.n	8f90 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    901a:	4602      	mov	r2, r0
    901c:	2126      	movs	r1, #38	; 0x26
    901e:	4620      	mov	r0, r4
    9020:	f7ff fc70 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9024:	2800      	cmp	r0, #0
    9026:	d1c9      	bne.n	8fbc <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    9028:	f8df 8058 	ldr.w	r8, [pc, #88]	; 9084 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    902c:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    9030:	f104 0904 	add.w	r9, r4, #4
    9034:	f8d8 3000 	ldr.w	r3, [r8]
    9038:	441f      	add	r7, r3
    903a:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    903c:	e004      	b.n	9048 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    903e:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    9042:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    9044:	041b      	lsls	r3, r3, #16
    9046:	d417      	bmi.n	9078 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    9048:	4648      	mov	r0, r9
    904a:	f001 fba9 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    904e:	28ff      	cmp	r0, #255	; 0xff
    9050:	4606      	mov	r6, r0
    9052:	d1f4      	bne.n	903e <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    9054:	7ca3      	ldrb	r3, [r4, #18]
    9056:	2b00      	cmp	r3, #0
    9058:	d0b4      	beq.n	8fc4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    905a:	2101      	movs	r1, #1
    905c:	7c20      	ldrb	r0, [r4, #16]
  return true;
    905e:	461d      	mov	r5, r3
    9060:	f001 fb52 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9064:	4631      	mov	r1, r6
    9066:	4648      	mov	r0, r9
    9068:	f001 fbb8 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    906c:	4648      	mov	r0, r9
    906e:	f001 fb6b 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9072:	2300      	movs	r3, #0
    9074:	74a3      	strb	r3, [r4, #18]
}
    9076:	e7a5      	b.n	8fc4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    9078:	2328      	movs	r3, #40	; 0x28
    907a:	7463      	strb	r3, [r4, #17]
    goto fail;
    907c:	e7a0      	b.n	8fc0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    907e:	bf00      	nop
    9080:	00009089 	.word	0x00009089
    9084:	200086a8 	.word	0x200086a8

00009088 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    9088:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    908a:	2200      	movs	r2, #0
    908c:	b082      	sub	sp, #8
    908e:	460e      	mov	r6, r1
    9090:	2109      	movs	r1, #9
    9092:	4604      	mov	r4, r0
    9094:	f7ff fc36 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9098:	b1b0      	cbz	r0, 90c8 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    909a:	231b      	movs	r3, #27
    909c:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    909e:	7ca0      	ldrb	r0, [r4, #18]
    90a0:	b908      	cbnz	r0, 90a6 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    90a2:	b002      	add	sp, #8
    90a4:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    90a6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    90a8:	7c20      	ldrb	r0, [r4, #16]
    90aa:	2101      	movs	r1, #1
    90ac:	f001 fb2c 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    90b0:	21ff      	movs	r1, #255	; 0xff
    90b2:	4628      	mov	r0, r5
    90b4:	f001 fb92 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    90b8:	4628      	mov	r0, r5
    90ba:	f001 fb45 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    90be:	2300      	movs	r3, #0
  return false;
    90c0:	4618      	mov	r0, r3
    m_spiActive = false;
    90c2:	74a3      	strb	r3, [r4, #18]
  }
    90c4:	b002      	add	sp, #8
    90c6:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    90c8:	4605      	mov	r5, r0
    90ca:	2210      	movs	r2, #16
    90cc:	4631      	mov	r1, r6
    90ce:	4620      	mov	r0, r4
    90d0:	f7ff fb6e 	bl	87b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    90d4:	2800      	cmp	r0, #0
    90d6:	d0e2      	beq.n	909e <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    90d8:	7ca6      	ldrb	r6, [r4, #18]
    90da:	2e00      	cmp	r6, #0
    90dc:	d0e1      	beq.n	90a2 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    90de:	7c20      	ldrb	r0, [r4, #16]
    90e0:	2101      	movs	r1, #1
    90e2:	f001 fb11 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    90e6:	1d20      	adds	r0, r4, #4
    90e8:	21ff      	movs	r1, #255	; 0xff
    90ea:	9001      	str	r0, [sp, #4]
    90ec:	f001 fb76 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    90f0:	9801      	ldr	r0, [sp, #4]
    90f2:	f001 fb29 	bl	a748 <SdSpiArduinoDriver::deactivate()>
}
    90f6:	4630      	mov	r0, r6
    m_spiActive = false;
    90f8:	74a5      	strb	r5, [r4, #18]
  }
    90fa:	b002      	add	sp, #8
    90fc:	bd70      	pop	{r4, r5, r6, pc}
    90fe:	bf00      	nop

00009100 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    9100:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    9102:	2200      	movs	r2, #0
    9104:	b082      	sub	sp, #8
    9106:	460e      	mov	r6, r1
    9108:	210a      	movs	r1, #10
    910a:	4604      	mov	r4, r0
    910c:	f7ff fbfa 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9110:	b1b0      	cbz	r0, 9140 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    9112:	231b      	movs	r3, #27
    9114:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    9116:	7ca0      	ldrb	r0, [r4, #18]
    9118:	b908      	cbnz	r0, 911e <SharedSpiCard::readCID(CID*)+0x1e>
  }
    911a:	b002      	add	sp, #8
    911c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    911e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    9120:	7c20      	ldrb	r0, [r4, #16]
    9122:	2101      	movs	r1, #1
    9124:	f001 faf0 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9128:	21ff      	movs	r1, #255	; 0xff
    912a:	4628      	mov	r0, r5
    912c:	f001 fb56 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9130:	4628      	mov	r0, r5
    9132:	f001 fb09 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9136:	2300      	movs	r3, #0
  return false;
    9138:	4618      	mov	r0, r3
    m_spiActive = false;
    913a:	74a3      	strb	r3, [r4, #18]
  }
    913c:	b002      	add	sp, #8
    913e:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    9140:	4605      	mov	r5, r0
    9142:	2210      	movs	r2, #16
    9144:	4631      	mov	r1, r6
    9146:	4620      	mov	r0, r4
    9148:	f7ff fb32 	bl	87b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    914c:	2800      	cmp	r0, #0
    914e:	d0e2      	beq.n	9116 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    9150:	7ca6      	ldrb	r6, [r4, #18]
    9152:	2e00      	cmp	r6, #0
    9154:	d0e1      	beq.n	911a <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    9156:	7c20      	ldrb	r0, [r4, #16]
    9158:	2101      	movs	r1, #1
    915a:	f001 fad5 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    915e:	1d20      	adds	r0, r4, #4
    9160:	21ff      	movs	r1, #255	; 0xff
    9162:	9001      	str	r0, [sp, #4]
    9164:	f001 fb3a 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9168:	9801      	ldr	r0, [sp, #4]
    916a:	f001 faed 	bl	a748 <SdSpiArduinoDriver::deactivate()>
}
    916e:	4630      	mov	r0, r6
    m_spiActive = false;
    9170:	74a5      	strb	r5, [r4, #18]
  }
    9172:	b002      	add	sp, #8
    9174:	bd70      	pop	{r4, r5, r6, pc}
    9176:	bf00      	nop

00009178 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    9178:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    917a:	1d05      	adds	r5, r0, #4
    917c:	4616      	mov	r6, r2
    917e:	4604      	mov	r4, r0
    9180:	4628      	mov	r0, r5
    9182:	f001 fb2b 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    9186:	f44f 7200 	mov.w	r2, #512	; 0x200
    918a:	4631      	mov	r1, r6
    918c:	4628      	mov	r0, r5
    918e:	f001 fb2f 	bl	a7f0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    9192:	21ff      	movs	r1, #255	; 0xff
    9194:	4628      	mov	r0, r5
    9196:	f001 fb21 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    919a:	21ff      	movs	r1, #255	; 0xff
    919c:	4628      	mov	r0, r5
    919e:	f001 fb1d 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    91a2:	4628      	mov	r0, r5
    91a4:	f001 fafc 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    91a8:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    91ac:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    91ae:	2b05      	cmp	r3, #5
    91b0:	d004      	beq.n	91bc <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    91b2:	2320      	movs	r3, #32
  if (m_spiActive) {
    91b4:	7ca0      	ldrb	r0, [r4, #18]
    91b6:	7463      	strb	r3, [r4, #17]
    91b8:	b910      	cbnz	r0, 91c0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    91ba:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    91bc:	2001      	movs	r0, #1
}
    91be:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    91c0:	7c20      	ldrb	r0, [r4, #16]
    91c2:	2101      	movs	r1, #1
    91c4:	f001 faa0 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    91c8:	21ff      	movs	r1, #255	; 0xff
    91ca:	4628      	mov	r0, r5
    91cc:	f001 fb06 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    91d0:	4628      	mov	r0, r5
    91d2:	f001 fab9 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    91d6:	2300      	movs	r3, #0
}
    91d8:	4618      	mov	r0, r3
    m_spiActive = false;
    91da:	74a3      	strb	r3, [r4, #18]
}
    91dc:	bd70      	pop	{r4, r5, r6, pc}
    91de:	bf00      	nop

000091e0 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    91e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91e4:	4d17      	ldr	r5, [pc, #92]	; (9244 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    91e6:	4606      	mov	r6, r0
    91e8:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    91ea:	f100 0804 	add.w	r8, r0, #4
    91ee:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    91f0:	f504 7416 	add.w	r4, r4, #600	; 0x258
    91f4:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    91f6:	e003      	b.n	9200 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    91f8:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    91fa:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    91fc:	041b      	lsls	r3, r3, #16
    91fe:	d40c      	bmi.n	921a <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    9200:	4640      	mov	r0, r8
    9202:	f001 facd 	bl	a7a0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9206:	28ff      	cmp	r0, #255	; 0xff
    9208:	d1f6      	bne.n	91f8 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    920a:	463a      	mov	r2, r7
    920c:	21fc      	movs	r1, #252	; 0xfc
    920e:	4630      	mov	r0, r6
    9210:	f7ff ffb2 	bl	9178 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9214:	b118      	cbz	r0, 921e <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    9216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    921a:	2324      	movs	r3, #36	; 0x24
    921c:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    921e:	7cb0      	ldrb	r0, [r6, #18]
    9220:	2800      	cmp	r0, #0
    9222:	d0f8      	beq.n	9216 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    9224:	7c30      	ldrb	r0, [r6, #16]
    9226:	2101      	movs	r1, #1
    9228:	f001 fa6e 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    922c:	21ff      	movs	r1, #255	; 0xff
    922e:	4640      	mov	r0, r8
    9230:	f001 fad4 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9234:	4640      	mov	r0, r8
    9236:	f001 fa87 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    923a:	2300      	movs	r3, #0
}
    923c:	4618      	mov	r0, r3
    m_spiActive = false;
    923e:	74b3      	strb	r3, [r6, #18]
}
    9240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9244:	200086a8 	.word	0x200086a8

00009248 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    9248:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    924a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    924c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    924e:	4616      	mov	r6, r2
    9250:	4a22      	ldr	r2, [pc, #136]	; (92dc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    9252:	b082      	sub	sp, #8
    9254:	4604      	mov	r4, r0
    9256:	460d      	mov	r5, r1
    9258:	4293      	cmp	r3, r2
    925a:	d13c      	bne.n	92d6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    925c:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    925e:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    9260:	f04f 0118 	mov.w	r1, #24
    9264:	4620      	mov	r0, r4
    sector <<= 9;
    9266:	bf18      	it	ne
    9268:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    926a:	462a      	mov	r2, r5
    926c:	f7ff fb4a 	bl	8904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9270:	4605      	mov	r5, r0
    9272:	b1b0      	cbz	r0, 92a2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    9274:	230d      	movs	r3, #13
    9276:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    9278:	7ca0      	ldrb	r0, [r4, #18]
    927a:	b908      	cbnz	r0, 9280 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    927c:	b002      	add	sp, #8
    927e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    9280:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    9282:	7c20      	ldrb	r0, [r4, #16]
    9284:	2101      	movs	r1, #1
    9286:	f001 fa3f 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    928a:	21ff      	movs	r1, #255	; 0xff
    928c:	4628      	mov	r0, r5
    928e:	f001 faa5 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9292:	4628      	mov	r0, r5
    9294:	f001 fa58 	bl	a748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9298:	2300      	movs	r3, #0
  return false;
    929a:	4618      	mov	r0, r3
    m_spiActive = false;
    929c:	74a3      	strb	r3, [r4, #18]
}
    929e:	b002      	add	sp, #8
    92a0:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    92a2:	4632      	mov	r2, r6
    92a4:	21fe      	movs	r1, #254	; 0xfe
    92a6:	4620      	mov	r0, r4
    92a8:	f7ff ff66 	bl	9178 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    92ac:	2800      	cmp	r0, #0
    92ae:	d0e3      	beq.n	9278 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    92b0:	7ca6      	ldrb	r6, [r4, #18]
    92b2:	2e00      	cmp	r6, #0
    92b4:	d0e2      	beq.n	927c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    92b6:	7c20      	ldrb	r0, [r4, #16]
    92b8:	2101      	movs	r1, #1
    92ba:	f001 fa25 	bl	a708 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    92be:	1d20      	adds	r0, r4, #4
    92c0:	21ff      	movs	r1, #255	; 0xff
    92c2:	9001      	str	r0, [sp, #4]
    92c4:	f001 fa8a 	bl	a7dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    92c8:	9801      	ldr	r0, [sp, #4]
    92ca:	f001 fa3d 	bl	a748 <SdSpiArduinoDriver::deactivate()>
  return true;
    92ce:	4630      	mov	r0, r6
    m_spiActive = false;
    92d0:	74a5      	strb	r5, [r4, #18]
}
    92d2:	b002      	add	sp, #8
    92d4:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    92d6:	4798      	blx	r3
    92d8:	e7c1      	b.n	925e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    92da:	bf00      	nop
    92dc:	000085a9 	.word	0x000085a9

000092e0 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    92e0:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    92e2:	7f04      	ldrb	r4, [r0, #28]
    92e4:	b134      	cbz	r4, 92f4 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    92e6:	6804      	ldr	r4, [r0, #0]
    92e8:	2301      	movs	r3, #1
    92ea:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    92ec:	46a4      	mov	ip, r4
}
    92ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    92f2:	4760      	bx	ip
}
    92f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    92f8:	f7ff bfa6 	b.w	9248 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000092fc <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    92fc:	b510      	push	{r4, lr}
    92fe:	b084      	sub	sp, #16
    9300:	4604      	mov	r4, r0
    9302:	f10d 0c04 	add.w	ip, sp, #4
    9306:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    930a:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    930e:	f7ff fb6d 	bl	89ec <SharedSpiCard::begin(SdSpiConfig)>
    9312:	b120      	cbz	r0, 931e <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    9314:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9318:	f003 0301 	and.w	r3, r3, #1
    931c:	7723      	strb	r3, [r4, #28]
}
    931e:	b004      	add	sp, #16
    9320:	bd10      	pop	{r4, pc}
    9322:	bf00      	nop

00009324 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    9324:	2000      	movs	r0, #0
    9326:	4770      	bx	lr

00009328 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    9328:	2000      	movs	r0, #0
    932a:	4770      	bx	lr

0000932c <SdCardInterface::setDedicatedSpi(bool)>:
  }
    932c:	2000      	movs	r0, #0
    932e:	4770      	bx	lr

00009330 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    9330:	4770      	bx	lr
    9332:	bf00      	nop

00009334 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    9334:	4b08      	ldr	r3, [pc, #32]	; (9358 <sdIrs()+0x24>)
    9336:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    9338:	4a08      	ldr	r2, [pc, #32]	; (935c <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    933a:	4809      	ldr	r0, [pc, #36]	; (9360 <sdIrs()+0x2c>)
static void sdIrs() {
    933c:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    933e:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    9340:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    9342:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9344:	6812      	ldr	r2, [r2, #0]
}
    9346:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    934a:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    934c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    934e:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    9352:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    9354:	7001      	strb	r1, [r0, #0]
}
    9356:	4770      	bx	lr
    9358:	402c0000 	.word	0x402c0000
    935c:	20004740 	.word	0x20004740
    9360:	200086f0 	.word	0x200086f0

00009364 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9364:	4b03      	ldr	r3, [pc, #12]	; (9374 <isBusyDat()+0x10>)
    9366:	6a58      	ldr	r0, [r3, #36]	; 0x24
    9368:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    936c:	f3c0 6000 	ubfx	r0, r0, #24, #1
    9370:	4770      	bx	lr
    9372:	bf00      	nop
    9374:	402c0000 	.word	0x402c0000

00009378 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    9378:	4b01      	ldr	r3, [pc, #4]	; (9380 <isBusyDMA()+0x8>)
    937a:	7818      	ldrb	r0, [r3, #0]
}
    937c:	4770      	bx	lr
    937e:	bf00      	nop
    9380:	200086f0 	.word	0x200086f0

00009384 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9384:	4a2b      	ldr	r2, [pc, #172]	; (9434 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9386:	4b2c      	ldr	r3, [pc, #176]	; (9438 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9388:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    938a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    938e:	492b      	ldr	r1, [pc, #172]	; (943c <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9390:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9398:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    939a:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    939c:	4c28      	ldr	r4, [pc, #160]	; (9440 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    939e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    93a2:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    93a6:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    93aa:	089b      	lsrs	r3, r3, #2
    93ac:	fbb1 fef3 	udiv	lr, r1, r3
    93b0:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    93b4:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    93b8:	d235      	bcs.n	9426 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    93ba:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    93bc:	461e      	mov	r6, r3
    93be:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    93c0:	011a      	lsls	r2, r3, #4
    93c2:	fbbe f2f2 	udiv	r2, lr, r2
    93c6:	4282      	cmp	r2, r0
    93c8:	d901      	bls.n	93ce <setSdclk(unsigned long)+0x4a>
    93ca:	2bff      	cmp	r3, #255	; 0xff
    93cc:	d9f6      	bls.n	93bc <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    93ce:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    93d2:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    93d4:	4290      	cmp	r0, r2
    93d6:	d22a      	bcs.n	942e <setSdclk(unsigned long)+0xaa>
    93d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    93dc:	2201      	movs	r2, #1
    93de:	e000      	b.n	93e2 <setSdclk(unsigned long)+0x5e>
    93e0:	46a4      	mov	ip, r4
    dvs++;
    93e2:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    93e4:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    93e8:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    93ea:	fbbe f1fc 	udiv	r1, lr, ip
    93ee:	4281      	cmp	r1, r0
    93f0:	d917      	bls.n	9422 <setSdclk(unsigned long)+0x9e>
    93f2:	2a10      	cmp	r2, #16
    93f4:	d1f4      	bne.n	93e0 <setSdclk(unsigned long)+0x5c>
    93f6:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    93f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    93fc:	4911      	ldr	r1, [pc, #68]	; (9444 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    93fe:	4a12      	ldr	r2, [pc, #72]	; (9448 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    9400:	fb03 fc0c 	mul.w	ip, r3, ip
    9404:	fbbe f3fc 	udiv	r3, lr, ip
    9408:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    940a:	4b10      	ldr	r3, [pc, #64]	; (944c <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    940c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    940e:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9410:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    9412:	4333      	orrs	r3, r6
    9414:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9418:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    941a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    941c:	071b      	lsls	r3, r3, #28
    941e:	d5fc      	bpl.n	941a <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    9420:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9422:	012d      	lsls	r5, r5, #4
    9424:	e7e8      	b.n	93f8 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9426:	4672      	mov	r2, lr
    9428:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    942a:	2301      	movs	r3, #1
    942c:	e7d2      	b.n	93d4 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    942e:	469c      	mov	ip, r3
    9430:	2500      	movs	r5, #0
    9432:	e7e1      	b.n	93f8 <setSdclk(unsigned long)+0x74>
    9434:	400fc000 	.word	0x400fc000
    9438:	400d8000 	.word	0x400d8000
    943c:	5e69ec00 	.word	0x5e69ec00
    9440:	aaaaaaab 	.word	0xaaaaaaab
    9444:	200045f4 	.word	0x200045f4
    9448:	402c0000 	.word	0x402c0000
    944c:	fff0000f 	.word	0xfff0000f

00009450 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    9450:	4b01      	ldr	r3, [pc, #4]	; (9458 <SdioCard::errorCode() const+0x8>)
}
    9452:	7818      	ldrb	r0, [r3, #0]
    9454:	4770      	bx	lr
    9456:	bf00      	nop
    9458:	2000350a 	.word	0x2000350a

0000945c <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    945c:	4b01      	ldr	r3, [pc, #4]	; (9464 <SdioCard::errorData() const+0x8>)
    945e:	6818      	ldr	r0, [r3, #0]
}
    9460:	4770      	bx	lr
    9462:	bf00      	nop
    9464:	20004740 	.word	0x20004740

00009468 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    9468:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    946a:	4c07      	ldr	r4, [pc, #28]	; (9488 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    946c:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    946e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    9470:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    9474:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    9476:	f8cc 1004 	str.w	r1, [ip, #4]
    947a:	f8cc 2008 	str.w	r2, [ip, #8]
    947e:	f8cc 300c 	str.w	r3, [ip, #12]
}
    9482:	f85d 4b04 	ldr.w	r4, [sp], #4
    9486:	4770      	bx	lr
    9488:	20004714 	.word	0x20004714

0000948c <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    948c:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    948e:	4c07      	ldr	r4, [pc, #28]	; (94ac <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    9490:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    9492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    9494:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    9498:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    949a:	f8cc 1004 	str.w	r1, [ip, #4]
    949e:	f8cc 2008 	str.w	r2, [ip, #8]
    94a2:	f8cc 300c 	str.w	r3, [ip, #12]
}
    94a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    94aa:	4770      	bx	lr
    94ac:	20004724 	.word	0x20004724

000094b0 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    94b0:	4b02      	ldr	r3, [pc, #8]	; (94bc <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    94b2:	2001      	movs	r0, #1
  *ocr = m_ocr;
    94b4:	681b      	ldr	r3, [r3, #0]
    94b6:	600b      	str	r3, [r1, #0]
}
    94b8:	4770      	bx	lr
    94ba:	bf00      	nop
    94bc:	20004734 	.word	0x20004734

000094c0 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    94c0:	4770      	bx	lr
    94c2:	bf00      	nop

000094c4 <SdioCard::~SdioCard()>:
    94c4:	b510      	push	{r4, lr}
    94c6:	4604      	mov	r4, r0
    94c8:	210c      	movs	r1, #12
    94ca:	f002 fd85 	bl	bfd8 <operator delete(void*, unsigned int)>
    94ce:	4620      	mov	r0, r4
    94d0:	bd10      	pop	{r4, pc}
    94d2:	bf00      	nop

000094d4 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    94d4:	4b04      	ldr	r3, [pc, #16]	; (94e8 <SdioCard::type() const+0x14>)
    94d6:	781b      	ldrb	r3, [r3, #0]
    94d8:	b123      	cbz	r3, 94e4 <SdioCard::type() const+0x10>
    94da:	4b04      	ldr	r3, [pc, #16]	; (94ec <SdioCard::type() const+0x18>)
    94dc:	7818      	ldrb	r0, [r3, #0]
    94de:	3002      	adds	r0, #2
    94e0:	b2c0      	uxtb	r0, r0
    94e2:	4770      	bx	lr
    94e4:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    94e6:	4770      	bx	lr
    94e8:	200086ed 	.word	0x200086ed
    94ec:	200086ee 	.word	0x200086ee

000094f0 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    94f0:	4b18      	ldr	r3, [pc, #96]	; (9554 <SdioCard::sectorCount()+0x64>)
    94f2:	781a      	ldrb	r2, [r3, #0]
    94f4:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    94f8:	d00f      	beq.n	951a <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    94fa:	2a40      	cmp	r2, #64	; 0x40
    94fc:	d001      	beq.n	9502 <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    94fe:	2000      	movs	r0, #0
}
    9500:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9502:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9504:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9506:	7a19      	ldrb	r1, [r3, #8]
    9508:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    950a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    950e:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    9512:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    9516:	0280      	lsls	r0, r0, #10
    9518:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    951a:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    951c:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    951e:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9520:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9524:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9528:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    952c:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    952e:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9530:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    9534:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    9536:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    953a:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    953e:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9540:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    9544:	3001      	adds	r0, #1
    9546:	f003 030f 	and.w	r3, r3, #15
    954a:	4413      	add	r3, r2
    954c:	3b07      	subs	r3, #7
    954e:	4098      	lsls	r0, r3
}
    9550:	f85d fb04 	ldr.w	pc, [sp], #4
    9554:	20004724 	.word	0x20004724

00009558 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9558:	4a40      	ldr	r2, [pc, #256]	; (965c <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    955a:	2005      	movs	r0, #5
    955c:	4940      	ldr	r1, [pc, #256]	; (9660 <initSDHC()+0x108>)
static void initSDHC() {
    955e:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9560:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9564:	4b3f      	ldr	r3, [pc, #252]	; (9664 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9566:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    956a:	4d3f      	ldr	r5, [pc, #252]	; (9668 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    956c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9570:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    9574:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    9578:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    957c:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    9580:	f044 0418 	orr.w	r4, r4, #24
    9584:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9588:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    958c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    9590:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9594:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    9598:	f042 020c 	orr.w	r2, r2, #12
    959c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    95a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    95a2:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    95a6:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    95a8:	69da      	ldr	r2, [r3, #28]
    95aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    95ae:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    95b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    95b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    95b6:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    95b8:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    95bc:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    95c0:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    95c4:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    95c8:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    95cc:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    95d0:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    95d2:	4b26      	ldr	r3, [pc, #152]	; (966c <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    95d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    95d8:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    95da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    95dc:	4313      	orrs	r3, r2
    95de:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    95e0:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    95e2:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    95e6:	d1fb      	bne.n	95e0 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    95e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    95ec:	f7ff feca 	bl	9384 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    95f0:	4b1b      	ldr	r3, [pc, #108]	; (9660 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    95f2:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    95f6:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    95fa:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    95fe:	481c      	ldr	r0, [pc, #112]	; (9670 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9600:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9604:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9608:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    960c:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9610:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9614:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9618:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    961c:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9620:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9624:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    9628:	4912      	ldr	r1, [pc, #72]	; (9674 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    962a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    962e:	4b12      	ldr	r3, [pc, #72]	; (9678 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    9630:	6368      	str	r0, [r5, #52]	; 0x34
    9632:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    9636:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    963a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    963e:	490f      	ldr	r1, [pc, #60]	; (967c <initSDHC()+0x124>)
    9640:	2060      	movs	r0, #96	; 0x60
    9642:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    9646:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    964a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    964c:	4a06      	ldr	r2, [pc, #24]	; (9668 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    964e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    9652:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9654:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    9656:	011b      	lsls	r3, r3, #4
    9658:	d4fc      	bmi.n	9654 <initSDHC()+0xfc>
}
    965a:	bd38      	pop	{r3, r4, r5, pc}
    965c:	400d8000 	.word	0x400d8000
    9660:	401f8000 	.word	0x401f8000
    9664:	400fc000 	.word	0x400fc000
    9668:	402c0000 	.word	0x402c0000
    966c:	01008000 	.word	0x01008000
    9670:	117f000b 	.word	0x117f000b
    9674:	20003800 	.word	0x20003800
    9678:	00009335 	.word	0x00009335
    967c:	e000e400 	.word	0xe000e400

00009680 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    9680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    9684:	f002 fb66 	bl	bd54 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9688:	4e17      	ldr	r6, [pc, #92]	; (96e8 <waitTransferComplete() [clone .part.0]+0x68>)
    968a:	4d18      	ldr	r5, [pc, #96]	; (96ec <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    968c:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    968e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 9704 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    9692:	e004      	b.n	969e <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9694:	f002 fb5e 	bl	bd54 <micros>
    9698:	1bc0      	subs	r0, r0, r7
    969a:	4540      	cmp	r0, r8
    969c:	d81b      	bhi.n	96d6 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    969e:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    96a0:	402c      	ands	r4, r5
    96a2:	d0f7      	beq.n	9694 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    96a4:	4a12      	ldr	r2, [pc, #72]	; (96f0 <waitTransferComplete() [clone .part.0]+0x70>)
    96a6:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    96a8:	4b12      	ldr	r3, [pc, #72]	; (96f4 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    96aa:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    96ac:	6b32      	ldr	r2, [r6, #48]	; 0x30
    96ae:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    96b0:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    96b2:	4a11      	ldr	r2, [pc, #68]	; (96f8 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    96b4:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    96b6:	681b      	ldr	r3, [r3, #0]
    96b8:	4213      	tst	r3, r2
    96ba:	d009      	beq.n	96d0 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    96bc:	490f      	ldr	r1, [pc, #60]	; (96fc <waitTransferComplete() [clone .part.0]+0x7c>)
    96be:	241f      	movs	r4, #31
  m_errorLine = line;
    96c0:	4b0f      	ldr	r3, [pc, #60]	; (9700 <waitTransferComplete() [clone .part.0]+0x80>)
    96c2:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    96c6:	2000      	movs	r0, #0
  m_errorCode = code;
    96c8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    96ca:	601a      	str	r2, [r3, #0]
}
    96cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    96d0:	2001      	movs	r0, #1
}
    96d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    96d6:	4a06      	ldr	r2, [pc, #24]	; (96f0 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    96d8:	4b06      	ldr	r3, [pc, #24]	; (96f4 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    96da:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    96dc:	6b32      	ldr	r2, [r6, #48]	; 0x30
    96de:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    96e0:	681b      	ldr	r3, [r3, #0]
    96e2:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    96e4:	e7ea      	b.n	96bc <waitTransferComplete() [clone .part.0]+0x3c>
    96e6:	bf00      	nop
    96e8:	402c0000 	.word	0x402c0000
    96ec:	117f0002 	.word	0x117f0002
    96f0:	200086ef 	.word	0x200086ef
    96f4:	20004740 	.word	0x20004740
    96f8:	117f0000 	.word	0x117f0000
    96fc:	2000350a 	.word	0x2000350a
    9700:	20004648 	.word	0x20004648
    9704:	000f4240 	.word	0x000f4240

00009708 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    9708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    970c:	4c26      	ldr	r4, [pc, #152]	; (97a8 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    970e:	460f      	mov	r7, r1
  if (!m_transferActive) {
    9710:	7823      	ldrb	r3, [r4, #0]
    9712:	2b00      	cmp	r3, #0
    9714:	d138      	bne.n	9788 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    9716:	4b25      	ldr	r3, [pc, #148]	; (97ac <SdioCard::writeData(unsigned char const*)+0xa4>)
    9718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    971a:	05d2      	lsls	r2, r2, #23
    971c:	d52b      	bpl.n	9776 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    971e:	4d23      	ldr	r5, [pc, #140]	; (97ac <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9720:	f8df 8094 	ldr.w	r8, [pc, #148]	; 97b8 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9724:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    972a:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    972c:	f002 fb12 	bl	bd54 <micros>
    9730:	4606      	mov	r6, r0
  while (fcn()) {
    9732:	e004      	b.n	973e <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9734:	f002 fb0e 	bl	bd54 <micros>
    9738:	1b80      	subs	r0, r0, r6
    973a:	4540      	cmp	r0, r8
    973c:	d82a      	bhi.n	9794 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    973e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    9740:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    9744:	d0f6      	beq.n	9734 <SdioCard::writeData(unsigned char const*)+0x2c>
    9746:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    974a:	4818      	ldr	r0, [pc, #96]	; (97ac <SdioCard::writeData(unsigned char const*)+0xa4>)
    974c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    9750:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9752:	055b      	lsls	r3, r3, #21
    9754:	d5fc      	bpl.n	9750 <SdioCard::writeData(unsigned char const*)+0x48>
    9756:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    975a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    975e:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    9760:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9762:	d1fa      	bne.n	975a <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9764:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    9768:	45bc      	cmp	ip, r7
    976a:	d1f1      	bne.n	9750 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    976c:	2301      	movs	r3, #1
  return true;
    976e:	4618      	mov	r0, r3
  m_transferActive = true;
    9770:	7023      	strb	r3, [r4, #0]
}
    9772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9778:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    977c:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    977e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9780:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    9784:	629a      	str	r2, [r3, #40]	; 0x28
    9786:	e7ca      	b.n	971e <SdioCard::writeData(unsigned char const*)+0x16>
    9788:	f7ff ff7a 	bl	9680 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    978c:	2800      	cmp	r0, #0
    978e:	d1c2      	bne.n	9716 <SdioCard::writeData(unsigned char const*)+0xe>
}
    9790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    9794:	4906      	ldr	r1, [pc, #24]	; (97b0 <SdioCard::writeData(unsigned char const*)+0xa8>)
    9796:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    9798:	4b06      	ldr	r3, [pc, #24]	; (97b4 <SdioCard::writeData(unsigned char const*)+0xac>)
    979a:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    979e:	4648      	mov	r0, r9
  m_errorCode = code;
    97a0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    97a2:	601a      	str	r2, [r3, #0]
}
    97a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    97a8:	200086ef 	.word	0x200086ef
    97ac:	402c0000 	.word	0x402c0000
    97b0:	2000350a 	.word	0x2000350a
    97b4:	20004648 	.word	0x20004648
    97b8:	000f4240 	.word	0x000f4240

000097bc <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    97bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97c0:	4607      	mov	r7, r0
    97c2:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    97c4:	4c1f      	ldr	r4, [pc, #124]	; (9844 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    97c6:	f002 fac5 	bl	bd54 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    97ca:	4e1f      	ldr	r6, [pc, #124]	; (9848 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    97cc:	4605      	mov	r5, r0
  while (fcn()) {
    97ce:	e004      	b.n	97da <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    97d0:	f002 fac0 	bl	bd54 <micros>
    97d4:	1b43      	subs	r3, r0, r5
    97d6:	42b3      	cmp	r3, r6
    97d8:	d824      	bhi.n	9824 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    97da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    97dc:	07d9      	lsls	r1, r3, #31
    97de:	d4f7      	bmi.n	97d0 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    97e0:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    97e2:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    97e6:	d420      	bmi.n	982a <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    97e8:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    97ec:	4c15      	ldr	r4, [pc, #84]	; (9844 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    97ee:	4e17      	ldr	r6, [pc, #92]	; (984c <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    97f0:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    97f2:	f002 faaf 	bl	bd54 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    97f6:	4f14      	ldr	r7, [pc, #80]	; (9848 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    97f8:	4605      	mov	r5, r0
  while (fcn()) {
    97fa:	e004      	b.n	9806 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    97fc:	f002 faaa 	bl	bd54 <micros>
    9800:	1b40      	subs	r0, r0, r5
    9802:	42b8      	cmp	r0, r7
    9804:	d80e      	bhi.n	9824 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    9806:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    9808:	4233      	tst	r3, r6
    980a:	d0f7      	beq.n	97fc <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    980c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    980e:	4b10      	ldr	r3, [pc, #64]	; (9850 <cardCommand(unsigned long, unsigned long)+0x94>)
    9810:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9812:	681a      	ldr	r2, [r3, #0]
    9814:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9816:	681a      	ldr	r2, [r3, #0]
    9818:	07d2      	lsls	r2, r2, #31
    981a:	d503      	bpl.n	9824 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    981c:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    981e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    9822:	d00b      	beq.n	983c <cardCommand(unsigned long, unsigned long)+0x80>
    9824:	2000      	movs	r0, #0
}
    9826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    982a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    982c:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    982e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    9832:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    9834:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9836:	4313      	orrs	r3, r2
    9838:	64a3      	str	r3, [r4, #72]	; 0x48
    983a:	e7d5      	b.n	97e8 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    983c:	2001      	movs	r0, #1
}
    983e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9842:	bf00      	nop
    9844:	402c0000 	.word	0x402c0000
    9848:	000f4240 	.word	0x000f4240
    984c:	000f0001 	.word	0x000f0001
    9850:	20004740 	.word	0x20004740

00009854 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    9854:	4b15      	ldr	r3, [pc, #84]	; (98ac <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    9856:	b530      	push	{r4, r5, lr}
    9858:	460d      	mov	r5, r1
    985a:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    985c:	6819      	ldr	r1, [r3, #0]
    985e:	f7ff ffad 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9862:	b308      	cbz	r0, 98a8 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9864:	4b12      	ldr	r3, [pc, #72]	; (98b0 <readReg16(unsigned long, void*)+0x5c>)
    9866:	f105 040f 	add.w	r4, r5, #15
    986a:	691a      	ldr	r2, [r3, #16]
    986c:	9200      	str	r2, [sp, #0]
    986e:	6959      	ldr	r1, [r3, #20]
    9870:	9101      	str	r1, [sp, #4]
    9872:	6999      	ldr	r1, [r3, #24]
    9874:	9102      	str	r1, [sp, #8]
    9876:	69db      	ldr	r3, [r3, #28]
    9878:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    987a:	2300      	movs	r3, #0
    987c:	e001      	b.n	9882 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    987e:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    9882:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    9886:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9888:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    988c:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    9890:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9892:	fa22 f20c 	lsr.w	r2, r2, ip
    9896:	f10e 0110 	add.w	r1, lr, #16
    989a:	f804 2d01 	strb.w	r2, [r4, #-1]!
    989e:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    98a2:	d1ec      	bne.n	987e <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    98a4:	2300      	movs	r3, #0
    98a6:	73eb      	strb	r3, [r5, #15]
}
    98a8:	b005      	add	sp, #20
    98aa:	bd30      	pop	{r4, r5, pc}
    98ac:	20004738 	.word	0x20004738
    98b0:	402c0000 	.word	0x402c0000

000098b4 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    98b4:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    98b6:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    98b8:	07db      	lsls	r3, r3, #31
    98ba:	d505      	bpl.n	98c8 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    98bc:	4b15      	ldr	r3, [pc, #84]	; (9914 <SdioCard::isBusy()+0x60>)
    98be:	681b      	ldr	r3, [r3, #0]
    98c0:	b1b3      	cbz	r3, 98f0 <SdioCard::isBusy()+0x3c>
}
    98c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    98c6:	4718      	bx	r3
    if (m_transferActive) {
    98c8:	4b13      	ldr	r3, [pc, #76]	; (9918 <SdioCard::isBusy()+0x64>)
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	b93b      	cbnz	r3, 98de <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    98ce:	4b13      	ldr	r3, [pc, #76]	; (991c <SdioCard::isBusy()+0x68>)
    98d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    98d2:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    98d6:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    98da:	4620      	mov	r0, r4
    98dc:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    98de:	4b0f      	ldr	r3, [pc, #60]	; (991c <SdioCard::isBusy()+0x68>)
    98e0:	4c0f      	ldr	r4, [pc, #60]	; (9920 <SdioCard::isBusy()+0x6c>)
    98e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    98e4:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    98e6:	fab4 f484 	clz	r4, r4
    98ea:	0964      	lsrs	r4, r4, #5
}
    98ec:	4620      	mov	r0, r4
    98ee:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    98f0:	4b0c      	ldr	r3, [pc, #48]	; (9924 <SdioCard::isBusy()+0x70>)
    98f2:	781c      	ldrb	r4, [r3, #0]
    98f4:	2c00      	cmp	r4, #0
    98f6:	d0f0      	beq.n	98da <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    98f8:	4b0b      	ldr	r3, [pc, #44]	; (9928 <SdioCard::isBusy()+0x74>)
    98fa:	480c      	ldr	r0, [pc, #48]	; (992c <SdioCard::isBusy()+0x78>)
    98fc:	6819      	ldr	r1, [r3, #0]
    98fe:	f7ff ff5d 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9902:	2800      	cmp	r0, #0
    9904:	d0e9      	beq.n	98da <SdioCard::isBusy()+0x26>
    9906:	4b05      	ldr	r3, [pc, #20]	; (991c <SdioCard::isBusy()+0x68>)
    9908:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    990a:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    990e:	f3c4 2400 	ubfx	r4, r4, #8, #1
    9912:	e7e2      	b.n	98da <SdioCard::isBusy()+0x26>
    9914:	2000473c 	.word	0x2000473c
    9918:	200086ef 	.word	0x200086ef
    991c:	402c0000 	.word	0x402c0000
    9920:	117f0002 	.word	0x117f0002
    9924:	200086ec 	.word	0x200086ec
    9928:	20004738 	.word	0x20004738
    992c:	0d1a0000 	.word	0x0d1a0000

00009930 <SdioCard::status()>:
uint32_t SdioCard::status() {
    9930:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9932:	4b04      	ldr	r3, [pc, #16]	; (9944 <SdioCard::status()+0x14>)
    9934:	4804      	ldr	r0, [pc, #16]	; (9948 <SdioCard::status()+0x18>)
    9936:	6819      	ldr	r1, [r3, #0]
    9938:	f7ff ff40 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    993c:	b108      	cbz	r0, 9942 <SdioCard::status()+0x12>
    993e:	4b03      	ldr	r3, [pc, #12]	; (994c <SdioCard::status()+0x1c>)
    9940:	6918      	ldr	r0, [r3, #16]
}
    9942:	bd08      	pop	{r3, pc}
    9944:	20004738 	.word	0x20004738
    9948:	0d1a0000 	.word	0x0d1a0000
    994c:	402c0000 	.word	0x402c0000

00009950 <isBusyCMD13()>:
static bool isBusyCMD13() {
    9950:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9952:	4b07      	ldr	r3, [pc, #28]	; (9970 <isBusyCMD13()+0x20>)
    9954:	4807      	ldr	r0, [pc, #28]	; (9974 <isBusyCMD13()+0x24>)
    9956:	6819      	ldr	r1, [r3, #0]
    9958:	f7ff ff30 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    995c:	b130      	cbz	r0, 996c <isBusyCMD13()+0x1c>
    995e:	4b06      	ldr	r3, [pc, #24]	; (9978 <isBusyCMD13()+0x28>)
    9960:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    9962:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    9966:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    996a:	bd08      	pop	{r3, pc}
    996c:	2001      	movs	r0, #1
    996e:	bd08      	pop	{r3, pc}
    9970:	20004738 	.word	0x20004738
    9974:	0d1a0000 	.word	0x0d1a0000
    9978:	402c0000 	.word	0x402c0000

0000997c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9980:	4b29      	ldr	r3, [pc, #164]	; (9a28 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    9982:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    9984:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 9a48 <SdioCard::writeStart(unsigned long)+0xcc>
    9988:	4e28      	ldr	r6, [pc, #160]	; (9a2c <SdioCard::writeStart(unsigned long)+0xb0>)
    998a:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    998e:	f002 f9e1 	bl	bd54 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9992:	4d27      	ldr	r5, [pc, #156]	; (9a30 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    9994:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9996:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 9a4c <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    999a:	4f26      	ldr	r7, [pc, #152]	; (9a34 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    999c:	e006      	b.n	99ac <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    999e:	f002 f9d9 	bl	bd54 <micros>
    99a2:	1b00      	subs	r0, r0, r4
    99a4:	42b8      	cmp	r0, r7
    99a6:	d829      	bhi.n	99fc <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    99a8:	f003 ff02 	bl	d7b0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    99ac:	6831      	ldr	r1, [r6, #0]
    99ae:	4628      	mov	r0, r5
    99b0:	f7ff ff04 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    99b4:	2800      	cmp	r0, #0
    99b6:	d0f2      	beq.n	999e <SdioCard::writeStart(unsigned long)+0x22>
    99b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    99bc:	05db      	lsls	r3, r3, #23
    99be:	d5ee      	bpl.n	999e <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    99c0:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    99c2:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    99c6:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    99ca:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    99ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    99d2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    99d6:	4b18      	ldr	r3, [pc, #96]	; (9a38 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    99d8:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    99dc:	781b      	ldrb	r3, [r3, #0]
    99de:	b1cb      	cbz	r3, 9a14 <SdioCard::writeStart(unsigned long)+0x98>
    99e0:	4649      	mov	r1, r9
    99e2:	4816      	ldr	r0, [pc, #88]	; (9a3c <SdioCard::writeStart(unsigned long)+0xc0>)
    99e4:	f7ff feea 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    99e8:	b930      	cbnz	r0, 99f8 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    99ea:	4915      	ldr	r1, [pc, #84]	; (9a40 <SdioCard::writeStart(unsigned long)+0xc4>)
    99ec:	240e      	movs	r4, #14
  m_errorLine = line;
    99ee:	4b15      	ldr	r3, [pc, #84]	; (9a44 <SdioCard::writeStart(unsigned long)+0xc8>)
    99f0:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    99f4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    99f6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    99f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    99fc:	4a10      	ldr	r2, [pc, #64]	; (9a40 <SdioCard::writeStart(unsigned long)+0xc4>)
    99fe:	210a      	movs	r1, #10
      m_busyFcn = 0;
    9a00:	2000      	movs	r0, #0
  m_errorLine = line;
    9a02:	4b10      	ldr	r3, [pc, #64]	; (9a44 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9a04:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    9a06:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    9a0a:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    9a0e:	601a      	str	r2, [r3, #0]
}
    9a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9a14:	ea4f 2949 	mov.w	r9, r9, lsl #9
    9a18:	4808      	ldr	r0, [pc, #32]	; (9a3c <SdioCard::writeStart(unsigned long)+0xc0>)
    9a1a:	4649      	mov	r1, r9
    9a1c:	f7ff fece 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9a20:	2800      	cmp	r0, #0
    9a22:	d1e9      	bne.n	99f8 <SdioCard::writeStart(unsigned long)+0x7c>
    9a24:	e7e1      	b.n	99ea <SdioCard::writeStart(unsigned long)+0x6e>
    9a26:	bf00      	nop
    9a28:	00009951 	.word	0x00009951
    9a2c:	20004738 	.word	0x20004738
    9a30:	0d1a0000 	.word	0x0d1a0000
    9a34:	000f4240 	.word	0x000f4240
    9a38:	200086ee 	.word	0x200086ee
    9a3c:	193a0020 	.word	0x193a0020
    9a40:	2000350a 	.word	0x2000350a
    9a44:	20004648 	.word	0x20004648
    9a48:	2000473c 	.word	0x2000473c
    9a4c:	402c0000 	.word	0x402c0000

00009a50 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    9a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9a54:	4c25      	ldr	r4, [pc, #148]	; (9aec <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9a56:	2100      	movs	r1, #0
    9a58:	4825      	ldr	r0, [pc, #148]	; (9af0 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    9a60:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9a62:	f7ff feab 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9a66:	4605      	mov	r5, r0
    9a68:	b948      	cbnz	r0, 9a7e <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    9a6a:	4922      	ldr	r1, [pc, #136]	; (9af4 <SdioCard::readStop()+0xa4>)
    9a6c:	2009      	movs	r0, #9
  m_errorLine = line;
    9a6e:	4b22      	ldr	r3, [pc, #136]	; (9af8 <SdioCard::readStop()+0xa8>)
    9a70:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    9a74:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    9a76:	601a      	str	r2, [r3, #0]
}
    9a78:	4628      	mov	r0, r5
    9a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    9a7e:	4b1f      	ldr	r3, [pc, #124]	; (9afc <SdioCard::readStop()+0xac>)
    9a80:	f8df 8080 	ldr.w	r8, [pc, #128]	; 9b04 <SdioCard::readStop()+0xb4>
    9a84:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    9a88:	f002 f964 	bl	bd54 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9a8e:	4606      	mov	r6, r0
  while (fcn()) {
    9a90:	01d8      	lsls	r0, r3, #7
    9a92:	d418      	bmi.n	9ac6 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a94:	4f1a      	ldr	r7, [pc, #104]	; (9b00 <SdioCard::readStop()+0xb0>)
    9a96:	e004      	b.n	9aa2 <SdioCard::readStop()+0x52>
    yield();
    9a98:	f003 fe8a 	bl	d7b0 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9a9e:	01d9      	lsls	r1, r3, #7
    9aa0:	d411      	bmi.n	9ac6 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9aa2:	f002 f957 	bl	bd54 <micros>
    9aa6:	1b83      	subs	r3, r0, r6
    9aa8:	42bb      	cmp	r3, r7
    9aaa:	d9f5      	bls.n	9a98 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    9aac:	4a11      	ldr	r2, [pc, #68]	; (9af4 <SdioCard::readStop()+0xa4>)
    9aae:	210a      	movs	r1, #10
      m_busyFcn = 0;
    9ab0:	2500      	movs	r5, #0
  m_errorLine = line;
    9ab2:	4b11      	ldr	r3, [pc, #68]	; (9af8 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    9ab4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    9ab6:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    9aba:	4628      	mov	r0, r5
      m_busyFcn = 0;
    9abc:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    9ac0:	601a      	str	r2, [r3, #0]
}
    9ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    9ac6:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9ac8:	4b08      	ldr	r3, [pc, #32]	; (9aec <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    9aca:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9ad0:	0792      	lsls	r2, r2, #30
    9ad2:	d5d1      	bpl.n	9a78 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9ad4:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9ada:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9ade:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    9ae2:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9ae4:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9ae6:	629a      	str	r2, [r3, #40]	; 0x28
    9ae8:	e7c6      	b.n	9a78 <SdioCard::readStop()+0x28>
    9aea:	bf00      	nop
    9aec:	402c0000 	.word	0x402c0000
    9af0:	0cdb0000 	.word	0x0cdb0000
    9af4:	2000350a 	.word	0x2000350a
    9af8:	20004648 	.word	0x20004648
    9afc:	00009365 	.word	0x00009365
    9b00:	000f4240 	.word	0x000f4240
    9b04:	2000473c 	.word	0x2000473c

00009b08 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b0c:	4682      	mov	sl, r0
    9b0e:	4689      	mov	r9, r1
    9b10:	4e36      	ldr	r6, [pc, #216]	; (9bec <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    9b12:	f002 f91f 	bl	bd54 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9b16:	4d36      	ldr	r5, [pc, #216]	; (9bf0 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    9b18:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9b1a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9c1c <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9b1e:	4f35      	ldr	r7, [pc, #212]	; (9bf4 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    9b20:	e004      	b.n	9b2c <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9b22:	f002 f917 	bl	bd54 <micros>
    9b26:	1b03      	subs	r3, r0, r4
    9b28:	42bb      	cmp	r3, r7
    9b2a:	d827      	bhi.n	9b7c <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9b2c:	6831      	ldr	r1, [r6, #0]
    9b2e:	4628      	mov	r0, r5
    9b30:	f7ff fe44 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9b34:	2800      	cmp	r0, #0
    9b36:	d0f4      	beq.n	9b22 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    9b38:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9b3c:	05da      	lsls	r2, r3, #23
    9b3e:	d5f0      	bpl.n	9b22 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    9b40:	2301      	movs	r3, #1
    9b42:	4d2d      	ldr	r5, [pc, #180]	; (9bf8 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    9b44:	4f2d      	ldr	r7, [pc, #180]	; (9bfc <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9b46:	4651      	mov	r1, sl
  m_dmaBusy = true;
    9b48:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    9b4a:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9b4c:	482c      	ldr	r0, [pc, #176]	; (9c00 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    9b4e:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9b50:	4b2c      	ldr	r3, [pc, #176]	; (9c04 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    9b52:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9b56:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9b5a:	4b2b      	ldr	r3, [pc, #172]	; (9c08 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    9b5c:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9b60:	f7ff fe2c 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9b64:	4604      	mov	r4, r0
    9b66:	b9a0      	cbnz	r0, 9b92 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    9b68:	4928      	ldr	r1, [pc, #160]	; (9c0c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    9b6a:	2004      	movs	r0, #4
  m_errorLine = line;
    9b6c:	4b28      	ldr	r3, [pc, #160]	; (9c10 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    9b6e:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    9b72:	7008      	strb	r0, [r1, #0]
}
    9b74:	4620      	mov	r0, r4
  m_errorLine = line;
    9b76:	601a      	str	r2, [r3, #0]
}
    9b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9b7c:	4923      	ldr	r1, [pc, #140]	; (9c0c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    9b7e:	200a      	movs	r0, #10
  m_errorLine = line;
    9b80:	4b23      	ldr	r3, [pc, #140]	; (9c10 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    9b82:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    9b86:	2400      	movs	r4, #0
  m_errorCode = code;
    9b88:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    9b8a:	601a      	str	r2, [r3, #0]
}
    9b8c:	4620      	mov	r0, r4
    9b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    9b92:	4b20      	ldr	r3, [pc, #128]	; (9c14 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    9b94:	f8df 9088 	ldr.w	r9, [pc, #136]	; 9c20 <cardCMD6(unsigned long, unsigned char*)+0x118>
    9b98:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    9b9c:	f002 f8da 	bl	bd54 <micros>
  return m_dmaBusy;
    9ba0:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    9ba2:	4606      	mov	r6, r0
  while (fcn()) {
    9ba4:	b1bb      	cbz	r3, 9bd6 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ba6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 9bf4 <cardCMD6(unsigned long, unsigned char*)+0xec>
    9baa:	e003      	b.n	9bb4 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    9bac:	f003 fe00 	bl	d7b0 <yield>
  return m_dmaBusy;
    9bb0:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    9bb2:	b183      	cbz	r3, 9bd6 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9bb4:	f002 f8ce 	bl	bd54 <micros>
    9bb8:	1b83      	subs	r3, r0, r6
    9bba:	4543      	cmp	r3, r8
    9bbc:	d9f6      	bls.n	9bac <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    9bbe:	2300      	movs	r3, #0
    9bc0:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    9bc4:	4911      	ldr	r1, [pc, #68]	; (9c0c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    9bc6:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    9bc8:	4b11      	ldr	r3, [pc, #68]	; (9c10 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    9bca:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    9bce:	2400      	movs	r4, #0
  m_errorCode = code;
    9bd0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    9bd2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    9bd4:	e7da      	b.n	9b8c <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9bd6:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    9bd8:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9bda:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    9bdc:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9be0:	d5f0      	bpl.n	9bc4 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    9be2:	683a      	ldr	r2, [r7, #0]
    9be4:	4b0c      	ldr	r3, [pc, #48]	; (9c18 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    9be6:	421a      	tst	r2, r3
    9be8:	d0d0      	beq.n	9b8c <cardCMD6(unsigned long, unsigned char*)+0x84>
    9bea:	e7eb      	b.n	9bc4 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    9bec:	20004738 	.word	0x20004738
    9bf0:	0d1a0000 	.word	0x0d1a0000
    9bf4:	000f4240 	.word	0x000f4240
    9bf8:	200086f0 	.word	0x200086f0
    9bfc:	20004740 	.word	0x20004740
    9c00:	063a0011 	.word	0x063a0011
    9c04:	00010040 	.word	0x00010040
    9c08:	117f0002 	.word	0x117f0002
    9c0c:	2000350a 	.word	0x2000350a
    9c10:	20004648 	.word	0x20004648
    9c14:	00009379 	.word	0x00009379
    9c18:	117f0000 	.word	0x117f0000
    9c1c:	402c0000 	.word	0x402c0000
    9c20:	2000473c 	.word	0x2000473c

00009c24 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    9c28:	4d32      	ldr	r5, [pc, #200]	; (9cf4 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c2a:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    9c2c:	7aab      	ldrb	r3, [r5, #10]
    9c2e:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    9c32:	d112      	bne.n	9c5a <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    9c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9c38:	7aea      	ldrb	r2, [r5, #11]
    9c3a:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9c3c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    9c40:	1c62      	adds	r2, r4, #1
    9c42:	430a      	orrs	r2, r1
    9c44:	4213      	tst	r3, r2
    9c46:	d008      	beq.n	9c5a <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    9c48:	492b      	ldr	r1, [pc, #172]	; (9cf8 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    9c4a:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    9c4c:	4b2b      	ldr	r3, [pc, #172]	; (9cfc <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    9c4e:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    9c52:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9c54:	601a      	str	r2, [r3, #0]
}
    9c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    9c5a:	4b29      	ldr	r3, [pc, #164]	; (9d00 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    9c5c:	781b      	ldrb	r3, [r3, #0]
    9c5e:	b90b      	cbnz	r3, 9c64 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    9c60:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    9c62:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9c64:	4827      	ldr	r0, [pc, #156]	; (9d04 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    9c66:	f7ff fda9 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9c6a:	b940      	cbnz	r0, 9c7e <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    9c6c:	4922      	ldr	r1, [pc, #136]	; (9cf8 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    9c6e:	240f      	movs	r4, #15
  m_errorLine = line;
    9c70:	4b22      	ldr	r3, [pc, #136]	; (9cfc <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    9c72:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    9c76:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9c78:	601a      	str	r2, [r3, #0]
}
    9c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9c7e:	4621      	mov	r1, r4
    9c80:	4821      	ldr	r0, [pc, #132]	; (9d08 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    9c82:	f7ff fd9b 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9c86:	b940      	cbnz	r0, 9c9a <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    9c88:	491b      	ldr	r1, [pc, #108]	; (9cf8 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    9c8a:	2410      	movs	r4, #16
  m_errorLine = line;
    9c8c:	4b1b      	ldr	r3, [pc, #108]	; (9cfc <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    9c8e:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    9c92:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9c94:	601a      	str	r2, [r3, #0]
}
    9c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9c9a:	2100      	movs	r1, #0
    9c9c:	481b      	ldr	r0, [pc, #108]	; (9d0c <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    9c9e:	f7ff fd8d 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9ca2:	b938      	cbnz	r0, 9cb4 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    9ca4:	4914      	ldr	r1, [pc, #80]	; (9cf8 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    9ca6:	2411      	movs	r4, #17
  m_errorLine = line;
    9ca8:	4b14      	ldr	r3, [pc, #80]	; (9cfc <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    9caa:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    9cae:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9cb0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    9cb2:	e7e2      	b.n	9c7a <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    9cb4:	f002 f84e 	bl	bd54 <micros>
    9cb8:	4e15      	ldr	r6, [pc, #84]	; (9d10 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9cba:	4d16      	ldr	r5, [pc, #88]	; (9d14 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    9cbc:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9cbe:	f8df 805c 	ldr.w	r8, [pc, #92]	; 9d1c <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9cc2:	4f15      	ldr	r7, [pc, #84]	; (9d18 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9cc4:	6831      	ldr	r1, [r6, #0]
    9cc6:	4628      	mov	r0, r5
    9cc8:	f7ff fd78 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9ccc:	b118      	cbz	r0, 9cd6 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    9cce:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9cd2:	05db      	lsls	r3, r3, #23
    9cd4:	d4d1      	bmi.n	9c7a <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9cd6:	f002 f83d 	bl	bd54 <micros>
    9cda:	1b00      	subs	r0, r0, r4
    9cdc:	42b8      	cmp	r0, r7
    9cde:	d9f1      	bls.n	9cc4 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    9ce0:	4905      	ldr	r1, [pc, #20]	; (9cf8 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    9ce2:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    9ce4:	4b05      	ldr	r3, [pc, #20]	; (9cfc <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    9ce6:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9cea:	2000      	movs	r0, #0
  m_errorCode = code;
    9cec:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9cee:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9cf0:	e7c3      	b.n	9c7a <SdioCard::erase(unsigned long, unsigned long)+0x56>
    9cf2:	bf00      	nop
    9cf4:	20004724 	.word	0x20004724
    9cf8:	2000350a 	.word	0x2000350a
    9cfc:	20004648 	.word	0x20004648
    9d00:	200086ee 	.word	0x200086ee
    9d04:	201a0000 	.word	0x201a0000
    9d08:	211a0000 	.word	0x211a0000
    9d0c:	261b0000 	.word	0x261b0000
    9d10:	20004738 	.word	0x20004738
    9d14:	0d1a0000 	.word	0x0d1a0000
    9d18:	000f4240 	.word	0x000f4240
    9d1c:	402c0000 	.word	0x402c0000

00009d20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    9d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    9d24:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    9d28:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    9d2a:	bf18      	it	ne
    9d2c:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    9d2e:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    9d30:	9300      	str	r3, [sp, #0]
    9d32:	2b00      	cmp	r3, #0
    9d34:	bf08      	it	eq
    9d36:	f044 0401 	orreq.w	r4, r4, #1
    9d3a:	b15c      	cbz	r4, 9d54 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9d3c:	4940      	ldr	r1, [pc, #256]	; (9e40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    9d3e:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    9d40:	4b40      	ldr	r3, [pc, #256]	; (9e44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    9d42:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    9d46:	2400      	movs	r4, #0
  m_errorCode = code;
    9d48:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    9d4a:	601a      	str	r2, [r3, #0]
}
    9d4c:	4620      	mov	r0, r4
    9d4e:	b003      	add	sp, #12
    9d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    9d54:	4b3c      	ldr	r3, [pc, #240]	; (9e48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    9d56:	4615      	mov	r5, r2
    9d58:	4a3c      	ldr	r2, [pc, #240]	; (9e4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9d5a:	460e      	mov	r6, r1
    9d5c:	f8df 910c 	ldr.w	r9, [pc, #268]	; 9e6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    9d60:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    9d62:	f001 fff7 	bl	bd54 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d66:	f8df 8108 	ldr.w	r8, [pc, #264]	; 9e70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    9d6a:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d6c:	f8df b104 	ldr.w	fp, [pc, #260]	; 9e74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d70:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 9e64 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    9d74:	e006      	b.n	9d84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d76:	f001 ffed 	bl	bd54 <micros>
    9d7a:	1bc0      	subs	r0, r0, r7
    9d7c:	4550      	cmp	r0, sl
    9d7e:	d844      	bhi.n	9e0a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    9d80:	f003 fd16 	bl	d7b0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d84:	f8d9 1000 	ldr.w	r1, [r9]
    9d88:	4640      	mov	r0, r8
    9d8a:	f7ff fd17 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9d8e:	2800      	cmp	r0, #0
    9d90:	d0f1      	beq.n	9d76 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    9d92:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9d96:	05da      	lsls	r2, r3, #23
    9d98:	d5ed      	bpl.n	9d76 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9d9a:	9a00      	ldr	r2, [sp, #0]
    9d9c:	4b2c      	ldr	r3, [pc, #176]	; (9e50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    9d9e:	492b      	ldr	r1, [pc, #172]	; (9e4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9da0:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    9da4:	2200      	movs	r2, #0
  m_dmaBusy = true;
    9da6:	4f2b      	ldr	r7, [pc, #172]	; (9e54 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    9da8:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    9dae:	2101      	movs	r1, #1
  m_irqstat = 0;
    9db0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 9e78 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    9db4:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    9db6:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    9dba:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9dbe:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9dc2:	4b25      	ldr	r3, [pc, #148]	; (9e58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    9dc4:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    9dc8:	4b24      	ldr	r3, [pc, #144]	; (9e5c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    9dca:	781b      	ldrb	r3, [r3, #0]
    9dcc:	b343      	cbz	r3, 9e20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    9dce:	4631      	mov	r1, r6
    9dd0:	9801      	ldr	r0, [sp, #4]
    9dd2:	f7ff fcf3 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9dd6:	4681      	mov	r9, r0
    9dd8:	2800      	cmp	r0, #0
    9dda:	d0b7      	beq.n	9d4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    9ddc:	4b20      	ldr	r3, [pc, #128]	; (9e60 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    9dde:	4a1b      	ldr	r2, [pc, #108]	; (9e4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9de0:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    9de2:	f001 ffb7 	bl	bd54 <micros>
  return m_dmaBusy;
    9de6:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    9de8:	4605      	mov	r5, r0
  while (fcn()) {
    9dea:	b1db      	cbz	r3, 9e24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9dec:	4e1d      	ldr	r6, [pc, #116]	; (9e64 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    9dee:	e003      	b.n	9df8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    9df0:	f003 fcde 	bl	d7b0 <yield>
  return m_dmaBusy;
    9df4:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    9df6:	b1ab      	cbz	r3, 9e24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9df8:	f001 ffac 	bl	bd54 <micros>
    9dfc:	1b40      	subs	r0, r0, r5
    9dfe:	42b0      	cmp	r0, r6
    9e00:	d9f6      	bls.n	9df0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    9e02:	2300      	movs	r3, #0
    9e04:	4a11      	ldr	r2, [pc, #68]	; (9e4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9e06:	6013      	str	r3, [r2, #0]
      return true;
    9e08:	e7a0      	b.n	9d4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    9e0a:	4b0d      	ldr	r3, [pc, #52]	; (9e40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    9e0c:	220a      	movs	r2, #10
      m_busyFcn = 0;
    9e0e:	2100      	movs	r1, #0
    9e10:	480e      	ldr	r0, [pc, #56]	; (9e4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    9e12:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    9e14:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    9e18:	4b0a      	ldr	r3, [pc, #40]	; (9e44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    9e1a:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    9e1c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    9e1e:	e795      	b.n	9d4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    9e20:	0276      	lsls	r6, r6, #9
    9e22:	e7d4      	b.n	9dce <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    9e24:	2300      	movs	r3, #0
    9e26:	4a09      	ldr	r2, [pc, #36]	; (9e4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9e28:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9e2a:	f8d8 3000 	ldr.w	r3, [r8]
    9e2e:	079b      	lsls	r3, r3, #30
    9e30:	d58c      	bpl.n	9d4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    9e32:	f8d8 2000 	ldr.w	r2, [r8]
    9e36:	4b0c      	ldr	r3, [pc, #48]	; (9e68 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    9e38:	421a      	tst	r2, r3
    9e3a:	bf08      	it	eq
    9e3c:	464c      	moveq	r4, r9
    9e3e:	e785      	b.n	9d4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    9e40:	2000350a 	.word	0x2000350a
    9e44:	20004648 	.word	0x20004648
    9e48:	00009951 	.word	0x00009951
    9e4c:	2000473c 	.word	0x2000473c
    9e50:	1fff0000 	.word	0x1fff0000
    9e54:	200086f0 	.word	0x200086f0
    9e58:	117f0002 	.word	0x117f0002
    9e5c:	200086ee 	.word	0x200086ee
    9e60:	00009379 	.word	0x00009379
    9e64:	000f4240 	.word	0x000f4240
    9e68:	117f0000 	.word	0x117f0000
    9e6c:	20004738 	.word	0x20004738
    9e70:	0d1a0000 	.word	0x0d1a0000
    9e74:	402c0000 	.word	0x402c0000
    9e78:	20004740 	.word	0x20004740

00009e7c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e7e:	4606      	mov	r6, r0
    9e80:	7a00      	ldrb	r0, [r0, #8]
    9e82:	460c      	mov	r4, r1
    9e84:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9e86:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9e88:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9e8a:	d413      	bmi.n	9eb4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9e8c:	b183      	cbz	r3, 9eb0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9e8e:	440f      	add	r7, r1
    9e90:	e001      	b.n	9e96 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    9e92:	42bc      	cmp	r4, r7
    9e94:	d00c      	beq.n	9eb0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    9e96:	6833      	ldr	r3, [r6, #0]
    9e98:	462a      	mov	r2, r5
    9e9a:	4621      	mov	r1, r4
    9e9c:	4630      	mov	r0, r6
    9e9e:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    9ea0:	3401      	adds	r4, #1
    9ea2:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    9ea6:	4798      	blx	r3
    9ea8:	2800      	cmp	r0, #0
    9eaa:	d1f2      	bne.n	9e92 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    9eac:	2000      	movs	r0, #0
}
    9eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9eb0:	2001      	movs	r0, #1
}
    9eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    9eb4:	0790      	lsls	r0, r2, #30
    9eb6:	d012      	beq.n	9ede <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d0f9      	beq.n	9eb0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9ebc:	440f      	add	r7, r1
    9ebe:	e001      	b.n	9ec4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    9ec0:	42bc      	cmp	r4, r7
    9ec2:	d0f5      	beq.n	9eb0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    9ec4:	6833      	ldr	r3, [r6, #0]
    9ec6:	462a      	mov	r2, r5
    9ec8:	4621      	mov	r1, r4
    9eca:	4630      	mov	r0, r6
    9ecc:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9ece:	3401      	adds	r4, #1
    9ed0:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    9ed4:	4798      	blx	r3
    9ed6:	2800      	cmp	r0, #0
    9ed8:	d1f2      	bne.n	9ec0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9eda:	2000      	movs	r0, #0
    9edc:	e7e7      	b.n	9eae <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9ede:	4806      	ldr	r0, [pc, #24]	; (9ef8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    9ee0:	f7ff ff1e 	bl	9d20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9ee4:	2800      	cmp	r0, #0
    9ee6:	d1e3      	bne.n	9eb0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9ee8:	4904      	ldr	r1, [pc, #16]	; (9efc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9eea:	240c      	movs	r4, #12
  m_errorLine = line;
    9eec:	4b04      	ldr	r3, [pc, #16]	; (9f00 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    9eee:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    9ef2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9ef4:	601a      	str	r2, [r3, #0]
}
    9ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ef8:	123a0037 	.word	0x123a0037
    9efc:	2000350a 	.word	0x2000350a
    9f00:	20004648 	.word	0x20004648

00009f04 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f06:	4606      	mov	r6, r0
    9f08:	7a00      	ldrb	r0, [r0, #8]
    9f0a:	460c      	mov	r4, r1
    9f0c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9f0e:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9f10:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9f12:	d413      	bmi.n	9f3c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9f14:	b183      	cbz	r3, 9f38 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9f16:	440f      	add	r7, r1
    9f18:	e001      	b.n	9f1e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9f1a:	42bc      	cmp	r4, r7
    9f1c:	d00c      	beq.n	9f38 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    9f1e:	6833      	ldr	r3, [r6, #0]
    9f20:	462a      	mov	r2, r5
    9f22:	4621      	mov	r1, r4
    9f24:	4630      	mov	r0, r6
    9f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    9f28:	3401      	adds	r4, #1
    9f2a:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    9f2e:	4798      	blx	r3
    9f30:	2800      	cmp	r0, #0
    9f32:	d1f2      	bne.n	9f1a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    9f34:	2000      	movs	r0, #0
}
    9f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9f38:	2001      	movs	r0, #1
}
    9f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    9f3c:	0790      	lsls	r0, r2, #30
    9f3e:	d012      	beq.n	9f66 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9f40:	2b00      	cmp	r3, #0
    9f42:	d0f9      	beq.n	9f38 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9f44:	440f      	add	r7, r1
    9f46:	e001      	b.n	9f4c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    9f48:	42bc      	cmp	r4, r7
    9f4a:	d0f5      	beq.n	9f38 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    9f4c:	6833      	ldr	r3, [r6, #0]
    9f4e:	462a      	mov	r2, r5
    9f50:	4621      	mov	r1, r4
    9f52:	4630      	mov	r0, r6
    9f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9f56:	3401      	adds	r4, #1
    9f58:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    9f5c:	4798      	blx	r3
    9f5e:	2800      	cmp	r0, #0
    9f60:	d1f2      	bne.n	9f48 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    9f62:	2000      	movs	r0, #0
    9f64:	e7e7      	b.n	9f36 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    9f66:	4806      	ldr	r0, [pc, #24]	; (9f80 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    9f68:	f7ff feda 	bl	9d20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9f6c:	2800      	cmp	r0, #0
    9f6e:	d1e3      	bne.n	9f38 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    9f70:	4904      	ldr	r1, [pc, #16]	; (9f84 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    9f72:	240e      	movs	r4, #14
  m_errorLine = line;
    9f74:	4b04      	ldr	r3, [pc, #16]	; (9f88 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    9f76:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    9f7a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    9f7c:	601a      	str	r2, [r3, #0]
}
    9f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f80:	193a0027 	.word	0x193a0027
    9f84:	2000350a 	.word	0x2000350a
    9f88:	20004648 	.word	0x20004648

00009f8c <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    9f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    9f90:	2500      	movs	r5, #0
  m_initDone = false;
    9f92:	f8df 92c0 	ldr.w	r9, [pc, #704]	; a254 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    9f96:	4c9b      	ldr	r4, [pc, #620]	; (a204 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9f98:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    9f9a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; a258 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    9f9e:	4e9a      	ldr	r6, [pc, #616]	; (a208 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    9fa0:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    9fa2:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    9fa4:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    9fa8:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    9faa:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    9fae:	7035      	strb	r5, [r6, #0]
  initSDHC();
    9fb0:	f7ff fad2 	bl	9558 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9fb4:	4629      	mov	r1, r5
    9fb6:	4628      	mov	r0, r5
    9fb8:	f7ff fc00 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9fbc:	b950      	cbnz	r0, 9fd4 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    9fbe:	2101      	movs	r1, #1
  m_errorLine = line;
    9fc0:	4b92      	ldr	r3, [pc, #584]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    9fc2:	f240 228e 	movw	r2, #654	; 0x28e
    9fc6:	4605      	mov	r5, r0
  m_errorCode = code;
    9fc8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    9fca:	601a      	str	r2, [r3, #0]
}
    9fcc:	4628      	mov	r0, r5
    9fce:	b011      	add	sp, #68	; 0x44
    9fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fd4:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9fd6:	4f8e      	ldr	r7, [pc, #568]	; (a210 <SdioCard::begin(SdioConfig)+0x284>)
    9fd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9fdc:	4638      	mov	r0, r7
    9fde:	f7ff fbed 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    9fe2:	2800      	cmp	r0, #0
    9fe4:	d14e      	bne.n	a084 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9fe6:	3d01      	subs	r5, #1
    9fe8:	d1f6      	bne.n	9fd8 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    9fea:	7833      	ldrb	r3, [r6, #0]
    9fec:	2b00      	cmp	r3, #0
    9fee:	d03d      	beq.n	a06c <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9ff0:	f8df b268 	ldr.w	fp, [pc, #616]	; a25c <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    9ff4:	f001 feae 	bl	bd54 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9ff8:	4e86      	ldr	r6, [pc, #536]	; (a214 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    9ffa:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9ffc:	f8df a260 	ldr.w	sl, [pc, #608]	; a260 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a000:	4f85      	ldr	r7, [pc, #532]	; (a218 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a002:	2100      	movs	r1, #0
    a004:	4630      	mov	r0, r6
    a006:	f7ff fbd9 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a00a:	b950      	cbnz	r0, a022 <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    a00c:	2500      	movs	r5, #0
  m_errorCode = code;
    a00e:	2117      	movs	r1, #23
  m_errorLine = line;
    a010:	4b7e      	ldr	r3, [pc, #504]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a012:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    a016:	4628      	mov	r0, r5
  m_errorCode = code;
    a018:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a01a:	601a      	str	r2, [r3, #0]
}
    a01c:	b011      	add	sp, #68	; 0x44
    a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a022:	4659      	mov	r1, fp
    a024:	4650      	mov	r0, sl
    a026:	f7ff fbc9 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a02a:	2800      	cmp	r0, #0
    a02c:	d0ee      	beq.n	a00c <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    a02e:	f001 fe91 	bl	bd54 <micros>
    a032:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a034:	4b79      	ldr	r3, [pc, #484]	; (a21c <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a036:	42b8      	cmp	r0, r7
    a038:	d8e8      	bhi.n	a00c <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a03a:	691a      	ldr	r2, [r3, #16]
    a03c:	2a00      	cmp	r2, #0
    a03e:	dae0      	bge.n	a002 <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    a040:	6919      	ldr	r1, [r3, #16]
    a042:	4a77      	ldr	r2, [pc, #476]	; (a220 <SdioCard::begin(SdioConfig)+0x294>)
    a044:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    a046:	691b      	ldr	r3, [r3, #16]
    a048:	005a      	lsls	r2, r3, #1
    a04a:	d502      	bpl.n	a052 <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    a04c:	2301      	movs	r3, #1
    a04e:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a052:	2100      	movs	r1, #0
    a054:	4873      	ldr	r0, [pc, #460]	; (a224 <SdioCard::begin(SdioConfig)+0x298>)
    a056:	f7ff fbb1 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a05a:	4605      	mov	r5, r0
    a05c:	bb10      	cbnz	r0, a0a4 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    a05e:	2102      	movs	r1, #2
  m_errorLine = line;
    a060:	4b6a      	ldr	r3, [pc, #424]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a062:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    a066:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a068:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    a06a:	e7af      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    a06c:	f7ff fa74 	bl	9558 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    a070:	4629      	mov	r1, r5
    a072:	4628      	mov	r0, r5
    a074:	f7ff fba2 	bl	97bc <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a078:	7833      	ldrb	r3, [r6, #0]
    a07a:	2b00      	cmp	r3, #0
    a07c:	d1b8      	bne.n	9ff0 <SdioCard::begin(SdioConfig)+0x64>
    a07e:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    a082:	e7b7      	b.n	9ff4 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    a084:	4b65      	ldr	r3, [pc, #404]	; (a21c <SdioCard::begin(SdioConfig)+0x290>)
    a086:	691b      	ldr	r3, [r3, #16]
    a088:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    a08c:	d007      	beq.n	a09e <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    a08e:	2106      	movs	r1, #6
  m_errorLine = line;
    a090:	4b5e      	ldr	r3, [pc, #376]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a092:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    a096:	2500      	movs	r5, #0
  m_errorCode = code;
    a098:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a09a:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    a09c:	e796      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    a09e:	2301      	movs	r3, #1
    a0a0:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    a0a2:	e7a5      	b.n	9ff0 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    a0a4:	2100      	movs	r1, #0
    a0a6:	4860      	ldr	r0, [pc, #384]	; (a228 <SdioCard::begin(SdioConfig)+0x29c>)
    a0a8:	f7ff fb88 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a0ac:	4605      	mov	r5, r0
    a0ae:	b930      	cbnz	r0, a0be <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    a0b0:	2103      	movs	r1, #3
  m_errorLine = line;
    a0b2:	4b56      	ldr	r3, [pc, #344]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a0b4:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    a0b8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a0ba:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    a0bc:	e786      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a0be:	4e57      	ldr	r6, [pc, #348]	; (a21c <SdioCard::begin(SdioConfig)+0x290>)
    a0c0:	4b5a      	ldr	r3, [pc, #360]	; (a22c <SdioCard::begin(SdioConfig)+0x2a0>)
    a0c2:	6932      	ldr	r2, [r6, #16]
    a0c4:	4f5a      	ldr	r7, [pc, #360]	; (a230 <SdioCard::begin(SdioConfig)+0x2a4>)
    a0c6:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a0c8:	495a      	ldr	r1, [pc, #360]	; (a234 <SdioCard::begin(SdioConfig)+0x2a8>)
    a0ca:	485b      	ldr	r0, [pc, #364]	; (a238 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a0cc:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a0ce:	f7ff fbc1 	bl	9854 <readReg16(unsigned long, void*)>
    a0d2:	4605      	mov	r5, r0
    a0d4:	b930      	cbnz	r0, a0e4 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    a0d6:	2107      	movs	r1, #7
  m_errorLine = line;
    a0d8:	4b4c      	ldr	r3, [pc, #304]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a0da:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    a0de:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a0e0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    a0e2:	e773      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    a0e4:	4955      	ldr	r1, [pc, #340]	; (a23c <SdioCard::begin(SdioConfig)+0x2b0>)
    a0e6:	4856      	ldr	r0, [pc, #344]	; (a240 <SdioCard::begin(SdioConfig)+0x2b4>)
    a0e8:	f7ff fbb4 	bl	9854 <readReg16(unsigned long, void*)>
    a0ec:	4605      	mov	r5, r0
    a0ee:	b930      	cbnz	r0, a0fe <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    a0f0:	2108      	movs	r1, #8
  m_errorLine = line;
    a0f2:	4b46      	ldr	r3, [pc, #280]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a0f4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    a0f8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a0fa:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    a0fc:	e766      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    a0fe:	6839      	ldr	r1, [r7, #0]
    a100:	4850      	ldr	r0, [pc, #320]	; (a244 <SdioCard::begin(SdioConfig)+0x2b8>)
    a102:	f7ff fb5b 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a106:	4605      	mov	r5, r0
    a108:	b930      	cbnz	r0, a118 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    a10a:	2105      	movs	r1, #5
  m_errorLine = line;
    a10c:	4b3f      	ldr	r3, [pc, #252]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a10e:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    a112:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a114:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    a116:	e759      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a118:	6839      	ldr	r1, [r7, #0]
    a11a:	483e      	ldr	r0, [pc, #248]	; (a214 <SdioCard::begin(SdioConfig)+0x288>)
    a11c:	f7ff fb4e 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a120:	b938      	cbnz	r0, a132 <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    a122:	2114      	movs	r1, #20
  m_errorLine = line;
    a124:	4b39      	ldr	r3, [pc, #228]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    a126:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    a12a:	2500      	movs	r5, #0
  m_errorCode = code;
    a12c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    a12e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    a130:	e74c      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a132:	2102      	movs	r1, #2
    a134:	4844      	ldr	r0, [pc, #272]	; (a248 <SdioCard::begin(SdioConfig)+0x2bc>)
    a136:	f7ff fb41 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a13a:	4605      	mov	r5, r0
    a13c:	2800      	cmp	r0, #0
    a13e:	d0f0      	beq.n	a122 <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a140:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a142:	4669      	mov	r1, sp
    a144:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a148:	f023 0306 	bic.w	r3, r3, #6
    a14c:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    a14e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    a150:	f043 0302 	orr.w	r3, r3, #2
    a154:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a156:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    a15a:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a15c:	f7ff fcd4 	bl	9b08 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    a160:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    a164:	079b      	lsls	r3, r3, #30
    a166:	d543      	bpl.n	a1f0 <SdioCard::begin(SdioConfig)+0x264>
    a168:	2800      	cmp	r0, #0
    a16a:	d041      	beq.n	a1f0 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    a16c:	4e27      	ldr	r6, [pc, #156]	; (a20c <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a16e:	4669      	mov	r1, sp
    a170:	4836      	ldr	r0, [pc, #216]	; (a24c <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    a172:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    a176:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a178:	f7ff fcc6 	bl	9b08 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    a17c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    a180:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    a184:	2b01      	cmp	r3, #1
    a186:	d136      	bne.n	a1f6 <SdioCard::begin(SdioConfig)+0x26a>
    a188:	b3a8      	cbz	r0, a1f6 <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    a18a:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a18e:	4c30      	ldr	r4, [pc, #192]	; (a250 <SdioCard::begin(SdioConfig)+0x2c4>)
    a190:	2305      	movs	r3, #5
    a192:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a196:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a19a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a19e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a1a2:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a1a6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    a1aa:	f7ff f8eb 	bl	9384 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a1ae:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    a1b0:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a1b4:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a1b8:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a1bc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a1c0:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a1c4:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a1c8:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    a1cc:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    a1d0:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    a1d4:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    a1d8:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    a1dc:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    a1e0:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    a1e2:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    a1e6:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    a1ea:	f889 3000 	strb.w	r3, [r9]
  return true;
    a1ee:	e6ed      	b.n	9fcc <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    a1f0:	f246 10a8 	movw	r0, #25000	; 0x61a8
    a1f4:	e7cb      	b.n	a18e <SdioCard::begin(SdioConfig)+0x202>
    a1f6:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    a1fa:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    a1fe:	6037      	str	r7, [r6, #0]
    a200:	e7c5      	b.n	a18e <SdioCard::begin(SdioConfig)+0x202>
    a202:	bf00      	nop
    a204:	2000350a 	.word	0x2000350a
    a208:	200086ed 	.word	0x200086ed
    a20c:	20004648 	.word	0x20004648
    a210:	081a0000 	.word	0x081a0000
    a214:	371a0000 	.word	0x371a0000
    a218:	000f4240 	.word	0x000f4240
    a21c:	402c0000 	.word	0x402c0000
    a220:	20004734 	.word	0x20004734
    a224:	02090000 	.word	0x02090000
    a228:	031a0000 	.word	0x031a0000
    a22c:	ffff0000 	.word	0xffff0000
    a230:	20004738 	.word	0x20004738
    a234:	20004724 	.word	0x20004724
    a238:	09090000 	.word	0x09090000
    a23c:	20004714 	.word	0x20004714
    a240:	0a090000 	.word	0x0a090000
    a244:	071b0000 	.word	0x071b0000
    a248:	061a0000 	.word	0x061a0000
    a24c:	80fffff1 	.word	0x80fffff1
    a250:	401f8000 	.word	0x401f8000
    a254:	200086ec 	.word	0x200086ec
    a258:	200086ee 	.word	0x200086ee
    a25c:	40300000 	.word	0x40300000
    a260:	29020000 	.word	0x29020000

0000a264 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a264:	4b37      	ldr	r3, [pc, #220]	; (a344 <SdioCard::readData(unsigned char*)+0xe0>)
    a266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a268:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    a26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a26e:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a270:	d40d      	bmi.n	a28e <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a274:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    a278:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    a27a:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a27c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a27e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    a282:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a286:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    a28a:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    a28c:	b662      	cpsie	i
  uint32_t m = micros();
    a28e:	f001 fd61 	bl	bd54 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    a292:	4e2c      	ldr	r6, [pc, #176]	; (a344 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a294:	f8df 80c4 	ldr.w	r8, [pc, #196]	; a35c <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    a298:	4605      	mov	r5, r0
  while (fcn()) {
    a29a:	e004      	b.n	a2a6 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a29c:	f001 fd5a 	bl	bd54 <micros>
    a2a0:	1b43      	subs	r3, r0, r5
    a2a2:	4543      	cmp	r3, r8
    a2a4:	d837      	bhi.n	a316 <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    a2a6:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    a2a8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    a2ac:	d0f6      	beq.n	a29c <SdioCard::readData(unsigned char*)+0x38>
    a2ae:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    a2b2:	4824      	ldr	r0, [pc, #144]	; (a344 <SdioCard::readData(unsigned char*)+0xe0>)
    a2b4:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    a2b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a2ba:	051b      	lsls	r3, r3, #20
    a2bc:	d5fc      	bpl.n	a2b8 <SdioCard::readData(unsigned char*)+0x54>
    a2be:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    a2c2:	6a02      	ldr	r2, [r0, #32]
    a2c4:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a2c8:	459c      	cmp	ip, r3
    a2ca:	d1fa      	bne.n	a2c2 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    a2cc:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    a2d0:	4567      	cmp	r7, ip
    a2d2:	d1f1      	bne.n	a2b8 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    a2d4:	f001 fd3e 	bl	bd54 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a2d8:	4f1a      	ldr	r7, [pc, #104]	; (a344 <SdioCard::readData(unsigned char*)+0xe0>)
    a2da:	4d1b      	ldr	r5, [pc, #108]	; (a348 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    a2dc:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a2de:	f8df 807c 	ldr.w	r8, [pc, #124]	; a35c <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    a2e2:	e004      	b.n	a2ee <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a2e4:	f001 fd36 	bl	bd54 <micros>
    a2e8:	1b83      	subs	r3, r0, r6
    a2ea:	4543      	cmp	r3, r8
    a2ec:	d81d      	bhi.n	a32a <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a2ee:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    a2f0:	402c      	ands	r4, r5
    a2f2:	d0f7      	beq.n	a2e4 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a2f6:	4a15      	ldr	r2, [pc, #84]	; (a34c <SdioCard::readData(unsigned char*)+0xe8>)
    a2f8:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a2fa:	6813      	ldr	r3, [r2, #0]
    a2fc:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a2fe:	6813      	ldr	r3, [r2, #0]
    a300:	f013 0302 	ands.w	r3, r3, #2
    a304:	d01b      	beq.n	a33e <SdioCard::readData(unsigned char*)+0xda>
    a306:	6812      	ldr	r2, [r2, #0]
    a308:	4b11      	ldr	r3, [pc, #68]	; (a350 <SdioCard::readData(unsigned char*)+0xec>)
    a30a:	421a      	tst	r2, r3
    a30c:	bf0c      	ite	eq
    a30e:	2001      	moveq	r0, #1
    a310:	2000      	movne	r0, #0
}
    a312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    a316:	490f      	ldr	r1, [pc, #60]	; (a354 <SdioCard::readData(unsigned char*)+0xf0>)
    a318:	251a      	movs	r5, #26
  m_errorLine = line;
    a31a:	4b0f      	ldr	r3, [pc, #60]	; (a358 <SdioCard::readData(unsigned char*)+0xf4>)
    a31c:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    a320:	4620      	mov	r0, r4
  m_errorCode = code;
    a322:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    a324:	601a      	str	r2, [r3, #0]
}
    a326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    a32a:	490a      	ldr	r1, [pc, #40]	; (a354 <SdioCard::readData(unsigned char*)+0xf0>)
    a32c:	251d      	movs	r5, #29
  m_errorLine = line;
    a32e:	4b0a      	ldr	r3, [pc, #40]	; (a358 <SdioCard::readData(unsigned char*)+0xf4>)
    a330:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    a334:	4620      	mov	r0, r4
  m_errorCode = code;
    a336:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    a338:	601a      	str	r2, [r3, #0]
}
    a33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a33e:	4618      	mov	r0, r3
}
    a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a344:	402c0000 	.word	0x402c0000
    a348:	117f0002 	.word	0x117f0002
    a34c:	20004740 	.word	0x20004740
    a350:	117f0000 	.word	0x117f0000
    a354:	2000350a 	.word	0x2000350a
    a358:	20004648 	.word	0x20004648
    a35c:	000f4240 	.word	0x000f4240

0000a360 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    a360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    a364:	4b29      	ldr	r3, [pc, #164]	; (a40c <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    a366:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    a368:	f8df a0c0 	ldr.w	sl, [pc, #192]	; a42c <SdioCard::readStart(unsigned long)+0xcc>
    a36c:	4e28      	ldr	r6, [pc, #160]	; (a410 <SdioCard::readStart(unsigned long)+0xb0>)
    a36e:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    a372:	f001 fcef 	bl	bd54 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a376:	4d27      	ldr	r5, [pc, #156]	; (a414 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    a378:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a37a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; a430 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a37e:	4f26      	ldr	r7, [pc, #152]	; (a418 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    a380:	e006      	b.n	a390 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a382:	f001 fce7 	bl	bd54 <micros>
    a386:	1b00      	subs	r0, r0, r4
    a388:	42b8      	cmp	r0, r7
    a38a:	d829      	bhi.n	a3e0 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    a38c:	f003 fa10 	bl	d7b0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a390:	6831      	ldr	r1, [r6, #0]
    a392:	4628      	mov	r0, r5
    a394:	f7ff fa12 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a398:	2800      	cmp	r0, #0
    a39a:	d0f2      	beq.n	a382 <SdioCard::readStart(unsigned long)+0x22>
    a39c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    a3a0:	05db      	lsls	r3, r3, #23
    a3a2:	d5ee      	bpl.n	a382 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    a3a4:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    a3a6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    a3aa:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a3ae:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    a3b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a3b6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a3ba:	4b18      	ldr	r3, [pc, #96]	; (a41c <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    a3bc:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	b1cb      	cbz	r3, a3f8 <SdioCard::readStart(unsigned long)+0x98>
    a3c4:	4649      	mov	r1, r9
    a3c6:	4816      	ldr	r0, [pc, #88]	; (a420 <SdioCard::readStart(unsigned long)+0xc0>)
    a3c8:	f7ff f9f8 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a3cc:	b930      	cbnz	r0, a3dc <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    a3ce:	4915      	ldr	r1, [pc, #84]	; (a424 <SdioCard::readStart(unsigned long)+0xc4>)
    a3d0:	240c      	movs	r4, #12
  m_errorLine = line;
    a3d2:	4b15      	ldr	r3, [pc, #84]	; (a428 <SdioCard::readStart(unsigned long)+0xc8>)
    a3d4:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    a3d8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    a3da:	601a      	str	r2, [r3, #0]
}
    a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    a3e0:	4a10      	ldr	r2, [pc, #64]	; (a424 <SdioCard::readStart(unsigned long)+0xc4>)
    a3e2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    a3e4:	2000      	movs	r0, #0
  m_errorLine = line;
    a3e6:	4b10      	ldr	r3, [pc, #64]	; (a428 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    a3e8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    a3ea:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    a3ee:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    a3f2:	601a      	str	r2, [r3, #0]
}
    a3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a3f8:	ea4f 2949 	mov.w	r9, r9, lsl #9
    a3fc:	4808      	ldr	r0, [pc, #32]	; (a420 <SdioCard::readStart(unsigned long)+0xc0>)
    a3fe:	4649      	mov	r1, r9
    a400:	f7ff f9dc 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a404:	2800      	cmp	r0, #0
    a406:	d1e9      	bne.n	a3dc <SdioCard::readStart(unsigned long)+0x7c>
    a408:	e7e1      	b.n	a3ce <SdioCard::readStart(unsigned long)+0x6e>
    a40a:	bf00      	nop
    a40c:	00009951 	.word	0x00009951
    a410:	20004738 	.word	0x20004738
    a414:	0d1a0000 	.word	0x0d1a0000
    a418:	000f4240 	.word	0x000f4240
    a41c:	200086ee 	.word	0x200086ee
    a420:	123a0030 	.word	0x123a0030
    a424:	2000350a 	.word	0x2000350a
    a428:	20004648 	.word	0x20004648
    a42c:	2000473c 	.word	0x2000473c
    a430:	402c0000 	.word	0x402c0000

0000a434 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    a438:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a43a:	4c1d      	ldr	r4, [pc, #116]	; (a4b0 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    a43c:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    a43e:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a440:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a444:	481b      	ldr	r0, [pc, #108]	; (a4b4 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    a44a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a44c:	f7ff f9b6 	bl	97bc <cardCommand(unsigned long, unsigned long)>
    a450:	b940      	cbnz	r0, a464 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    a452:	4919      	ldr	r1, [pc, #100]	; (a4b8 <SdioCard::stopTransmission(bool)+0x84>)
    a454:	2409      	movs	r4, #9
  m_errorLine = line;
    a456:	4b19      	ldr	r3, [pc, #100]	; (a4bc <SdioCard::stopTransmission(bool)+0x88>)
    a458:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    a45c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    a45e:	601a      	str	r2, [r3, #0]
}
    a460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    a464:	2d00      	cmp	r5, #0
    a466:	d0fb      	beq.n	a460 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    a468:	4b15      	ldr	r3, [pc, #84]	; (a4c0 <SdioCard::stopTransmission(bool)+0x8c>)
    a46a:	4e16      	ldr	r6, [pc, #88]	; (a4c4 <SdioCard::stopTransmission(bool)+0x90>)
    a46c:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    a46e:	f001 fc71 	bl	bd54 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a472:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    a474:	4607      	mov	r7, r0
  while (fcn()) {
    a476:	01da      	lsls	r2, r3, #7
    a478:	d416      	bmi.n	a4a8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a47a:	f8df 804c 	ldr.w	r8, [pc, #76]	; a4c8 <SdioCard::stopTransmission(bool)+0x94>
    a47e:	e004      	b.n	a48a <SdioCard::stopTransmission(bool)+0x56>
    yield();
    a480:	f003 f996 	bl	d7b0 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a484:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    a486:	01db      	lsls	r3, r3, #7
    a488:	d40e      	bmi.n	a4a8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a48a:	f001 fc63 	bl	bd54 <micros>
    a48e:	1bc0      	subs	r0, r0, r7
    a490:	4540      	cmp	r0, r8
    a492:	d9f5      	bls.n	a480 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    a494:	4a08      	ldr	r2, [pc, #32]	; (a4b8 <SdioCard::stopTransmission(bool)+0x84>)
    a496:	210a      	movs	r1, #10
      m_busyFcn = 0;
    a498:	2000      	movs	r0, #0
  m_errorLine = line;
    a49a:	4b08      	ldr	r3, [pc, #32]	; (a4bc <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    a49c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    a49e:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    a4a2:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    a4a4:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    a4a6:	e7db      	b.n	a460 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    a4a8:	2300      	movs	r3, #0
  return true;
    a4aa:	4628      	mov	r0, r5
  m_busyFcn = 0;
    a4ac:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    a4ae:	e7d7      	b.n	a460 <SdioCard::stopTransmission(bool)+0x2c>
    a4b0:	402c0000 	.word	0x402c0000
    a4b4:	0cdb0000 	.word	0x0cdb0000
    a4b8:	2000350a 	.word	0x2000350a
    a4bc:	20004648 	.word	0x20004648
    a4c0:	00009365 	.word	0x00009365
    a4c4:	2000473c 	.word	0x2000473c
    a4c8:	000f4240 	.word	0x000f4240

0000a4cc <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    a4cc:	4b0a      	ldr	r3, [pc, #40]	; (a4f8 <SdioCard::syncDevice()+0x2c>)
    a4ce:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    a4d0:	b510      	push	{r4, lr}
    a4d2:	4604      	mov	r4, r0
  if (!m_transferActive) {
    a4d4:	b91b      	cbnz	r3, a4de <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    a4d6:	7a63      	ldrb	r3, [r4, #9]
    a4d8:	b943      	cbnz	r3, a4ec <SdioCard::syncDevice()+0x20>
  return true;
    a4da:	2001      	movs	r0, #1
}
    a4dc:	bd10      	pop	{r4, pc}
    a4de:	f7ff f8cf 	bl	9680 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    a4e2:	2800      	cmp	r0, #0
    a4e4:	d0fa      	beq.n	a4dc <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    a4e6:	7a63      	ldrb	r3, [r4, #9]
    a4e8:	2b00      	cmp	r3, #0
    a4ea:	d0f6      	beq.n	a4da <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    a4ec:	4620      	mov	r0, r4
    a4ee:	2101      	movs	r1, #1
}
    a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    a4f4:	f7ff bf9e 	b.w	a434 <SdioCard::stopTransmission(bool)>
    a4f8:	200086ef 	.word	0x200086ef

0000a4fc <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a500:	4604      	mov	r4, r0
    a502:	7a00      	ldrb	r0, [r0, #8]
    a504:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    a508:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    a50a:	f010 0501 	ands.w	r5, r0, #1
    a50e:	d013      	beq.n	a538 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    a510:	0793      	lsls	r3, r2, #30
    a512:	d03c      	beq.n	a58e <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a514:	2301      	movs	r3, #1
    a516:	4838      	ldr	r0, [pc, #224]	; (a5f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    a518:	466a      	mov	r2, sp
    a51a:	f7ff fc01 	bl	9d20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a51e:	2800      	cmp	r0, #0
    a520:	d03a      	beq.n	a598 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    a522:	f44f 7200 	mov.w	r2, #512	; 0x200
    a526:	4669      	mov	r1, sp
    a528:	4630      	mov	r0, r6
    a52a:	f001 fcb9 	bl	bea0 <memcpy>
}
    a52e:	4628      	mov	r0, r5
    a530:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    a538:	f8df 80cc 	ldr.w	r8, [pc, #204]	; a608 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    a53c:	460f      	mov	r7, r1
    a53e:	f898 3000 	ldrb.w	r3, [r8]
    a542:	2b00      	cmp	r3, #0
    a544:	d135      	bne.n	a5b2 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    a546:	7a63      	ldrb	r3, [r4, #9]
    a548:	2b01      	cmp	r3, #1
    a54a:	d039      	beq.n	a5c0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    a54c:	6822      	ldr	r2, [r4, #0]
    a54e:	492b      	ldr	r1, [pc, #172]	; (a5fc <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    a550:	6a12      	ldr	r2, [r2, #32]
    a552:	428a      	cmp	r2, r1
    a554:	d14a      	bne.n	a5ec <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    a556:	f898 2000 	ldrb.w	r2, [r8]
    a55a:	2a00      	cmp	r2, #0
    a55c:	d134      	bne.n	a5c8 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    a55e:	2b00      	cmp	r3, #0
    a560:	d139      	bne.n	a5d6 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    a562:	4639      	mov	r1, r7
    a564:	4620      	mov	r0, r4
    a566:	f7ff fefb 	bl	a360 <SdioCard::readStart(unsigned long)>
    a56a:	b1e8      	cbz	r0, a5a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    a56c:	2301      	movs	r3, #1
      m_curSector = sector;
    a56e:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    a570:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    a572:	4631      	mov	r1, r6
    a574:	4620      	mov	r0, r4
    a576:	f7ff fe75 	bl	a264 <SdioCard::readData(unsigned char*)>
    a57a:	b1a8      	cbz	r0, a5a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    a57c:	6863      	ldr	r3, [r4, #4]
  return true;
    a57e:	4605      	mov	r5, r0
    m_curSector++;
    a580:	3301      	adds	r3, #1
}
    a582:	4628      	mov	r0, r5
    m_curSector++;
    a584:	6063      	str	r3, [r4, #4]
}
    a586:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    a58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a58e:	2301      	movs	r3, #1
    a590:	4819      	ldr	r0, [pc, #100]	; (a5f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    a592:	f7ff fbc5 	bl	9d20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a596:	b938      	cbnz	r0, a5a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    a598:	4919      	ldr	r1, [pc, #100]	; (a600 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    a59a:	200b      	movs	r0, #11
  m_errorLine = line;
    a59c:	4b19      	ldr	r3, [pc, #100]	; (a604 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    a59e:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    a5a2:	2500      	movs	r5, #0
  m_errorCode = code;
    a5a4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    a5a6:	601a      	str	r2, [r3, #0]
}
    a5a8:	4628      	mov	r0, r5
    a5aa:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    a5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5b2:	f7ff f865 	bl	9680 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    a5b6:	2800      	cmp	r0, #0
    a5b8:	d0f6      	beq.n	a5a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    a5ba:	7a63      	ldrb	r3, [r4, #9]
    a5bc:	2b01      	cmp	r3, #1
    a5be:	d1c5      	bne.n	a54c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    a5c0:	6862      	ldr	r2, [r4, #4]
    a5c2:	42ba      	cmp	r2, r7
    a5c4:	d1c2      	bne.n	a54c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    a5c6:	e7d4      	b.n	a572 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    a5c8:	f7ff f85a 	bl	9680 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    a5cc:	2800      	cmp	r0, #0
    a5ce:	d0eb      	beq.n	a5a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    a5d0:	7a63      	ldrb	r3, [r4, #9]
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d0c5      	beq.n	a562 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    a5d6:	2101      	movs	r1, #1
    a5d8:	4620      	mov	r0, r4
    a5da:	f7ff ff2b 	bl	a434 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    a5de:	2800      	cmp	r0, #0
    a5e0:	d1bf      	bne.n	a562 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    a5e2:	4628      	mov	r0, r5
    a5e4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    a5ec:	4620      	mov	r0, r4
    a5ee:	4790      	blx	r2
    a5f0:	2800      	cmp	r0, #0
    a5f2:	d0f6      	beq.n	a5e2 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    a5f4:	e7b5      	b.n	a562 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    a5f6:	bf00      	nop
    a5f8:	113a0011 	.word	0x113a0011
    a5fc:	0000a4cd 	.word	0x0000a4cd
    a600:	2000350a 	.word	0x2000350a
    a604:	20004648 	.word	0x20004648
    a608:	200086ef 	.word	0x200086ef

0000a60c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    a60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a610:	7a04      	ldrb	r4, [r0, #8]
    a612:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    a616:	460f      	mov	r7, r1
    a618:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    a61a:	f014 0401 	ands.w	r4, r4, #1
    a61e:	d01d      	beq.n	a65c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    a620:	f012 0f03 	tst.w	r2, #3
    a624:	d006      	beq.n	a634 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    a626:	4668      	mov	r0, sp
    a628:	4611      	mov	r1, r2
    a62a:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    a62e:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    a630:	f001 fc36 	bl	bea0 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    a634:	2301      	movs	r3, #1
    a636:	4642      	mov	r2, r8
    a638:	4639      	mov	r1, r7
    a63a:	482c      	ldr	r0, [pc, #176]	; (a6ec <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    a63c:	f7ff fb70 	bl	9d20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a640:	4604      	mov	r4, r0
    a642:	b930      	cbnz	r0, a652 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    a644:	492a      	ldr	r1, [pc, #168]	; (a6f0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    a646:	200d      	movs	r0, #13
  m_errorLine = line;
    a648:	4b2a      	ldr	r3, [pc, #168]	; (a6f4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    a64a:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    a64e:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    a650:	601a      	str	r2, [r3, #0]
}
    a652:	4620      	mov	r0, r4
    a654:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    a65c:	4d26      	ldr	r5, [pc, #152]	; (a6f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    a65e:	4606      	mov	r6, r0
    a660:	782b      	ldrb	r3, [r5, #0]
    a662:	bb2b      	cbnz	r3, a6b0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    a664:	7a73      	ldrb	r3, [r6, #9]
    a666:	2b02      	cmp	r3, #2
    a668:	d029      	beq.n	a6be <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    a66a:	6832      	ldr	r2, [r6, #0]
    a66c:	4923      	ldr	r1, [pc, #140]	; (a6fc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    a66e:	6a12      	ldr	r2, [r2, #32]
    a670:	428a      	cmp	r2, r1
    a672:	d136      	bne.n	a6e2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    a674:	782a      	ldrb	r2, [r5, #0]
    a676:	bb32      	cbnz	r2, a6c6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    a678:	2b00      	cmp	r3, #0
    a67a:	d12b      	bne.n	a6d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    a67c:	6833      	ldr	r3, [r6, #0]
    a67e:	4639      	mov	r1, r7
    a680:	4630      	mov	r0, r6
    a682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a684:	4798      	blx	r3
    a686:	2800      	cmp	r0, #0
    a688:	d0e3      	beq.n	a652 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    a68a:	2302      	movs	r3, #2
      m_curSector = sector;
    a68c:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    a68e:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    a690:	6833      	ldr	r3, [r6, #0]
    a692:	4641      	mov	r1, r8
    a694:	4630      	mov	r0, r6
    a696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    a698:	4798      	blx	r3
    a69a:	2800      	cmp	r0, #0
    a69c:	d0d9      	beq.n	a652 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    a69e:	6873      	ldr	r3, [r6, #4]
  return true;
    a6a0:	4604      	mov	r4, r0
    m_curSector++;
    a6a2:	3301      	adds	r3, #1
}
    a6a4:	4620      	mov	r0, r4
    m_curSector++;
    a6a6:	6073      	str	r3, [r6, #4]
}
    a6a8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    a6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6b0:	f7fe ffe6 	bl	9680 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    a6b4:	2800      	cmp	r0, #0
    a6b6:	d0cc      	beq.n	a652 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    a6b8:	7a73      	ldrb	r3, [r6, #9]
    a6ba:	2b02      	cmp	r3, #2
    a6bc:	d1d5      	bne.n	a66a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    a6be:	6872      	ldr	r2, [r6, #4]
    a6c0:	42ba      	cmp	r2, r7
    a6c2:	d1d2      	bne.n	a66a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    a6c4:	e7e4      	b.n	a690 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    a6c6:	f7fe ffdb 	bl	9680 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    a6ca:	2800      	cmp	r0, #0
    a6cc:	d0c1      	beq.n	a652 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    a6ce:	7a73      	ldrb	r3, [r6, #9]
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d0d3      	beq.n	a67c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    a6d4:	2101      	movs	r1, #1
    a6d6:	4630      	mov	r0, r6
    a6d8:	f7ff feac 	bl	a434 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    a6dc:	2800      	cmp	r0, #0
    a6de:	d0b8      	beq.n	a652 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    a6e0:	e7cc      	b.n	a67c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    a6e2:	4630      	mov	r0, r6
    a6e4:	4790      	blx	r2
    a6e6:	2800      	cmp	r0, #0
    a6e8:	d0b3      	beq.n	a652 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    a6ea:	e7c7      	b.n	a67c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    a6ec:	183a0001 	.word	0x183a0001
    a6f0:	2000350a 	.word	0x2000350a
    a6f4:	20004648 	.word	0x20004648
    a6f8:	200086ef 	.word	0x200086ef
    a6fc:	0000a4cd 	.word	0x0000a4cd

0000a700 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    a700:	2101      	movs	r1, #1
    a702:	f001 bb8d 	b.w	be20 <pinMode>
    a706:	bf00      	nop

0000a708 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    a708:	f001 bb4e 	b.w	bda8 <digitalWrite>

0000a70c <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    a70c:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    a70e:	4603      	mov	r3, r0
    a710:	f853 0b04 	ldr.w	r0, [r3], #4
    a714:	e893 0006 	ldmia.w	r3, {r1, r2}
    a718:	f7f7 fbb2 	bl	1e80 <SPIClass::beginTransaction(SPISettings)>
}
    a71c:	bd08      	pop	{r3, pc}
    a71e:	bf00      	nop

0000a720 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    a720:	b084      	sub	sp, #16
    a722:	f10d 0c10 	add.w	ip, sp, #16
    a726:	e90c 000e 	stmdb	ip, {r1, r2, r3}
    a72a:	4602      	mov	r2, r0
  if (spiConfig.spiPort) {
    a72c:	b123      	cbz	r3, a738 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    a72e:	4618      	mov	r0, r3
    a730:	6013      	str	r3, [r2, #0]
}
    a732:	b004      	add	sp, #16
  m_spi->begin();
    a734:	f7f8 bd8a 	b.w	324c <SPIClass::begin()>
    m_spi = &SPI;
    a738:	4b02      	ldr	r3, [pc, #8]	; (a744 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    a73a:	4618      	mov	r0, r3
    a73c:	6013      	str	r3, [r2, #0]
}
    a73e:	b004      	add	sp, #16
  m_spi->begin();
    a740:	f7f8 bd84 	b.w	324c <SPIClass::begin()>
    a744:	20002b00 	.word	0x20002b00

0000a748 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    a748:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    a74a:	7cd3      	ldrb	r3, [r2, #19]
    a74c:	b313      	cbz	r3, a794 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a74e:	07d8      	lsls	r0, r3, #31
    a750:	d504      	bpl.n	a75c <SdSpiArduinoDriver::deactivate()+0x14>
    a752:	6a90      	ldr	r0, [r2, #40]	; 0x28
    a754:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a758:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a75c:	0799      	lsls	r1, r3, #30
    a75e:	d504      	bpl.n	a76a <SdSpiArduinoDriver::deactivate()+0x22>
    a760:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    a762:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a766:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a76a:	0758      	lsls	r0, r3, #29
    a76c:	d504      	bpl.n	a778 <SdSpiArduinoDriver::deactivate()+0x30>
    a76e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    a770:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a774:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a778:	0719      	lsls	r1, r3, #28
    a77a:	d504      	bpl.n	a786 <SdSpiArduinoDriver::deactivate()+0x3e>
    a77c:	6b50      	ldr	r0, [r2, #52]	; 0x34
    a77e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a782:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a786:	06db      	lsls	r3, r3, #27
    a788:	d504      	bpl.n	a794 <SdSpiArduinoDriver::deactivate()+0x4c>
    a78a:	6b92      	ldr	r2, [r2, #56]	; 0x38
    a78c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a790:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    a794:	4770      	bx	lr
    a796:	bf00      	nop

0000a798 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    a798:	6800      	ldr	r0, [r0, #0]
    a79a:	f7f8 be75 	b.w	3488 <SPIClass::end()>
    a79e:	bf00      	nop

0000a7a0 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a7a0:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    a7a2:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a7a4:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    a7a6:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a7a8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a7aa:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    a7ae:	d0fb      	beq.n	a7a8 <SdSpiArduinoDriver::receive()+0x8>
    a7b0:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    a7b2:	b2c0      	uxtb	r0, r0
    a7b4:	4770      	bx	lr
    a7b6:	bf00      	nop

0000a7b8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a7b8:	b530      	push	{r4, r5, lr}
    a7ba:	460c      	mov	r4, r1
    a7bc:	b083      	sub	sp, #12
    a7be:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a7c0:	21ff      	movs	r1, #255	; 0xff
    a7c2:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a7c4:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a7c6:	f003 feeb 	bl	e5a0 <memset>
		transfer(buf, buf, count);
    a7ca:	6828      	ldr	r0, [r5, #0]
    a7cc:	9b01      	ldr	r3, [sp, #4]
    a7ce:	4622      	mov	r2, r4
    a7d0:	4621      	mov	r1, r4
    a7d2:	f7f8 fe55 	bl	3480 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a7d6:	2000      	movs	r0, #0
    a7d8:	b003      	add	sp, #12
    a7da:	bd30      	pop	{r4, r5, pc}

0000a7dc <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a7dc:	6803      	ldr	r3, [r0, #0]
    a7de:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    a7e0:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a7e2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a7e4:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    a7e8:	d0fb      	beq.n	a7e2 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    a7ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    a7ec:	4770      	bx	lr
    a7ee:	bf00      	nop

0000a7f0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a7f0:	1e53      	subs	r3, r2, #1
    a7f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    a7f6:	b530      	push	{r4, r5, lr}
    a7f8:	4614      	mov	r4, r2
    a7fa:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    a7fe:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    a800:	d311      	bcc.n	a826 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a802:	b16a      	cbz	r2, a820 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a804:	6803      	ldr	r3, [r0, #0]
    a806:	1e48      	subs	r0, r1, #1
    a808:	6819      	ldr	r1, [r3, #0]
    a80a:	1882      	adds	r2, r0, r2
		port().TDR = data;
    a80c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    a810:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a812:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a814:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    a818:	d0fb      	beq.n	a812 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    a81a:	4290      	cmp	r0, r2
    a81c:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    a81e:	d1f5      	bne.n	a80c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    a820:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    a824:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    a826:	4668      	mov	r0, sp
    a828:	f001 fb3a 	bl	bea0 <memcpy>
		transfer(buf, buf, count);
    a82c:	466a      	mov	r2, sp
    a82e:	4623      	mov	r3, r4
    a830:	6828      	ldr	r0, [r5, #0]
    a832:	4611      	mov	r1, r2
    a834:	f7f8 fe24 	bl	3480 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    a838:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    a83c:	bd30      	pop	{r4, r5, pc}
    a83e:	bf00      	nop

0000a840 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    a840:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    a842:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    a844:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    a846:	07dc      	lsls	r4, r3, #31
    a848:	d51d      	bpl.n	a886 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    a84a:	4604      	mov	r4, r0
    a84c:	6840      	ldr	r0, [r0, #4]
    a84e:	f104 0210 	add.w	r2, r4, #16
    a852:	6803      	ldr	r3, [r0, #0]
    a854:	68e1      	ldr	r1, [r4, #12]
    a856:	9201      	str	r2, [sp, #4]
    a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a85a:	4798      	blx	r3
    a85c:	9a01      	ldr	r2, [sp, #4]
    a85e:	4605      	mov	r5, r0
    a860:	b1a8      	cbz	r0, a88e <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    a862:	7823      	ldrb	r3, [r4, #0]
    a864:	0799      	lsls	r1, r3, #30
    a866:	d508      	bpl.n	a87a <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    a868:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    a86a:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    a86e:	4419      	add	r1, r3
    a870:	6803      	ldr	r3, [r0, #0]
    a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a874:	4798      	blx	r3
    a876:	b150      	cbz	r0, a88e <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    a878:	7823      	ldrb	r3, [r4, #0]
    a87a:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    a87e:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    a880:	7023      	strb	r3, [r4, #0]
}
    a882:	b003      	add	sp, #12
    a884:	bd30      	pop	{r4, r5, pc}
  return true;
    a886:	2501      	movs	r5, #1
}
    a888:	4628      	mov	r0, r5
    a88a:	b003      	add	sp, #12
    a88c:	bd30      	pop	{r4, r5, pc}
  return false;
    a88e:	2500      	movs	r5, #0
}
    a890:	4628      	mov	r0, r5
    a892:	b003      	add	sp, #12
    a894:	bd30      	pop	{r4, r5, pc}
    a896:	bf00      	nop

0000a898 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    a89a:	6843      	ldr	r3, [r0, #4]
    a89c:	b30b      	cbz	r3, a8e2 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    a89e:	68c3      	ldr	r3, [r0, #12]
    a8a0:	4604      	mov	r4, r0
    a8a2:	460f      	mov	r7, r1
    a8a4:	4615      	mov	r5, r2
    a8a6:	428b      	cmp	r3, r1
    a8a8:	d106      	bne.n	a8b8 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    a8aa:	f810 3b10 	ldrb.w	r3, [r0], #16
    a8ae:	f005 0503 	and.w	r5, r5, #3
    a8b2:	432b      	orrs	r3, r5
    a8b4:	7023      	strb	r3, [r4, #0]
}
    a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    a8b8:	f7ff ffc2 	bl	a840 <FsCache::sync()>
    a8bc:	b188      	cbz	r0, a8e2 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    a8be:	076b      	lsls	r3, r5, #29
    a8c0:	d505      	bpl.n	a8ce <FsCache::prepare(unsigned long, unsigned char)+0x36>
    a8c2:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    a8c6:	4630      	mov	r0, r6
    m_sector = sector;
    a8c8:	2300      	movs	r3, #0
    a8ca:	60e7      	str	r7, [r4, #12]
    a8cc:	e7ef      	b.n	a8ae <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    a8ce:	6860      	ldr	r0, [r4, #4]
    a8d0:	f104 0610 	add.w	r6, r4, #16
    a8d4:	4639      	mov	r1, r7
    a8d6:	6803      	ldr	r3, [r0, #0]
    a8d8:	4632      	mov	r2, r6
    a8da:	691b      	ldr	r3, [r3, #16]
    a8dc:	4798      	blx	r3
    a8de:	2800      	cmp	r0, #0
    a8e0:	d1f1      	bne.n	a8c6 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    a8e2:	2000      	movs	r0, #0
}
    a8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8e6:	bf00      	nop

0000a8e8 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    a8e8:	b510      	push	{r4, lr}
    a8ea:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    a8ec:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    a8ee:	b082      	sub	sp, #8
  if (ls) {
    a8f0:	b118      	cbz	r0, a8fa <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    a8f2:	2300      	movs	r3, #0
    a8f4:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    a8f6:	b002      	add	sp, #8
    a8f8:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    a8fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    a8fe:	428b      	cmp	r3, r1
    a900:	d2f9      	bcs.n	a8f6 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    a902:	aa01      	add	r2, sp, #4
    a904:	4618      	mov	r0, r3
    a906:	f000 f8b7 	bl	aa78 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    a90a:	b180      	cbz	r0, a92e <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    a90c:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    a90e:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    a910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a914:	d201      	bcs.n	a91a <FsName::get16()+0x32>
      rtn = cp;
    a916:	b298      	uxth	r0, r3
    a918:	e7ed      	b.n	a8f6 <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    a91a:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    a91c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    a920:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    a924:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    a928:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    a92a:	81a3      	strh	r3, [r4, #12]
    a92c:	e7e3      	b.n	a8f6 <FsName::get16()+0xe>
  return 0XFFFF;
    a92e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    a932:	e7e0      	b.n	a8f6 <FsName::get16()+0xe>

0000a934 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    a934:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a938:	d821      	bhi.n	a97e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    a93a:	2910      	cmp	r1, #16
    a93c:	d82e      	bhi.n	a99c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    a93e:	2340      	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    a940:	f04f 0c20 	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    a944:	fbb2 f1f3 	udiv	r1, r2, r3
  if (c <= 1023) {
    a948:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a94c:	d220      	bcs.n	a990 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    a94e:	fb03 2311 	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    a952:	b500      	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    a954:	fbb2 fefc 	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    a958:	fbb3 f3fc 	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    a95c:	fb0c 221e 	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    a960:	ea4f 0c91 	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    a964:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    a966:	3201      	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    a968:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    a96c:	b2c9      	uxtb	r1, r1
  chs[0] = h;
    a96e:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    a970:	ea42 020c 	orr.w	r2, r2, ip
  chs[2] = c;
    a974:	7081      	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    a976:	b2d2      	uxtb	r2, r2
    a978:	7042      	strb	r2, [r0, #1]
}
    a97a:	f85d fb04 	ldr.w	pc, [sp], #4
    a97e:	233f      	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    a980:	469c      	mov	ip, r3
  } else if (capacityMB <= 128) {
    a982:	2980      	cmp	r1, #128	; 0x80
    a984:	d910      	bls.n	a9a8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    a986:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    a98a:	d80f      	bhi.n	a9ac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    a98c:	011b      	lsls	r3, r3, #4
    a98e:	e7d9      	b.n	a944 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    a990:	21ff      	movs	r1, #255	; 0xff
    h = 254;
    a992:	23fe      	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    a994:	7041      	strb	r1, [r0, #1]
  chs[0] = h;
    a996:	7003      	strb	r3, [r0, #0]
  chs[2] = c;
    a998:	7081      	strb	r1, [r0, #2]
    a99a:	4770      	bx	lr
  } else if (capacityMB <= 32) {
    a99c:	2920      	cmp	r1, #32
    a99e:	d816      	bhi.n	a9ce <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    a9a0:	2380      	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    a9a2:	f04f 0c20 	mov.w	ip, #32
    a9a6:	e7cd      	b.n	a944 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    a9a8:	00db      	lsls	r3, r3, #3
    a9aa:	e7cb      	b.n	a944 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    a9ac:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    a9b0:	d904      	bls.n	a9bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    a9b2:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    a9b6:	d803      	bhi.n	a9c0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    a9b8:	019b      	lsls	r3, r3, #6
    a9ba:	e7c3      	b.n	a944 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    a9bc:	015b      	lsls	r3, r3, #5
    a9be:	e7c1      	b.n	a944 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    a9c0:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    a9c4:	bf94      	ite	ls
    a9c6:	01db      	lslls	r3, r3, #7
    a9c8:	ebc3 2303 	rsbhi	r3, r3, r3, lsl #8
    a9cc:	e7ba      	b.n	a944 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    a9ce:	2320      	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    a9d0:	469c      	mov	ip, r3
    a9d2:	e7d6      	b.n	a982 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

0000a9d4 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    a9d4:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    a9d6:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    a9da:	d805      	bhi.n	a9e8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    a9dc:	b112      	cbz	r2, a9e4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    a9de:	460a      	mov	r2, r1
    a9e0:	f802 0b01 	strb.w	r0, [r2], #1
  }
    a9e4:	4610      	mov	r0, r2
    a9e6:	4770      	bx	lr
    } else if (cp < 0X800) {
    a9e8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a9ec:	d20f      	bcs.n	aa0e <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    a9ee:	2a01      	cmp	r2, #1
    a9f0:	d940      	bls.n	aa74 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    a9f2:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    a9f6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    a9fa:	460a      	mov	r2, r1
    a9fc:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa00:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    aa04:	f802 0b02 	strb.w	r0, [r2], #2
  }
    aa08:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa0a:	704b      	strb	r3, [r1, #1]
  }
    aa0c:	4770      	bx	lr
    } else if (cp < 0X10000) {
    aa0e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    aa12:	d216      	bcs.n	aa42 <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    aa14:	2a02      	cmp	r2, #2
    aa16:	d92d      	bls.n	aa74 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    aa18:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa1c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    aa20:	1cca      	adds	r2, r1, #3
    aa22:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    aa26:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    aa28:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    aa2c:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa30:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    aa32:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    aa36:	7048      	strb	r0, [r1, #1]
  }
    aa38:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    aa3a:	f881 e000 	strb.w	lr, [r1]
  }
    aa3e:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    aa42:	2a03      	cmp	r2, #3
    aa44:	d916      	bls.n	aa74 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    aa46:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    aa4a:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    aa4e:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    aa56:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    aa5a:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    aa5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa62:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    aa66:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa68:	1d0a      	adds	r2, r1, #4
    aa6a:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    aa6c:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    aa70:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    aa72:	e7b7      	b.n	a9e4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    aa74:	2200      	movs	r2, #0
    aa76:	e7b5      	b.n	a9e4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000aa78 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    aa78:	4288      	cmp	r0, r1
    aa7a:	d23d      	bcs.n	aaf8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    aa7c:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    aa7e:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    aa80:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    aa84:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    aa86:	2800      	cmp	r0, #0
    aa88:	da2d      	bge.n	aae6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    aa8a:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    aa8e:	28c0      	cmp	r0, #192	; 0xc0
    aa90:	d034      	beq.n	aafc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    aa92:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    aa96:	28e0      	cmp	r0, #224	; 0xe0
    aa98:	d034      	beq.n	ab04 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    aa9a:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    aa9e:	28f0      	cmp	r0, #240	; 0xf0
    aaa0:	d126      	bne.n	aaf0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    aaa2:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    aaa6:	2004      	movs	r0, #4
    if ((str + n) > end) {
    aaa8:	4418      	add	r0, r3
    aaaa:	4288      	cmp	r0, r1
    aaac:	d820      	bhi.n	aaf0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    aaae:	3301      	adds	r3, #1
      ch = str[i];
    aab0:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    aab4:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    aab8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    aabc:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    aac0:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    aac4:	d114      	bne.n	aaf0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    aac6:	4283      	cmp	r3, r0
    aac8:	d1f2      	bne.n	aab0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    aaca:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    aace:	4b0f      	ldr	r3, [pc, #60]	; (ab0c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    aad0:	4299      	cmp	r1, r3
    aad2:	d80d      	bhi.n	aaf0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    aad4:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    aad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    aadc:	d308      	bcc.n	aaf0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    aade:	6014      	str	r4, [r2, #0]
  }
    aae0:	f85d 4b04 	ldr.w	r4, [sp], #4
    aae4:	4770      	bx	lr
      return str + 1;
    aae6:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    aae8:	6014      	str	r4, [r2, #0]
  }
    aaea:	f85d 4b04 	ldr.w	r4, [sp], #4
    aaee:	4770      	bx	lr
      return nullptr;
    aaf0:	2000      	movs	r0, #0
  }
    aaf2:	f85d 4b04 	ldr.w	r4, [sp], #4
    aaf6:	4770      	bx	lr
      return nullptr;
    aaf8:	2000      	movs	r0, #0
  }
    aafa:	4770      	bx	lr
      cp = ch & 0X1F;
    aafc:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    ab00:	2002      	movs	r0, #2
    ab02:	e7d1      	b.n	aaa8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    ab04:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    ab08:	2003      	movs	r0, #3
    ab0a:	e7cd      	b.n	aaa8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    ab0c:	0010ff7f 	.word	0x0010ff7f

0000ab10 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    ab10:	287e      	cmp	r0, #126	; 0x7e
    ab12:	d93e      	bls.n	ab92 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    ab14:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    ab18:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    ab1a:	b430      	push	{r4, r5}
    ab1c:	4c28      	ldr	r4, [pc, #160]	; (abc0 <toUpcase(unsigned short)+0xb0>)
    ab1e:	e004      	b.n	ab2a <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    ab20:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    ab24:	4282      	cmp	r2, r0
    ab26:	d820      	bhi.n	ab6a <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    ab28:	460b      	mov	r3, r1
  while (right - left > 1) {
    ab2a:	ebac 0203 	sub.w	r2, ip, r3
    ab2e:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    ab30:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    ab34:	d8f4      	bhi.n	ab20 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    ab36:	b29b      	uxth	r3, r3
    ab38:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    ab3c:	4290      	cmp	r0, r2
    ab3e:	d216      	bcs.n	ab6e <toUpcase(unsigned short)+0x5e>
    ab40:	244b      	movs	r4, #75	; 0x4b
    ab42:	2300      	movs	r3, #0
    ab44:	4d1f      	ldr	r5, [pc, #124]	; (abc4 <toUpcase(unsigned short)+0xb4>)
    ab46:	e004      	b.n	ab52 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    ab48:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    ab4c:	4282      	cmp	r2, r0
    ab4e:	d81e      	bhi.n	ab8e <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    ab50:	460b      	mov	r3, r1
  while (right - left > 1) {
    ab52:	1ae2      	subs	r2, r4, r3
    ab54:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    ab56:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    ab5a:	d8f5      	bhi.n	ab48 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    ab5c:	b29b      	uxth	r3, r3
    ab5e:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    ab62:	4282      	cmp	r2, r0
    ab64:	d01f      	beq.n	aba6 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    ab66:	bc30      	pop	{r4, r5}
    ab68:	4770      	bx	lr
    mid = left + (right - left)/2;
    ab6a:	468c      	mov	ip, r1
    ab6c:	e7dd      	b.n	ab2a <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    ab6e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    ab72:	1a82      	subs	r2, r0, r2
    ab74:	78e3      	ldrb	r3, [r4, #3]
    ab76:	429a      	cmp	r2, r3
    ab78:	dae2      	bge.n	ab40 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    ab7a:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    ab7e:	2b01      	cmp	r3, #1
    ab80:	d016      	beq.n	abb0 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    ab82:	b1d3      	cbz	r3, abba <toUpcase(unsigned short)+0xaa>
    ab84:	b29b      	uxth	r3, r3
    ab86:	4403      	add	r3, r0
}
    ab88:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    ab8a:	b298      	uxth	r0, r3
}
    ab8c:	4770      	bx	lr
    mid = left + (right - left)/2;
    ab8e:	460c      	mov	r4, r1
    ab90:	e7df      	b.n	ab52 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    ab92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    ab96:	2b19      	cmp	r3, #25
    ab98:	bf8c      	ite	hi
    ab9a:	2300      	movhi	r3, #0
    ab9c:	2301      	movls	r3, #1
    ab9e:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    aba2:	b298      	uxth	r0, r3
}
    aba4:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    aba6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    abaa:	8868      	ldrh	r0, [r5, #2]
}
    abac:	bc30      	pop	{r4, r5}
    abae:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    abb0:	f002 0201 	and.w	r2, r2, #1
    abb4:	1a83      	subs	r3, r0, r2
    abb6:	b298      	uxth	r0, r3
    abb8:	e7d5      	b.n	ab66 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    abba:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    abbe:	e7e2      	b.n	ab86 <toUpcase(unsigned short)+0x76>
    abc0:	2000051c 	.word	0x2000051c
    abc4:	200003f0 	.word	0x200003f0

0000abc8 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    abc8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    abcc:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    abd0:	1a10      	subs	r0, r2, r0
    abd2:	4770      	bx	lr

0000abd4 <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    abd4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    abd8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    abdc:	429a      	cmp	r2, r3
    abde:	d905      	bls.n	abec <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    abe0:	1c5a      	adds	r2, r3, #1
    abe2:	4403      	add	r3, r0
    abe4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    abe8:	7e98      	ldrb	r0, [r3, #26]
    abea:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    abec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    abf0:	4770      	bx	lr
    abf2:	bf00      	nop

0000abf4 <TwoWire::peek()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    abf4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    abf8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    abfc:	429a      	cmp	r2, r3
    abfe:	d902      	bls.n	ac06 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    ac00:	4418      	add	r0, r3
    ac02:	7e80      	ldrb	r0, [r0, #26]
    ac04:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    ac06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    ac0a:	4770      	bx	lr

0000ac0c <TwoWire::flush()>:
	}
    ac0c:	4770      	bx	lr
    ac0e:	bf00      	nop

0000ac10 <TwoWire::write(unsigned char)>:
{
    ac10:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    ac12:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    ac16:	b178      	cbz	r0, ac38 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    ac18:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    ac1c:	2a88      	cmp	r2, #136	; 0x88
    ac1e:	d903      	bls.n	ac28 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    ac20:	2201      	movs	r2, #1
			return 0;
    ac22:	2000      	movs	r0, #0
    ac24:	605a      	str	r2, [r3, #4]
    ac26:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    ac28:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    ac2c:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    ac2e:	441a      	add	r2, r3
    ac30:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    ac34:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    ac38:	4770      	bx	lr
    ac3a:	bf00      	nop

0000ac3c <TwoWire::write(unsigned char const*, unsigned int)>:
{
    ac3c:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    ac3e:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    ac42:	b90c      	cbnz	r4, ac48 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    ac44:	4620      	mov	r0, r4
    ac46:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    ac48:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    ac4c:	4605      	mov	r5, r0
    ac4e:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    ac52:	42a2      	cmp	r2, r4
    ac54:	d80d      	bhi.n	ac72 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    ac56:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    ac58:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    ac5c:	4622      	mov	r2, r4
    ac5e:	4418      	add	r0, r3
    ac60:	f001 f91e 	bl	bea0 <memcpy>
		txBufferLength += quantity;
    ac64:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    ac68:	4620      	mov	r0, r4
		txBufferLength += quantity;
    ac6a:	4423      	add	r3, r4
    ac6c:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    ac70:	bd38      	pop	{r3, r4, r5, pc}
    ac72:	2201      	movs	r2, #1
    ac74:	6042      	str	r2, [r0, #4]
    ac76:	e7ef      	b.n	ac58 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000ac78 <TwoWire::force_clock()>:
{
    ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    ac7c:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    ac80:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    ac82:	7e01      	ldrb	r1, [r0, #24]
{
    ac84:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    ac86:	7e43      	ldrb	r3, [r0, #25]
{
    ac88:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    ac8a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    ac8e:	4a38      	ldr	r2, [pc, #224]	; (ad70 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    ac90:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    ac94:	4f37      	ldr	r7, [pc, #220]	; (ad74 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    ac96:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    ac98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    ac9c:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    aca0:	0109      	lsls	r1, r1, #4
    aca2:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    aca4:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    aca8:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    acac:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    acb0:	011b      	lsls	r3, r3, #4
    acb2:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    acb4:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    acb6:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    acba:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    acbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    acc2:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    acc4:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    acc6:	492c      	ldr	r1, [pc, #176]	; (ad78 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    acc8:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    acca:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    acce:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    acd0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    acd4:	686b      	ldr	r3, [r5, #4]
    acd6:	4333      	orrs	r3, r6
    acd8:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    acda:	4b28      	ldr	r3, [pc, #160]	; (ad7c <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    acdc:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    acde:	683a      	ldr	r2, [r7, #0]
    ace0:	fba3 3202 	umull	r3, r2, r3, r2
    ace4:	0c92      	lsrs	r2, r2, #18
    ace6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    acea:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    acec:	684b      	ldr	r3, [r1, #4]
    acee:	1b1b      	subs	r3, r3, r4
    acf0:	429a      	cmp	r2, r3
    acf2:	d8fb      	bhi.n	acec <TwoWire::force_clock()+0x74>
    acf4:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    acf8:	4a1f      	ldr	r2, [pc, #124]	; (ad78 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    acfa:	f8df e080 	ldr.w	lr, [pc, #128]	; ad7c <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    acfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    ad02:	4203      	tst	r3, r0
    ad04:	d002      	beq.n	ad0c <TwoWire::force_clock()+0x94>
    ad06:	68ab      	ldr	r3, [r5, #8]
    ad08:	4233      	tst	r3, r6
    ad0a:	d12f      	bne.n	ad6c <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    ad0c:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    ad10:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    ad12:	6839      	ldr	r1, [r7, #0]
    ad14:	fbae 3101 	umull	r3, r1, lr, r1
    ad18:	0c89      	lsrs	r1, r1, #18
    ad1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    ad1e:	6853      	ldr	r3, [r2, #4]
    ad20:	1b1b      	subs	r3, r3, r4
    ad22:	4299      	cmp	r1, r3
    ad24:	d8fb      	bhi.n	ad1e <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    ad26:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    ad2a:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    ad2c:	6839      	ldr	r1, [r7, #0]
    ad2e:	fbae 3101 	umull	r3, r1, lr, r1
    ad32:	0c89      	lsrs	r1, r1, #18
    ad34:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    ad38:	6853      	ldr	r3, [r2, #4]
    ad3a:	1b1b      	subs	r3, r3, r4
    ad3c:	4299      	cmp	r1, r3
    ad3e:	d8fb      	bhi.n	ad38 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    ad40:	f1bc 0c01 	subs.w	ip, ip, #1
    ad44:	d1db      	bne.n	acfe <TwoWire::force_clock()+0x86>
	bool ret = false;
    ad46:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    ad48:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    ad4c:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    ad4e:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    ad52:	68db      	ldr	r3, [r3, #12]
    ad54:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    ad58:	f899 3019 	ldrb.w	r3, [r9, #25]
    ad5c:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    ad60:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    ad64:	6013      	str	r3, [r2, #0]
}
    ad66:	b003      	add	sp, #12
    ad68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    ad6c:	2001      	movs	r0, #1
    ad6e:	e7eb      	b.n	ad48 <TwoWire::force_clock()+0xd0>
    ad70:	20002678 	.word	0x20002678
    ad74:	20002afc 	.word	0x20002afc
    ad78:	e0001000 	.word	0xe0001000
    ad7c:	431bde83 	.word	0x431bde83

0000ad80 <TwoWire::wait_idle()>:
	return systick_millis_count;
    ad80:	4a0e      	ldr	r2, [pc, #56]	; (adbc <TwoWire::wait_idle()+0x3c>)
{
    ad82:	b510      	push	{r4, lr}
    ad84:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    ad86:	6904      	ldr	r4, [r0, #16]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    ad88:	e005      	b.n	ad96 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    ad8a:	01db      	lsls	r3, r3, #7
    ad8c:	d407      	bmi.n	ad9e <TwoWire::wait_idle()+0x1e>
    ad8e:	6813      	ldr	r3, [r2, #0]
	operator unsigned long () const { return millis() - ms; }
    ad90:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    ad92:	2b10      	cmp	r3, #16
    ad94:	d808      	bhi.n	ada8 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    ad96:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    ad98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    ad9c:	d1f5      	bne.n	ad8a <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    ad9e:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    ada2:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    ada4:	6163      	str	r3, [r4, #20]
}
    ada6:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    ada8:	f7ff ff66 	bl	ac78 <TwoWire::force_clock()>
    adac:	2800      	cmp	r0, #0
    adae:	d0fa      	beq.n	ada6 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    adb0:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    adb4:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    adb6:	6163      	str	r3, [r4, #20]
	return true;
    adb8:	e7f5      	b.n	ada6 <TwoWire::wait_idle()+0x26>
    adba:	bf00      	nop
    adbc:	200086a8 	.word	0x200086a8

0000adc0 <TwoWire::endTransmission(unsigned char)>:
{
    adc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    adc4:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    adc8:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    adca:	f1ba 0f00 	cmp.w	sl, #0
    adce:	d04f      	beq.n	ae70 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    add0:	4681      	mov	r9, r0
    add2:	4688      	mov	r8, r1
    add4:	f7ff ffd4 	bl	ad80 <TwoWire::wait_idle()>
    add8:	2800      	cmp	r0, #0
    adda:	d049      	beq.n	ae70 <TwoWire::endTransmission(unsigned char)+0xb0>
    addc:	4e37      	ldr	r6, [pc, #220]	; (aebc <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    adde:	2400      	movs	r4, #0
    ade0:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    ade2:	e018      	b.n	ae16 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    ade4:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    ade6:	0519      	lsls	r1, r3, #20
    ade8:	d451      	bmi.n	ae8e <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    adea:	04da      	lsls	r2, r3, #19
    adec:	d455      	bmi.n	ae9a <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    adee:	0558      	lsls	r0, r3, #21
    adf0:	d459      	bmi.n	aea6 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    adf2:	0499      	lsls	r1, r3, #18
    adf4:	d441      	bmi.n	ae7a <TwoWire::endTransmission(unsigned char)+0xba>
    adf6:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    adf8:	1bd2      	subs	r2, r2, r7
    adfa:	2a32      	cmp	r2, #50	; 0x32
    adfc:	d83d      	bhi.n	ae7a <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    adfe:	4554      	cmp	r4, sl
    ae00:	d907      	bls.n	ae12 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    ae02:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    ae04:	0752      	lsls	r2, r2, #29
    ae06:	d104      	bne.n	ae12 <TwoWire::endTransmission(unsigned char)+0x52>
    ae08:	059b      	lsls	r3, r3, #22
    ae0a:	d455      	bmi.n	aeb8 <TwoWire::endTransmission(unsigned char)+0xf8>
    ae0c:	f1b8 0f00 	cmp.w	r8, #0
    ae10:	d052      	beq.n	aeb8 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    ae12:	f002 fccd 	bl	d7b0 <yield>
		if (tx_index <= tx_len) {
    ae16:	4554      	cmp	r4, sl
    ae18:	d8e4      	bhi.n	ade4 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    ae1a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    ae1c:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    ae1e:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    ae22:	d4df      	bmi.n	ade4 <TwoWire::endTransmission(unsigned char)+0x24>
    ae24:	e013      	b.n	ae4e <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    ae26:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    ae2a:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    ae2c:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    ae2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    ae32:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    ae34:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    ae36:	d01e      	beq.n	ae76 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    ae38:	458a      	cmp	sl, r1
				fifo_used++;
    ae3a:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ae3e:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    ae42:	d90e      	bls.n	ae62 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ae44:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    ae48:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ae4a:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    ae4c:	d0ca      	beq.n	ade4 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    ae4e:	2101      	movs	r1, #1
				if (tx_index == 0) {
    ae50:	2c00      	cmp	r4, #0
    ae52:	d0e8      	beq.n	ae26 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ae54:	4621      	mov	r1, r4
				fifo_used++;
    ae56:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ae58:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    ae5a:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    ae5c:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    ae60:	d8f0      	bhi.n	ae44 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    ae62:	f1b8 0f00 	cmp.w	r8, #0
    ae66:	d0bd      	beq.n	ade4 <TwoWire::endTransmission(unsigned char)+0x24>
    ae68:	f44f 7300 	mov.w	r3, #512	; 0x200
    ae6c:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    ae6e:	e7b9      	b.n	ade4 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    ae70:	2004      	movs	r0, #4
}
    ae72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    ae76:	2401      	movs	r4, #1
    ae78:	e7b4      	b.n	ade4 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ae7a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ae7c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    ae80:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ae82:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ae86:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    ae88:	662a      	str	r2, [r5, #96]	; 0x60
}
    ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ae8e:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    ae90:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ae92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ae96:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    ae98:	e7eb      	b.n	ae72 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ae9a:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    ae9c:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    ae9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    aea2:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    aea4:	e7e5      	b.n	ae72 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    aea6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    aea8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    aeac:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    aeae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    aeb2:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    aeb4:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    aeb6:	e7dc      	b.n	ae72 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    aeb8:	2000      	movs	r0, #0
    aeba:	e7da      	b.n	ae72 <TwoWire::endTransmission(unsigned char)+0xb2>
    aebc:	200086a8 	.word	0x200086a8

0000aec0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    aec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aec4:	4683      	mov	fp, r0
    aec6:	460c      	mov	r4, r1
    aec8:	4615      	mov	r5, r2
    aeca:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    aecc:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    aed0:	f7ff ff56 	bl	ad80 <TwoWire::wait_idle()>
    aed4:	2800      	cmp	r0, #0
    aed6:	f000 809e 	beq.w	b016 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    aeda:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    aedc:	2d01      	cmp	r5, #1
    aede:	f8df 813c 	ldr.w	r8, [pc, #316]	; b01c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    aee2:	f240 4601 	movw	r6, #1025	; 0x401
    aee6:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    aee8:	f04f 0100 	mov.w	r1, #0
    aeec:	bf38      	it	cc
    aeee:	2501      	movcc	r5, #1
    aef0:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    aef4:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    aef6:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    aef8:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    aefc:	e020      	b.n	af40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    aefe:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    af02:	2b87      	cmp	r3, #135	; 0x87
    af04:	d93f      	bls.n	af86 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    af06:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    af0a:	0510      	lsls	r0, r2, #20
    af0c:	d45a      	bmi.n	afc4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    af0e:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    af12:	d170      	bne.n	aff6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    af14:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    af18:	eba3 0309 	sub.w	r3, r3, r9
    af1c:	2b32      	cmp	r3, #50	; 0x32
    af1e:	d86a      	bhi.n	aff6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    af20:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    af24:	42ab      	cmp	r3, r5
    af26:	d309      	bcc.n	af3c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    af28:	2c02      	cmp	r4, #2
    af2a:	d907      	bls.n	af3c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    af2c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    af30:	0759      	lsls	r1, r3, #29
    af32:	d103      	bne.n	af3c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    af34:	0593      	lsls	r3, r2, #22
    af36:	d44b      	bmi.n	afd0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    af38:	2f00      	cmp	r7, #0
    af3a:	d049      	beq.n	afd0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    af3c:	f002 fc38 	bl	d7b0 <yield>
		if (tx_state < 3) {
    af40:	2c02      	cmp	r4, #2
    af42:	d8dc      	bhi.n	aefe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    af44:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    af48:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    af4c:	075b      	lsls	r3, r3, #29
    af4e:	d4d6      	bmi.n	aefe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    af50:	1e68      	subs	r0, r5, #1
    af52:	4422      	add	r2, r4
    af54:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    af58:	b94c      	cbnz	r4, af6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    af5a:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    af5e:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    af60:	1b13      	subs	r3, r2, r4
    af62:	2b03      	cmp	r3, #3
    af64:	d8cb      	bhi.n	aefe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    af66:	2c02      	cmp	r4, #2
    af68:	d8c9      	bhi.n	aefe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    af6a:	2c00      	cmp	r4, #0
    af6c:	d0f5      	beq.n	af5a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    af6e:	2c01      	cmp	r4, #1
    af70:	d037      	beq.n	afe2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    af72:	b11f      	cbz	r7, af7c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    af74:	f44f 7300 	mov.w	r3, #512	; 0x200
    af78:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    af7c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    af80:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    af82:	2b87      	cmp	r3, #135	; 0x87
    af84:	d8bf      	bhi.n	af06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    af86:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    af8a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    af8e:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    af92:	d0b8      	beq.n	af06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    af94:	1c59      	adds	r1, r3, #1
    af96:	449c      	add	ip, r3
    af98:	3319      	adds	r3, #25
    af9a:	b2c9      	uxtb	r1, r1
    af9c:	fa5f fc8c 	uxtb.w	ip, ip
    afa0:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    afa4:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    afa8:	1c4a      	adds	r2, r1, #1
    afaa:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    afac:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    afb0:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    afb2:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    afb6:	d0a6      	beq.n	af06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    afb8:	2989      	cmp	r1, #137	; 0x89
    afba:	d1f3      	bne.n	afa4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    afbc:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    afc0:	0510      	lsls	r0, r2, #20
    afc2:	d5a4      	bpl.n	af0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    afc4:	f8da 3010 	ldr.w	r3, [sl, #16]
    afc8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    afcc:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    afd0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    afd4:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    afd8:	d106      	bne.n	afe8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    afda:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    afde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    afe2:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    afe6:	e7ba      	b.n	af5e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    afe8:	f8da 3010 	ldr.w	r3, [sl, #16]
    afec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    aff0:	f8ca 3010 	str.w	r3, [sl, #16]
    aff4:	e7f1      	b.n	afda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    aff6:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    affa:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    affe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    b002:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    b006:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    b00a:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    b00e:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    b012:	d0e2      	beq.n	afda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    b014:	e7e8      	b.n	afe8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    b016:	2004      	movs	r0, #4
}
    b018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b01c:	200086a8 	.word	0x200086a8

0000b020 <TwoWire::isr()>:
{
    b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    b022:	6906      	ldr	r6, [r0, #16]
{
    b024:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    b026:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    b02a:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    b02e:	d001      	beq.n	b034 <TwoWire::isr()+0x14>
    b030:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    b034:	07a8      	lsls	r0, r5, #30
    b036:	d50b      	bpl.n	b050 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    b038:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    b03c:	0411      	lsls	r1, r2, #16
    b03e:	d53d      	bpl.n	b0bc <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    b040:	2300      	movs	r3, #0
    b042:	2101      	movs	r1, #1
    b044:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    b048:	4423      	add	r3, r4
    b04a:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    b04e:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    b050:	07ea      	lsls	r2, r5, #31
    b052:	d510      	bpl.n	b076 <TwoWire::isr()+0x56>
		if (!transmitting) {
    b054:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    b058:	b1f7      	cbz	r7, b098 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    b05a:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    b05e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    b062:	42bb      	cmp	r3, r7
    b064:	d926      	bls.n	b0b4 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    b066:	1c7b      	adds	r3, r7, #1
    b068:	4427      	add	r7, r4
    b06a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    b06e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    b072:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    b076:	05ab      	lsls	r3, r5, #22
    b078:	d50d      	bpl.n	b096 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    b07a:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    b07e:	b118      	cbz	r0, b088 <TwoWire::isr()+0x68>
    b080:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b084:	b103      	cbz	r3, b088 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    b086:	4798      	blx	r3
		rxBufferIndex = 0;
    b088:	2300      	movs	r3, #0
    b08a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    b08e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    b092:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    b096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    b098:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    b09c:	b103      	cbz	r3, b0a0 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    b09e:	4798      	blx	r3
			txBufferIndex = 0;
    b0a0:	2300      	movs	r3, #0
    b0a2:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    b0a6:	2301      	movs	r3, #1
    b0a8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    b0ac:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    b0b0:	42bb      	cmp	r3, r7
    b0b2:	d8d8      	bhi.n	b066 <TwoWire::isr()+0x46>
			port->STDR = 0;
    b0b4:	2300      	movs	r3, #0
    b0b6:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    b0ba:	e7dc      	b.n	b076 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    b0bc:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    b0c0:	2b87      	cmp	r3, #135	; 0x87
    b0c2:	d8c5      	bhi.n	b050 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    b0c4:	1c59      	adds	r1, r3, #1
    b0c6:	b2c9      	uxtb	r1, r1
    b0c8:	e7be      	b.n	b048 <TwoWire::isr()+0x28>
    b0ca:	bf00      	nop

0000b0cc <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    b0cc:	4801      	ldr	r0, [pc, #4]	; (b0d4 <lpi2c1_isr()+0x8>)
    b0ce:	f7ff bfa7 	b.w	b020 <TwoWire::isr()>
    b0d2:	bf00      	nop
    b0d4:	20002b60 	.word	0x20002b60

0000b0d8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    b0d8:	4801      	ldr	r0, [pc, #4]	; (b0e0 <lpi2c3_isr()+0x8>)
    b0da:	f7ff bfa1 	b.w	b020 <TwoWire::isr()>
    b0de:	bf00      	nop
    b0e0:	20002ca0 	.word	0x20002ca0

0000b0e4 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    b0e4:	4801      	ldr	r0, [pc, #4]	; (b0ec <lpi2c4_isr()+0x8>)
    b0e6:	f7ff bf9b 	b.w	b020 <TwoWire::isr()>
    b0ea:	bf00      	nop
    b0ec:	20002de0 	.word	0x20002de0

0000b0f0 <AudioStream::update_all()>:
    b0f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b0f4:	2240      	movs	r2, #64	; 0x40
    b0f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    b0fa:	4770      	bx	lr

0000b0fc <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b0fe:	4b14      	ldr	r3, [pc, #80]	; (b150 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    b100:	4d14      	ldr	r5, [pc, #80]	; (b154 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b102:	681c      	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    b104:	686e      	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b106:	b19c      	cbz	r4, b130 <software_isr()+0x34>
		if (p->active) {
    b108:	7a23      	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    b10a:	4620      	mov	r0, r4
		if (p->active) {
    b10c:	b16b      	cbz	r3, b12a <software_isr()+0x2e>
			p->update();
    b10e:	6823      	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    b110:	686f      	ldr	r7, [r5, #4]
			p->update();
    b112:	681b      	ldr	r3, [r3, #0]
    b114:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    b116:	686b      	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b118:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    b11a:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    b11c:	f3c3 128f 	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b120:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    b124:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    b126:	bf38      	it	cc
    b128:	80e2      	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    b12a:	6964      	ldr	r4, [r4, #20]
    b12c:	2c00      	cmp	r4, #0
    b12e:	d1eb      	bne.n	b108 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    b130:	4b08      	ldr	r3, [pc, #32]	; (b154 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b132:	4a09      	ldr	r2, [pc, #36]	; (b158 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    b134:	685b      	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b136:	8810      	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    b138:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    b13a:	4c08      	ldr	r4, [pc, #32]	; (b15c <software_isr()+0x60>)
    b13c:	f3c3 118f 	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    b140:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    b144:	8021      	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    b146:	bf38      	it	cc
    b148:	8011      	strhcc	r1, [r2, #0]

	asm("DSB");
    b14a:	f3bf 8f4f 	dsb	sy
}
    b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b150:	2000474c 	.word	0x2000474c
    b154:	e0001000 	.word	0xe0001000
    b158:	200086d6 	.word	0x200086d6
    b15c:	200086d4 	.word	0x200086d4

0000b160 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
            { return (*static_cast<C*>(storage_ptr))(
    b160:	6803      	ldr	r3, [r0, #0]
    b162:	4718      	bx	r3

0000b164 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
    b164:	680b      	ldr	r3, [r1, #0]
    b166:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    b168:	4770      	bx	lr
    b16a:	bf00      	nop

0000b16c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
    b16c:	680b      	ldr	r3, [r1, #0]
    b16e:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    b170:	4770      	bx	lr
    b172:	bf00      	nop

0000b174 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
    b174:	4770      	bx	lr
    b176:	bf00      	nop

0000b178 <AudioStream::allocate()>:
{
    b178:	b430      	push	{r4, r5}
	__disable_irq();
    b17a:	b672      	cpsid	i
	index = memory_pool_first_mask;
    b17c:	4d24      	ldr	r5, [pc, #144]	; (b210 <AudioStream::allocate()+0x98>)
	p += index;
    b17e:	4c25      	ldr	r4, [pc, #148]	; (b214 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    b180:	882a      	ldrh	r2, [r5, #0]
		if (p >= end) {
    b182:	f104 0170 	add.w	r1, r4, #112	; 0x70
	p += index;
    b186:	eb04 0382 	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    b18a:	428b      	cmp	r3, r1
    b18c:	d23c      	bcs.n	b208 <AudioStream::allocate()+0x90>
    b18e:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    b192:	1c50      	adds	r0, r2, #1
    b194:	1ac9      	subs	r1, r1, r3
    b196:	eb00 0091 	add.w	r0, r0, r1, lsr #2
    b19a:	e002      	b.n	b1a2 <AudioStream::allocate()+0x2a>
		index++;
    b19c:	3201      	adds	r2, #1
		if (p >= end) {
    b19e:	4282      	cmp	r2, r0
    b1a0:	d032      	beq.n	b208 <AudioStream::allocate()+0x90>
		index++;
    b1a2:	469c      	mov	ip, r3
		avail = *p;
    b1a4:	f853 1b04 	ldr.w	r1, [r3], #4
		if (avail) break;
    b1a8:	2900      	cmp	r1, #0
    b1aa:	d0f7      	beq.n	b19c <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    b1ac:	fab1 f081 	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    b1b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b1b4:	40c3      	lsrs	r3, r0
    b1b6:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    b1ba:	f8cc 1000 	str.w	r1, [ip]
	if (!avail) index++;
    b1be:	b901      	cbnz	r1, b1c2 <AudioStream::allocate()+0x4a>
    b1c0:	3201      	adds	r2, #1
	used = memory_used + 1;
    b1c2:	4b15      	ldr	r3, [pc, #84]	; (b218 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    b1c4:	802a      	strh	r2, [r5, #0]
	used = memory_used + 1;
    b1c6:	881a      	ldrh	r2, [r3, #0]
	memory_used = used;
    b1c8:	3201      	adds	r2, #1
    b1ca:	b291      	uxth	r1, r2
    b1cc:	8019      	strh	r1, [r3, #0]
	__enable_irq();
    b1ce:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
    b1d0:	ebac 0c04 	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    b1d4:	f641 737c 	movw	r3, #8060	; 0x1f7c
    b1d8:	ebc0 6400 	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    b1dc:	ea4f 0cac 	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    b1e0:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    b1e4:	2401      	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    b1e6:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    b1ea:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    b1ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b1f2:	480a      	ldr	r0, [pc, #40]	; (b21c <AudioStream::allocate()+0xa4>)
    b1f4:	6800      	ldr	r0, [r0, #0]
	block->ref_count = 1;
    b1f6:	54c4      	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    b1f8:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    b1fa:	4b09      	ldr	r3, [pc, #36]	; (b220 <AudioStream::allocate()+0xa8>)
    b1fc:	881c      	ldrh	r4, [r3, #0]
    b1fe:	4294      	cmp	r4, r2
}
    b200:	bc30      	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    b202:	bf38      	it	cc
    b204:	8019      	strhcc	r1, [r3, #0]
}
    b206:	4770      	bx	lr
			__enable_irq();
    b208:	b662      	cpsie	i
			return NULL;
    b20a:	2000      	movs	r0, #0
}
    b20c:	bc30      	pop	{r4, r5}
    b20e:	4770      	bx	lr
    b210:	200086d8 	.word	0x200086d8
    b214:	20004750 	.word	0x20004750
    b218:	200086d0 	.word	0x200086d0
    b21c:	20004748 	.word	0x20004748
    b220:	200086d2 	.word	0x200086d2

0000b224 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    b224:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
    b226:	b672      	cpsid	i
	if (block->ref_count > 1) {
    b228:	7803      	ldrb	r3, [r0, #0]
    b22a:	2b01      	cmp	r3, #1
    b22c:	d903      	bls.n	b236 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    b22e:	3b01      	subs	r3, #1
    b230:	7003      	strb	r3, [r0, #0]
	__enable_irq();
    b232:	b662      	cpsie	i
}
    b234:	4770      	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    b236:	43d1      	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    b238:	0953      	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    b23a:	480b      	ldr	r0, [pc, #44]	; (b268 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    b23c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b240:	f001 011f 	and.w	r1, r1, #31
    b244:	40ca      	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    b246:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    b24a:	430a      	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    b24c:	4907      	ldr	r1, [pc, #28]	; (b26c <AudioStream::release(audio_block_struct*)+0x48>)
    b24e:	f8b1 c000 	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    b252:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    b256:	459c      	cmp	ip, r3
		memory_used--;
    b258:	4a05      	ldr	r2, [pc, #20]	; (b270 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    b25a:	bf88      	it	hi
    b25c:	800b      	strhhi	r3, [r1, #0]
		memory_used--;
    b25e:	8813      	ldrh	r3, [r2, #0]
    b260:	3b01      	subs	r3, #1
    b262:	8013      	strh	r3, [r2, #0]
	__enable_irq();
    b264:	b662      	cpsie	i
}
    b266:	4770      	bx	lr
    b268:	20004750 	.word	0x20004750
    b26c:	200086d8 	.word	0x200086d8
    b270:	200086d0 	.word	0x200086d0

0000b274 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    b274:	68c3      	ldr	r3, [r0, #12]
    b276:	b913      	cbnz	r3, b27e <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    b278:	e01d      	b.n	b2b6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    b27a:	68db      	ldr	r3, [r3, #12]
    b27c:	b1e3      	cbz	r3, b2b8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    b27e:	7a18      	ldrb	r0, [r3, #8]
    b280:	4290      	cmp	r0, r2
    b282:	d1fa      	bne.n	b27a <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    b284:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    b286:	6858      	ldr	r0, [r3, #4]
    b288:	f893 c009 	ldrb.w	ip, [r3, #9]
    b28c:	6900      	ldr	r0, [r0, #16]
    b28e:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    b292:	b154      	cbz	r4, b2aa <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    b294:	68db      	ldr	r3, [r3, #12]
    b296:	b12b      	cbz	r3, b2a4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    b298:	7a18      	ldrb	r0, [r3, #8]
    b29a:	4290      	cmp	r0, r2
    b29c:	d0f3      	beq.n	b286 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    b29e:	68db      	ldr	r3, [r3, #12]
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d1f9      	bne.n	b298 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    b2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    b2a8:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    b2aa:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    b2ae:	7808      	ldrb	r0, [r1, #0]
    b2b0:	3001      	adds	r0, #1
    b2b2:	7008      	strb	r0, [r1, #0]
    b2b4:	e7ee      	b.n	b294 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    b2b6:	4770      	bx	lr
    b2b8:	4770      	bx	lr
    b2ba:	bf00      	nop

0000b2bc <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    b2bc:	7a43      	ldrb	r3, [r0, #9]
    b2be:	428b      	cmp	r3, r1
    b2c0:	d906      	bls.n	b2d0 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    b2c2:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    b2c4:	2200      	movs	r2, #0
	in = inputQueue[index];
    b2c6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    b2ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
    b2ce:	4770      	bx	lr
	if (index >= num_inputs) return NULL;
    b2d0:	2000      	movs	r0, #0
}
    b2d2:	4770      	bx	lr

0000b2d4 <AudioStream::receiveWritable(unsigned int)>:
{
    b2d4:	b538      	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    b2d6:	7a43      	ldrb	r3, [r0, #9]
    b2d8:	428b      	cmp	r3, r1
    b2da:	d91b      	bls.n	b314 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    b2dc:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    b2de:	2200      	movs	r2, #0
	in = inputQueue[index];
    b2e0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    b2e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    b2e8:	b1a4      	cbz	r4, b314 <AudioStream::receiveWritable(unsigned int)+0x40>
    b2ea:	7823      	ldrb	r3, [r4, #0]
    b2ec:	2b01      	cmp	r3, #1
    b2ee:	d801      	bhi.n	b2f4 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    b2f0:	4620      	mov	r0, r4
    b2f2:	bd38      	pop	{r3, r4, r5, pc}
		p = allocate();
    b2f4:	f7ff ff40 	bl	b178 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    b2f8:	4605      	mov	r5, r0
    b2fa:	b128      	cbz	r0, b308 <AudioStream::receiveWritable(unsigned int)+0x34>
    b2fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    b300:	1d21      	adds	r1, r4, #4
    b302:	3004      	adds	r0, #4
    b304:	f000 fdcc 	bl	bea0 <memcpy>
		in->ref_count--;
    b308:	7823      	ldrb	r3, [r4, #0]
    b30a:	3b01      	subs	r3, #1
    b30c:	7023      	strb	r3, [r4, #0]
		p = allocate();
    b30e:	462c      	mov	r4, r5
}
    b310:	4620      	mov	r0, r4
    b312:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    b314:	2400      	movs	r4, #0
}
    b316:	4620      	mov	r0, r4
    b318:	bd38      	pop	{r3, r4, r5, pc}
    b31a:	bf00      	nop

0000b31c <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
    b31c:	2200      	movs	r2, #0
	next_dest = AudioStream::unused;
    b31e:	4904      	ldr	r1, [pc, #16]	; (b330 <AudioConnection::AudioConnection()+0x14>)
	: src(NULL), dst(NULL),
    b320:	e9c0 2200 	strd	r2, r2, [r0]
	  src_index(0), dest_index(0),
    b324:	8102      	strh	r2, [r0, #8]
	  isConnected(false)
    b326:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
    b328:	680a      	ldr	r2, [r1, #0]
	AudioStream::unused = this;
    b32a:	6008      	str	r0, [r1, #0]
	next_dest = AudioStream::unused;
    b32c:	60c2      	str	r2, [r0, #12]
}
    b32e:	4770      	bx	lr
    b330:	200047c0 	.word	0x200047c0

0000b334 <AudioConnection::connect()>:
		if (isConnected) // already connected
    b334:	7c03      	ldrb	r3, [r0, #16]
    b336:	b9fb      	cbnz	r3, b378 <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    b338:	6803      	ldr	r3, [r0, #0]
    b33a:	4601      	mov	r1, r0
    b33c:	b1fb      	cbz	r3, b37e <AudioConnection::connect()+0x4a>
    b33e:	6843      	ldr	r3, [r0, #4]
    b340:	b1eb      	cbz	r3, b37e <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    b342:	7a42      	ldrb	r2, [r0, #9]
    b344:	7a5b      	ldrb	r3, [r3, #9]
    b346:	429a      	cmp	r2, r3
    b348:	d21c      	bcs.n	b384 <AudioConnection::connect()+0x50>
{
    b34a:	b430      	push	{r4, r5}
		__disable_irq();
    b34c:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    b34e:	4b2b      	ldr	r3, [pc, #172]	; (b3fc <AudioConnection::connect()+0xc8>)
    b350:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    b352:	b1ec      	cbz	r4, b390 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    b354:	68e3      	ldr	r3, [r4, #12]
			while (p)
    b356:	b1c3      	cbz	r3, b38a <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    b358:	6848      	ldr	r0, [r1, #4]
    b35a:	e001      	b.n	b360 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    b35c:	68db      	ldr	r3, [r3, #12]
			while (p)
    b35e:	b1a3      	cbz	r3, b38a <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    b360:	685a      	ldr	r2, [r3, #4]
    b362:	4282      	cmp	r2, r0
    b364:	d1fa      	bne.n	b35c <AudioConnection::connect()+0x28>
    b366:	f893 c009 	ldrb.w	ip, [r3, #9]
    b36a:	7a4a      	ldrb	r2, [r1, #9]
    b36c:	4594      	cmp	ip, r2
    b36e:	d1f5      	bne.n	b35c <AudioConnection::connect()+0x28>
					__enable_irq();
    b370:	b662      	cpsie	i
					return 4;
    b372:	2004      	movs	r0, #4
}
    b374:	bc30      	pop	{r4, r5}
    b376:	4770      	bx	lr
	int result = 1;
    b378:	2001      	movs	r0, #1
	__enable_irq();
    b37a:	b662      	cpsie	i
}
    b37c:	4770      	bx	lr
			result = 3;
    b37e:	2003      	movs	r0, #3
	__enable_irq();
    b380:	b662      	cpsie	i
}
    b382:	4770      	bx	lr
			result = 2;
    b384:	2002      	movs	r0, #2
	__enable_irq();
    b386:	b662      	cpsie	i
}
    b388:	4770      	bx	lr
			s = s->next_update;
    b38a:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    b38c:	2c00      	cmp	r4, #0
    b38e:	d1e1      	bne.n	b354 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    b390:	4c1b      	ldr	r4, [pc, #108]	; (b400 <AudioConnection::connect()+0xcc>)
    b392:	6823      	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    b394:	b143      	cbz	r3, b3a8 <AudioConnection::connect()+0x74>
    b396:	4299      	cmp	r1, r3
    b398:	d102      	bne.n	b3a0 <AudioConnection::connect()+0x6c>
    b39a:	e00b      	b.n	b3b4 <AudioConnection::connect()+0x80>
    b39c:	4299      	cmp	r1, r3
    b39e:	d007      	beq.n	b3b0 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    b3a0:	461a      	mov	r2, r3
    b3a2:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d1f9      	bne.n	b39c <AudioConnection::connect()+0x68>
			result = 5;
    b3a8:	2005      	movs	r0, #5
	__enable_irq();
    b3aa:	b662      	cpsie	i
}
    b3ac:	bc30      	pop	{r4, r5}
    b3ae:	4770      	bx	lr
			pp = &((*pp)->next_dest);
    b3b0:	f102 040c 	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    b3b4:	680d      	ldr	r5, [r1, #0]
    b3b6:	68e8      	ldr	r0, [r5, #12]
		if (p == NULL) 
    b3b8:	b1e8      	cbz	r0, b3f6 <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    b3ba:	68c3      	ldr	r3, [r0, #12]
    b3bc:	b91b      	cbnz	r3, b3c6 <AudioConnection::connect()+0x92>
    b3be:	e008      	b.n	b3d2 <AudioConnection::connect()+0x9e>
    b3c0:	68da      	ldr	r2, [r3, #12]
    b3c2:	b13a      	cbz	r2, b3d4 <AudioConnection::connect()+0xa0>
    b3c4:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    b3c6:	4281      	cmp	r1, r0
    b3c8:	4618      	mov	r0, r3
    b3ca:	d1f9      	bne.n	b3c0 <AudioConnection::connect()+0x8c>
					__enable_irq();
    b3cc:	b662      	cpsie	i
					return 6;
    b3ce:	2006      	movs	r0, #6
    b3d0:	e7d0      	b.n	b374 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    b3d2:	4603      	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    b3d4:	60d9      	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    b3d6:	68cb      	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    b3d8:	2000      	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    b3da:	6023      	str	r3, [r4, #0]
		src->active = true;
    b3dc:	2301      	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    b3de:	60c8      	str	r0, [r1, #12]
		src->numConnections++;
    b3e0:	7aaa      	ldrb	r2, [r5, #10]
		src->active = true;
    b3e2:	722b      	strb	r3, [r5, #8]
		src->numConnections++;
    b3e4:	441a      	add	r2, r3
    b3e6:	72aa      	strb	r2, [r5, #10]
		dst->numConnections++;
    b3e8:	684a      	ldr	r2, [r1, #4]
    b3ea:	7a94      	ldrb	r4, [r2, #10]
		dst->active = true;
    b3ec:	7213      	strb	r3, [r2, #8]
		dst->numConnections++;
    b3ee:	441c      	add	r4, r3
    b3f0:	7294      	strb	r4, [r2, #10]
		isConnected = true;
    b3f2:	740b      	strb	r3, [r1, #16]
		result = 0;
    b3f4:	e7d9      	b.n	b3aa <AudioConnection::connect()+0x76>
			src->destination_list = this;
    b3f6:	60e9      	str	r1, [r5, #12]
    b3f8:	e7ed      	b.n	b3d6 <AudioConnection::connect()+0xa2>
    b3fa:	bf00      	nop
    b3fc:	2000474c 	.word	0x2000474c
    b400:	200047c0 	.word	0x200047c0

0000b404 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
    b404:	b510      	push	{r4, lr}
	if (!isConnected)
    b406:	7c04      	ldrb	r4, [r0, #16]
{
    b408:	f89d e008 	ldrb.w	lr, [sp, #8]
	if (!isConnected)
    b40c:	b10c      	cbz	r4, b412 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xe>
}
    b40e:	2001      	movs	r0, #1
    b410:	bd10      	pop	{r4, pc}
		src_index = sourceOutput;
    b412:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
    b414:	f880 e009 	strb.w	lr, [r0, #9]
		dst = &destination;
    b418:	e9c0 1300 	strd	r1, r3, [r0]
}
    b41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = connect();
    b420:	f7ff bf88 	b.w	b334 <AudioConnection::connect()>

0000b424 <AudioConnection::disconnect()>:
{
    b424:	b538      	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    b426:	7c03      	ldrb	r3, [r0, #16]
    b428:	2b00      	cmp	r3, #0
    b42a:	d036      	beq.n	b49a <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    b42c:	6843      	ldr	r3, [r0, #4]
    b42e:	4604      	mov	r4, r0
    b430:	7a42      	ldrb	r2, [r0, #9]
    b432:	7a5b      	ldrb	r3, [r3, #9]
    b434:	429a      	cmp	r2, r3
    b436:	d238      	bcs.n	b4aa <AudioConnection::disconnect()+0x86>
	__disable_irq();
    b438:	b672      	cpsid	i
	p = src->destination_list;
    b43a:	6801      	ldr	r1, [r0, #0]
    b43c:	68cb      	ldr	r3, [r1, #12]
	if (p == NULL) {
    b43e:	2b00      	cmp	r3, #0
    b440:	d02d      	beq.n	b49e <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    b442:	4298      	cmp	r0, r3
    b444:	d033      	beq.n	b4ae <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    b446:	461a      	mov	r2, r3
    b448:	68db      	ldr	r3, [r3, #12]
    b44a:	429c      	cmp	r4, r3
    b44c:	d02a      	beq.n	b4a4 <AudioConnection::disconnect()+0x80>
		while (p)
    b44e:	2b00      	cmp	r3, #0
    b450:	d1f9      	bne.n	b446 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    b452:	6862      	ldr	r2, [r4, #4]
    b454:	7a60      	ldrb	r0, [r4, #9]
    b456:	6913      	ldr	r3, [r2, #16]
    b458:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b45c:	b148      	cbz	r0, b472 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    b45e:	f7ff fee1 	bl	b224 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    b462:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    b464:	6862      	ldr	r2, [r4, #4]
    b466:	2500      	movs	r5, #0
    b468:	7a60      	ldrb	r0, [r4, #9]
    b46a:	6913      	ldr	r3, [r2, #16]
	src->numConnections--;
    b46c:	6821      	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    b46e:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    b472:	7a8b      	ldrb	r3, [r1, #10]
    b474:	3b01      	subs	r3, #1
    b476:	b2db      	uxtb	r3, r3
    b478:	728b      	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    b47a:	b903      	cbnz	r3, b47e <AudioConnection::disconnect()+0x5a>
		src->active = false;
    b47c:	720b      	strb	r3, [r1, #8]
	dst->numConnections--;
    b47e:	7a93      	ldrb	r3, [r2, #10]
    b480:	3b01      	subs	r3, #1
    b482:	b2db      	uxtb	r3, r3
    b484:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    b486:	b903      	cbnz	r3, b48a <AudioConnection::disconnect()+0x66>
		dst->active = false;
    b488:	7213      	strb	r3, [r2, #8]
	next_dest = dst->unused;
    b48a:	4b0a      	ldr	r3, [pc, #40]	; (b4b4 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    b48c:	2000      	movs	r0, #0
	next_dest = dst->unused;
    b48e:	681a      	ldr	r2, [r3, #0]
	isConnected = false;
    b490:	7420      	strb	r0, [r4, #16]
	dst->unused = this;
    b492:	601c      	str	r4, [r3, #0]
	next_dest = dst->unused;
    b494:	60e2      	str	r2, [r4, #12]
	__enable_irq();
    b496:	b662      	cpsie	i
}
    b498:	bd38      	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    b49a:	2001      	movs	r0, #1
}
    b49c:	bd38      	pop	{r3, r4, r5, pc}
		__enable_irq();
    b49e:	b662      	cpsie	i
		return 3;
    b4a0:	2003      	movs	r0, #3
}
    b4a2:	bd38      	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    b4a4:	68e3      	ldr	r3, [r4, #12]
    b4a6:	60d3      	str	r3, [r2, #12]
				break;
    b4a8:	e7d3      	b.n	b452 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    b4aa:	2002      	movs	r0, #2
}
    b4ac:	bd38      	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    b4ae:	68c3      	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    b4b0:	60cb      	str	r3, [r1, #12]
    b4b2:	e7ce      	b.n	b452 <AudioConnection::disconnect()+0x2e>
    b4b4:	200047c0 	.word	0x200047c0

0000b4b8 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    b4b8:	b510      	push	{r4, lr}
    b4ba:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    b4bc:	f7ff ffb2 	bl	b424 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    b4c0:	4a09      	ldr	r2, [pc, #36]	; (b4e8 <AudioConnection::~AudioConnection()+0x30>)
    b4c2:	6813      	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    b4c4:	b143      	cbz	r3, b4d8 <AudioConnection::~AudioConnection()+0x20>
    b4c6:	429c      	cmp	r4, r3
    b4c8:	d102      	bne.n	b4d0 <AudioConnection::~AudioConnection()+0x18>
    b4ca:	e008      	b.n	b4de <AudioConnection::~AudioConnection()+0x26>
    b4cc:	429c      	cmp	r4, r3
    b4ce:	d005      	beq.n	b4dc <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    b4d0:	461a      	mov	r2, r3
    b4d2:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d1f9      	bne.n	b4cc <AudioConnection::~AudioConnection()+0x14>
}
    b4d8:	4620      	mov	r0, r4
    b4da:	bd10      	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    b4dc:	320c      	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    b4de:	68e3      	ldr	r3, [r4, #12]
}
    b4e0:	4620      	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    b4e2:	6013      	str	r3, [r2, #0]
}
    b4e4:	bd10      	pop	{r4, pc}
    b4e6:	bf00      	nop
    b4e8:	200047c0 	.word	0x200047c0

0000b4ec <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    b4ec:	4b0c      	ldr	r3, [pc, #48]	; (b520 <AudioStream::update_setup()+0x34>)
    b4ee:	781a      	ldrb	r2, [r3, #0]
    b4f0:	b99a      	cbnz	r2, b51a <AudioStream::update_setup()+0x2e>
    b4f2:	4a0c      	ldr	r2, [pc, #48]	; (b524 <AudioStream::update_setup()+0x38>)
    b4f4:	490c      	ldr	r1, [pc, #48]	; (b528 <AudioStream::update_setup()+0x3c>)
{
    b4f6:	b410      	push	{r4}
    b4f8:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    b4fc:	480b      	ldr	r0, [pc, #44]	; (b52c <AudioStream::update_setup()+0x40>)
    b4fe:	24d0      	movs	r4, #208	; 0xd0
	update_scheduled = true;
    b500:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    b502:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    b506:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    b50a:	2440      	movs	r4, #64	; 0x40
	update_scheduled = true;
    b50c:	4610      	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    b50e:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
}
    b512:	f85d 4b04 	ldr.w	r4, [sp], #4
	update_scheduled = true;
    b516:	701a      	strb	r2, [r3, #0]
}
    b518:	4770      	bx	lr
	if (update_scheduled) return false;
    b51a:	2000      	movs	r0, #0
}
    b51c:	4770      	bx	lr
    b51e:	bf00      	nop
    b520:	200086f1 	.word	0x200086f1
    b524:	20003800 	.word	0x20003800
    b528:	0000b0fd 	.word	0x0000b0fd
    b52c:	e000e400 	.word	0xe000e400

0000b530 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    b530:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    b532:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    b534:	b921      	cbnz	r1, b540 <DMAChannel::begin(bool)+0x10>
    b536:	6803      	ldr	r3, [r0, #0]
    b538:	b113      	cbz	r3, b540 <DMAChannel::begin(bool)+0x10>
    b53a:	7902      	ldrb	r2, [r0, #4]
    b53c:	2a0f      	cmp	r2, #15
    b53e:	d93b      	bls.n	b5b8 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    b540:	4c24      	ldr	r4, [pc, #144]	; (b5d4 <DMAChannel::begin(bool)+0xa4>)
    b542:	8821      	ldrh	r1, [r4, #0]
{
    b544:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    b546:	fa41 f203 	asr.w	r2, r1, r3
    b54a:	f012 0201 	ands.w	r2, r2, #1
    b54e:	d008      	beq.n	b562 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    b550:	3301      	adds	r3, #1
    b552:	2b10      	cmp	r3, #16
    b554:	d1f7      	bne.n	b546 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    b556:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    b558:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    b55a:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    b55c:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    b55e:	bc30      	pop	{r4, r5}
    b560:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    b562:	f04f 0c01 	mov.w	ip, #1
    b566:	fa0c fc03 	lsl.w	ip, ip, r3
    b56a:	ea41 010c 	orr.w	r1, r1, ip
    b56e:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    b570:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b572:	4919      	ldr	r1, [pc, #100]	; (b5d8 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    b574:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b578:	4c18      	ldr	r4, [pc, #96]	; (b5dc <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b57a:	4419      	add	r1, r3
	channel = ch;
    b57c:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b580:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b582:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    b584:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    b588:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    b58a:	f240 4482 	movw	r4, #1154	; 0x482
    b58e:	4914      	ldr	r1, [pc, #80]	; (b5e0 <DMAChannel::begin(bool)+0xb0>)
    b590:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    b592:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    b596:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    b59a:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    b59e:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b5a2:	6003      	str	r3, [r0, #0]
}
    b5a4:	bc30      	pop	{r4, r5}
	*p++ = 0;
    b5a6:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    b5aa:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    b5ae:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    b5b2:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    b5b6:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    b5b8:	4c06      	ldr	r4, [pc, #24]	; (b5d4 <DMAChannel::begin(bool)+0xa4>)
    b5ba:	8821      	ldrh	r1, [r4, #0]
    b5bc:	fa41 f502 	asr.w	r5, r1, r2
    b5c0:	07ed      	lsls	r5, r5, #31
    b5c2:	d5bf      	bpl.n	b544 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    b5c4:	4d04      	ldr	r5, [pc, #16]	; (b5d8 <DMAChannel::begin(bool)+0xa8>)
    b5c6:	4415      	add	r5, r2
    b5c8:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    b5cc:	d1ba      	bne.n	b544 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    b5ce:	b662      	cpsie	i
		return;
    b5d0:	e7c5      	b.n	b55e <DMAChannel::begin(bool)+0x2e>
    b5d2:	bf00      	nop
    b5d4:	200086de 	.word	0x200086de
    b5d8:	02007480 	.word	0x02007480
    b5dc:	400fc000 	.word	0x400fc000
    b5e0:	400e8000 	.word	0x400e8000

0000b5e4 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    b5e4:	7903      	ldrb	r3, [r0, #4]
    b5e6:	2b0f      	cmp	r3, #15
    b5e8:	d811      	bhi.n	b60e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    b5ea:	4a09      	ldr	r2, [pc, #36]	; (b610 <DMAChannel::release()+0x2c>)
    b5ec:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    b5ee:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    b5f0:	4908      	ldr	r1, [pc, #32]	; (b614 <DMAChannel::release()+0x30>)
    b5f2:	2201      	movs	r2, #1
    b5f4:	f890 c004 	ldrb.w	ip, [r0, #4]
    b5f8:	880b      	ldrh	r3, [r1, #0]
    b5fa:	fa02 f20c 	lsl.w	r2, r2, ip
    b5fe:	ea23 0302 	bic.w	r3, r3, r2
    b602:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    b604:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    b606:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    b608:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    b60a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    b60c:	6003      	str	r3, [r0, #0]
}
    b60e:	4770      	bx	lr
    b610:	400e8000 	.word	0x400e8000
    b614:	200086de 	.word	0x200086de

0000b618 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b618:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    b61c:	b672      	cpsid	i
	if (_triggered == false) {
    b61e:	7f43      	ldrb	r3, [r0, #29]
    b620:	b95b      	cbnz	r3, b63a <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    b622:	7f01      	ldrb	r1, [r0, #28]
    b624:	2901      	cmp	r1, #1
{
    b626:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    b628:	d00b      	beq.n	b642 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    b62a:	2903      	cmp	r1, #3
    b62c:	d013      	beq.n	b656 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    b62e:	2301      	movs	r3, #1
    b630:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b632:	b902      	cbnz	r2, b636 <EventResponder::triggerEventNotImmediate()+0x1e>
    b634:	b662      	cpsie	i
}
    b636:	bc30      	pop	{r4, r5}
    b638:	4770      	bx	lr
    b63a:	b90a      	cbnz	r2, b640 <EventResponder::triggerEventNotImmediate()+0x28>
    b63c:	b662      	cpsie	i
    b63e:	4770      	bx	lr
    b640:	4770      	bx	lr
			if (firstYield == nullptr) {
    b642:	4c12      	ldr	r4, [pc, #72]	; (b68c <EventResponder::triggerEventNotImmediate()+0x74>)
    b644:	6821      	ldr	r1, [r4, #0]
    b646:	b1b1      	cbz	r1, b676 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    b648:	4911      	ldr	r1, [pc, #68]	; (b690 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    b64a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    b64c:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    b64e:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    b650:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    b652:	6158      	str	r0, [r3, #20]
				lastYield = this;
    b654:	e7eb      	b.n	b62e <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    b656:	4d0f      	ldr	r5, [pc, #60]	; (b694 <EventResponder::triggerEventNotImmediate()+0x7c>)
    b658:	490f      	ldr	r1, [pc, #60]	; (b698 <EventResponder::triggerEventNotImmediate()+0x80>)
    b65a:	682c      	ldr	r4, [r5, #0]
    b65c:	b18c      	cbz	r4, b682 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    b65e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    b660:	680b      	ldr	r3, [r1, #0]
    b662:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    b664:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b66a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    b66e:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b670:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    b674:	e7db      	b.n	b62e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    b676:	4b06      	ldr	r3, [pc, #24]	; (b690 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    b678:	6020      	str	r0, [r4, #0]
				lastYield = this;
    b67a:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    b67c:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    b680:	e7d5      	b.n	b62e <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    b682:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    b686:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    b688:	e7ed      	b.n	b666 <EventResponder::triggerEventNotImmediate()+0x4e>
    b68a:	bf00      	nop
    b68c:	20004830 	.word	0x20004830
    b690:	2000483c 	.word	0x2000483c
    b694:	20004838 	.word	0x20004838
    b698:	20004834 	.word	0x20004834

0000b69c <EventResponder::runFromInterrupt()>:
{
    b69c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b69e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    b6a2:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    b6a4:	4c0c      	ldr	r4, [pc, #48]	; (b6d8 <EventResponder::runFromInterrupt()+0x3c>)
    b6a6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    b6a8:	b180      	cbz	r0, b6cc <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    b6aa:	4e0c      	ldr	r6, [pc, #48]	; (b6dc <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    b6ac:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    b6ae:	6943      	ldr	r3, [r0, #20]
    b6b0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    b6b2:	b173      	cbz	r3, b6d2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    b6b4:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    b6b6:	b902      	cbnz	r2, b6ba <EventResponder::runFromInterrupt()+0x1e>
    b6b8:	b662      	cpsie	i
			(*(first->_function))(*first);
    b6ba:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    b6bc:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    b6be:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b6c0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    b6c4:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    b6c6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    b6c8:	2800      	cmp	r0, #0
    b6ca:	d1f0      	bne.n	b6ae <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    b6cc:	b902      	cbnz	r2, b6d0 <EventResponder::runFromInterrupt()+0x34>
    b6ce:	b662      	cpsie	i
}
    b6d0:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    b6d2:	6033      	str	r3, [r6, #0]
    b6d4:	e7ef      	b.n	b6b6 <EventResponder::runFromInterrupt()+0x1a>
    b6d6:	bf00      	nop
    b6d8:	20004838 	.word	0x20004838
    b6dc:	20004834 	.word	0x20004834

0000b6e0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    b6e0:	f7ff bfdc 	b.w	b69c <EventResponder::runFromInterrupt()>

0000b6e4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b6e4:	4904      	ldr	r1, [pc, #16]	; (b6f8 <systick_isr+0x14>)
	systick_millis_count++;
    b6e6:	4a05      	ldr	r2, [pc, #20]	; (b6fc <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    b6e8:	6849      	ldr	r1, [r1, #4]
    b6ea:	4b05      	ldr	r3, [pc, #20]	; (b700 <systick_isr+0x1c>)
    b6ec:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    b6ee:	6813      	ldr	r3, [r2, #0]
    b6f0:	3301      	adds	r3, #1
    b6f2:	6013      	str	r3, [r2, #0]
}
    b6f4:	4770      	bx	lr
    b6f6:	bf00      	nop
    b6f8:	e0001000 	.word	0xe0001000
    b6fc:	200086a8 	.word	0x200086a8
    b700:	200086a4 	.word	0x200086a4

0000b704 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
    b704:	4770      	bx	lr
    b706:	bf00      	nop

0000b708 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    b708:	4770      	bx	lr
    b70a:	bf00      	nop

0000b70c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    b70c:	4770      	bx	lr
    b70e:	bf00      	nop

0000b710 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    b710:	4770      	bx	lr
    b712:	bf00      	nop

0000b714 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    b714:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
    b716:	4c1a      	ldr	r4, [pc, #104]	; (b780 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    b718:	4d1a      	ldr	r5, [pc, #104]	; (b784 <pit_isr()+0x70>)
    b71a:	6823      	ldr	r3, [r4, #0]
    b71c:	42ab      	cmp	r3, r5
    b71e:	d002      	beq.n	b726 <pit_isr()+0x12>
    b720:	4a19      	ldr	r2, [pc, #100]	; (b788 <pit_isr()+0x74>)
    b722:	68d1      	ldr	r1, [r2, #12]
    b724:	bb29      	cbnz	r1, b772 <pit_isr()+0x5e>
    b726:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    b728:	42ab      	cmp	r3, r5
    b72a:	d002      	beq.n	b732 <pit_isr()+0x1e>
    b72c:	4a16      	ldr	r2, [pc, #88]	; (b788 <pit_isr()+0x74>)
    b72e:	69d1      	ldr	r1, [r2, #28]
    b730:	b9c9      	cbnz	r1, b766 <pit_isr()+0x52>
    b732:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    b734:	42ab      	cmp	r3, r5
    b736:	d002      	beq.n	b73e <pit_isr()+0x2a>
    b738:	4a13      	ldr	r2, [pc, #76]	; (b788 <pit_isr()+0x74>)
    b73a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    b73c:	b969      	cbnz	r1, b75a <pit_isr()+0x46>
    b73e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    b740:	42ab      	cmp	r3, r5
    b742:	d009      	beq.n	b758 <pit_isr()+0x44>
    b744:	4a10      	ldr	r2, [pc, #64]	; (b788 <pit_isr()+0x74>)
    b746:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    b748:	b131      	cbz	r1, b758 <pit_isr()+0x44>
    b74a:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    b74c:	681b      	ldr	r3, [r3, #0]
    b74e:	480f      	ldr	r0, [pc, #60]	; (b78c <pit_isr()+0x78>)
    b750:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
    b752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b756:	4718      	bx	r3
    b758:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    b75a:	2101      	movs	r1, #1
    b75c:	681b      	ldr	r3, [r3, #0]
    b75e:	480c      	ldr	r0, [pc, #48]	; (b790 <pit_isr()+0x7c>)
    b760:	62d1      	str	r1, [r2, #44]	; 0x2c
    b762:	4798      	blx	r3
        );
    b764:	e7eb      	b.n	b73e <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    b766:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    b768:	681b      	ldr	r3, [r3, #0]
    b76a:	480a      	ldr	r0, [pc, #40]	; (b794 <pit_isr()+0x80>)
    b76c:	61d1      	str	r1, [r2, #28]
    b76e:	4798      	blx	r3
        );
    b770:	e7df      	b.n	b732 <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    b772:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    b774:	681b      	ldr	r3, [r3, #0]
    b776:	f104 0008 	add.w	r0, r4, #8
    b77a:	60d1      	str	r1, [r2, #12]
    b77c:	4798      	blx	r3
        );
    b77e:	e7d2      	b.n	b726 <pit_isr()+0x12>
    b780:	20003ac0 	.word	0x20003ac0
    b784:	20001fec 	.word	0x20001fec
    b788:	40084100 	.word	0x40084100
    b78c:	20003b10 	.word	0x20003b10
    b790:	20003af8 	.word	0x20003af8
    b794:	20003ae0 	.word	0x20003ae0

0000b798 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    b798:	b538      	push	{r3, r4, r5, lr}
    b79a:	4c06      	ldr	r4, [pc, #24]	; (b7b4 <__tcf_0+0x1c>)
    b79c:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    b7a0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b7a4:	4620      	mov	r0, r4
    b7a6:	3c18      	subs	r4, #24
    b7a8:	68db      	ldr	r3, [r3, #12]
    b7aa:	4798      	blx	r3
    b7ac:	42ac      	cmp	r4, r5
    b7ae:	d1f7      	bne.n	b7a0 <__tcf_0+0x8>
    b7b0:	bd38      	pop	{r3, r4, r5, pc}
    b7b2:	bf00      	nop
    b7b4:	20003b10 	.word	0x20003b10

0000b7b8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
    b7b8:	6803      	ldr	r3, [r0, #0]
{
    b7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7be:	4604      	mov	r4, r0
    b7c0:	b088      	sub	sp, #32
    b7c2:	4617      	mov	r7, r2
	if (channel) {
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d04b      	beq.n	b860 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
    b7c8:	2200      	movs	r2, #0
    b7ca:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
    b7cc:	2201      	movs	r2, #1
    b7ce:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
    b7d0:	4d30      	ldr	r5, [pc, #192]	; (b894 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
    b7d2:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    b7d4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b8b8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
    b7d8:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
    b7da:	f851 3b08 	ldr.w	r3, [r1], #8
    b7de:	112d      	asrs	r5, r5, #4
    b7e0:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
    b7e2:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    b7e4:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
    b7e8:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    b7ea:	00f6      	lsls	r6, r6, #3
    b7ec:	f106 0008 	add.w	r0, r6, #8
    b7f0:	f858 3006 	ldr.w	r3, [r8, r6]
    b7f4:	4440      	add	r0, r8
    b7f6:	68db      	ldr	r3, [r3, #12]
    b7f8:	9001      	str	r0, [sp, #4]
    b7fa:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
    b7fc:	4a26      	ldr	r2, [pc, #152]	; (b898 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
    b7fe:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
    b800:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
    b804:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
    b806:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
    b80a:	689b      	ldr	r3, [r3, #8]
    b80c:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    b80e:	9b02      	ldr	r3, [sp, #8]
    b810:	a804      	add	r0, sp, #16
    b812:	68db      	ldr	r3, [r3, #12]
    b814:	4798      	blx	r3
	channel->LDVAL = cycles;
    b816:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
    b818:	2203      	movs	r2, #3
    b81a:	4820      	ldr	r0, [pc, #128]	; (b89c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
    b81c:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
    b81e:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    b820:	4a1f      	ldr	r2, [pc, #124]	; (b8a0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
    b822:	7923      	ldrb	r3, [r4, #4]
    b824:	4c1f      	ldr	r4, [pc, #124]	; (b8a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
    b826:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    b828:	7813      	ldrb	r3, [r2, #0]
    b82a:	7851      	ldrb	r1, [r2, #1]
    b82c:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
    b830:	428b      	cmp	r3, r1
    b832:	bf28      	it	cs
    b834:	460b      	movcs	r3, r1
    b836:	7891      	ldrb	r1, [r2, #2]
    b838:	78d2      	ldrb	r2, [r2, #3]
    b83a:	428b      	cmp	r3, r1
    b83c:	bf28      	it	cs
    b83e:	460b      	movcs	r3, r1
    b840:	4293      	cmp	r3, r2
    b842:	bf28      	it	cs
    b844:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    b846:	4c18      	ldr	r4, [pc, #96]	; (b8a8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    b848:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b84c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
    b850:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    b852:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
    b856:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
    b85a:	b008      	add	sp, #32
    b85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b860:	4a12      	ldr	r2, [pc, #72]	; (b8ac <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
    b862:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    b864:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    b868:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
    b86a:	2201      	movs	r2, #1
    b86c:	4b10      	ldr	r3, [pc, #64]	; (b8b0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
    b86e:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    b870:	4a10      	ldr	r2, [pc, #64]	; (b8b4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
    b872:	4613      	mov	r3, r2
    b874:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    b876:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
    b878:	6898      	ldr	r0, [r3, #8]
    b87a:	2800      	cmp	r0, #0
    b87c:	d0a8      	beq.n	b7d0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    b87e:	3310      	adds	r3, #16
    b880:	4293      	cmp	r3, r2
    b882:	6023      	str	r3, [r4, #0]
    b884:	d1f8      	bne.n	b878 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
    b886:	2300      	movs	r3, #0
				return false;
    b888:	4618      	mov	r0, r3
				channel = NULL;
    b88a:	6023      	str	r3, [r4, #0]
}
    b88c:	b008      	add	sp, #32
    b88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b892:	bf00      	nop
    b894:	bff7bf00 	.word	0xbff7bf00
    b898:	20001fec 	.word	0x20001fec
    b89c:	20003800 	.word	0x20003800
    b8a0:	20002f20 	.word	0x20002f20
    b8a4:	0000b715 	.word	0x0000b715
    b8a8:	e000e400 	.word	0xe000e400
    b8ac:	400fc000 	.word	0x400fc000
    b8b0:	40084000 	.word	0x40084000
    b8b4:	40084100 	.word	0x40084100
    b8b8:	20003ac0 	.word	0x20003ac0

0000b8bc <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
    b8bc:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
    b8be:	4b06      	ldr	r3, [pc, #24]	; (b8d8 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    b8c0:	2000      	movs	r0, #0
    b8c2:	4c06      	ldr	r4, [pc, #24]	; (b8dc <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
    b8c4:	4a06      	ldr	r2, [pc, #24]	; (b8e0 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
    b8c6:	601c      	str	r4, [r3, #0]
    b8c8:	619c      	str	r4, [r3, #24]
    b8ca:	631c      	str	r4, [r3, #48]	; 0x30
    b8cc:	649c      	str	r4, [r3, #72]	; 0x48
    b8ce:	4905      	ldr	r1, [pc, #20]	; (b8e4 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
    b8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    b8d4:	f001 bfe2 	b.w	d89c <__aeabi_atexit>
    b8d8:	20003ac0 	.word	0x20003ac0
    b8dc:	20001fec 	.word	0x20001fec
    b8e0:	20002f34 	.word	0x20002f34
    b8e4:	0000b799 	.word	0x0000b799

0000b8e8 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    b8ea:	460c      	mov	r4, r1
    b8ec:	b171      	cbz	r1, b90c <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    b8ee:	b182      	cbz	r2, b912 <Print::write(unsigned char const*, unsigned int)+0x2a>
    b8f0:	4606      	mov	r6, r0
    b8f2:	188f      	adds	r7, r1, r2
	size_t count = 0;
    b8f4:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    b8f6:	6833      	ldr	r3, [r6, #0]
    b8f8:	4630      	mov	r0, r6
    b8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
    b8fe:	681b      	ldr	r3, [r3, #0]
    b900:	4798      	blx	r3
    b902:	42bc      	cmp	r4, r7
    b904:	4405      	add	r5, r0
    b906:	d1f6      	bne.n	b8f6 <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    b908:	4628      	mov	r0, r5
    b90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    b90c:	460d      	mov	r5, r1
}
    b90e:	4628      	mov	r0, r5
    b910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    b912:	4615      	mov	r5, r2
    b914:	e7f8      	b.n	b908 <Print::write(unsigned char const*, unsigned int)+0x20>
    b916:	bf00      	nop

0000b918 <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b918:	4b05      	ldr	r3, [pc, #20]	; (b930 <_write+0x18>)
    b91a:	2802      	cmp	r0, #2
    b91c:	bf88      	it	hi
    b91e:	4603      	movhi	r3, r0
{
    b920:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b922:	681c      	ldr	r4, [r3, #0]
    b924:	4618      	mov	r0, r3
    b926:	6863      	ldr	r3, [r4, #4]
}
    b928:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b92c:	4718      	bx	r3
    b92e:	bf00      	nop
    b930:	20002b50 	.word	0x20002b50

0000b934 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    b934:	b40e      	push	{r1, r2, r3}
    b936:	b500      	push	{lr}
    b938:	b082      	sub	sp, #8
    b93a:	aa03      	add	r2, sp, #12
    b93c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    b940:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    b942:	f002 fd4f 	bl	e3e4 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    b946:	b002      	add	sp, #8
    b948:	f85d eb04 	ldr.w	lr, [sp], #4
    b94c:	b003      	add	sp, #12
    b94e:	4770      	bx	lr

0000b950 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    b950:	b900      	cbnz	r0, b954 <random(unsigned long)+0x4>
	return random() % howbig;
}
    b952:	4770      	bx	lr
	x = seed;
    b954:	4914      	ldr	r1, [pc, #80]	; (b9a8 <random(unsigned long)+0x58>)
    b956:	680a      	ldr	r2, [r1, #0]
	if (x == 0) x = 123459876;
    b958:	b1ea      	cbz	r2, b996 <random(unsigned long)+0x46>
	lo = x % 127773;
    b95a:	17d3      	asrs	r3, r2, #31
{
    b95c:	b430      	push	{r4, r5}
	lo = x % 127773;
    b95e:	4c13      	ldr	r4, [pc, #76]	; (b9ac <random(unsigned long)+0x5c>)
	x = 16807 * lo - 2836 * hi;
    b960:	4d13      	ldr	r5, [pc, #76]	; (b9b0 <random(unsigned long)+0x60>)
	lo = x % 127773;
    b962:	fb84 4c02 	smull	r4, ip, r4, r2
    b966:	4c13      	ldr	r4, [pc, #76]	; (b9b4 <random(unsigned long)+0x64>)
    b968:	4494      	add	ip, r2
    b96a:	ebc3 432c 	rsb	r3, r3, ip, asr #16
    b96e:	fb04 2213 	mls	r2, r4, r3, r2
	x = 16807 * lo - 2836 * hi;
    b972:	f244 14a7 	movw	r4, #16807	; 0x41a7
    b976:	fb05 f303 	mul.w	r3, r5, r3
    b97a:	fb04 3302 	mla	r3, r4, r2, r3
	if (x < 0) x += 0x7FFFFFFF;
    b97e:	2b00      	cmp	r3, #0
    b980:	da10      	bge.n	b9a4 <random(unsigned long)+0x54>
    b982:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b986:	441a      	add	r2, r3
	seed = x;
    b988:	600a      	str	r2, [r1, #0]
	return random() % howbig;
    b98a:	fbb2 f3f0 	udiv	r3, r2, r0
}
    b98e:	bc30      	pop	{r4, r5}
	return random() % howbig;
    b990:	fb00 2013 	mls	r0, r0, r3, r2
}
    b994:	4770      	bx	lr
    b996:	4a08      	ldr	r2, [pc, #32]	; (b9b8 <random(unsigned long)+0x68>)
	return random() % howbig;
    b998:	fbb2 f3f0 	udiv	r3, r2, r0
	seed = x;
    b99c:	600a      	str	r2, [r1, #0]
	return random() % howbig;
    b99e:	fb00 2013 	mls	r0, r0, r3, r2
    b9a2:	4770      	bx	lr
	seed = x;
    b9a4:	461a      	mov	r2, r3
    b9a6:	e7ef      	b.n	b988 <random(unsigned long)+0x38>
    b9a8:	20004710 	.word	0x20004710
    b9ac:	834e0b5f 	.word	0x834e0b5f
    b9b0:	fffff4ec 	.word	0xfffff4ec
    b9b4:	0001f31d 	.word	0x0001f31d
    b9b8:	1f0cce42 	.word	0x1f0cce42

0000b9bc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b9bc:	49a2      	ldr	r1, [pc, #648]	; (bc48 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b9be:	4ba3      	ldr	r3, [pc, #652]	; (bc4c <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    b9c0:	4288      	cmp	r0, r1
{
    b9c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    b9c6:	4ca2      	ldr	r4, [pc, #648]	; (bc50 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b9c8:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b9ca:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b9cc:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    b9d0:	d91b      	bls.n	ba0a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b9d2:	4ba0      	ldr	r3, [pc, #640]	; (bc54 <set_arm_clock+0x298>)
    b9d4:	4298      	cmp	r0, r3
    b9d6:	f240 8102 	bls.w	bbde <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b9da:	1ac3      	subs	r3, r0, r3
    b9dc:	499e      	ldr	r1, [pc, #632]	; (bc58 <set_arm_clock+0x29c>)
    b9de:	0a1b      	lsrs	r3, r3, #8
    b9e0:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b9e4:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b9e8:	09db      	lsrs	r3, r3, #7
    b9ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b9ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b9f2:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b9f6:	428b      	cmp	r3, r1
    b9f8:	bf28      	it	cs
    b9fa:	460b      	movcs	r3, r1
    b9fc:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    ba00:	4b96      	ldr	r3, [pc, #600]	; (bc5c <set_arm_clock+0x2a0>)
    ba02:	fba3 3707 	umull	r3, r7, r3, r7
    ba06:	08ff      	lsrs	r7, r7, #3
    ba08:	e004      	b.n	ba14 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    ba0a:	4f95      	ldr	r7, [pc, #596]	; (bc60 <set_arm_clock+0x2a4>)
    ba0c:	42b8      	cmp	r0, r7
    ba0e:	bf8c      	ite	hi
    ba10:	270e      	movhi	r7, #14
    ba12:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ba14:	498d      	ldr	r1, [pc, #564]	; (bc4c <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba16:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ba1a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba1e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ba20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ba24:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba28:	d20c      	bcs.n	ba44 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ba2a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ba2e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ba32:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    ba36:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ba3a:	680b      	ldr	r3, [r1, #0]
    ba3c:	2b00      	cmp	r3, #0
    ba3e:	dafc      	bge.n	ba3a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba40:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    ba44:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    ba48:	d124      	bne.n	ba94 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    ba4a:	4986      	ldr	r1, [pc, #536]	; (bc64 <set_arm_clock+0x2a8>)
    ba4c:	690c      	ldr	r4, [r1, #16]
    ba4e:	4986      	ldr	r1, [pc, #536]	; (bc68 <set_arm_clock+0x2ac>)
    ba50:	43a1      	bics	r1, r4
    ba52:	f000 80ea 	beq.w	bc2a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ba56:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    ba5a:	4634      	mov	r4, r6
    ba5c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    ba60:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    ba64:	d004      	beq.n	ba70 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    ba66:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    ba6a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    ba6c:	4b77      	ldr	r3, [pc, #476]	; (bc4c <set_arm_clock+0x290>)
    ba6e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ba70:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    ba74:	d007      	beq.n	ba86 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    ba76:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    ba7a:	4974      	ldr	r1, [pc, #464]	; (bc4c <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    ba7c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    ba7e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    ba80:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    ba82:	071a      	lsls	r2, r3, #28
    ba84:	d4fc      	bmi.n	ba80 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    ba86:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    ba8a:	4a70      	ldr	r2, [pc, #448]	; (bc4c <set_arm_clock+0x290>)
    ba8c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ba8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ba90:	069b      	lsls	r3, r3, #26
    ba92:	d4fc      	bmi.n	ba8e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    ba94:	4c75      	ldr	r4, [pc, #468]	; (bc6c <set_arm_clock+0x2b0>)
    ba96:	42a0      	cmp	r0, r4
    ba98:	f200 80ce 	bhi.w	bc38 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    ba9c:	f04f 0c01 	mov.w	ip, #1
    baa0:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    baa2:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    baa4:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    baa8:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    baac:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bab0:	42a2      	cmp	r2, r4
    bab2:	d818      	bhi.n	bae6 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    bab4:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    bab8:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    babc:	f040 808d 	bne.w	bbda <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    bac0:	f1bc 0f04 	cmp.w	ip, #4
    bac4:	f200 8091 	bhi.w	bbea <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    bac8:	180a      	adds	r2, r1, r0
    baca:	42a2      	cmp	r2, r4
    bacc:	f200 80a4 	bhi.w	bc18 <set_arm_clock+0x25c>
    bad0:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    bad4:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    bad6:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bada:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    bade:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bae2:	42a2      	cmp	r2, r4
    bae4:	d9e6      	bls.n	bab4 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bae6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    baea:	028c      	lsls	r4, r1, #10
    baec:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    baf0:	485f      	ldr	r0, [pc, #380]	; (bc70 <set_arm_clock+0x2b4>)
    baf2:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    baf4:	4a5f      	ldr	r2, [pc, #380]	; (bc74 <set_arm_clock+0x2b8>)
    baf6:	4290      	cmp	r0, r2
    baf8:	d97f      	bls.n	bbfa <set_arm_clock+0x23e>
    bafa:	f8df a1a4 	ldr.w	sl, [pc, #420]	; bca0 <set_arm_clock+0x2e4>
    bafe:	226c      	movs	r2, #108	; 0x6c
    bb00:	485d      	ldr	r0, [pc, #372]	; (bc78 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    bb02:	4d58      	ldr	r5, [pc, #352]	; (bc64 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    bb04:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    bb08:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    bb0c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    bb10:	f8df c190 	ldr.w	ip, [pc, #400]	; bca4 <set_arm_clock+0x2e8>
    bb14:	ea0e 0c0c 	and.w	ip, lr, ip
    bb18:	45d4      	cmp	ip, sl
    bb1a:	d009      	beq.n	bb30 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    bb1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    bb20:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    bb24:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    bb28:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    bb2a:	682a      	ldr	r2, [r5, #0]
    bb2c:	2a00      	cmp	r2, #0
    bb2e:	dafc      	bge.n	bb2a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    bb30:	4a46      	ldr	r2, [pc, #280]	; (bc4c <set_arm_clock+0x290>)
    bb32:	6915      	ldr	r5, [r2, #16]
    bb34:	f005 0507 	and.w	r5, r5, #7
    bb38:	429d      	cmp	r5, r3
    bb3a:	d003      	beq.n	bb44 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    bb3c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    bb3e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    bb40:	03dd      	lsls	r5, r3, #15
    bb42:	d4fc      	bmi.n	bb3e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bb44:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    bb48:	d009      	beq.n	bb5e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    bb4a:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    bb4e:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    bb52:	4a3e      	ldr	r2, [pc, #248]	; (bc4c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    bb54:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    bb56:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    bb58:	6c93      	ldr	r3, [r2, #72]	; 0x48
    bb5a:	0799      	lsls	r1, r3, #30
    bb5c:	d4fc      	bmi.n	bb58 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    bb5e:	4947      	ldr	r1, [pc, #284]	; (bc7c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    bb60:	4a47      	ldr	r2, [pc, #284]	; (bc80 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    bb62:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    bb64:	4291      	cmp	r1, r2
    bb66:	d83c      	bhi.n	bbe2 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    bb68:	4b46      	ldr	r3, [pc, #280]	; (bc84 <set_arm_clock+0x2c8>)
    bb6a:	09c9      	lsrs	r1, r1, #7
    bb6c:	fba3 3101 	umull	r3, r1, r3, r1
    bb70:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    bb72:	1e4b      	subs	r3, r1, #1
    bb74:	021b      	lsls	r3, r3, #8
    bb76:	ea86 0203 	eor.w	r2, r6, r3
    bb7a:	f412 7f40 	tst.w	r2, #768	; 0x300
    bb7e:	d006      	beq.n	bb8e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    bb80:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    bb84:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    bb88:	4a30      	ldr	r2, [pc, #192]	; (bc4c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    bb8a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    bb8c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    bb8e:	4a2f      	ldr	r2, [pc, #188]	; (bc4c <set_arm_clock+0x290>)
    bb90:	6953      	ldr	r3, [r2, #20]
    bb92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    bb96:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    bb98:	6c93      	ldr	r3, [r2, #72]	; 0x48
    bb9a:	069b      	lsls	r3, r3, #26
    bb9c:	d4fc      	bmi.n	bb98 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bb9e:	4b3a      	ldr	r3, [pc, #232]	; (bc88 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    bba0:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bba2:	fba3 2300 	umull	r2, r3, r3, r0
    bba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bbaa:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    bbae:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bbb2:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    bbb6:	4a35      	ldr	r2, [pc, #212]	; (bc8c <set_arm_clock+0x2d0>)
    bbb8:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    bbba:	4a35      	ldr	r2, [pc, #212]	; (bc90 <set_arm_clock+0x2d4>)
    bbbc:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bbbe:	4a35      	ldr	r2, [pc, #212]	; (bc94 <set_arm_clock+0x2d8>)
    bbc0:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    bbc2:	d208      	bcs.n	bbd6 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    bbc4:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    bbc8:	4a21      	ldr	r2, [pc, #132]	; (bc50 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    bbca:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    bbce:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    bbd0:	6813      	ldr	r3, [r2, #0]
    bbd2:	2b00      	cmp	r3, #0
    bbd4:	dafc      	bge.n	bbd0 <set_arm_clock+0x214>
	}

	return frequency;
}
    bbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbda:	4673      	mov	r3, lr
    bbdc:	e762      	b.n	baa4 <set_arm_clock+0xe8>
    bbde:	2712      	movs	r7, #18
    bbe0:	e718      	b.n	ba14 <set_arm_clock+0x58>
    bbe2:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    bbe6:	2104      	movs	r1, #4
    bbe8:	e7c5      	b.n	bb76 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bbea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bbee:	4820      	ldr	r0, [pc, #128]	; (bc70 <set_arm_clock+0x2b4>)
    bbf0:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bbf2:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bbf4:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bbf6:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bbfa:	4a27      	ldr	r2, [pc, #156]	; (bc98 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    bbfc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; bca8 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bc00:	fba2 2000 	umull	r2, r0, r2, r0
    bc04:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    bc06:	4825      	ldr	r0, [pc, #148]	; (bc9c <set_arm_clock+0x2e0>)
    bc08:	2a36      	cmp	r2, #54	; 0x36
    bc0a:	bf38      	it	cc
    bc0c:	2236      	movcc	r2, #54	; 0x36
    bc0e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    bc12:	ea42 0a0a 	orr.w	sl, r2, sl
    bc16:	e774      	b.n	bb02 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bc18:	ea4f 248c 	mov.w	r4, ip, lsl #10
    bc1c:	2300      	movs	r3, #0
    bc1e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    bc22:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    bc26:	46ac      	mov	ip, r5
    bc28:	e762      	b.n	baf0 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    bc2a:	461d      	mov	r5, r3
    bc2c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    bc30:	4611      	mov	r1, r2
    bc32:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    bc36:	e713      	b.n	ba60 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    bc38:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    bc3a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bc3e:	4602      	mov	r2, r0
    bc40:	4631      	mov	r1, r6
    bc42:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    bc44:	46e6      	mov	lr, ip
    bc46:	e753      	b.n	baf0 <set_arm_clock+0x134>
    bc48:	1f78a400 	.word	0x1f78a400
    bc4c:	400fc000 	.word	0x400fc000
    bc50:	40080000 	.word	0x40080000
    bc54:	23c34600 	.word	0x23c34600
    bc58:	004cb223 	.word	0x004cb223
    bc5c:	51eb851f 	.word	0x51eb851f
    bc60:	016e3600 	.word	0x016e3600
    bc64:	400d8000 	.word	0x400d8000
    bc68:	80003040 	.word	0x80003040
    bc6c:	269fb1ff 	.word	0x269fb1ff
    bc70:	005b8d80 	.word	0x005b8d80
    bc74:	4df67eff 	.word	0x4df67eff
    bc78:	4d3f6400 	.word	0x4d3f6400
    bc7c:	08f0d17f 	.word	0x08f0d17f
    bc80:	2cb4177f 	.word	0x2cb4177f
    bc84:	00e5109f 	.word	0x00e5109f
    bc88:	431bde83 	.word	0x431bde83
    bc8c:	20002afc 	.word	0x20002afc
    bc90:	20002af8 	.word	0x20002af8
    bc94:	20007a08 	.word	0x20007a08
    bc98:	165e9f81 	.word	0x165e9f81
    bc9c:	00b71b00 	.word	0x00b71b00
    bca0:	8000206c 	.word	0x8000206c
    bca4:	8001307f 	.word	0x8001307f
    bca8:	80002000 	.word	0x80002000

0000bcac <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    bcac:	b900      	cbnz	r0, bcb0 <delay+0x4>
    bcae:	4770      	bx	lr
{
    bcb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bcb4:	2101      	movs	r1, #1
    bcb6:	4681      	mov	r9, r0
    bcb8:	4c21      	ldr	r4, [pc, #132]	; (bd40 <delay+0x94>)
    bcba:	4d22      	ldr	r5, [pc, #136]	; (bd44 <delay+0x98>)
    bcbc:	4e22      	ldr	r6, [pc, #136]	; (bd48 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    bcbe:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    bcc2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    bcc4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bcc6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    bcca:	2b00      	cmp	r3, #0
    bccc:	d1f7      	bne.n	bcbe <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    bcce:	491f      	ldr	r1, [pc, #124]	; (bd4c <delay+0xa0>)
    bcd0:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    bcd2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bcd6:	f8df a078 	ldr.w	sl, [pc, #120]	; bd50 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    bcda:	1a1b      	subs	r3, r3, r0
    bcdc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    bcde:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bce2:	f8da 2000 	ldr.w	r2, [sl]
    bce6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    bcea:	455a      	cmp	r2, fp
    bcec:	bf94      	ite	ls
    bcee:	4490      	addls	r8, r2
    bcf0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    bcf2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    bcf6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    bcf8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bcfa:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    bcfe:	2b00      	cmp	r3, #0
    bd00:	d1f7      	bne.n	bcf2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    bd02:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bd04:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    bd08:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    bd0a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bd0e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    bd12:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    bd16:	bf94      	ite	ls
    bd18:	4462      	addls	r2, ip
    bd1a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    bd1e:	eba2 0208 	sub.w	r2, r2, r8
    bd22:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    bd26:	d306      	bcc.n	bd36 <delay+0x8a>
			if (--msec == 0) return;
    bd28:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    bd2c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    bd30:	d1df      	bne.n	bcf2 <delay+0x46>
}
    bd32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    bd36:	f001 fd3b 	bl	d7b0 <yield>
		while ((micros() - start) >= 1000) {
    bd3a:	4904      	ldr	r1, [pc, #16]	; (bd4c <delay+0xa0>)
    bd3c:	e7d9      	b.n	bcf2 <delay+0x46>
    bd3e:	bf00      	nop
    bd40:	200086ac 	.word	0x200086ac
    bd44:	200086a8 	.word	0x200086a8
    bd48:	200086a4 	.word	0x200086a4
    bd4c:	e0001000 	.word	0xe0001000
    bd50:	20007a08 	.word	0x20007a08

0000bd54 <micros>:
{
    bd54:	b430      	push	{r4, r5}
    bd56:	4b0f      	ldr	r3, [pc, #60]	; (bd94 <micros+0x40>)
    bd58:	f04f 0c01 	mov.w	ip, #1
    bd5c:	4d0e      	ldr	r5, [pc, #56]	; (bd98 <micros+0x44>)
    bd5e:	4c0f      	ldr	r4, [pc, #60]	; (bd9c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    bd60:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    bd64:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    bd66:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bd68:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    bd6c:	2a00      	cmp	r2, #0
    bd6e:	d1f7      	bne.n	bd60 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    bd70:	4b0b      	ldr	r3, [pc, #44]	; (bda0 <micros+0x4c>)
    bd72:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bd74:	4a0b      	ldr	r2, [pc, #44]	; (bda4 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    bd76:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    bd78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bd7c:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    bd7e:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bd82:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    bd86:	bc30      	pop	{r4, r5}
    bd88:	428a      	cmp	r2, r1
    bd8a:	bf94      	ite	ls
    bd8c:	1880      	addls	r0, r0, r2
    bd8e:	1840      	addhi	r0, r0, r1
    bd90:	4770      	bx	lr
    bd92:	bf00      	nop
    bd94:	200086ac 	.word	0x200086ac
    bd98:	200086a8 	.word	0x200086a8
    bd9c:	200086a4 	.word	0x200086a4
    bda0:	e0001000 	.word	0xe0001000
    bda4:	20007a08 	.word	0x20007a08

0000bda8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bda8:	2827      	cmp	r0, #39	; 0x27
    bdaa:	d816      	bhi.n	bdda <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    bdac:	0102      	lsls	r2, r0, #4
    bdae:	4b10      	ldr	r3, [pc, #64]	; (bdf0 <digitalWrite+0x48>)
    bdb0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bdb4:	589b      	ldr	r3, [r3, r2]
{
    bdb6:	b410      	push	{r4}
	mask = p->mask;
    bdb8:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bdba:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bdbc:	4214      	tst	r4, r2
    bdbe:	d005      	beq.n	bdcc <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    bdc0:	b961      	cbnz	r1, bddc <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bdc2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    bdc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    bdca:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bdcc:	6883      	ldr	r3, [r0, #8]
		if (val) {
    bdce:	b151      	cbz	r1, bde6 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bdd0:	4a08      	ldr	r2, [pc, #32]	; (bdf4 <digitalWrite+0x4c>)
}
    bdd2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bdd6:	601a      	str	r2, [r3, #0]
}
    bdd8:	4770      	bx	lr
    bdda:	4770      	bx	lr
    bddc:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    bde0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    bde4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bde6:	4a04      	ldr	r2, [pc, #16]	; (bdf8 <digitalWrite+0x50>)
}
    bde8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bdec:	601a      	str	r2, [r3, #0]
}
    bdee:	4770      	bx	lr
    bdf0:	20002678 	.word	0x20002678
    bdf4:	0001f038 	.word	0x0001f038
    bdf8:	00013038 	.word	0x00013038

0000bdfc <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    bdfc:	2827      	cmp	r0, #39	; 0x27
    bdfe:	d80b      	bhi.n	be18 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    be00:	4b06      	ldr	r3, [pc, #24]	; (be1c <digitalRead+0x20>)
    be02:	0102      	lsls	r2, r0, #4
    be04:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    be08:	589a      	ldr	r2, [r3, r2]
    be0a:	68c3      	ldr	r3, [r0, #12]
    be0c:	6892      	ldr	r2, [r2, #8]
    be0e:	421a      	tst	r2, r3
    be10:	bf14      	ite	ne
    be12:	2001      	movne	r0, #1
    be14:	2000      	moveq	r0, #0
    be16:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    be18:	2000      	movs	r0, #0
}
    be1a:	4770      	bx	lr
    be1c:	20002678 	.word	0x20002678

0000be20 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    be20:	2827      	cmp	r0, #39	; 0x27
    be22:	d829      	bhi.n	be78 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    be24:	4b16      	ldr	r3, [pc, #88]	; (be80 <pinMode+0x60>)
    be26:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    be28:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    be2a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    be2e:	589a      	ldr	r2, [r3, r2]
{
    be30:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    be32:	6853      	ldr	r3, [r2, #4]
    be34:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    be36:	d00e      	beq.n	be56 <pinMode+0x36>
    be38:	2904      	cmp	r1, #4
    be3a:	d00c      	beq.n	be56 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    be3c:	ea23 0304 	bic.w	r3, r3, r4
    be40:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    be42:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    be44:	b1a9      	cbz	r1, be72 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    be46:	2902      	cmp	r1, #2
    be48:	d017      	beq.n	be7a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    be4a:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    be4c:	bf0c      	ite	eq
    be4e:	4a0d      	ldreq	r2, [pc, #52]	; (be84 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    be50:	4a0d      	ldrne	r2, [pc, #52]	; (be88 <pinMode+0x68>)
    be52:	601a      	str	r2, [r3, #0]
    be54:	e007      	b.n	be66 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    be56:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    be58:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    be5a:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    be5c:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    be5e:	d008      	beq.n	be72 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    be60:	f640 0238 	movw	r2, #2104	; 0x838
    be64:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    be66:	6843      	ldr	r3, [r0, #4]
    be68:	2215      	movs	r2, #21
}
    be6a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    be6e:	601a      	str	r2, [r3, #0]
}
    be70:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    be72:	2238      	movs	r2, #56	; 0x38
    be74:	601a      	str	r2, [r3, #0]
    be76:	e7f6      	b.n	be66 <pinMode+0x46>
    be78:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    be7a:	4a04      	ldr	r2, [pc, #16]	; (be8c <pinMode+0x6c>)
    be7c:	601a      	str	r2, [r3, #0]
    be7e:	e7f2      	b.n	be66 <pinMode+0x46>
    be80:	20002678 	.word	0x20002678
    be84:	00013038 	.word	0x00013038
    be88:	00010038 	.word	0x00010038
    be8c:	0001f038 	.word	0x0001f038

0000be90 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    be90:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    be92:	f7f4 fe55 	bl	b40 <setup>
	while (1) {
		loop();
    be96:	f7f4 fe9f 	bl	bd8 <loop>
		yield();
    be9a:	f001 fc89 	bl	d7b0 <yield>
	while (1) {
    be9e:	e7fa      	b.n	be96 <main+0x6>

0000bea0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    bea0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    bea2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    bea6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    beaa:	d16d      	bne.n	bf88 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    beac:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    beae:	d341      	bcc.n	bf34 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    beb0:	f851 3b04 	ldr.w	r3, [r1], #4
    beb4:	f840 3b04 	str.w	r3, [r0], #4
    beb8:	f851 3b04 	ldr.w	r3, [r1], #4
    bebc:	f840 3b04 	str.w	r3, [r0], #4
    bec0:	f851 3b04 	ldr.w	r3, [r1], #4
    bec4:	f840 3b04 	str.w	r3, [r0], #4
    bec8:	f851 3b04 	ldr.w	r3, [r1], #4
    becc:	f840 3b04 	str.w	r3, [r0], #4
    bed0:	f851 3b04 	ldr.w	r3, [r1], #4
    bed4:	f840 3b04 	str.w	r3, [r0], #4
    bed8:	f851 3b04 	ldr.w	r3, [r1], #4
    bedc:	f840 3b04 	str.w	r3, [r0], #4
    bee0:	f851 3b04 	ldr.w	r3, [r1], #4
    bee4:	f840 3b04 	str.w	r3, [r0], #4
    bee8:	f851 3b04 	ldr.w	r3, [r1], #4
    beec:	f840 3b04 	str.w	r3, [r0], #4
    bef0:	f851 3b04 	ldr.w	r3, [r1], #4
    bef4:	f840 3b04 	str.w	r3, [r0], #4
    bef8:	f851 3b04 	ldr.w	r3, [r1], #4
    befc:	f840 3b04 	str.w	r3, [r0], #4
    bf00:	f851 3b04 	ldr.w	r3, [r1], #4
    bf04:	f840 3b04 	str.w	r3, [r0], #4
    bf08:	f851 3b04 	ldr.w	r3, [r1], #4
    bf0c:	f840 3b04 	str.w	r3, [r0], #4
    bf10:	f851 3b04 	ldr.w	r3, [r1], #4
    bf14:	f840 3b04 	str.w	r3, [r0], #4
    bf18:	f851 3b04 	ldr.w	r3, [r1], #4
    bf1c:	f840 3b04 	str.w	r3, [r0], #4
    bf20:	f851 3b04 	ldr.w	r3, [r1], #4
    bf24:	f840 3b04 	str.w	r3, [r0], #4
    bf28:	f851 3b04 	ldr.w	r3, [r1], #4
    bf2c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    bf30:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    bf32:	d2bd      	bcs.n	beb0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    bf34:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    bf36:	d311      	bcc.n	bf5c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    bf38:	f851 3b04 	ldr.w	r3, [r1], #4
    bf3c:	f840 3b04 	str.w	r3, [r0], #4
    bf40:	f851 3b04 	ldr.w	r3, [r1], #4
    bf44:	f840 3b04 	str.w	r3, [r0], #4
    bf48:	f851 3b04 	ldr.w	r3, [r1], #4
    bf4c:	f840 3b04 	str.w	r3, [r0], #4
    bf50:	f851 3b04 	ldr.w	r3, [r1], #4
    bf54:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    bf58:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    bf5a:	d2ed      	bcs.n	bf38 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    bf5c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    bf5e:	d305      	bcc.n	bf6c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    bf60:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    bf64:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    bf68:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    bf6a:	d2f9      	bcs.n	bf60 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    bf6c:	3204      	adds	r2, #4
	beq	.Ldone
    bf6e:	d008      	beq.n	bf82 <memcpy+0xe2>

	lsls	r2, r2, #31
    bf70:	07d2      	lsls	r2, r2, #31
	itt ne
    bf72:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    bf74:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bf78:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    bf7c:	d301      	bcc.n	bf82 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    bf7e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    bf80:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bf82:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bf84:	4770      	bx	lr
    bf86:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    bf88:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    bf8a:	d313      	bcc.n	bfb4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    bf8c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    bf8e:	d08d      	beq.n	beac <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    bf90:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    bf94:	d08a      	beq.n	beac <memcpy+0xc>

	rsb	r3, #4
    bf96:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    bf9a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    bf9c:	07db      	lsls	r3, r3, #31
	itt ne
    bf9e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    bfa0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bfa4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    bfa8:	d380      	bcc.n	beac <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    bfaa:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    bfae:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    bfb2:	e77b      	b.n	beac <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    bfb4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    bfb6:	d3d9      	bcc.n	bf6c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    bfb8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    bfba:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    bfbe:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    bfc2:	d2f9      	bcs.n	bfb8 <memcpy+0x118>

	ldrb	r3, [r1]
    bfc4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    bfc6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    bfc8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    bfca:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    bfcc:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    bfce:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bfd0:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bfd2:	4770      	bx	lr

0000bfd4 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    bfd4:	f001 bc68 	b.w	d8a8 <malloc>

0000bfd8 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    bfd8:	f001 bc6e 	b.w	d8b8 <free>

0000bfdc <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    bfdc:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    bfe0:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    bfe2:	4666      	mov	r6, ip
	int i=0, j;
    bfe4:	2400      	movs	r4, #0
    bfe6:	e000      	b.n	bfea <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    bfe8:	3401      	adds	r4, #1
		digit = val % radix;
    bfea:	fbb0 f5f2 	udiv	r5, r0, r2
    bfee:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bff2:	2b09      	cmp	r3, #9
    bff4:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    bff8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    bffc:	fa5f fe8e 	uxtb.w	lr, lr
    c000:	bf98      	it	ls
    c002:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    c006:	4290      	cmp	r0, r2
		val /= radix;
    c008:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c00a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    c00e:	d2eb      	bcs.n	bfe8 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    c010:	1c63      	adds	r3, r4, #1
    c012:	2200      	movs	r2, #0
    c014:	18c8      	adds	r0, r1, r3
    c016:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    c018:	b17c      	cbz	r4, c03a <ultoa+0x5e>
		t = buf[j];
    c01a:	4662      	mov	r2, ip
    c01c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    c020:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    c024:	eba1 030c 	sub.w	r3, r1, ip
    c028:	3202      	adds	r2, #2
		buf[j] = buf[i];
    c02a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    c02e:	3b01      	subs	r3, #1
    c030:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    c032:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    c034:	4423      	add	r3, r4
    c036:	429a      	cmp	r2, r3
    c038:	dbef      	blt.n	c01a <ultoa+0x3e>
	}
	return buf;
}
    c03a:	4608      	mov	r0, r1
    c03c:	bd70      	pop	{r4, r5, r6, pc}
    c03e:	bf00      	nop

0000c040 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c040:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    c042:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c044:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    c048:	4619      	mov	r1, r3
{
    c04a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c04c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c050:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c054:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c058:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    c05c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    c060:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    c062:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c066:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    c06a:	b29b      	uxth	r3, r3
    c06c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    c070:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c074:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    c078:	3101      	adds	r1, #1
    c07a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    c07e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c080:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c082:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c086:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c088:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c08a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c08c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c08e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    c092:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c094:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c096:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c098:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    c09a:	d1eb      	bne.n	c074 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c09c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    c0a0:	b29b      	uxth	r3, r3
    c0a2:	f043 030f 	orr.w	r3, r3, #15
    c0a6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c0aa:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    c0ae:	b29b      	uxth	r3, r3
    c0b0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    c0b4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    c0b8:	bd10      	pop	{r4, pc}
    c0ba:	bf00      	nop

0000c0bc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c0bc:	4b37      	ldr	r3, [pc, #220]	; (c19c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c0be:	4a38      	ldr	r2, [pc, #224]	; (c1a0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c0c0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    c0c2:	4838      	ldr	r0, [pc, #224]	; (c1a4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c0c4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    c0c8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c0ca:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c0cc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c0d0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c0d4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c0d8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c0dc:	430a      	orrs	r2, r1
    c0de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    c0e2:	f7ff ffad 	bl	c040 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    c0e6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    c0ea:	f7ff ffa9 	bl	c040 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    c0ee:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    c0f2:	f7ff ffa5 	bl	c040 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    c0f6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    c0fa:	f7ff ffa1 	bl	c040 <flexpwm_init>
	for (i=0; i < 4; i++) {
    c0fe:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    c100:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c104:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    c108:	4611      	mov	r1, r2
    c10a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    c10e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    c112:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c114:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c116:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c118:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c11a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c11e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c120:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c122:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    c126:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c128:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    c12a:	d1ee      	bne.n	c10a <pwm_init+0x4e>
    c12c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    c12e:	481e      	ldr	r0, [pc, #120]	; (c1a8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c130:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c134:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    c138:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c13a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c13e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    c142:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    c146:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    c14a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c14c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c14e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c150:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c152:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c156:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c158:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c15a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    c15e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c160:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    c162:	d1ee      	bne.n	c142 <pwm_init+0x86>
    c164:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    c166:	4811      	ldr	r0, [pc, #68]	; (c1ac <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c168:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c16a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    c16e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c170:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c174:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    c178:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    c17c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    c180:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c182:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c184:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c186:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c188:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c18a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c18c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c18e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    c192:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c194:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    c198:	d1ee      	bne.n	c178 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    c19a:	bd70      	pop	{r4, r5, r6, pc}
    c19c:	400fc000 	.word	0x400fc000
    c1a0:	fc030000 	.word	0xfc030000
    c1a4:	403dc000 	.word	0x403dc000
    c1a8:	401e0000 	.word	0x401e0000
    c1ac:	401e4000 	.word	0x401e4000

0000c1b0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    c1b0:	4a07      	ldr	r2, [pc, #28]	; (c1d0 <rtc_get+0x20>)
    c1b2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    c1b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    c1b6:	4619      	mov	r1, r3
    c1b8:	4684      	mov	ip, r0
    c1ba:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    c1bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    c1be:	4299      	cmp	r1, r3
    c1c0:	d1f9      	bne.n	c1b6 <rtc_get+0x6>
    c1c2:	4584      	cmp	ip, r0
    c1c4:	d1f7      	bne.n	c1b6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    c1c6:	0bdb      	lsrs	r3, r3, #15
}
    c1c8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    c1cc:	4770      	bx	lr
    c1ce:	bf00      	nop
    c1d0:	400d4000 	.word	0x400d4000

0000c1d4 <unused_interrupt_vector>:
	__disable_irq();
    c1d4:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    c1d6:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    c1da:	4c52      	ldr	r4, [pc, #328]	; (c324 <unused_interrupt_vector+0x150>)
    c1dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    c1e0:	f01e 0f04 	tst.w	lr, #4
    c1e4:	bf0c      	ite	eq
    c1e6:	f3ef 8208 	mrseq	r2, MSP
    c1ea:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    c1ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    c1f2:	4e4d      	ldr	r6, [pc, #308]	; (c328 <unused_interrupt_vector+0x154>)
	while (p < end) {
    c1f4:	4d4d      	ldr	r5, [pc, #308]	; (c32c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    c1f6:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    c1fa:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    c1fe:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    c202:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    c206:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    c20a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    c20e:	6993      	ldr	r3, [r2, #24]
    c210:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    c214:	69d3      	ldr	r3, [r2, #28]
    c216:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    c21a:	f000 f8d3 	bl	c3c4 <tempmonGetTemp>
    c21e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    c222:	f7ff ffc5 	bl	c1b0 <rtc_get>
	info->len = sizeof(*info) / 4;
    c226:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    c228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    c22c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    c230:	460b      	mov	r3, r1
    c232:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    c236:	493e      	ldr	r1, [pc, #248]	; (c330 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    c238:	1d30      	adds	r0, r6, #4
    c23a:	405a      	eors	r2, r3
    c23c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    c23e:	f002 0301 	and.w	r3, r2, #1
    c242:	3c01      	subs	r4, #1
    c244:	fb01 f303 	mul.w	r3, r1, r3
    c248:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    c24c:	d1f7      	bne.n	c23e <unused_interrupt_vector+0x6a>
	while (p < end) {
    c24e:	42a8      	cmp	r0, r5
    c250:	d002      	beq.n	c258 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    c252:	6873      	ldr	r3, [r6, #4]
    c254:	4606      	mov	r6, r0
    c256:	e7ef      	b.n	c238 <unused_interrupt_vector+0x64>
	info->crc = crc;
    c258:	4b32      	ldr	r3, [pc, #200]	; (c324 <unused_interrupt_vector+0x150>)
    c25a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    c25e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c262:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c266:	4930      	ldr	r1, [pc, #192]	; (c328 <unused_interrupt_vector+0x154>)
    c268:	4a32      	ldr	r2, [pc, #200]	; (c334 <unused_interrupt_vector+0x160>)
    c26a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    c26e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    c272:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c276:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    c27a:	4a2f      	ldr	r2, [pc, #188]	; (c338 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    c27c:	2502      	movs	r5, #2
    c27e:	482f      	ldr	r0, [pc, #188]	; (c33c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    c280:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    c282:	492f      	ldr	r1, [pc, #188]	; (c340 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    c284:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    c288:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    c28a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    c28c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    c28e:	482d      	ldr	r0, [pc, #180]	; (c344 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    c290:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c298:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    c29a:	680b      	ldr	r3, [r1, #0]
    c29c:	4283      	cmp	r3, r0
    c29e:	d83d      	bhi.n	c31c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    c2a0:	4d26      	ldr	r5, [pc, #152]	; (c33c <unused_interrupt_vector+0x168>)
    c2a2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    c2a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c2a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    c2ac:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    c2ae:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    c2b0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    c2b4:	4924      	ldr	r1, [pc, #144]	; (c348 <unused_interrupt_vector+0x174>)
    c2b6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    c2ba:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    c2be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    c2c2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    c2c6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    c2ca:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    c2ce:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    c2d2:	e001      	b.n	c2d8 <unused_interrupt_vector+0x104>
		usb_isr();
    c2d4:	f000 f968 	bl	c5a8 <usb_isr>
		if (PIT_TFLG0) {
    c2d8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d0f9      	beq.n	c2d4 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    c2e0:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    c2e2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    c2e6:	2c4f      	cmp	r4, #79	; 0x4f
    c2e8:	d9f4      	bls.n	c2d4 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    c2ea:	4b18      	ldr	r3, [pc, #96]	; (c34c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    c2ec:	2002      	movs	r0, #2
    c2ee:	4918      	ldr	r1, [pc, #96]	; (c350 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    c2f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    c2f4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    c2f8:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    c2fa:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    c2fe:	b93b      	cbnz	r3, c310 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    c300:	4814      	ldr	r0, [pc, #80]	; (c354 <unused_interrupt_vector+0x180>)
    c302:	4915      	ldr	r1, [pc, #84]	; (c358 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    c304:	4a0d      	ldr	r2, [pc, #52]	; (c33c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    c306:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    c308:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    c30c:	2b00      	cmp	r3, #0
    c30e:	d0fa      	beq.n	c306 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    c310:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c314:	4a11      	ldr	r2, [pc, #68]	; (c35c <unused_interrupt_vector+0x188>)
    c316:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    c31a:	e7fe      	b.n	c31a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    c31c:	f7ff fb4e 	bl	b9bc <set_arm_clock>
    c320:	e7be      	b.n	c2a0 <unused_interrupt_vector+0xcc>
    c322:	bf00      	nop
    c324:	2027ff00 	.word	0x2027ff00
    c328:	2027ff80 	.word	0x2027ff80
    c32c:	2027ffa8 	.word	0x2027ffa8
    c330:	edb88320 	.word	0xedb88320
    c334:	2027ffa0 	.word	0x2027ffa0
    c338:	400fc000 	.word	0x400fc000
    c33c:	40084000 	.word	0x40084000
    c340:	20002afc 	.word	0x20002afc
    c344:	0bcd3d80 	.word	0x0bcd3d80
    c348:	00249f00 	.word	0x00249f00
    c34c:	400d9000 	.word	0x400d9000
    c350:	402e0000 	.word	0x402e0000
    c354:	400f8000 	.word	0x400f8000
    c358:	0bad00f1 	.word	0x0bad00f1
    c35c:	05fa0004 	.word	0x05fa0004

0000c360 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    c360:	490a      	ldr	r1, [pc, #40]	; (c38c <_sbrk+0x2c>)
    c362:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    c364:	b138      	cbz	r0, c376 <_sbrk+0x16>
{
    c366:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    c368:	1813      	adds	r3, r2, r0
    c36a:	4809      	ldr	r0, [pc, #36]	; (c390 <_sbrk+0x30>)
    c36c:	4283      	cmp	r3, r0
    c36e:	d804      	bhi.n	c37a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    c370:	4610      	mov	r0, r2
                __brkval = prev + incr;
    c372:	600b      	str	r3, [r1, #0]
}
    c374:	bd08      	pop	{r3, pc}
    c376:	4610      	mov	r0, r2
    c378:	4770      	bx	lr
                        errno = ENOMEM;
    c37a:	f002 fa41 	bl	e800 <__errno>
    c37e:	230c      	movs	r3, #12
                        return (void *)-1;
    c380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    c384:	6003      	str	r3, [r0, #0]
}
    c386:	4610      	mov	r0, r2
    c388:	bd08      	pop	{r3, pc}
    c38a:	bf00      	nop
    c38c:	20002f30 	.word	0x20002f30
    c390:	20280000 	.word	0x20280000

0000c394 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    c394:	2000      	movs	r0, #0
    c396:	4770      	bx	lr

0000c398 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    c398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c39c:	4770      	bx	lr
    c39e:	bf00      	nop

0000c3a0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    c3a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    c3a4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    c3a6:	604b      	str	r3, [r1, #4]
}
    c3a8:	4770      	bx	lr
    c3aa:	bf00      	nop

0000c3ac <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    c3ac:	2001      	movs	r0, #1
    c3ae:	4770      	bx	lr

0000c3b0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    c3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c3b4:	4770      	bx	lr
    c3b6:	bf00      	nop

0000c3b8 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    c3b8:	bf30      	wfi
    c3ba:	e7fd      	b.n	c3b8 <__cxa_pure_virtual>

0000c3bc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    c3bc:	bf30      	wfi
    c3be:	e7fd      	b.n	c3bc <abort>

0000c3c0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    c3c0:	f7ff bf08 	b.w	c1d4 <unused_interrupt_vector>

0000c3c4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    c3c4:	4a12      	ldr	r2, [pc, #72]	; (c410 <tempmonGetTemp+0x4c>)
    c3c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    c3ca:	075b      	lsls	r3, r3, #29
    c3cc:	d5fb      	bpl.n	c3c6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c3ce:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c3d2:	4810      	ldr	r0, [pc, #64]	; (c414 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c3d4:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c3d8:	490f      	ldr	r1, [pc, #60]	; (c418 <tempmonGetTemp+0x54>)
    c3da:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c3de:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c3e2:	ed91 6a00 	vldr	s12, [r1]
    c3e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    c3ea:	4a0c      	ldr	r2, [pc, #48]	; (c41c <tempmonGetTemp+0x58>)
    c3ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c3f0:	4b0b      	ldr	r3, [pc, #44]	; (c420 <tempmonGetTemp+0x5c>)
    c3f2:	edd2 6a00 	vldr	s13, [r2]
    c3f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c3fa:	ed93 7a00 	vldr	s14, [r3]
    c3fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    c402:	ee67 7a86 	vmul.f32	s15, s15, s12
    c406:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    c40a:	ee37 0a40 	vsub.f32	s0, s14, s0
    c40e:	4770      	bx	lr
    c410:	400d8100 	.word	0x400d8100
    c414:	200079f8 	.word	0x200079f8
    c418:	20007a00 	.word	0x20007a00
    c41c:	20007a04 	.word	0x20007a04
    c420:	200079fc 	.word	0x200079fc

0000c424 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    c424:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    c426:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    c428:	b11b      	cbz	r3, c432 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    c42a:	6853      	ldr	r3, [r2, #4]
    c42c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    c430:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    c432:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    c434:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    c436:	b33c      	cbz	r4, c488 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    c438:	4b1a      	ldr	r3, [pc, #104]	; (c4a4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    c43a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    c43c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    c440:	420c      	tst	r4, r1
    c442:	d11d      	bne.n	c480 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    c444:	4e18      	ldr	r6, [pc, #96]	; (c4a8 <schedule_transfer+0x84>)
    c446:	6877      	ldr	r7, [r6, #4]
    c448:	e004      	b.n	c454 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    c44a:	6874      	ldr	r4, [r6, #4]
    c44c:	1be4      	subs	r4, r4, r7
    c44e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    c452:	d20b      	bcs.n	c46c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    c454:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    c458:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    c45c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    c460:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    c464:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    c468:	0464      	lsls	r4, r4, #17
    c46a:	d5ee      	bpl.n	c44a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    c46c:	400d      	ands	r5, r1
    c46e:	d107      	bne.n	c480 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    c470:	4c0c      	ldr	r4, [pc, #48]	; (c4a4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    c472:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    c476:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c47a:	430b      	orrs	r3, r1
    c47c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    c480:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    c482:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    c484:	bcf0      	pop	{r4, r5, r6, r7}
    c486:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    c488:	4d06      	ldr	r5, [pc, #24]	; (c4a4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    c48a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    c48e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    c492:	430b      	orrs	r3, r1
    c494:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    c498:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    c49a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    c49c:	b662      	cpsie	i
}
    c49e:	bcf0      	pop	{r4, r5, r6, r7}
    c4a0:	4770      	bx	lr
    c4a2:	bf00      	nop
    c4a4:	402e0000 	.word	0x402e0000
    c4a8:	e0001000 	.word	0xe0001000

0000c4ac <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    c4ac:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    c4ae:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    c4b0:	b19d      	cbz	r5, c4da <run_callbacks+0x2e>
    c4b2:	4606      	mov	r6, r0
    c4b4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    c4b6:	2400      	movs	r4, #0
    c4b8:	e003      	b.n	c4c2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    c4ba:	6812      	ldr	r2, [r2, #0]
		count++;
    c4bc:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    c4be:	2a01      	cmp	r2, #1
    c4c0:	d00c      	beq.n	c4dc <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    c4c2:	6853      	ldr	r3, [r2, #4]
    c4c4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    c4c8:	d0f7      	beq.n	c4ba <run_callbacks+0xe>
			ep->first_transfer = t;
    c4ca:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    c4cc:	b12c      	cbz	r4, c4da <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    c4ce:	4628      	mov	r0, r5
		ep->callback_function(first);
    c4d0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    c4d2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    c4d4:	4798      	blx	r3
	while (count) {
    c4d6:	3c01      	subs	r4, #1
    c4d8:	d1f9      	bne.n	c4ce <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    c4da:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    c4dc:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    c4e0:	e7f4      	b.n	c4cc <run_callbacks+0x20>
    c4e2:	bf00      	nop

0000c4e4 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    c4e4:	b430      	push	{r4, r5}
	if (len > 0) {
    c4e6:	b9d9      	cbnz	r1, c520 <endpoint0_transmit.constprop.0+0x3c>
    c4e8:	4c1f      	ldr	r4, [pc, #124]	; (c568 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    c4ea:	4b20      	ldr	r3, [pc, #128]	; (c56c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    c4ec:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c4ee:	4a20      	ldr	r2, [pc, #128]	; (c570 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    c4f0:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c4f2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    c4f6:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c4f8:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    c4fa:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c4fe:	2480      	movs	r4, #128	; 0x80
    c500:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c502:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c506:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c50a:	481a      	ldr	r0, [pc, #104]	; (c574 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    c50c:	432b      	orrs	r3, r5
    c50e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c512:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    c514:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    c518:	2b00      	cmp	r3, #0
    c51a:	d1fb      	bne.n	c514 <endpoint0_transmit.constprop.0+0x30>
}
    c51c:	bc30      	pop	{r4, r5}
    c51e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c520:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    c522:	4b15      	ldr	r3, [pc, #84]	; (c578 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c524:	4c10      	ldr	r4, [pc, #64]	; (c568 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    c526:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c528:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c52c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    c52e:	4a10      	ldr	r2, [pc, #64]	; (c570 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c530:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c532:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    c536:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c538:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c53a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c53e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c540:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c542:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c546:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c54a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    c54c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c54e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    c550:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    c552:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    c556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c55a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    c55e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    c562:	2b00      	cmp	r3, #0
    c564:	d1fb      	bne.n	c55e <endpoint0_transmit.constprop.0+0x7a>
    c566:	e7c0      	b.n	c4ea <endpoint0_transmit.constprop.0+0x6>
    c568:	20000000 	.word	0x20000000
    c56c:	20003b20 	.word	0x20003b20
    c570:	402e0000 	.word	0x402e0000
    c574:	200077b8 	.word	0x200077b8
    c578:	20003b40 	.word	0x20003b40

0000c57c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    c57c:	4908      	ldr	r1, [pc, #32]	; (c5a0 <usb_stop_sof_interrupts+0x24>)
    c57e:	2201      	movs	r2, #1
    c580:	780b      	ldrb	r3, [r1, #0]
    c582:	fa02 f000 	lsl.w	r0, r2, r0
    c586:	ea23 0000 	bic.w	r0, r3, r0
    c58a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    c58c:	b930      	cbnz	r0, c59c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    c58e:	4a05      	ldr	r2, [pc, #20]	; (c5a4 <usb_stop_sof_interrupts+0x28>)
    c590:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    c594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c598:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    c59c:	4770      	bx	lr
    c59e:	bf00      	nop
    c5a0:	200086fc 	.word	0x200086fc
    c5a4:	402e0000 	.word	0x402e0000

0000c5a8 <usb_isr>:
{
    c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    c5ac:	4c99      	ldr	r4, [pc, #612]	; (c814 <usb_isr+0x26c>)
{
    c5ae:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    c5b0:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    c5b4:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    c5b6:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    c5ba:	d56a      	bpl.n	c692 <usb_isr+0xea>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    c5bc:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    c5c0:	2b00      	cmp	r3, #0
    c5c2:	d061      	beq.n	c688 <usb_isr+0xe0>
		uint32_t addr = (uint32_t)data;
    c5c4:	f8df 8278 	ldr.w	r8, [pc, #632]	; c840 <usb_isr+0x298>
    c5c8:	4d93      	ldr	r5, [pc, #588]	; (c818 <usb_isr+0x270>)
    c5ca:	f8df b26c 	ldr.w	fp, [pc, #620]	; c838 <usb_isr+0x290>
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c5ce:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    c5d2:	f8df 9270 	ldr.w	r9, [pc, #624]	; c844 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    c5d6:	4f91      	ldr	r7, [pc, #580]	; (c81c <usb_isr+0x274>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    c5d8:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    c5dc:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    c5e0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    c5e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c5e8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    c5ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    c5f0:	049b      	lsls	r3, r3, #18
    c5f2:	d5f5      	bpl.n	c5e0 <usb_isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    c5f4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    c5f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    c5fc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    c600:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c604:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    c608:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    c60c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    c610:	d1fa      	bne.n	c608 <usb_isr+0x60>
			endpoint0_notify_mask = 0;
    c612:	b291      	uxth	r1, r2
	switch (setup.wRequestAndType) {
    c614:	f240 6c81 	movw	ip, #1665	; 0x681
			endpoint0_notify_mask = 0;
    c618:	f8cb 3000 	str.w	r3, [fp]
	switch (setup.wRequestAndType) {
    c61c:	4561      	cmp	r1, ip
    c61e:	f200 80d4 	bhi.w	c7ca <usb_isr+0x222>
    c622:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    c626:	f080 8161 	bcs.w	c8ec <usb_isr+0x344>
    c62a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    c62e:	f000 818f 	beq.w	c950 <usb_isr+0x3a8>
    c632:	f240 80a6 	bls.w	c782 <usb_isr+0x1da>
    c636:	f240 3c02 	movw	ip, #770	; 0x302
    c63a:	4561      	cmp	r1, ip
    c63c:	f000 81b2 	beq.w	c9a4 <usb_isr+0x3fc>
    c640:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    c644:	f040 80bc 	bne.w	c7c0 <usb_isr+0x218>
	endpoint0_transfer_ack.next = 1;
    c648:	4975      	ldr	r1, [pc, #468]	; (c820 <usb_isr+0x278>)
	endpoint_queue_head[1].status = 0;
    c64a:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c64c:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    c64e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c650:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c652:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c654:	2380      	movs	r3, #128	; 0x80
    c656:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c658:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c65c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c660:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c668:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c66c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c670:	2b00      	cmp	r3, #0
    c672:	d1fb      	bne.n	c66c <usb_isr+0xc4>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    c674:	0c13      	lsrs	r3, r2, #16
    c676:	065b      	lsls	r3, r3, #25
    c678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    c67c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c680:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    c684:	2b00      	cmp	r3, #0
    c686:	d1a7      	bne.n	c5d8 <usb_isr+0x30>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    c688:	4b62      	ldr	r3, [pc, #392]	; (c814 <usb_isr+0x26c>)
    c68a:	f8d3 71bc 	ldr.w	r7, [r3, #444]	; 0x1bc
		if (completestatus) {
    c68e:	2f00      	cmp	r7, #0
    c690:	d145      	bne.n	c71e <usb_isr+0x176>
	if (status & USB_USBSTS_URI) { // page 3164
    c692:	0672      	lsls	r2, r6, #25
    c694:	d516      	bpl.n	c6c4 <usb_isr+0x11c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    c696:	4b5f      	ldr	r3, [pc, #380]	; (c814 <usb_isr+0x26c>)
    c698:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    c69c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    c6a0:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    c6a4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    c6a8:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    c6ac:	2c00      	cmp	r4, #0
    c6ae:	d1fb      	bne.n	c6a8 <usb_isr+0x100>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    c6b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c6b4:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    c6b8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    c6bc:	f000 fd1e 	bl	d0fc <usb_serial_reset>
		endpointN_notify_mask = 0;
    c6c0:	4b58      	ldr	r3, [pc, #352]	; (c824 <usb_isr+0x27c>)
    c6c2:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    c6c4:	01f4      	lsls	r4, r6, #7
    c6c6:	d503      	bpl.n	c6d0 <usb_isr+0x128>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    c6c8:	4b57      	ldr	r3, [pc, #348]	; (c828 <usb_isr+0x280>)
    c6ca:	681b      	ldr	r3, [r3, #0]
    c6cc:	b103      	cbz	r3, c6d0 <usb_isr+0x128>
    c6ce:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    c6d0:	01b0      	lsls	r0, r6, #6
    c6d2:	d503      	bpl.n	c6dc <usb_isr+0x134>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    c6d4:	4b55      	ldr	r3, [pc, #340]	; (c82c <usb_isr+0x284>)
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	b103      	cbz	r3, c6dc <usb_isr+0x134>
    c6da:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    c6dc:	0771      	lsls	r1, r6, #29
    c6de:	d508      	bpl.n	c6f2 <usb_isr+0x14a>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    c6e0:	4b4c      	ldr	r3, [pc, #304]	; (c814 <usb_isr+0x26c>)
    c6e2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    c6e6:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    c6ea:	d015      	beq.n	c718 <usb_isr+0x170>
			usb_high_speed = 1;
    c6ec:	4b50      	ldr	r3, [pc, #320]	; (c830 <usb_isr+0x288>)
    c6ee:	2201      	movs	r2, #1
    c6f0:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    c6f2:	4b48      	ldr	r3, [pc, #288]	; (c814 <usb_isr+0x26c>)
    c6f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    c6f8:	061a      	lsls	r2, r3, #24
    c6fa:	d50a      	bpl.n	c712 <usb_isr+0x16a>
    c6fc:	0633      	lsls	r3, r6, #24
    c6fe:	d508      	bpl.n	c712 <usb_isr+0x16a>
		if (usb_reboot_timer) {
    c700:	4a4c      	ldr	r2, [pc, #304]	; (c834 <usb_isr+0x28c>)
    c702:	7813      	ldrb	r3, [r2, #0]
    c704:	b12b      	cbz	r3, c712 <usb_isr+0x16a>
			if (--usb_reboot_timer == 0) {
    c706:	3b01      	subs	r3, #1
    c708:	b2db      	uxtb	r3, r3
    c70a:	7013      	strb	r3, [r2, #0]
    c70c:	2b00      	cmp	r3, #0
    c70e:	f000 8256 	beq.w	cbbe <usb_isr+0x616>
}
    c712:	b003      	add	sp, #12
    c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			usb_high_speed = 0;
    c718:	4a45      	ldr	r2, [pc, #276]	; (c830 <usb_isr+0x288>)
    c71a:	7013      	strb	r3, [r2, #0]
    c71c:	e7e9      	b.n	c6f2 <usb_isr+0x14a>
			if (completestatus & endpoint0_notify_mask) {
    c71e:	4946      	ldr	r1, [pc, #280]	; (c838 <usb_isr+0x290>)
			USB1_ENDPTCOMPLETE = completestatus;
    c720:	f8c3 71bc 	str.w	r7, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    c724:	6808      	ldr	r0, [r1, #0]
    c726:	4207      	tst	r7, r0
    c728:	f040 816f 	bne.w	ca0a <usb_isr+0x462>
			completestatus &= endpointN_notify_mask;
    c72c:	4b3d      	ldr	r3, [pc, #244]	; (c824 <usb_isr+0x27c>)
    c72e:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    c730:	401f      	ands	r7, r3
    c732:	d0ae      	beq.n	c692 <usb_isr+0xea>
				while (tx) {
    c734:	ea5f 4817 	movs.w	r8, r7, lsr #16
    c738:	d010      	beq.n	c75c <usb_isr+0x1b4>
    c73a:	4d37      	ldr	r5, [pc, #220]	; (c818 <usb_isr+0x270>)
					tx &= ~(1<<p);
    c73c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    c740:	fa98 f4a8 	rbit	r4, r8
    c744:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    c748:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
					tx &= ~(1<<p);
    c74c:	fa09 f404 	lsl.w	r4, r9, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    c750:	3040      	adds	r0, #64	; 0x40
    c752:	f7ff feab 	bl	c4ac <run_callbacks>
				while (tx) {
    c756:	ea38 0804 	bics.w	r8, r8, r4
    c75a:	d1f1      	bne.n	c740 <usb_isr+0x198>
				uint32_t rx = completestatus & 0xffff;
    c75c:	b2bf      	uxth	r7, r7
				while(rx) {
    c75e:	2f00      	cmp	r7, #0
    c760:	d097      	beq.n	c692 <usb_isr+0xea>
    c762:	4d2d      	ldr	r5, [pc, #180]	; (c818 <usb_isr+0x270>)
					rx &= ~(1<<p);
    c764:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    c768:	fa97 f4a7 	rbit	r4, r7
    c76c:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    c770:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
					rx &= ~(1<<p);
    c774:	fa08 f404 	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    c778:	f7ff fe98 	bl	c4ac <run_callbacks>
				while(rx) {
    c77c:	43a7      	bics	r7, r4
    c77e:	d1f3      	bne.n	c768 <usb_isr+0x1c0>
    c780:	e787      	b.n	c692 <usb_isr+0xea>
	switch (setup.wRequestAndType) {
    c782:	2980      	cmp	r1, #128	; 0x80
    c784:	f000 80ac 	beq.w	c8e0 <usb_isr+0x338>
    c788:	2982      	cmp	r1, #130	; 0x82
    c78a:	d119      	bne.n	c7c0 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
    c78c:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    c78e:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    c792:	d115      	bne.n	c7c0 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
    c794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    c798:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    c79c:	4a27      	ldr	r2, [pc, #156]	; (c83c <usb_isr+0x294>)
    c79e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c7a0:	0618      	lsls	r0, r3, #24
    c7a2:	f100 81fc 	bmi.w	cb9e <usb_isr+0x5f6>
    c7a6:	07cb      	lsls	r3, r1, #31
    c7a8:	d501      	bpl.n	c7ae <usb_isr+0x206>
			reply_buffer[0] = 1;
    c7aa:	2301      	movs	r3, #1
    c7ac:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    c7ae:	2102      	movs	r1, #2
    c7b0:	4822      	ldr	r0, [pc, #136]	; (c83c <usb_isr+0x294>)
    c7b2:	f7ff fe97 	bl	c4e4 <endpoint0_transmit.constprop.0>
		return;
    c7b6:	e763      	b.n	c680 <usb_isr+0xd8>
		if (setup.wLength != 7) break;
    c7b8:	0c01      	lsrs	r1, r0, #16
    c7ba:	2907      	cmp	r1, #7
    c7bc:	f000 8156 	beq.w	ca6c <usb_isr+0x4c4>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    c7c0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c7c4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    c7c8:	e75a      	b.n	c680 <usb_isr+0xd8>
	switch (setup.wRequestAndType) {
    c7ca:	f242 0c21 	movw	ip, #8225	; 0x2021
    c7ce:	4561      	cmp	r1, ip
    c7d0:	d0f2      	beq.n	c7b8 <usb_isr+0x210>
    c7d2:	d939      	bls.n	c848 <usb_isr+0x2a0>
    c7d4:	f242 2321 	movw	r3, #8737	; 0x2221
    c7d8:	4299      	cmp	r1, r3
    c7da:	d06a      	beq.n	c8b2 <usb_isr+0x30a>
    c7dc:	f242 3321 	movw	r3, #8993	; 0x2321
    c7e0:	4299      	cmp	r1, r3
    c7e2:	d1ed      	bne.n	c7c0 <usb_isr+0x218>
	endpoint0_transfer_ack.next = 1;
    c7e4:	4b0e      	ldr	r3, [pc, #56]	; (c820 <usb_isr+0x278>)
	endpoint0_transfer_ack.pointer0 = 0;
    c7e6:	2200      	movs	r2, #0
    c7e8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    c7ea:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    c7ec:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c7ee:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c7f0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c7f2:	2280      	movs	r2, #128	; 0x80
    c7f4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c7f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c7fa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c7fe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c806:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c80a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c80e:	2b00      	cmp	r3, #0
    c810:	d1fb      	bne.n	c80a <usb_isr+0x262>
    c812:	e735      	b.n	c680 <usb_isr+0xd8>
    c814:	402e0000 	.word	0x402e0000
    c818:	20000000 	.word	0x20000000
    c81c:	402e01c0 	.word	0x402e01c0
    c820:	20003b20 	.word	0x20003b20
    c824:	200077bc 	.word	0x200077bc
    c828:	200086c8 	.word	0x200086c8
    c82c:	200086cc 	.word	0x200086cc
    c830:	20008705 	.word	0x20008705
    c834:	20008706 	.word	0x20008706
    c838:	200077b8 	.word	0x200077b8
    c83c:	20007990 	.word	0x20007990
    c840:	200077b0 	.word	0x200077b0
    c844:	20003b40 	.word	0x20003b40
	switch (setup.wRequestAndType) {
    c848:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    c84c:	d040      	beq.n	c8d0 <usb_isr+0x328>
    c84e:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    c852:	d1b5      	bne.n	c7c0 <usb_isr+0x218>
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c854:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    c858:	f3c2 4c07 	ubfx	ip, r2, #16, #8
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c85c:	48a3      	ldr	r0, [pc, #652]	; (caec <usb_isr+0x544>)
		usb_configuration = setup.wValue;
    c85e:	4aa4      	ldr	r2, [pc, #656]	; (caf0 <usb_isr+0x548>)
    c860:	9300      	str	r3, [sp, #0]
    c862:	f882 c000 	strb.w	ip, [r2]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c866:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c86a:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    c86e:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    c872:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
		usb_serial_configure();
    c876:	f000 fc43 	bl	d100 <usb_serial_configure>
		usb_serial2_configure();
    c87a:	f000 ff0d 	bl	d698 <usb_serial2_configure>
	endpoint0_transfer_ack.next = 1;
    c87e:	4a9d      	ldr	r2, [pc, #628]	; (caf4 <usb_isr+0x54c>)
    c880:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    c882:	9b00      	ldr	r3, [sp, #0]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c884:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c886:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c888:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    c88a:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c88c:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c88e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    c892:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c894:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c898:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    c89c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    c8a0:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c8a4:	f8cb 3000 	str.w	r3, [fp]
	while (USB1_ENDPTPRIME) ;
    c8a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d1fb      	bne.n	c8a8 <usb_isr+0x300>
    c8b0:	e6e6      	b.n	c680 <usb_isr+0xd8>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    c8b2:	b280      	uxth	r0, r0
    c8b4:	2800      	cmp	r0, #0
    c8b6:	f000 809f 	beq.w	c9f8 <usb_isr+0x450>
		if (setup.wIndex == CDC2_STATUS_INTERFACE) {
    c8ba:	2802      	cmp	r0, #2
    c8bc:	d192      	bne.n	c7e4 <usb_isr+0x23c>
			usb_cdc2_line_rtsdtr_millis = systick_millis_count;
    c8be:	4b8e      	ldr	r3, [pc, #568]	; (caf8 <usb_isr+0x550>)
			usb_cdc2_line_rtsdtr = setup.wValue;
    c8c0:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc2_line_rtsdtr_millis = systick_millis_count;
    c8c4:	6819      	ldr	r1, [r3, #0]
    c8c6:	4b8d      	ldr	r3, [pc, #564]	; (cafc <usb_isr+0x554>)
    c8c8:	6019      	str	r1, [r3, #0]
			usb_cdc2_line_rtsdtr = setup.wValue;
    c8ca:	4b8d      	ldr	r3, [pc, #564]	; (cb00 <usb_isr+0x558>)
    c8cc:	701a      	strb	r2, [r3, #0]
    c8ce:	e789      	b.n	c7e4 <usb_isr+0x23c>
		reply_buffer[0] = usb_configuration;
    c8d0:	4b87      	ldr	r3, [pc, #540]	; (caf0 <usb_isr+0x548>)
		endpoint0_transmit(reply_buffer, 1, 0);
    c8d2:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    c8d4:	488b      	ldr	r0, [pc, #556]	; (cb04 <usb_isr+0x55c>)
    c8d6:	781b      	ldrb	r3, [r3, #0]
    c8d8:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    c8da:	f7ff fe03 	bl	c4e4 <endpoint0_transmit.constprop.0>
		return;
    c8de:	e6cf      	b.n	c680 <usb_isr+0xd8>
		reply_buffer[0] = 0;
    c8e0:	4888      	ldr	r0, [pc, #544]	; (cb04 <usb_isr+0x55c>)
		endpoint0_transmit(reply_buffer, 2, 0);
    c8e2:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    c8e4:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    c8e6:	f7ff fdfd 	bl	c4e4 <endpoint0_transmit.constprop.0>
		return;
    c8ea:	e6c9      	b.n	c680 <usb_isr+0xd8>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c8ec:	4b86      	ldr	r3, [pc, #536]	; (cb08 <usb_isr+0x560>)
    c8ee:	6859      	ldr	r1, [r3, #4]
    c8f0:	2900      	cmp	r1, #0
    c8f2:	f43f af65 	beq.w	c7c0 <usb_isr+0x218>
    c8f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c8fa:	b282      	uxth	r2, r0
    c8fc:	e004      	b.n	c908 <usb_isr+0x360>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c8fe:	6919      	ldr	r1, [r3, #16]
    c900:	330c      	adds	r3, #12
    c902:	2900      	cmp	r1, #0
    c904:	f43f af5c 	beq.w	c7c0 <usb_isr+0x218>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c908:	f8b3 c000 	ldrh.w	ip, [r3]
    c90c:	45f4      	cmp	ip, lr
    c90e:	d1f6      	bne.n	c8fe <usb_isr+0x356>
    c910:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    c914:	4594      	cmp	ip, r2
    c916:	d1f2      	bne.n	c8fe <usb_isr+0x356>
				if ((setup.wValue >> 8) == 3) {
    c918:	ea4f 221e 	mov.w	r2, lr, lsr #8
    c91c:	2a03      	cmp	r2, #3
    c91e:	f000 810f 	beq.w	cb40 <usb_isr+0x598>
					datalen = list->length;
    c922:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    c924:	0c00      	lsrs	r0, r0, #16
    c926:	4282      	cmp	r2, r0
    c928:	bf28      	it	cs
    c92a:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    c92c:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    c930:	f040 810b 	bne.w	cb4a <usb_isr+0x5a2>
					if (usb_high_speed) src = usb_config_descriptor_480;
    c934:	4b75      	ldr	r3, [pc, #468]	; (cb0c <usb_isr+0x564>)
    c936:	4976      	ldr	r1, [pc, #472]	; (cb10 <usb_isr+0x568>)
    c938:	7818      	ldrb	r0, [r3, #0]
    c93a:	4b76      	ldr	r3, [pc, #472]	; (cb14 <usb_isr+0x56c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    c93c:	9200      	str	r2, [sp, #0]
    c93e:	2800      	cmp	r0, #0
    c940:	bf18      	it	ne
    c942:	4619      	movne	r1, r3
    c944:	4874      	ldr	r0, [pc, #464]	; (cb18 <usb_isr+0x570>)
    c946:	f7ff faab 	bl	bea0 <memcpy>
    c94a:	4b73      	ldr	r3, [pc, #460]	; (cb18 <usb_isr+0x570>)
    c94c:	9a00      	ldr	r2, [sp, #0]
    c94e:	e111      	b.n	cb74 <usb_isr+0x5cc>
		if (endpoint > 7) break;
    c950:	f010 0f78 	tst.w	r0, #120	; 0x78
    c954:	b283      	uxth	r3, r0
    c956:	f47f af33 	bne.w	c7c0 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
    c95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    c95e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    c962:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    c966:	bf14      	ite	ne
    c968:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    c96c:	f023 0301 	biceq.w	r3, r3, #1
    c970:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    c974:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c976:	4b5f      	ldr	r3, [pc, #380]	; (caf4 <usb_isr+0x54c>)
	endpoint_queue_head[1].status = 0;
    c978:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c97a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c97c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c97e:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c980:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c982:	2280      	movs	r2, #128	; 0x80
    c984:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c986:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c98a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c98e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c996:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c99a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c99e:	2b00      	cmp	r3, #0
    c9a0:	d1fb      	bne.n	c99a <usb_isr+0x3f2>
    c9a2:	e66d      	b.n	c680 <usb_isr+0xd8>
		if (endpoint > 7) break;
    c9a4:	f010 0f78 	tst.w	r0, #120	; 0x78
    c9a8:	b283      	uxth	r3, r0
    c9aa:	f47f af09 	bne.w	c7c0 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
    c9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    c9b2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    c9b6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    c9ba:	bf14      	ite	ne
    c9bc:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    c9c0:	f043 0301 	orreq.w	r3, r3, #1
    c9c4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    c9c8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c9ca:	4b4a      	ldr	r3, [pc, #296]	; (caf4 <usb_isr+0x54c>)
	endpoint_queue_head[1].status = 0;
    c9cc:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c9ce:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c9d0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c9d2:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c9d4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c9d6:	2280      	movs	r2, #128	; 0x80
    c9d8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c9da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    c9de:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c9e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c9e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c9ea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c9ee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d1fb      	bne.n	c9ee <usb_isr+0x446>
    c9f6:	e643      	b.n	c680 <usb_isr+0xd8>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c9f8:	4b3f      	ldr	r3, [pc, #252]	; (caf8 <usb_isr+0x550>)
			usb_cdc_line_rtsdtr = setup.wValue;
    c9fa:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c9fe:	6819      	ldr	r1, [r3, #0]
    ca00:	4b46      	ldr	r3, [pc, #280]	; (cb1c <usb_isr+0x574>)
    ca02:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    ca04:	4b46      	ldr	r3, [pc, #280]	; (cb20 <usb_isr+0x578>)
    ca06:	701a      	strb	r2, [r3, #0]
		if (setup.wIndex == CDC2_STATUS_INTERFACE) {
    ca08:	e6ec      	b.n	c7e4 <usb_isr+0x23c>
				endpoint0_notify_mask = 0;
    ca0a:	2000      	movs	r0, #0
    ca0c:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    ca0e:	4845      	ldr	r0, [pc, #276]	; (cb24 <usb_isr+0x57c>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ca10:	8804      	ldrh	r4, [r0, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    ca12:	6841      	ldr	r1, [r0, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ca14:	f242 0021 	movw	r0, #8225	; 0x2021
    ca18:	4284      	cmp	r4, r0
    ca1a:	f47f ae87 	bne.w	c72c <usb_isr+0x184>
    ca1e:	b289      	uxth	r1, r1
    ca20:	2900      	cmp	r1, #0
    ca22:	f000 80c9 	beq.w	cbb8 <usb_isr+0x610>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC2_STATUS_INTERFACE) {
    ca26:	2902      	cmp	r1, #2
    ca28:	f47f ae80 	bne.w	c72c <usb_isr+0x184>
		memcpy(usb_cdc2_line_coding, endpoint0_buffer, 7);
    ca2c:	493e      	ldr	r1, [pc, #248]	; (cb28 <usb_isr+0x580>)
    ca2e:	4c3f      	ldr	r4, [pc, #252]	; (cb2c <usb_isr+0x584>)
    ca30:	c903      	ldmia	r1, {r0, r1}
    ca32:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc2_line_coding[0] == 134) {
    ca34:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc2_line_coding, endpoint0_buffer, 7);
    ca36:	ea4f 4111 	mov.w	r1, r1, lsr #16
    ca3a:	6020      	str	r0, [r4, #0]
    ca3c:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc2_line_coding[0] == 134) {
    ca3e:	f47f ae75 	bne.w	c72c <usb_isr+0x184>
	__disable_irq();
    ca42:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    ca44:	483a      	ldr	r0, [pc, #232]	; (cb30 <usb_isr+0x588>)
    ca46:	7801      	ldrb	r1, [r0, #0]
    ca48:	f041 0110 	orr.w	r1, r1, #16
    ca4c:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    ca4e:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    ca52:	060d      	lsls	r5, r1, #24
    ca54:	d405      	bmi.n	ca62 <usb_isr+0x4ba>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ca56:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ca58:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ca5a:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ca5e:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    ca62:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ca64:	4b33      	ldr	r3, [pc, #204]	; (cb34 <usb_isr+0x58c>)
    ca66:	2150      	movs	r1, #80	; 0x50
    ca68:	7019      	strb	r1, [r3, #0]
    ca6a:	e65f      	b.n	c72c <usb_isr+0x184>
		endpoint_queue_head[0].status = 0;
    ca6c:	60eb      	str	r3, [r5, #12]
		endpoint0_transfer_data.next = 1;
    ca6e:	2301      	movs	r3, #1
		endpoint0_setupdata.bothwords = setupdata;
    ca70:	492c      	ldr	r1, [pc, #176]	; (cb24 <usb_isr+0x57c>)
		endpoint0_transfer_data.next = 1;
    ca72:	f8c9 3000 	str.w	r3, [r9]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ca76:	4b30      	ldr	r3, [pc, #192]	; (cb38 <usb_isr+0x590>)
		endpoint0_setupdata.bothwords = setupdata;
    ca78:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ca7a:	f8c9 3004 	str.w	r3, [r9, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ca7e:	4b2f      	ldr	r3, [pc, #188]	; (cb3c <usb_isr+0x594>)
		endpoint0_setupdata.bothwords = setupdata;
    ca80:	6048      	str	r0, [r1, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ca82:	f8c9 3010 	str.w	r3, [r9, #16]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ca86:	f8c5 9008 	str.w	r9, [r5, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ca8a:	e9c9 8a02 	strd	r8, sl, [r9, #8]
		USB1_ENDPTPRIME |= (1<<0);
    ca8e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    ca92:	f042 0201 	orr.w	r2, r2, #1
    ca96:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ca9a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ca9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    caa2:	f8c9 2014 	str.w	r2, [r9, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    caa6:	f8c9 3018 	str.w	r3, [r9, #24]
		while (USB1_ENDPTPRIME) ;
    caaa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    caae:	2b00      	cmp	r3, #0
    cab0:	d1fb      	bne.n	caaa <usb_isr+0x502>
	endpoint0_transfer_ack.next = 1;
    cab2:	4a10      	ldr	r2, [pc, #64]	; (caf4 <usb_isr+0x54c>)
	endpoint_queue_head[1].status = 0;
    cab4:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    cab6:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    cab8:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    caba:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    cabc:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    cabe:	f248 0380 	movw	r3, #32896	; 0x8080
    cac2:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    cac4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    cac8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    cacc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    cad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    cad4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    cad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    cadc:	f8cb 3000 	str.w	r3, [fp]
	while (USB1_ENDPTPRIME) ;
    cae0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    cae4:	2b00      	cmp	r3, #0
    cae6:	d1fb      	bne.n	cae0 <usb_isr+0x538>
    cae8:	e5ca      	b.n	c680 <usb_isr+0xd8>
    caea:	bf00      	nop
    caec:	00cc0002 	.word	0x00cc0002
    caf0:	20008704 	.word	0x20008704
    caf4:	20003b20 	.word	0x20003b20
    caf8:	200086a8 	.word	0x200086a8
    cafc:	200086b8 	.word	0x200086b8
    cb00:	20008702 	.word	0x20008702
    cb04:	20007990 	.word	0x20007990
    cb08:	20002948 	.word	0x20002948
    cb0c:	20008705 	.word	0x20008705
    cb10:	60001f7c 	.word	0x60001f7c
    cb14:	6000200c 	.word	0x6000200c
    cb18:	2021a1a0 	.word	0x2021a1a0
    cb1c:	200086c4 	.word	0x200086c4
    cb20:	20008703 	.word	0x20008703
    cb24:	20003e60 	.word	0x20003e60
    cb28:	200077b0 	.word	0x200077b0
    cb2c:	200086b0 	.word	0x200086b0
    cb30:	200086fc 	.word	0x200086fc
    cb34:	20008706 	.word	0x20008706
    cb38:	00070080 	.word	0x00070080
    cb3c:	200097b0 	.word	0x200097b0
				if (datalen > setup.wLength) datalen = setup.wLength;
    cb40:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    cb42:	780a      	ldrb	r2, [r1, #0]
    cb44:	4282      	cmp	r2, r0
    cb46:	bf28      	it	cs
    cb48:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    cb4a:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    cb4e:	d12a      	bne.n	cba6 <usb_isr+0x5fe>
					if (usb_high_speed) src = usb_config_descriptor_12;
    cb50:	4b1d      	ldr	r3, [pc, #116]	; (cbc8 <usb_isr+0x620>)
    cb52:	481e      	ldr	r0, [pc, #120]	; (cbcc <usb_isr+0x624>)
    cb54:	f893 c000 	ldrb.w	ip, [r3]
    cb58:	491d      	ldr	r1, [pc, #116]	; (cbd0 <usb_isr+0x628>)
					memcpy(usb_descriptor_buffer, src, datalen);
    cb5a:	4b1e      	ldr	r3, [pc, #120]	; (cbd4 <usb_isr+0x62c>)
    cb5c:	f1bc 0f00 	cmp.w	ip, #0
    cb60:	bf18      	it	ne
    cb62:	4601      	movne	r1, r0
    cb64:	9200      	str	r2, [sp, #0]
    cb66:	4618      	mov	r0, r3
    cb68:	f7ff f99a 	bl	bea0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    cb6c:	2107      	movs	r1, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    cb6e:	4603      	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    cb70:	7041      	strb	r1, [r0, #1]
    cb72:	9a00      	ldr	r2, [sp, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cb74:	f023 011f 	bic.w	r1, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    cb78:	4413      	add	r3, r2
	asm("dsb");
    cb7a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    cb7e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    cb82:	f8c0 1f70 	str.w	r1, [r0, #3952]	; 0xf70
		location += 32;
    cb86:	3120      	adds	r1, #32
	} while (location < end_addr);
    cb88:	428b      	cmp	r3, r1
    cb8a:	d8fa      	bhi.n	cb82 <usb_isr+0x5da>
	asm("dsb");
    cb8c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    cb90:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    cb94:	480f      	ldr	r0, [pc, #60]	; (cbd4 <usb_isr+0x62c>)
    cb96:	4611      	mov	r1, r2
    cb98:	f7ff fca4 	bl	c4e4 <endpoint0_transmit.constprop.0>
				return;
    cb9c:	e570      	b.n	c680 <usb_isr+0xd8>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    cb9e:	03c9      	lsls	r1, r1, #15
    cba0:	f53f ae03 	bmi.w	c7aa <usb_isr+0x202>
    cba4:	e603      	b.n	c7ae <usb_isr+0x206>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    cba6:	4b0b      	ldr	r3, [pc, #44]	; (cbd4 <usb_isr+0x62c>)
    cba8:	4618      	mov	r0, r3
    cbaa:	e9cd 2300 	strd	r2, r3, [sp]
    cbae:	f7ff f977 	bl	bea0 <memcpy>
    cbb2:	e9dd 2300 	ldrd	r2, r3, [sp]
    cbb6:	e7dd      	b.n	cb74 <usb_isr+0x5cc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    cbb8:	4907      	ldr	r1, [pc, #28]	; (cbd8 <usb_isr+0x630>)
    cbba:	4c08      	ldr	r4, [pc, #32]	; (cbdc <usb_isr+0x634>)
    cbbc:	e738      	b.n	ca30 <usb_isr+0x488>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    cbbe:	2004      	movs	r0, #4
    cbc0:	f7ff fcdc 	bl	c57c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    cbc4:	f007 f9f0 	bl	13fa8 <___reboot_Teensyduino__veneer>
    cbc8:	20008705 	.word	0x20008705
    cbcc:	60001f7c 	.word	0x60001f7c
    cbd0:	6000200c 	.word	0x6000200c
    cbd4:	2021a1a0 	.word	0x2021a1a0
    cbd8:	200077b0 	.word	0x200077b0
    cbdc:	200086bc 	.word	0x200086bc

0000cbe0 <usb_config_rx>:
{
    cbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbe4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    cbe6:	1e83      	subs	r3, r0, #2
    cbe8:	2b03      	cmp	r3, #3
    cbea:	d901      	bls.n	cbf0 <usb_config_rx+0x10>
}
    cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    cbf0:	f8df 904c 	ldr.w	r9, [pc, #76]	; cc40 <usb_config_rx+0x60>
    cbf4:	4615      	mov	r5, r2
    cbf6:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    cbf8:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    cbfa:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    cbfe:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    cc00:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    cc04:	2100      	movs	r1, #0
    cc06:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cc0a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    cc0c:	f001 fcc8 	bl	e5a0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cc10:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    cc14:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cc16:	0952      	lsrs	r2, r2, #5
    cc18:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    cc1c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    cc20:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    cc24:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    cc28:	2f00      	cmp	r7, #0
    cc2a:	d0df      	beq.n	cbec <usb_config_rx+0xc>
    cc2c:	4a03      	ldr	r2, [pc, #12]	; (cc3c <usb_config_rx+0x5c>)
    cc2e:	40b3      	lsls	r3, r6
    cc30:	6811      	ldr	r1, [r2, #0]
    cc32:	430b      	orrs	r3, r1
    cc34:	6013      	str	r3, [r2, #0]
}
    cc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc3a:	bf00      	nop
    cc3c:	200077bc 	.word	0x200077bc
    cc40:	20000000 	.word	0x20000000

0000cc44 <usb_config_tx>:
{
    cc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc48:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    cc4a:	1e81      	subs	r1, r0, #2
    cc4c:	2903      	cmp	r1, #3
    cc4e:	d901      	bls.n	cc54 <usb_config_tx+0x10>
}
    cc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    cc54:	01c7      	lsls	r7, r0, #7
    cc56:	f8df 904c 	ldr.w	r9, [pc, #76]	; cca4 <usb_config_tx+0x60>
    cc5a:	4692      	mov	sl, r2
    cc5c:	4604      	mov	r4, r0
    cc5e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    cc60:	223c      	movs	r2, #60	; 0x3c
    cc62:	2100      	movs	r1, #0
    cc64:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    cc66:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cc6a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    cc6c:	f108 0004 	add.w	r0, r8, #4
    cc70:	f001 fc96 	bl	e5a0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cc74:	faba f28a 	clz	r2, sl
    cc78:	0952      	lsrs	r2, r2, #5
    cc7a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    cc7e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    cc82:	2201      	movs	r2, #1
	qh->callback_function = callback;
    cc84:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    cc88:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    cc8c:	2e00      	cmp	r6, #0
    cc8e:	d0df      	beq.n	cc50 <usb_config_tx+0xc>
    cc90:	4b03      	ldr	r3, [pc, #12]	; (cca0 <usb_config_tx+0x5c>)
    cc92:	3410      	adds	r4, #16
    cc94:	6819      	ldr	r1, [r3, #0]
    cc96:	40a2      	lsls	r2, r4
    cc98:	430a      	orrs	r2, r1
    cc9a:	601a      	str	r2, [r3, #0]
}
    cc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cca0:	200077bc 	.word	0x200077bc
    cca4:	20000000 	.word	0x20000000

0000cca8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    cca8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    ccaa:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    ccac:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    ccae:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    ccb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    ccb6:	b410      	push	{r4}
	transfer->next = 1;
    ccb8:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    ccba:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    ccbc:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    ccc0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    ccc2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    ccc6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    ccca:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    cccc:	6181      	str	r1, [r0, #24]
}
    ccce:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    ccd2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    ccd6:	4770      	bx	lr

0000ccd8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ccd8:	1e83      	subs	r3, r0, #2
{
    ccda:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ccdc:	2b03      	cmp	r3, #3
    ccde:	d900      	bls.n	cce2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    cce0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    cce2:	4b06      	ldr	r3, [pc, #24]	; (ccfc <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    cce4:	f100 0110 	add.w	r1, r0, #16
    cce8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ccec:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    ccf0:	fa0c f101 	lsl.w	r1, ip, r1
    ccf4:	3040      	adds	r0, #64	; 0x40
    ccf6:	f7ff bb95 	b.w	c424 <schedule_transfer>
    ccfa:	bf00      	nop
    ccfc:	20000000 	.word	0x20000000

0000cd00 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cd00:	1e83      	subs	r3, r0, #2
{
    cd02:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cd04:	2b03      	cmp	r3, #3
    cd06:	d900      	bls.n	cd0a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    cd08:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    cd0a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    cd0c:	4b02      	ldr	r3, [pc, #8]	; (cd18 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    cd0e:	4081      	lsls	r1, r0
    cd10:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    cd14:	f7ff bb86 	b.w	c424 <schedule_transfer>
    cd18:	20000000 	.word	0x20000000

0000cd1c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    cd1c:	6840      	ldr	r0, [r0, #4]
#endif
}
    cd1e:	4770      	bx	lr

0000cd20 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    cd20:	4a12      	ldr	r2, [pc, #72]	; (cd6c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    cd22:	4b13      	ldr	r3, [pc, #76]	; (cd70 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    cd24:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    cd28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    cd2c:	4298      	cmp	r0, r3
{
    cd2e:	b510      	push	{r4, lr}
    cd30:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    cd32:	d202      	bcs.n	cd3a <usb_init_serialnumber+0x1a>
    cd34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    cd38:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    cd3a:	4c0e      	ldr	r4, [pc, #56]	; (cd74 <usb_init_serialnumber+0x54>)
    cd3c:	a901      	add	r1, sp, #4
    cd3e:	220a      	movs	r2, #10
    cd40:	f7ff f94c 	bl	bfdc <ultoa>
	for (i=0; i<10; i++) {
    cd44:	a901      	add	r1, sp, #4
    cd46:	2300      	movs	r3, #0
    cd48:	4620      	mov	r0, r4
		char c = buf[i];
    cd4a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    cd4e:	3301      	adds	r3, #1
		if (!c) break;
    cd50:	b13a      	cbz	r2, cd62 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    cd52:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    cd54:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    cd58:	d1f7      	bne.n	cd4a <usb_init_serialnumber+0x2a>
    cd5a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    cd5c:	7023      	strb	r3, [r4, #0]
}
    cd5e:	b004      	add	sp, #16
    cd60:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    cd62:	005b      	lsls	r3, r3, #1
    cd64:	b2db      	uxtb	r3, r3
    cd66:	7023      	strb	r3, [r4, #0]
}
    cd68:	b004      	add	sp, #16
    cd6a:	bd10      	pop	{r4, pc}
    cd6c:	401f4400 	.word	0x401f4400
    cd70:	00989680 	.word	0x00989680
    cd74:	200034f4 	.word	0x200034f4

0000cd78 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    cd78:	f000 bae0 	b.w	d33c <usb_serial_flush_input>

0000cd7c <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    cd7c:	f000 bab0 	b.w	d2e0 <usb_serial_peekchar>

0000cd80 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    cd80:	f000 bb14 	b.w	d3ac <usb_serial_getchar>

0000cd84 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    cd84:	f000 bace 	b.w	d324 <usb_serial_available>

0000cd88 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    cd88:	f000 bb6a 	b.w	d460 <usb_serial_flush_output>

0000cd8c <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    cd8c:	f000 bb40 	b.w	d410 <usb_serial_write_buffer_free>

0000cd90 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cd90:	4608      	mov	r0, r1
    cd92:	4611      	mov	r1, r2
    cd94:	f000 bb30 	b.w	d3f8 <usb_serial_write>

0000cd98 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cd98:	4608      	mov	r0, r1
    cd9a:	f000 bb17 	b.w	d3cc <usb_serial_putchar>
    cd9e:	bf00      	nop

0000cda0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    cda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    cda2:	4c14      	ldr	r4, [pc, #80]	; (cdf4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    cda4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    cda8:	4e13      	ldr	r6, [pc, #76]	; (cdf8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    cdaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    cdae:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    cdb2:	4f12      	ldr	r7, [pc, #72]	; (cdfc <rx_queue_transfer+0x5c>)
    cdb4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    cdb8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    cdba:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    cdbe:	4621      	mov	r1, r4
    cdc0:	883a      	ldrh	r2, [r7, #0]
    cdc2:	4630      	mov	r0, r6
    cdc4:	f7ff ff70 	bl	cca8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    cdc8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    cdca:	4423      	add	r3, r4
	asm("dsb");
    cdcc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    cdd0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    cdd4:	3420      	adds	r4, #32
	} while (location < end_addr);
    cdd6:	42a3      	cmp	r3, r4
    cdd8:	d8fa      	bhi.n	cdd0 <rx_queue_transfer+0x30>
	asm("dsb");
    cdda:	f3bf 8f4f 	dsb	sy
	asm("isb");
    cdde:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    cde2:	2003      	movs	r0, #3
    cde4:	4631      	mov	r1, r6
    cde6:	f7ff ff8b 	bl	cd00 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    cdea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    cdee:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    cdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdf4:	2021a240 	.word	0x2021a240
    cdf8:	20003b60 	.word	0x20003b60
    cdfc:	200086e0 	.word	0x200086e0

0000ce00 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ce00:	4b24      	ldr	r3, [pc, #144]	; (ce94 <rx_event+0x94>)
{
    ce02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ce06:	881c      	ldrh	r4, [r3, #0]
    ce08:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    ce0a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ce0c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    ce10:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    ce12:	2c00      	cmp	r4, #0
    ce14:	dd24      	ble.n	ce60 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    ce16:	4920      	ldr	r1, [pc, #128]	; (ce98 <rx_event+0x98>)
		if (head != rx_tail) {
    ce18:	4820      	ldr	r0, [pc, #128]	; (ce9c <rx_event+0x9c>)
		uint32_t head = rx_head;
    ce1a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    ce1c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    ce1e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    ce20:	4e1f      	ldr	r6, [pc, #124]	; (cea0 <rx_event+0xa0>)
		if (head != rx_tail) {
    ce22:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    ce24:	481f      	ldr	r0, [pc, #124]	; (cea4 <rx_event+0xa4>)
		if (head != rx_tail) {
    ce26:	d007      	beq.n	ce38 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    ce28:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    ce2c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    ce30:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    ce34:	4294      	cmp	r4, r2
    ce36:	d918      	bls.n	ce6a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    ce38:	3301      	adds	r3, #1
		rx_index[i] = 0;
    ce3a:	2200      	movs	r2, #0
		rx_count[i] = len;
    ce3c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    ce40:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    ce42:	4e19      	ldr	r6, [pc, #100]	; (cea8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    ce44:	bf88      	it	hi
    ce46:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    ce48:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    ce4c:	bf98      	it	ls
    ce4e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    ce50:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    ce52:	4b16      	ldr	r3, [pc, #88]	; (ceac <rx_event+0xac>)
		rx_head = head;
    ce54:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    ce56:	681a      	ldr	r2, [r3, #0]
    ce58:	4414      	add	r4, r2
    ce5a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    ce5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    ce60:	4628      	mov	r0, r5
}
    ce62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    ce66:	f7ff bf9b 	b.w	cda0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    ce6a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    ce6e:	4910      	ldr	r1, [pc, #64]	; (ceb0 <rx_event+0xb0>)
    ce70:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    ce72:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    ce74:	4408      	add	r0, r1
    ce76:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    ce7a:	f7ff f811 	bl	bea0 <memcpy>
				rx_available += len;
    ce7e:	4a0b      	ldr	r2, [pc, #44]	; (ceac <rx_event+0xac>)
				rx_queue_transfer(i);
    ce80:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    ce82:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    ce86:	6813      	ldr	r3, [r2, #0]
    ce88:	4423      	add	r3, r4
}
    ce8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    ce8e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    ce90:	f7ff bf86 	b.w	cda0 <rx_queue_transfer>
    ce94:	200086e0 	.word	0x200086e0
    ce98:	200086f8 	.word	0x200086f8
    ce9c:	200086fa 	.word	0x200086fa
    cea0:	200079a0 	.word	0x200079a0
    cea4:	200079e0 	.word	0x200079e0
    cea8:	200079c0 	.word	0x200079c0
    ceac:	20007998 	.word	0x20007998
    ceb0:	2021a240 	.word	0x2021a240

0000ceb4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    ceb4:	4b1d      	ldr	r3, [pc, #116]	; (cf2c <usb_serial_flush_callback+0x78>)
    ceb6:	781a      	ldrb	r2, [r3, #0]
    ceb8:	2a00      	cmp	r2, #0
    ceba:	d136      	bne.n	cf2a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    cebc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    cec0:	4a1b      	ldr	r2, [pc, #108]	; (cf30 <usb_serial_flush_callback+0x7c>)
    cec2:	7812      	ldrb	r2, [r2, #0]
    cec4:	b38a      	cbz	r2, cf2a <usb_serial_flush_callback+0x76>
{
    cec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    ceca:	4d1a      	ldr	r5, [pc, #104]	; (cf34 <usb_serial_flush_callback+0x80>)
    cecc:	882a      	ldrh	r2, [r5, #0]
    cece:	b352      	cbz	r2, cf26 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    ced0:	4e19      	ldr	r6, [pc, #100]	; (cf38 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    ced2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    ced6:	4f19      	ldr	r7, [pc, #100]	; (cf3c <usb_serial_flush_callback+0x88>)
    ced8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ceda:	4c19      	ldr	r4, [pc, #100]	; (cf40 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    cedc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    cee0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    cee4:	4642      	mov	r2, r8
    cee6:	4638      	mov	r0, r7
    cee8:	4621      	mov	r1, r4
    ceea:	f7ff fedd 	bl	cca8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ceee:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    cef2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    cef6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cefa:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    cefe:	3420      	adds	r4, #32
	} while (location < end_addr);
    cf00:	42a2      	cmp	r2, r4
    cf02:	d8fa      	bhi.n	cefa <usb_serial_flush_callback+0x46>
	asm("dsb");
    cf04:	f3bf 8f4f 	dsb	sy
	asm("isb");
    cf08:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    cf0c:	2003      	movs	r0, #3
    cf0e:	4639      	mov	r1, r7
    cf10:	f7ff fee2 	bl	ccd8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    cf14:	7833      	ldrb	r3, [r6, #0]
    cf16:	3301      	adds	r3, #1
    cf18:	b2db      	uxtb	r3, r3
    cf1a:	2b03      	cmp	r3, #3
    cf1c:	bf88      	it	hi
    cf1e:	2300      	movhi	r3, #0
    cf20:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    cf22:	2300      	movs	r3, #0
    cf24:	802b      	strh	r3, [r5, #0]
}
    cf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf2a:	4770      	bx	lr
    cf2c:	20008700 	.word	0x20008700
    cf30:	20008704 	.word	0x20008704
    cf34:	200086e4 	.word	0x200086e4
    cf38:	200086fe 	.word	0x200086fe
    cf3c:	20003d60 	.word	0x20003d60
    cf40:	2021b240 	.word	0x2021b240

0000cf44 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf48:	b085      	sub	sp, #20
	while (size > 0) {
    cf4a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    cf4e:	2900      	cmp	r1, #0
    cf50:	f000 80bf 	beq.w	d0d2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    cf54:	2300      	movs	r3, #0
    cf56:	4c60      	ldr	r4, [pc, #384]	; (d0d8 <usb_serial_write.part.0+0x194>)
    cf58:	f8df 8198 	ldr.w	r8, [pc, #408]	; d0f4 <usb_serial_write.part.0+0x1b0>
    cf5c:	f8df a198 	ldr.w	sl, [pc, #408]	; d0f8 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    cf60:	4f5e      	ldr	r7, [pc, #376]	; (d0dc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    cf62:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    cf64:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    cf66:	4a5e      	ldr	r2, [pc, #376]	; (d0e0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    cf68:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    cf6a:	4b5e      	ldr	r3, [pc, #376]	; (d0e4 <usb_serial_write.part.0+0x1a0>)
    cf6c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    cf6e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    cf72:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    cf76:	2b00      	cmp	r3, #0
    cf78:	f040 80a7 	bne.w	d0ca <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    cf7c:	461e      	mov	r6, r3
		int waiting=0;
    cf7e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    cf80:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    cf82:	4648      	mov	r0, r9
    cf84:	f7ff feca 	bl	cd1c <usb_transfer_status>
			if (!(status & 0x80)) {
    cf88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    cf8c:	f000 808c 	beq.w	d0a8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    cf90:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    cf94:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    cf98:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    cf9c:	b905      	cbnz	r5, cfa0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    cf9e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d17d      	bne.n	d0a0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    cfa4:	683b      	ldr	r3, [r7, #0]
    cfa6:	1b9b      	subs	r3, r3, r6
    cfa8:	2b78      	cmp	r3, #120	; 0x78
    cfaa:	f200 8087 	bhi.w	d0bc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    cfae:	4b4e      	ldr	r3, [pc, #312]	; (d0e8 <usb_serial_write.part.0+0x1a4>)
    cfb0:	781b      	ldrb	r3, [r3, #0]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d074      	beq.n	d0a0 <usb_serial_write.part.0+0x15c>
			yield();
    cfb6:	f000 fbfb 	bl	d7b0 <yield>
			tx_noautoflush = 1;
    cfba:	2201      	movs	r2, #1
		while (!tx_available) {
    cfbc:	f8b8 3000 	ldrh.w	r3, [r8]
    cfc0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    cfc2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d0dc      	beq.n	cf82 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    cfc8:	4a46      	ldr	r2, [pc, #280]	; (d0e4 <usb_serial_write.part.0+0x1a0>)
    cfca:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    cfce:	7811      	ldrb	r1, [r2, #0]
    cfd0:	461a      	mov	r2, r3
    cfd2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    cfd6:	4d45      	ldr	r5, [pc, #276]	; (d0ec <usb_serial_write.part.0+0x1a8>)
    cfd8:	02c9      	lsls	r1, r1, #11
    cfda:	4428      	add	r0, r5
		if (size >= tx_available) {
    cfdc:	9d01      	ldr	r5, [sp, #4]
    cfde:	4295      	cmp	r5, r2
    cfe0:	d217      	bcs.n	d012 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    cfe2:	9303      	str	r3, [sp, #12]
    cfe4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    cfe8:	462a      	mov	r2, r5
    cfea:	f7fe ff59 	bl	bea0 <memcpy>
			tx_available -= size;
    cfee:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    cff0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    cff4:	1b5b      	subs	r3, r3, r5
    cff6:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    cffa:	4b3d      	ldr	r3, [pc, #244]	; (d0f0 <usb_serial_write.part.0+0x1ac>)
    cffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    d000:	f3bf 8f4f 	dsb	sy
			sent += size;
    d004:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    d006:	2300      	movs	r3, #0
			sent += size;
    d008:	4428      	add	r0, r5
		tx_noautoflush = 0;
    d00a:	7023      	strb	r3, [r4, #0]
}
    d00c:	b005      	add	sp, #20
    d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d012:	4b36      	ldr	r3, [pc, #216]	; (d0ec <usb_serial_write.part.0+0x1a8>)
    d014:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    d016:	9902      	ldr	r1, [sp, #8]
    d018:	f7fe ff42 	bl	bea0 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    d01c:	2300      	movs	r3, #0
    d01e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d022:	4629      	mov	r1, r5
    d024:	4648      	mov	r0, r9
    d026:	f7ff fe3f 	bl	cca8 <usb_prepare_transfer>
	asm("dsb");
    d02a:	f3bf 8f4f 	dsb	sy
    d02e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    d032:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    d036:	4293      	cmp	r3, r2
    d038:	bf34      	ite	cc
    d03a:	2301      	movcc	r3, #1
    d03c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    d03e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d042:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    d046:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    d04a:	3520      	adds	r5, #32
	} while (location < end_addr);
    d04c:	42ab      	cmp	r3, r5
    d04e:	d1fa      	bne.n	d046 <usb_serial_write.part.0+0x102>
	asm("dsb");
    d050:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d054:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    d058:	2003      	movs	r0, #3
    d05a:	4649      	mov	r1, r9
    d05c:	f7ff fe3c 	bl	ccd8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    d060:	4a20      	ldr	r2, [pc, #128]	; (d0e4 <usb_serial_write.part.0+0x1a0>)
    d062:	7813      	ldrb	r3, [r2, #0]
    d064:	3301      	adds	r3, #1
    d066:	b2db      	uxtb	r3, r3
    d068:	2b03      	cmp	r3, #3
    d06a:	bf84      	itt	hi
    d06c:	2300      	movhi	r3, #0
    d06e:	4a1d      	ldrhi	r2, [pc, #116]	; (d0e4 <usb_serial_write.part.0+0x1a0>)
    d070:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    d072:	f8b8 3000 	ldrh.w	r3, [r8]
    d076:	9a01      	ldr	r2, [sp, #4]
    d078:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    d07a:	9a00      	ldr	r2, [sp, #0]
    d07c:	441a      	add	r2, r3
			size -= tx_available;
    d07e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    d080:	9200      	str	r2, [sp, #0]
			data += tx_available;
    d082:	9a02      	ldr	r2, [sp, #8]
    d084:	441a      	add	r2, r3
			tx_available = 0;
    d086:	2300      	movs	r3, #0
			data += tx_available;
    d088:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    d08a:	4a19      	ldr	r2, [pc, #100]	; (d0f0 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    d08c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    d090:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    d094:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    d098:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    d09a:	2900      	cmp	r1, #0
    d09c:	f47f af62 	bne.w	cf64 <usb_serial_write.part.0+0x20>
	return sent;
    d0a0:	9800      	ldr	r0, [sp, #0]
}
    d0a2:	b005      	add	sp, #20
    d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    d0a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    d0ac:	4b0d      	ldr	r3, [pc, #52]	; (d0e4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    d0ae:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    d0b2:	7819      	ldrb	r1, [r3, #0]
				break;
    d0b4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    d0b6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    d0ba:	e78a      	b.n	cfd2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    d0bc:	2301      	movs	r3, #1
				return sent;
    d0be:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    d0c0:	f88a 3000 	strb.w	r3, [sl]
}
    d0c4:	b005      	add	sp, #20
    d0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    d0ca:	461a      	mov	r2, r3
    d0cc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    d0d0:	e77f      	b.n	cfd2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    d0d2:	9801      	ldr	r0, [sp, #4]
	return sent;
    d0d4:	e7e5      	b.n	d0a2 <usb_serial_write.part.0+0x15e>
    d0d6:	bf00      	nop
    d0d8:	20008700 	.word	0x20008700
    d0dc:	200086a8 	.word	0x200086a8
    d0e0:	20003d60 	.word	0x20003d60
    d0e4:	200086fe 	.word	0x200086fe
    d0e8:	20008704 	.word	0x20008704
    d0ec:	2021b240 	.word	0x2021b240
    d0f0:	402e0000 	.word	0x402e0000
    d0f4:	200086e4 	.word	0x200086e4
    d0f8:	200086fd 	.word	0x200086fd

0000d0fc <usb_serial_reset>:
}
    d0fc:	4770      	bx	lr
    d0fe:	bf00      	nop

0000d100 <usb_serial_configure>:
	if (usb_high_speed) {
    d100:	4b2d      	ldr	r3, [pc, #180]	; (d1b8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d102:	2100      	movs	r1, #0
    d104:	2280      	movs	r2, #128	; 0x80
    d106:	482d      	ldr	r0, [pc, #180]	; (d1bc <usb_serial_configure+0xbc>)
{
    d108:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    d10a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    d10c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    d10e:	4d2c      	ldr	r5, [pc, #176]	; (d1c0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    d110:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    d112:	4e2c      	ldr	r6, [pc, #176]	; (d1c4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    d114:	bf0c      	ite	eq
    d116:	2340      	moveq	r3, #64	; 0x40
    d118:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    d11c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    d11e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d120:	f001 fa3e 	bl	e5a0 <memset>
	tx_head = 0;
    d124:	4a28      	ldr	r2, [pc, #160]	; (d1c8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d126:	4621      	mov	r1, r4
	tx_available = 0;
    d128:	4b28      	ldr	r3, [pc, #160]	; (d1cc <usb_serial_configure+0xcc>)
	tx_head = 0;
    d12a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d12c:	f44f 7280 	mov.w	r2, #256	; 0x100
    d130:	4827      	ldr	r0, [pc, #156]	; (d1d0 <usb_serial_configure+0xd0>)
	tx_available = 0;
    d132:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d134:	f001 fa34 	bl	e5a0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    d138:	4a26      	ldr	r2, [pc, #152]	; (d1d4 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d13a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    d13c:	4b26      	ldr	r3, [pc, #152]	; (d1d8 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d13e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    d140:	e9c2 4400 	strd	r4, r4, [r2]
    d144:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    d148:	4a24      	ldr	r2, [pc, #144]	; (d1dc <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    d14a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    d14e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    d150:	4a23      	ldr	r2, [pc, #140]	; (d1e0 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    d152:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    d156:	4b23      	ldr	r3, [pc, #140]	; (d1e4 <usb_serial_configure+0xe4>)
    d158:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d15a:	4623      	mov	r3, r4
	rx_available = 0;
    d15c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d15e:	4622      	mov	r2, r4
    d160:	f7ff fd70 	bl	cc44 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    d164:	4622      	mov	r2, r4
    d166:	8831      	ldrh	r1, [r6, #0]
    d168:	2003      	movs	r0, #3
    d16a:	4b1f      	ldr	r3, [pc, #124]	; (d1e8 <usb_serial_configure+0xe8>)
    d16c:	f7ff fd38 	bl	cbe0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    d170:	4623      	mov	r3, r4
    d172:	2201      	movs	r2, #1
    d174:	8829      	ldrh	r1, [r5, #0]
    d176:	2003      	movs	r0, #3
    d178:	f7ff fd64 	bl	cc44 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d17c:	4620      	mov	r0, r4
    d17e:	3401      	adds	r4, #1
    d180:	f7ff fe0e 	bl	cda0 <rx_queue_transfer>
    d184:	2c08      	cmp	r4, #8
    d186:	d1f9      	bne.n	d17c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    d188:	4b18      	ldr	r3, [pc, #96]	; (d1ec <usb_serial_configure+0xec>)
    d18a:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    d18c:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    d18e:	4818      	ldr	r0, [pc, #96]	; (d1f0 <usb_serial_configure+0xf0>)
    d190:	4c18      	ldr	r4, [pc, #96]	; (d1f4 <usb_serial_configure+0xf4>)
    d192:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    d194:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    d198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    d19c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    d1a0:	4915      	ldr	r1, [pc, #84]	; (d1f8 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    d1a2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    d1a6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    d1aa:	b121      	cbz	r1, d1b6 <usb_serial_configure+0xb6>
    d1ac:	4a13      	ldr	r2, [pc, #76]	; (d1fc <usb_serial_configure+0xfc>)
    d1ae:	7813      	ldrb	r3, [r2, #0]
    d1b0:	f043 0301 	orr.w	r3, r3, #1
    d1b4:	7013      	strb	r3, [r2, #0]
}
    d1b6:	bd70      	pop	{r4, r5, r6, pc}
    d1b8:	20008705 	.word	0x20008705
    d1bc:	20003d60 	.word	0x20003d60
    d1c0:	200086e8 	.word	0x200086e8
    d1c4:	200086e0 	.word	0x200086e0
    d1c8:	200086fe 	.word	0x200086fe
    d1cc:	200086e4 	.word	0x200086e4
    d1d0:	20003b60 	.word	0x20003b60
    d1d4:	200079a0 	.word	0x200079a0
    d1d8:	200079c0 	.word	0x200079c0
    d1dc:	200086f8 	.word	0x200086f8
    d1e0:	20007998 	.word	0x20007998
    d1e4:	200086fa 	.word	0x200086fa
    d1e8:	0000ce01 	.word	0x0000ce01
    d1ec:	402e0000 	.word	0x402e0000
    d1f0:	200086c8 	.word	0x200086c8
    d1f4:	0000ceb5 	.word	0x0000ceb5
    d1f8:	00000000 	.word	0x00000000
    d1fc:	20008707 	.word	0x20008707

0000d200 <usb_serial_read>:
{
    d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d204:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d208:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    d20c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d2d8 <usb_serial_read+0xd8>
{
    d210:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d212:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    d216:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    d218:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    d21c:	2900      	cmp	r1, #0
    d21e:	d04f      	beq.n	d2c0 <usb_serial_read+0xc0>
    d220:	4680      	mov	r8, r0
    d222:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    d224:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    d226:	f8df 90b4 	ldr.w	r9, [pc, #180]	; d2dc <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    d22a:	4b26      	ldr	r3, [pc, #152]	; (d2c4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    d22c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d230:	4925      	ldr	r1, [pc, #148]	; (d2c8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    d232:	781b      	ldrb	r3, [r3, #0]
    d234:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    d236:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    d23a:	d03f      	beq.n	d2bc <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    d23c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    d23e:	4b23      	ldr	r3, [pc, #140]	; (d2cc <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d240:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    d242:	bf28      	it	cs
    d244:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    d246:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    d248:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d24c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    d250:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    d252:	4b1f      	ldr	r3, [pc, #124]	; (d2d0 <usb_serial_read+0xd0>)
    d254:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    d258:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    d25c:	42aa      	cmp	r2, r5
    d25e:	d21c      	bcs.n	d29a <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    d260:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    d264:	4918      	ldr	r1, [pc, #96]	; (d2c8 <usb_serial_read+0xc8>)
			rx_available -= len;
    d266:	4c1b      	ldr	r4, [pc, #108]	; (d2d4 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    d268:	4461      	add	r1, ip
    d26a:	9201      	str	r2, [sp, #4]
    d26c:	f7fe fe18 	bl	bea0 <memcpy>
			rx_available -= len;
    d270:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    d272:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    d276:	4658      	mov	r0, fp
			rx_index[i] += len;
    d278:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    d27a:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    d27e:	442a      	add	r2, r5
			rx_available -= len;
    d280:	4439      	add	r1, r7
			rx_index[i] += len;
    d282:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    d286:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    d288:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d28c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    d290:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    d294:	b003      	add	sp, #12
    d296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d29a:	462a      	mov	r2, r5
			count += avail;
    d29c:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d29e:	f7fe fdff 	bl	bea0 <memcpy>
			rx_available -= avail;
    d2a2:	490c      	ldr	r1, [pc, #48]	; (d2d4 <usb_serial_read+0xd4>)
			rx_tail = tail;
    d2a4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    d2a6:	4630      	mov	r0, r6
			rx_available -= avail;
    d2a8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    d2aa:	44a8      	add	r8, r5
			rx_available -= avail;
    d2ac:	1b52      	subs	r2, r2, r5
    d2ae:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    d2b0:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    d2b4:	f7ff fd74 	bl	cda0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    d2b8:	45bb      	cmp	fp, r7
    d2ba:	d8b6      	bhi.n	d22a <usb_serial_read+0x2a>
	return count;
    d2bc:	4638      	mov	r0, r7
    d2be:	e7e3      	b.n	d288 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    d2c0:	4608      	mov	r0, r1
    d2c2:	e7e1      	b.n	d288 <usb_serial_read+0x88>
    d2c4:	200086f8 	.word	0x200086f8
    d2c8:	2021a240 	.word	0x2021a240
    d2cc:	200079e0 	.word	0x200079e0
    d2d0:	200079a0 	.word	0x200079a0
    d2d4:	20007998 	.word	0x20007998
    d2d8:	200086fa 	.word	0x200086fa
    d2dc:	200079c0 	.word	0x200079c0

0000d2e0 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    d2e0:	4b0b      	ldr	r3, [pc, #44]	; (d310 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    d2e2:	4a0c      	ldr	r2, [pc, #48]	; (d314 <usb_serial_peekchar+0x34>)
    d2e4:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    d2e6:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    d2e8:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    d2ea:	428a      	cmp	r2, r1
    d2ec:	d00d      	beq.n	d30a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    d2ee:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    d2f0:	4809      	ldr	r0, [pc, #36]	; (d318 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    d2f2:	4a0a      	ldr	r2, [pc, #40]	; (d31c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    d2f4:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    d2f6:	490a      	ldr	r1, [pc, #40]	; (d320 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    d2f8:	bf28      	it	cs
    d2fa:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    d2fc:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    d2fe:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    d302:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    d306:	5c58      	ldrb	r0, [r3, r1]
    d308:	4770      	bx	lr
	if (tail == rx_head) return -1;
    d30a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    d30e:	4770      	bx	lr
    d310:	200086f8 	.word	0x200086f8
    d314:	200086fa 	.word	0x200086fa
    d318:	200079e0 	.word	0x200079e0
    d31c:	2021a240 	.word	0x2021a240
    d320:	200079c0 	.word	0x200079c0

0000d324 <usb_serial_available>:
	uint32_t n = rx_available;
    d324:	4b04      	ldr	r3, [pc, #16]	; (d338 <usb_serial_available+0x14>)
{
    d326:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    d328:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    d32a:	b10c      	cbz	r4, d330 <usb_serial_available+0xc>
}
    d32c:	4620      	mov	r0, r4
    d32e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    d330:	f000 fa3e 	bl	d7b0 <yield>
}
    d334:	4620      	mov	r0, r4
    d336:	bd10      	pop	{r4, pc}
    d338:	20007998 	.word	0x20007998

0000d33c <usb_serial_flush_input>:
{
    d33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    d340:	4e14      	ldr	r6, [pc, #80]	; (d394 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    d342:	4d15      	ldr	r5, [pc, #84]	; (d398 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    d344:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    d346:	782a      	ldrb	r2, [r5, #0]
    d348:	4293      	cmp	r3, r2
    d34a:	d021      	beq.n	d390 <usb_serial_flush_input+0x54>
    d34c:	b2dc      	uxtb	r4, r3
    d34e:	f8df 9050 	ldr.w	r9, [pc, #80]	; d3a0 <usb_serial_flush_input+0x64>
    d352:	f8df b050 	ldr.w	fp, [pc, #80]	; d3a4 <usb_serial_flush_input+0x68>
    d356:	f8df 8050 	ldr.w	r8, [pc, #80]	; d3a8 <usb_serial_flush_input+0x6c>
    d35a:	4f10      	ldr	r7, [pc, #64]	; (d39c <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    d35c:	3401      	adds	r4, #1
    d35e:	2c08      	cmp	r4, #8
		rx_tail = tail;
    d360:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    d364:	d901      	bls.n	d36a <usb_serial_flush_input+0x2e>
    d366:	2400      	movs	r4, #0
    d368:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    d36a:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    d36e:	f8db 3000 	ldr.w	r3, [fp]
    d372:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    d376:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    d37a:	1a52      	subs	r2, r2, r1
    d37c:	1a9b      	subs	r3, r3, r2
    d37e:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    d382:	f7ff fd0d 	bl	cda0 <rx_queue_transfer>
		rx_tail = tail;
    d386:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    d38a:	782b      	ldrb	r3, [r5, #0]
    d38c:	42a3      	cmp	r3, r4
    d38e:	d1e5      	bne.n	d35c <usb_serial_flush_input+0x20>
}
    d390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d394:	200086fa 	.word	0x200086fa
    d398:	200086f8 	.word	0x200086f8
    d39c:	200079c0 	.word	0x200079c0
    d3a0:	200079e0 	.word	0x200079e0
    d3a4:	20007998 	.word	0x20007998
    d3a8:	200079a0 	.word	0x200079a0

0000d3ac <usb_serial_getchar>:
{
    d3ac:	b500      	push	{lr}
    d3ae:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    d3b0:	2101      	movs	r1, #1
    d3b2:	f10d 0007 	add.w	r0, sp, #7
    d3b6:	f7ff ff23 	bl	d200 <usb_serial_read>
    d3ba:	b120      	cbz	r0, d3c6 <usb_serial_getchar+0x1a>
    d3bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    d3c0:	b003      	add	sp, #12
    d3c2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    d3c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d3ca:	e7f9      	b.n	d3c0 <usb_serial_getchar+0x14>

0000d3cc <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    d3cc:	4b09      	ldr	r3, [pc, #36]	; (d3f4 <usb_serial_putchar+0x28>)
{
    d3ce:	b500      	push	{lr}
    d3d0:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    d3d2:	781b      	ldrb	r3, [r3, #0]
{
    d3d4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    d3d8:	b13b      	cbz	r3, d3ea <usb_serial_putchar+0x1e>
    d3da:	2101      	movs	r1, #1
    d3dc:	f10d 0007 	add.w	r0, sp, #7
    d3e0:	f7ff fdb0 	bl	cf44 <usb_serial_write.part.0>
}
    d3e4:	b003      	add	sp, #12
    d3e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ea:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    d3ee:	b003      	add	sp, #12
    d3f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d3f4:	20008704 	.word	0x20008704

0000d3f8 <usb_serial_write>:
	if (!usb_configuration) return 0;
    d3f8:	4b04      	ldr	r3, [pc, #16]	; (d40c <usb_serial_write+0x14>)
    d3fa:	781b      	ldrb	r3, [r3, #0]
    d3fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    d400:	b10b      	cbz	r3, d406 <usb_serial_write+0xe>
    d402:	f7ff bd9f 	b.w	cf44 <usb_serial_write.part.0>
}
    d406:	4610      	mov	r0, r2
    d408:	4770      	bx	lr
    d40a:	bf00      	nop
    d40c:	20008704 	.word	0x20008704

0000d410 <usb_serial_write_buffer_free>:
{
    d410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    d414:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    d416:	f8df 8044 	ldr.w	r8, [pc, #68]	; d45c <usb_serial_write_buffer_free+0x4c>
    d41a:	2301      	movs	r3, #1
    d41c:	4d0d      	ldr	r5, [pc, #52]	; (d454 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    d41e:	4627      	mov	r7, r4
    d420:	4e0d      	ldr	r6, [pc, #52]	; (d458 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    d422:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    d426:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    d428:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    d42a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    d42c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    d42e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    d432:	d005      	beq.n	d440 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    d434:	f7ff fc72 	bl	cd1c <usb_transfer_status>
    d438:	0603      	lsls	r3, r0, #24
    d43a:	bf58      	it	pl
    d43c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    d440:	2c04      	cmp	r4, #4
    d442:	d1f0      	bne.n	d426 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    d444:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    d448:	2300      	movs	r3, #0
}
    d44a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    d44c:	f888 3000 	strb.w	r3, [r8]
}
    d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d454:	20003d60 	.word	0x20003d60
    d458:	200086fe 	.word	0x200086fe
    d45c:	20008700 	.word	0x20008700

0000d460 <usb_serial_flush_output>:
{
    d460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    d464:	4b1d      	ldr	r3, [pc, #116]	; (d4dc <usb_serial_flush_output+0x7c>)
    d466:	781b      	ldrb	r3, [r3, #0]
    d468:	b113      	cbz	r3, d470 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    d46a:	4d1d      	ldr	r5, [pc, #116]	; (d4e0 <usb_serial_flush_output+0x80>)
    d46c:	882a      	ldrh	r2, [r5, #0]
    d46e:	b90a      	cbnz	r2, d474 <usb_serial_flush_output+0x14>
}
    d470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    d474:	4e1b      	ldr	r6, [pc, #108]	; (d4e4 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    d476:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    d47a:	491b      	ldr	r1, [pc, #108]	; (d4e8 <usb_serial_flush_output+0x88>)
    d47c:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d47e:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d480:	4c1a      	ldr	r4, [pc, #104]	; (d4ec <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    d482:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    d486:	4f1a      	ldr	r7, [pc, #104]	; (d4f0 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d488:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    d48c:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d48e:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    d490:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d492:	4621      	mov	r1, r4
    d494:	2300      	movs	r3, #0
    d496:	f7ff fc07 	bl	cca8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    d49a:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    d49e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    d4a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d4a6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    d4aa:	3420      	adds	r4, #32
	} while (location < end_addr);
    d4ac:	42a2      	cmp	r2, r4
    d4ae:	d8fa      	bhi.n	d4a6 <usb_serial_flush_output+0x46>
	asm("dsb");
    d4b0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d4b4:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    d4b8:	2003      	movs	r0, #3
    d4ba:	4641      	mov	r1, r8
    d4bc:	f7ff fc0c 	bl	ccd8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    d4c0:	7833      	ldrb	r3, [r6, #0]
    d4c2:	3301      	adds	r3, #1
    d4c4:	b2db      	uxtb	r3, r3
    d4c6:	2b03      	cmp	r3, #3
    d4c8:	bf88      	it	hi
    d4ca:	2300      	movhi	r3, #0
    d4cc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    d4ce:	2300      	movs	r3, #0
    d4d0:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    d4d2:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    d4d6:	703b      	strb	r3, [r7, #0]
}
    d4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d4dc:	20008704 	.word	0x20008704
    d4e0:	200086e4 	.word	0x200086e4
    d4e4:	200086fe 	.word	0x200086fe
    d4e8:	20003d60 	.word	0x20003d60
    d4ec:	2021b240 	.word	0x2021b240
    d4f0:	20008700 	.word	0x20008700

0000d4f4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    d4f6:	4c14      	ldr	r4, [pc, #80]	; (d548 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d4f8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d4fc:	4e13      	ldr	r6, [pc, #76]	; (d54c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d4fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    d502:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d506:	4f12      	ldr	r7, [pc, #72]	; (d550 <rx_queue_transfer+0x5c>)
    d508:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    d50c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d50e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d512:	4621      	mov	r1, r4
    d514:	883a      	ldrh	r2, [r7, #0]
    d516:	4630      	mov	r0, r6
    d518:	f7ff fbc6 	bl	cca8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    d51c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    d51e:	4423      	add	r3, r4
	asm("dsb");
    d520:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    d524:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    d528:	3420      	adds	r4, #32
	} while (location < end_addr);
    d52a:	42a3      	cmp	r3, r4
    d52c:	d8fa      	bhi.n	d524 <rx_queue_transfer+0x30>
	asm("dsb");
    d52e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d532:	f3bf 8f6f 	isb	sy
	usb_receive(CDC2_RX_ENDPOINT, rx_transfer + i);
    d536:	2005      	movs	r0, #5
    d538:	4631      	mov	r1, r6
    d53a:	f7ff fbe1 	bl	cd00 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    d53e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    d542:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    d546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d548:	2021d240 	.word	0x2021d240
    d54c:	20003c60 	.word	0x20003c60
    d550:	200086e2 	.word	0x200086e2

0000d554 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d554:	4b24      	ldr	r3, [pc, #144]	; (d5e8 <rx_event+0x94>)
{
    d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d55a:	881c      	ldrh	r4, [r3, #0]
    d55c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    d55e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d560:	f3c3 430e 	ubfx	r3, r3, #16, #15
    d564:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    d566:	2c00      	cmp	r4, #0
    d568:	dd24      	ble.n	d5b4 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    d56a:	4920      	ldr	r1, [pc, #128]	; (d5ec <rx_event+0x98>)
		if (head != rx_tail) {
    d56c:	4820      	ldr	r0, [pc, #128]	; (d5f0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    d56e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    d570:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    d572:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    d574:	4e1f      	ldr	r6, [pc, #124]	; (d5f4 <rx_event+0xa0>)
		if (head != rx_tail) {
    d576:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    d578:	481f      	ldr	r0, [pc, #124]	; (d5f8 <rx_event+0xa4>)
		if (head != rx_tail) {
    d57a:	d007      	beq.n	d58c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    d57c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    d580:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    d584:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    d588:	4294      	cmp	r4, r2
    d58a:	d918      	bls.n	d5be <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    d58c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    d58e:	2200      	movs	r2, #0
		rx_count[i] = len;
    d590:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    d594:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    d596:	4e19      	ldr	r6, [pc, #100]	; (d5fc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    d598:	bf88      	it	hi
    d59a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    d59c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    d5a0:	bf98      	it	ls
    d5a2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    d5a4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    d5a6:	4b16      	ldr	r3, [pc, #88]	; (d600 <rx_event+0xac>)
		rx_head = head;
    d5a8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    d5aa:	681a      	ldr	r2, [r3, #0]
    d5ac:	4414      	add	r4, r2
    d5ae:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    d5b4:	4628      	mov	r0, r5
}
    d5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    d5ba:	f7ff bf9b 	b.w	d4f4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    d5be:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    d5c2:	4910      	ldr	r1, [pc, #64]	; (d604 <rx_event+0xb0>)
    d5c4:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    d5c6:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    d5c8:	4408      	add	r0, r1
    d5ca:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    d5ce:	f7fe fc67 	bl	bea0 <memcpy>
				rx_available += len;
    d5d2:	4a0b      	ldr	r2, [pc, #44]	; (d600 <rx_event+0xac>)
				rx_queue_transfer(i);
    d5d4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    d5d6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    d5da:	6813      	ldr	r3, [r2, #0]
    d5dc:	4423      	add	r3, r4
}
    d5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    d5e2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    d5e4:	f7ff bf86 	b.w	d4f4 <rx_queue_transfer>
    d5e8:	200086e2 	.word	0x200086e2
    d5ec:	200086f9 	.word	0x200086f9
    d5f0:	200086fb 	.word	0x200086fb
    d5f4:	200079b0 	.word	0x200079b0
    d5f8:	200079ec 	.word	0x200079ec
    d5fc:	200079d0 	.word	0x200079d0
    d600:	2000799c 	.word	0x2000799c
    d604:	2021d240 	.word	0x2021d240

0000d608 <usb_serial2_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial2_flush_callback(void)
{
	if (tx_noautoflush) return;
    d608:	4b1d      	ldr	r3, [pc, #116]	; (d680 <usb_serial2_flush_callback+0x78>)
    d60a:	781a      	ldrb	r2, [r3, #0]
    d60c:	2a00      	cmp	r2, #0
    d60e:	d136      	bne.n	d67e <usb_serial2_flush_callback+0x76>
	if (!usb_configuration) return;
    d610:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    d614:	4a1b      	ldr	r2, [pc, #108]	; (d684 <usb_serial2_flush_callback+0x7c>)
    d616:	7812      	ldrb	r2, [r2, #0]
    d618:	b38a      	cbz	r2, d67e <usb_serial2_flush_callback+0x76>
{
    d61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    d61e:	4d1a      	ldr	r5, [pc, #104]	; (d688 <usb_serial2_flush_callback+0x80>)
    d620:	882a      	ldrh	r2, [r5, #0]
    d622:	b352      	cbz	r2, d67a <usb_serial2_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    d624:	4e19      	ldr	r6, [pc, #100]	; (d68c <usb_serial2_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    d626:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    d62a:	4f19      	ldr	r7, [pc, #100]	; (d690 <usb_serial2_flush_callback+0x88>)
    d62c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d62e:	4c19      	ldr	r4, [pc, #100]	; (d694 <usb_serial2_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    d630:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d634:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d638:	4642      	mov	r2, r8
    d63a:	4638      	mov	r0, r7
    d63c:	4621      	mov	r1, r4
    d63e:	f7ff fb33 	bl	cca8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    d642:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    d646:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    d64a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d64e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    d652:	3420      	adds	r4, #32
	} while (location < end_addr);
    d654:	42a2      	cmp	r2, r4
    d656:	d8fa      	bhi.n	d64e <usb_serial2_flush_callback+0x46>
	asm("dsb");
    d658:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d65c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC2_TX_ENDPOINT, xfer);
    d660:	2005      	movs	r0, #5
    d662:	4639      	mov	r1, r7
    d664:	f7ff fb38 	bl	ccd8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    d668:	7833      	ldrb	r3, [r6, #0]
    d66a:	3301      	adds	r3, #1
    d66c:	b2db      	uxtb	r3, r3
    d66e:	2b03      	cmp	r3, #3
    d670:	bf88      	it	hi
    d672:	2300      	movhi	r3, #0
    d674:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    d676:	2300      	movs	r3, #0
    d678:	802b      	strh	r3, [r5, #0]
}
    d67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d67e:	4770      	bx	lr
    d680:	20008701 	.word	0x20008701
    d684:	20008704 	.word	0x20008704
    d688:	200086e6 	.word	0x200086e6
    d68c:	200086ff 	.word	0x200086ff
    d690:	20003de0 	.word	0x20003de0
    d694:	2021e240 	.word	0x2021e240

0000d698 <usb_serial2_configure>:
	if (usb_high_speed) {
    d698:	4b2d      	ldr	r3, [pc, #180]	; (d750 <usb_serial2_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d69a:	2100      	movs	r1, #0
    d69c:	2280      	movs	r2, #128	; 0x80
    d69e:	482d      	ldr	r0, [pc, #180]	; (d754 <usb_serial2_configure+0xbc>)
{
    d6a0:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    d6a2:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    d6a4:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    d6a6:	4d2c      	ldr	r5, [pc, #176]	; (d758 <usb_serial2_configure+0xc0>)
	if (usb_high_speed) {
    d6a8:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    d6aa:	4e2c      	ldr	r6, [pc, #176]	; (d75c <usb_serial2_configure+0xc4>)
	if (usb_high_speed) {
    d6ac:	bf0c      	ite	eq
    d6ae:	2340      	moveq	r3, #64	; 0x40
    d6b0:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    d6b4:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    d6b6:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d6b8:	f000 ff72 	bl	e5a0 <memset>
	tx_head = 0;
    d6bc:	4a28      	ldr	r2, [pc, #160]	; (d760 <usb_serial2_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d6be:	4621      	mov	r1, r4
	tx_available = 0;
    d6c0:	4b28      	ldr	r3, [pc, #160]	; (d764 <usb_serial2_configure+0xcc>)
	tx_head = 0;
    d6c2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d6c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    d6c8:	4827      	ldr	r0, [pc, #156]	; (d768 <usb_serial2_configure+0xd0>)
	tx_available = 0;
    d6ca:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d6cc:	f000 ff68 	bl	e5a0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    d6d0:	4a26      	ldr	r2, [pc, #152]	; (d76c <usb_serial2_configure+0xd4>)
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d6d2:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    d6d4:	4b26      	ldr	r3, [pc, #152]	; (d770 <usb_serial2_configure+0xd8>)
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d6d6:	2004      	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    d6d8:	e9c2 4400 	strd	r4, r4, [r2]
    d6dc:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    d6e0:	4a24      	ldr	r2, [pc, #144]	; (d774 <usb_serial2_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    d6e2:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    d6e6:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    d6e8:	4a23      	ldr	r2, [pc, #140]	; (d778 <usb_serial2_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    d6ea:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    d6ee:	4b23      	ldr	r3, [pc, #140]	; (d77c <usb_serial2_configure+0xe4>)
    d6f0:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d6f2:	4623      	mov	r3, r4
	rx_available = 0;
    d6f4:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d6f6:	4622      	mov	r2, r4
    d6f8:	f7ff faa4 	bl	cc44 <usb_config_tx>
	usb_config_rx(CDC2_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    d6fc:	4622      	mov	r2, r4
    d6fe:	8831      	ldrh	r1, [r6, #0]
    d700:	2005      	movs	r0, #5
    d702:	4b1f      	ldr	r3, [pc, #124]	; (d780 <usb_serial2_configure+0xe8>)
    d704:	f7ff fa6c 	bl	cbe0 <usb_config_rx>
	usb_config_tx(CDC2_TX_ENDPOINT, tx_packet_size, 1, NULL);
    d708:	4623      	mov	r3, r4
    d70a:	2201      	movs	r2, #1
    d70c:	8829      	ldrh	r1, [r5, #0]
    d70e:	2005      	movs	r0, #5
    d710:	f7ff fa98 	bl	cc44 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d714:	4620      	mov	r0, r4
    d716:	3401      	adds	r4, #1
    d718:	f7ff feec 	bl	d4f4 <rx_queue_transfer>
    d71c:	2c08      	cmp	r4, #8
    d71e:	d1f9      	bne.n	d714 <usb_serial2_configure+0x7c>
	USB1_GPTIMER1CTRL = 0;
    d720:	4b18      	ldr	r3, [pc, #96]	; (d784 <usb_serial2_configure+0xec>)
    d722:	2100      	movs	r1, #0
	USB1_GPTIMER1LD = microseconds - 1;
    d724:	224a      	movs	r2, #74	; 0x4a
	usb_timer1_callback = callback;
    d726:	4818      	ldr	r0, [pc, #96]	; (d788 <usb_serial2_configure+0xf0>)
    d728:	4c18      	ldr	r4, [pc, #96]	; (d78c <usb_serial2_configure+0xf4>)
    d72a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER1CTRL = 0;
    d72c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
	USB1_GPTIMER1LD = microseconds - 1;
    d730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	USB1_USBINTR |= USB_USBINTR_TIE1;
    d734:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEventUSB1) yield_active_check_flags |= YIELD_CHECK_USB_SERIALUSB1;
    d738:	4915      	ldr	r1, [pc, #84]	; (d790 <usb_serial2_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE1;
    d73a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    d73e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEventUSB1) yield_active_check_flags |= YIELD_CHECK_USB_SERIALUSB1;
    d742:	b121      	cbz	r1, d74e <usb_serial2_configure+0xb6>
    d744:	4a13      	ldr	r2, [pc, #76]	; (d794 <usb_serial2_configure+0xfc>)
    d746:	7813      	ldrb	r3, [r2, #0]
    d748:	f043 0308 	orr.w	r3, r3, #8
    d74c:	7013      	strb	r3, [r2, #0]
}
    d74e:	bd70      	pop	{r4, r5, r6, pc}
    d750:	20008705 	.word	0x20008705
    d754:	20003de0 	.word	0x20003de0
    d758:	200086ea 	.word	0x200086ea
    d75c:	200086e2 	.word	0x200086e2
    d760:	200086ff 	.word	0x200086ff
    d764:	200086e6 	.word	0x200086e6
    d768:	20003c60 	.word	0x20003c60
    d76c:	200079b0 	.word	0x200079b0
    d770:	200079d0 	.word	0x200079d0
    d774:	200086f9 	.word	0x200086f9
    d778:	2000799c 	.word	0x2000799c
    d77c:	200086fb 	.word	0x200086fb
    d780:	0000d555 	.word	0x0000d555
    d784:	402e0000 	.word	0x402e0000
    d788:	200086cc 	.word	0x200086cc
    d78c:	0000d609 	.word	0x0000d609
    d790:	00000000 	.word	0x00000000
    d794:	20008707 	.word	0x20008707

0000d798 <usb_serial2_available>:
	uint32_t n = rx_available;
    d798:	4b04      	ldr	r3, [pc, #16]	; (d7ac <usb_serial2_available+0x14>)
{
    d79a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    d79c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    d79e:	b10c      	cbz	r4, d7a4 <usb_serial2_available+0xc>
}
    d7a0:	4620      	mov	r0, r4
    d7a2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    d7a4:	f000 f804 	bl	d7b0 <yield>
}
    d7a8:	4620      	mov	r0, r4
    d7aa:	bd10      	pop	{r4, pc}
    d7ac:	2000799c 	.word	0x2000799c

0000d7b0 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    d7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    d7b4:	4b32      	ldr	r3, [pc, #200]	; (d880 <yield+0xd0>)
    d7b6:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    d7b8:	b176      	cbz	r6, d7d8 <yield+0x28>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    d7ba:	4f32      	ldr	r7, [pc, #200]	; (d884 <yield+0xd4>)
    d7bc:	783b      	ldrb	r3, [r7, #0]
    d7be:	b95b      	cbnz	r3, d7d8 <yield+0x28>
	running = 1;
    d7c0:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    d7c2:	07f0      	lsls	r0, r6, #31
	running = 1;
    d7c4:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    d7c6:	d44c      	bmi.n	d862 <yield+0xb2>
		if (Serial.available()) serialEvent();
	}

#if defined(USB_DUAL_SERIAL) || defined(USB_TRIPLE_SERIAL)
	if (check_flags & YIELD_CHECK_USB_SERIALUSB1) {
    d7c8:	0731      	lsls	r1, r6, #28
    d7ca:	d443      	bmi.n	d854 <yield+0xa4>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    d7cc:	07b2      	lsls	r2, r6, #30
    d7ce:	d426      	bmi.n	d81e <yield+0x6e>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    d7d0:	2300      	movs	r3, #0
    d7d2:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    d7d4:	0773      	lsls	r3, r6, #29
    d7d6:	d401      	bmi.n	d7dc <yield+0x2c>
		EventResponder::runFromYield();
	}
};
    d7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    d7dc:	4b2a      	ldr	r3, [pc, #168]	; (d888 <yield+0xd8>)
    d7de:	681a      	ldr	r2, [r3, #0]
    d7e0:	2a00      	cmp	r2, #0
    d7e2:	d0f9      	beq.n	d7d8 <yield+0x28>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d7e4:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    d7e8:	2a00      	cmp	r2, #0
    d7ea:	d1f5      	bne.n	d7d8 <yield+0x28>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d7ec:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    d7f0:	b672      	cpsid	i
		EventResponder *first = firstYield;
    d7f2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    d7f4:	2800      	cmp	r0, #0
    d7f6:	d03b      	beq.n	d870 <yield+0xc0>
		if (runningFromYield) {
    d7f8:	4c24      	ldr	r4, [pc, #144]	; (d88c <yield+0xdc>)
    d7fa:	7821      	ldrb	r1, [r4, #0]
    d7fc:	2900      	cmp	r1, #0
    d7fe:	d137      	bne.n	d870 <yield+0xc0>
		runningFromYield = true;
    d800:	2201      	movs	r2, #1
    d802:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    d804:	6942      	ldr	r2, [r0, #20]
    d806:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    d808:	2a00      	cmp	r2, #0
    d80a:	d035      	beq.n	d878 <yield+0xc8>
			firstYield->_prev = nullptr;
    d80c:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    d80e:	b905      	cbnz	r5, d812 <yield+0x62>
    d810:	b662      	cpsie	i
		first->_triggered = false;
    d812:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    d814:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    d816:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    d818:	4798      	blx	r3
		runningFromYield = false;
    d81a:	7025      	strb	r5, [r4, #0]
    d81c:	e7dc      	b.n	d7d8 <yield+0x28>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d81e:	f8df 8074 	ldr.w	r8, [pc, #116]	; d894 <yield+0xe4>
    d822:	f898 3000 	ldrb.w	r3, [r8]
    d826:	2b00      	cmp	r3, #0
    d828:	d0d2      	beq.n	d7d0 <yield+0x20>
    d82a:	2500      	movs	r5, #0
    d82c:	f8df 9068 	ldr.w	r9, [pc, #104]	; d898 <yield+0xe8>
    d830:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    d832:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d836:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    d838:	6823      	ldr	r3, [r4, #0]
    d83a:	4620      	mov	r0, r4
    d83c:	691b      	ldr	r3, [r3, #16]
    d83e:	4798      	blx	r3
    d840:	b110      	cbz	r0, d848 <yield+0x98>
    d842:	6963      	ldr	r3, [r4, #20]
    d844:	689b      	ldr	r3, [r3, #8]
    d846:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d848:	f898 2000 	ldrb.w	r2, [r8]
    d84c:	b2eb      	uxtb	r3, r5
    d84e:	429a      	cmp	r2, r3
    d850:	d8ef      	bhi.n	d832 <yield+0x82>
    d852:	e7bd      	b.n	d7d0 <yield+0x20>
                        // sketch still gets to run normally after this wait time.
                        //if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
                //}
        }
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial2_available(); }
    d854:	f7ff ffa0 	bl	d798 <usb_serial2_available>
		if (SerialUSB1.available()) serialEventUSB1();
    d858:	2800      	cmp	r0, #0
    d85a:	d0b7      	beq.n	d7cc <yield+0x1c>
    d85c:	f3af 8000 	nop.w
    d860:	e7b4      	b.n	d7cc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    d862:	f7ff fd5f 	bl	d324 <usb_serial_available>
		if (Serial.available()) serialEvent();
    d866:	2800      	cmp	r0, #0
    d868:	d0ae      	beq.n	d7c8 <yield+0x18>
    d86a:	f3af 8000 	nop.w
    d86e:	e7ab      	b.n	d7c8 <yield+0x18>
		if (doit) __enable_irq();
    d870:	2d00      	cmp	r5, #0
    d872:	d1b1      	bne.n	d7d8 <yield+0x28>
    d874:	b662      	cpsie	i
    d876:	e7af      	b.n	d7d8 <yield+0x28>
			lastYield = nullptr;
    d878:	4b05      	ldr	r3, [pc, #20]	; (d890 <yield+0xe0>)
    d87a:	601a      	str	r2, [r3, #0]
    d87c:	e7c7      	b.n	d80e <yield+0x5e>
    d87e:	bf00      	nop
    d880:	20008707 	.word	0x20008707
    d884:	200086f5 	.word	0x200086f5
    d888:	20004830 	.word	0x20004830
    d88c:	200086f3 	.word	0x200086f3
    d890:	2000483c 	.word	0x2000483c
    d894:	200086f4 	.word	0x200086f4
    d898:	200048b8 	.word	0x200048b8

0000d89c <__aeabi_atexit>:
    d89c:	4603      	mov	r3, r0
    d89e:	4608      	mov	r0, r1
    d8a0:	4619      	mov	r1, r3
    d8a2:	f000 bf7f 	b.w	e7a4 <__cxa_atexit>
    d8a6:	bf00      	nop

0000d8a8 <malloc>:
    d8a8:	4b02      	ldr	r3, [pc, #8]	; (d8b4 <malloc+0xc>)
    d8aa:	4601      	mov	r1, r0
    d8ac:	6818      	ldr	r0, [r3, #0]
    d8ae:	f000 b80b 	b.w	d8c8 <_malloc_r>
    d8b2:	bf00      	nop
    d8b4:	200034c0 	.word	0x200034c0

0000d8b8 <free>:
    d8b8:	4b02      	ldr	r3, [pc, #8]	; (d8c4 <free+0xc>)
    d8ba:	4601      	mov	r1, r0
    d8bc:	6818      	ldr	r0, [r3, #0]
    d8be:	f001 baa1 	b.w	ee04 <_free_r>
    d8c2:	bf00      	nop
    d8c4:	200034c0 	.word	0x200034c0

0000d8c8 <_malloc_r>:
    d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8cc:	f101 060b 	add.w	r6, r1, #11
    d8d0:	2e16      	cmp	r6, #22
    d8d2:	b083      	sub	sp, #12
    d8d4:	4604      	mov	r4, r0
    d8d6:	d824      	bhi.n	d922 <_malloc_r+0x5a>
    d8d8:	2910      	cmp	r1, #16
    d8da:	f200 80ba 	bhi.w	da52 <_malloc_r+0x18a>
    d8de:	f000 faa3 	bl	de28 <__malloc_lock>
    d8e2:	2610      	movs	r6, #16
    d8e4:	2218      	movs	r2, #24
    d8e6:	2002      	movs	r0, #2
    d8e8:	4fb5      	ldr	r7, [pc, #724]	; (dbc0 <_malloc_r+0x2f8>)
    d8ea:	443a      	add	r2, r7
    d8ec:	f1a2 0108 	sub.w	r1, r2, #8
    d8f0:	6853      	ldr	r3, [r2, #4]
    d8f2:	428b      	cmp	r3, r1
    d8f4:	f000 80ba 	beq.w	da6c <_malloc_r+0x1a4>
    d8f8:	685a      	ldr	r2, [r3, #4]
    d8fa:	68d9      	ldr	r1, [r3, #12]
    d8fc:	f022 0203 	bic.w	r2, r2, #3
    d900:	441a      	add	r2, r3
    d902:	689d      	ldr	r5, [r3, #8]
    d904:	60e9      	str	r1, [r5, #12]
    d906:	608d      	str	r5, [r1, #8]
    d908:	6851      	ldr	r1, [r2, #4]
    d90a:	f041 0101 	orr.w	r1, r1, #1
    d90e:	4620      	mov	r0, r4
    d910:	6051      	str	r1, [r2, #4]
    d912:	f103 0508 	add.w	r5, r3, #8
    d916:	f000 fa8d 	bl	de34 <__malloc_unlock>
    d91a:	4628      	mov	r0, r5
    d91c:	b003      	add	sp, #12
    d91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d922:	f036 0607 	bics.w	r6, r6, #7
    d926:	f100 8094 	bmi.w	da52 <_malloc_r+0x18a>
    d92a:	42b1      	cmp	r1, r6
    d92c:	f200 8091 	bhi.w	da52 <_malloc_r+0x18a>
    d930:	f000 fa7a 	bl	de28 <__malloc_lock>
    d934:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d938:	f0c0 819a 	bcc.w	dc70 <_malloc_r+0x3a8>
    d93c:	0a73      	lsrs	r3, r6, #9
    d93e:	f000 808f 	beq.w	da60 <_malloc_r+0x198>
    d942:	2b04      	cmp	r3, #4
    d944:	f200 816f 	bhi.w	dc26 <_malloc_r+0x35e>
    d948:	09b3      	lsrs	r3, r6, #6
    d94a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d94e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d952:	00c3      	lsls	r3, r0, #3
    d954:	4f9a      	ldr	r7, [pc, #616]	; (dbc0 <_malloc_r+0x2f8>)
    d956:	443b      	add	r3, r7
    d958:	f1a3 0508 	sub.w	r5, r3, #8
    d95c:	685b      	ldr	r3, [r3, #4]
    d95e:	429d      	cmp	r5, r3
    d960:	d106      	bne.n	d970 <_malloc_r+0xa8>
    d962:	e00c      	b.n	d97e <_malloc_r+0xb6>
    d964:	2900      	cmp	r1, #0
    d966:	f280 8127 	bge.w	dbb8 <_malloc_r+0x2f0>
    d96a:	68db      	ldr	r3, [r3, #12]
    d96c:	429d      	cmp	r5, r3
    d96e:	d006      	beq.n	d97e <_malloc_r+0xb6>
    d970:	685a      	ldr	r2, [r3, #4]
    d972:	f022 0203 	bic.w	r2, r2, #3
    d976:	1b91      	subs	r1, r2, r6
    d978:	290f      	cmp	r1, #15
    d97a:	ddf3      	ble.n	d964 <_malloc_r+0x9c>
    d97c:	4660      	mov	r0, ip
    d97e:	693d      	ldr	r5, [r7, #16]
    d980:	f8df c250 	ldr.w	ip, [pc, #592]	; dbd4 <_malloc_r+0x30c>
    d984:	4565      	cmp	r5, ip
    d986:	d07c      	beq.n	da82 <_malloc_r+0x1ba>
    d988:	686a      	ldr	r2, [r5, #4]
    d98a:	f022 0203 	bic.w	r2, r2, #3
    d98e:	1b93      	subs	r3, r2, r6
    d990:	2b0f      	cmp	r3, #15
    d992:	f300 817b 	bgt.w	dc8c <_malloc_r+0x3c4>
    d996:	2b00      	cmp	r3, #0
    d998:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d99c:	f280 816c 	bge.w	dc78 <_malloc_r+0x3b0>
    d9a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d9a4:	f080 811a 	bcs.w	dbdc <_malloc_r+0x314>
    d9a8:	08d3      	lsrs	r3, r2, #3
    d9aa:	6879      	ldr	r1, [r7, #4]
    d9ac:	3301      	adds	r3, #1
    d9ae:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d9b2:	2201      	movs	r2, #1
    d9b4:	fa02 f20e 	lsl.w	r2, r2, lr
    d9b8:	430a      	orrs	r2, r1
    d9ba:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d9be:	f8c5 e008 	str.w	lr, [r5, #8]
    d9c2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    d9c6:	3908      	subs	r1, #8
    d9c8:	60e9      	str	r1, [r5, #12]
    d9ca:	607a      	str	r2, [r7, #4]
    d9cc:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d9d0:	f8ce 500c 	str.w	r5, [lr, #12]
    d9d4:	1083      	asrs	r3, r0, #2
    d9d6:	2101      	movs	r1, #1
    d9d8:	4099      	lsls	r1, r3
    d9da:	4291      	cmp	r1, r2
    d9dc:	d857      	bhi.n	da8e <_malloc_r+0x1c6>
    d9de:	4211      	tst	r1, r2
    d9e0:	d106      	bne.n	d9f0 <_malloc_r+0x128>
    d9e2:	f020 0003 	bic.w	r0, r0, #3
    d9e6:	0049      	lsls	r1, r1, #1
    d9e8:	4211      	tst	r1, r2
    d9ea:	f100 0004 	add.w	r0, r0, #4
    d9ee:	d0fa      	beq.n	d9e6 <_malloc_r+0x11e>
    d9f0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    d9f4:	464d      	mov	r5, r9
    d9f6:	4686      	mov	lr, r0
    d9f8:	f8d5 800c 	ldr.w	r8, [r5, #12]
    d9fc:	4545      	cmp	r5, r8
    d9fe:	d108      	bne.n	da12 <_malloc_r+0x14a>
    da00:	e11d      	b.n	dc3e <_malloc_r+0x376>
    da02:	2b00      	cmp	r3, #0
    da04:	f280 8124 	bge.w	dc50 <_malloc_r+0x388>
    da08:	f8d8 800c 	ldr.w	r8, [r8, #12]
    da0c:	4545      	cmp	r5, r8
    da0e:	f000 8116 	beq.w	dc3e <_malloc_r+0x376>
    da12:	f8d8 2004 	ldr.w	r2, [r8, #4]
    da16:	f022 0203 	bic.w	r2, r2, #3
    da1a:	1b93      	subs	r3, r2, r6
    da1c:	2b0f      	cmp	r3, #15
    da1e:	ddf0      	ble.n	da02 <_malloc_r+0x13a>
    da20:	4620      	mov	r0, r4
    da22:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    da26:	eb08 0106 	add.w	r1, r8, r6
    da2a:	f046 0601 	orr.w	r6, r6, #1
    da2e:	f8c8 6004 	str.w	r6, [r8, #4]
    da32:	60ec      	str	r4, [r5, #12]
    da34:	60a5      	str	r5, [r4, #8]
    da36:	f043 0401 	orr.w	r4, r3, #1
    da3a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    da3e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    da42:	604c      	str	r4, [r1, #4]
    da44:	f848 3002 	str.w	r3, [r8, r2]
    da48:	f000 f9f4 	bl	de34 <__malloc_unlock>
    da4c:	f108 0508 	add.w	r5, r8, #8
    da50:	e002      	b.n	da58 <_malloc_r+0x190>
    da52:	230c      	movs	r3, #12
    da54:	6023      	str	r3, [r4, #0]
    da56:	2500      	movs	r5, #0
    da58:	4628      	mov	r0, r5
    da5a:	b003      	add	sp, #12
    da5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da60:	f44f 7300 	mov.w	r3, #512	; 0x200
    da64:	2040      	movs	r0, #64	; 0x40
    da66:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    da6a:	e773      	b.n	d954 <_malloc_r+0x8c>
    da6c:	68d3      	ldr	r3, [r2, #12]
    da6e:	429a      	cmp	r2, r3
    da70:	bf08      	it	eq
    da72:	3002      	addeq	r0, #2
    da74:	f47f af40 	bne.w	d8f8 <_malloc_r+0x30>
    da78:	693d      	ldr	r5, [r7, #16]
    da7a:	f8df c158 	ldr.w	ip, [pc, #344]	; dbd4 <_malloc_r+0x30c>
    da7e:	4565      	cmp	r5, ip
    da80:	d182      	bne.n	d988 <_malloc_r+0xc0>
    da82:	687a      	ldr	r2, [r7, #4]
    da84:	1083      	asrs	r3, r0, #2
    da86:	2101      	movs	r1, #1
    da88:	4099      	lsls	r1, r3
    da8a:	4291      	cmp	r1, r2
    da8c:	d9a7      	bls.n	d9de <_malloc_r+0x116>
    da8e:	68bd      	ldr	r5, [r7, #8]
    da90:	686b      	ldr	r3, [r5, #4]
    da92:	f023 0903 	bic.w	r9, r3, #3
    da96:	454e      	cmp	r6, r9
    da98:	d803      	bhi.n	daa2 <_malloc_r+0x1da>
    da9a:	eba9 0306 	sub.w	r3, r9, r6
    da9e:	2b0f      	cmp	r3, #15
    daa0:	dc7a      	bgt.n	db98 <_malloc_r+0x2d0>
    daa2:	f8df b134 	ldr.w	fp, [pc, #308]	; dbd8 <_malloc_r+0x310>
    daa6:	4b47      	ldr	r3, [pc, #284]	; (dbc4 <_malloc_r+0x2fc>)
    daa8:	f8db 2000 	ldr.w	r2, [fp]
    daac:	681b      	ldr	r3, [r3, #0]
    daae:	3201      	adds	r2, #1
    dab0:	4433      	add	r3, r6
    dab2:	eb05 0a09 	add.w	sl, r5, r9
    dab6:	f000 8133 	beq.w	dd20 <_malloc_r+0x458>
    daba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    dabe:	330f      	adds	r3, #15
    dac0:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    dac4:	f028 080f 	bic.w	r8, r8, #15
    dac8:	4641      	mov	r1, r8
    daca:	4620      	mov	r0, r4
    dacc:	f000 fe70 	bl	e7b0 <_sbrk_r>
    dad0:	1c41      	adds	r1, r0, #1
    dad2:	4602      	mov	r2, r0
    dad4:	f000 80f3 	beq.w	dcbe <_malloc_r+0x3f6>
    dad8:	4582      	cmp	sl, r0
    dada:	f200 80ee 	bhi.w	dcba <_malloc_r+0x3f2>
    dade:	4b3a      	ldr	r3, [pc, #232]	; (dbc8 <_malloc_r+0x300>)
    dae0:	6819      	ldr	r1, [r3, #0]
    dae2:	4441      	add	r1, r8
    dae4:	6019      	str	r1, [r3, #0]
    dae6:	4608      	mov	r0, r1
    dae8:	f000 814e 	beq.w	dd88 <_malloc_r+0x4c0>
    daec:	f8db 1000 	ldr.w	r1, [fp]
    daf0:	9301      	str	r3, [sp, #4]
    daf2:	3101      	adds	r1, #1
    daf4:	bf1b      	ittet	ne
    daf6:	eba2 010a 	subne.w	r1, r2, sl
    dafa:	1809      	addne	r1, r1, r0
    dafc:	f8cb 2000 	streq.w	r2, [fp]
    db00:	6019      	strne	r1, [r3, #0]
    db02:	f012 0b07 	ands.w	fp, r2, #7
    db06:	f000 8117 	beq.w	dd38 <_malloc_r+0x470>
    db0a:	f1cb 0108 	rsb	r1, fp, #8
    db0e:	440a      	add	r2, r1
    db10:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    db14:	4490      	add	r8, r2
    db16:	3108      	adds	r1, #8
    db18:	eba1 0108 	sub.w	r1, r1, r8
    db1c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    db20:	4651      	mov	r1, sl
    db22:	4620      	mov	r0, r4
    db24:	9200      	str	r2, [sp, #0]
    db26:	f000 fe43 	bl	e7b0 <_sbrk_r>
    db2a:	1c42      	adds	r2, r0, #1
    db2c:	e9dd 2300 	ldrd	r2, r3, [sp]
    db30:	f000 814f 	beq.w	ddd2 <_malloc_r+0x50a>
    db34:	1a80      	subs	r0, r0, r2
    db36:	eb00 080a 	add.w	r8, r0, sl
    db3a:	6819      	ldr	r1, [r3, #0]
    db3c:	60ba      	str	r2, [r7, #8]
    db3e:	f048 0001 	orr.w	r0, r8, #1
    db42:	4451      	add	r1, sl
    db44:	42bd      	cmp	r5, r7
    db46:	6050      	str	r0, [r2, #4]
    db48:	6019      	str	r1, [r3, #0]
    db4a:	f000 8129 	beq.w	dda0 <_malloc_r+0x4d8>
    db4e:	f1b9 0f0f 	cmp.w	r9, #15
    db52:	f240 8127 	bls.w	dda4 <_malloc_r+0x4dc>
    db56:	6868      	ldr	r0, [r5, #4]
    db58:	f1a9 0c0c 	sub.w	ip, r9, #12
    db5c:	f02c 0c07 	bic.w	ip, ip, #7
    db60:	f000 0001 	and.w	r0, r0, #1
    db64:	ea40 000c 	orr.w	r0, r0, ip
    db68:	6068      	str	r0, [r5, #4]
    db6a:	f04f 0e05 	mov.w	lr, #5
    db6e:	eb05 000c 	add.w	r0, r5, ip
    db72:	f1bc 0f0f 	cmp.w	ip, #15
    db76:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    db7a:	f200 8132 	bhi.w	dde2 <_malloc_r+0x51a>
    db7e:	6850      	ldr	r0, [r2, #4]
    db80:	4615      	mov	r5, r2
    db82:	4b12      	ldr	r3, [pc, #72]	; (dbcc <_malloc_r+0x304>)
    db84:	681a      	ldr	r2, [r3, #0]
    db86:	428a      	cmp	r2, r1
    db88:	bf38      	it	cc
    db8a:	6019      	strcc	r1, [r3, #0]
    db8c:	4b10      	ldr	r3, [pc, #64]	; (dbd0 <_malloc_r+0x308>)
    db8e:	681a      	ldr	r2, [r3, #0]
    db90:	428a      	cmp	r2, r1
    db92:	bf38      	it	cc
    db94:	6019      	strcc	r1, [r3, #0]
    db96:	e094      	b.n	dcc2 <_malloc_r+0x3fa>
    db98:	19aa      	adds	r2, r5, r6
    db9a:	f043 0301 	orr.w	r3, r3, #1
    db9e:	f046 0601 	orr.w	r6, r6, #1
    dba2:	606e      	str	r6, [r5, #4]
    dba4:	4620      	mov	r0, r4
    dba6:	60ba      	str	r2, [r7, #8]
    dba8:	6053      	str	r3, [r2, #4]
    dbaa:	f000 f943 	bl	de34 <__malloc_unlock>
    dbae:	3508      	adds	r5, #8
    dbb0:	4628      	mov	r0, r5
    dbb2:	b003      	add	sp, #12
    dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbb8:	68d9      	ldr	r1, [r3, #12]
    dbba:	441a      	add	r2, r3
    dbbc:	e6a1      	b.n	d902 <_malloc_r+0x3a>
    dbbe:	bf00      	nop
    dbc0:	200030a4 	.word	0x200030a4
    dbc4:	20004ab8 	.word	0x20004ab8
    dbc8:	20004a88 	.word	0x20004a88
    dbcc:	20004ab0 	.word	0x20004ab0
    dbd0:	20004ab4 	.word	0x20004ab4
    dbd4:	200030ac 	.word	0x200030ac
    dbd8:	200034ac 	.word	0x200034ac
    dbdc:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    dbe0:	ea4f 2352 	mov.w	r3, r2, lsr #9
    dbe4:	d363      	bcc.n	dcae <_malloc_r+0x3e6>
    dbe6:	2b14      	cmp	r3, #20
    dbe8:	f200 80b7 	bhi.w	dd5a <_malloc_r+0x492>
    dbec:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    dbf0:	00c9      	lsls	r1, r1, #3
    dbf2:	335b      	adds	r3, #91	; 0x5b
    dbf4:	eb07 0e01 	add.w	lr, r7, r1
    dbf8:	5879      	ldr	r1, [r7, r1]
    dbfa:	f1ae 0e08 	sub.w	lr, lr, #8
    dbfe:	458e      	cmp	lr, r1
    dc00:	f000 8091 	beq.w	dd26 <_malloc_r+0x45e>
    dc04:	684b      	ldr	r3, [r1, #4]
    dc06:	f023 0303 	bic.w	r3, r3, #3
    dc0a:	4293      	cmp	r3, r2
    dc0c:	d902      	bls.n	dc14 <_malloc_r+0x34c>
    dc0e:	6889      	ldr	r1, [r1, #8]
    dc10:	458e      	cmp	lr, r1
    dc12:	d1f7      	bne.n	dc04 <_malloc_r+0x33c>
    dc14:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    dc18:	687a      	ldr	r2, [r7, #4]
    dc1a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    dc1e:	f8ce 5008 	str.w	r5, [lr, #8]
    dc22:	60cd      	str	r5, [r1, #12]
    dc24:	e6d6      	b.n	d9d4 <_malloc_r+0x10c>
    dc26:	2b14      	cmp	r3, #20
    dc28:	d959      	bls.n	dcde <_malloc_r+0x416>
    dc2a:	2b54      	cmp	r3, #84	; 0x54
    dc2c:	f200 809d 	bhi.w	dd6a <_malloc_r+0x4a2>
    dc30:	0b33      	lsrs	r3, r6, #12
    dc32:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    dc36:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    dc3a:	00c3      	lsls	r3, r0, #3
    dc3c:	e68a      	b.n	d954 <_malloc_r+0x8c>
    dc3e:	f10e 0e01 	add.w	lr, lr, #1
    dc42:	f01e 0f03 	tst.w	lr, #3
    dc46:	f105 0508 	add.w	r5, r5, #8
    dc4a:	f47f aed5 	bne.w	d9f8 <_malloc_r+0x130>
    dc4e:	e051      	b.n	dcf4 <_malloc_r+0x42c>
    dc50:	4442      	add	r2, r8
    dc52:	4645      	mov	r5, r8
    dc54:	6853      	ldr	r3, [r2, #4]
    dc56:	f8d8 100c 	ldr.w	r1, [r8, #12]
    dc5a:	f043 0301 	orr.w	r3, r3, #1
    dc5e:	6053      	str	r3, [r2, #4]
    dc60:	f855 3f08 	ldr.w	r3, [r5, #8]!
    dc64:	4620      	mov	r0, r4
    dc66:	60d9      	str	r1, [r3, #12]
    dc68:	608b      	str	r3, [r1, #8]
    dc6a:	f000 f8e3 	bl	de34 <__malloc_unlock>
    dc6e:	e6f3      	b.n	da58 <_malloc_r+0x190>
    dc70:	08f0      	lsrs	r0, r6, #3
    dc72:	f106 0208 	add.w	r2, r6, #8
    dc76:	e637      	b.n	d8e8 <_malloc_r+0x20>
    dc78:	442a      	add	r2, r5
    dc7a:	4620      	mov	r0, r4
    dc7c:	6853      	ldr	r3, [r2, #4]
    dc7e:	f043 0301 	orr.w	r3, r3, #1
    dc82:	6053      	str	r3, [r2, #4]
    dc84:	3508      	adds	r5, #8
    dc86:	f000 f8d5 	bl	de34 <__malloc_unlock>
    dc8a:	e6e5      	b.n	da58 <_malloc_r+0x190>
    dc8c:	19a9      	adds	r1, r5, r6
    dc8e:	4620      	mov	r0, r4
    dc90:	f046 0601 	orr.w	r6, r6, #1
    dc94:	f043 0401 	orr.w	r4, r3, #1
    dc98:	606e      	str	r6, [r5, #4]
    dc9a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    dc9e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    dca2:	604c      	str	r4, [r1, #4]
    dca4:	50ab      	str	r3, [r5, r2]
    dca6:	f000 f8c5 	bl	de34 <__malloc_unlock>
    dcaa:	3508      	adds	r5, #8
    dcac:	e6d4      	b.n	da58 <_malloc_r+0x190>
    dcae:	0993      	lsrs	r3, r2, #6
    dcb0:	f103 0139 	add.w	r1, r3, #57	; 0x39
    dcb4:	00c9      	lsls	r1, r1, #3
    dcb6:	3338      	adds	r3, #56	; 0x38
    dcb8:	e79c      	b.n	dbf4 <_malloc_r+0x32c>
    dcba:	42bd      	cmp	r5, r7
    dcbc:	d05f      	beq.n	dd7e <_malloc_r+0x4b6>
    dcbe:	68bd      	ldr	r5, [r7, #8]
    dcc0:	6868      	ldr	r0, [r5, #4]
    dcc2:	f020 0803 	bic.w	r8, r0, #3
    dcc6:	4546      	cmp	r6, r8
    dcc8:	eba8 0306 	sub.w	r3, r8, r6
    dccc:	d802      	bhi.n	dcd4 <_malloc_r+0x40c>
    dcce:	2b0f      	cmp	r3, #15
    dcd0:	f73f af62 	bgt.w	db98 <_malloc_r+0x2d0>
    dcd4:	4620      	mov	r0, r4
    dcd6:	f000 f8ad 	bl	de34 <__malloc_unlock>
    dcda:	2500      	movs	r5, #0
    dcdc:	e6bc      	b.n	da58 <_malloc_r+0x190>
    dcde:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    dce2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    dce6:	00c3      	lsls	r3, r0, #3
    dce8:	e634      	b.n	d954 <_malloc_r+0x8c>
    dcea:	f859 3908 	ldr.w	r3, [r9], #-8
    dcee:	454b      	cmp	r3, r9
    dcf0:	f040 8096 	bne.w	de20 <_malloc_r+0x558>
    dcf4:	f010 0f03 	tst.w	r0, #3
    dcf8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    dcfc:	d1f5      	bne.n	dcea <_malloc_r+0x422>
    dcfe:	687b      	ldr	r3, [r7, #4]
    dd00:	ea23 0301 	bic.w	r3, r3, r1
    dd04:	607b      	str	r3, [r7, #4]
    dd06:	0049      	lsls	r1, r1, #1
    dd08:	4299      	cmp	r1, r3
    dd0a:	f63f aec0 	bhi.w	da8e <_malloc_r+0x1c6>
    dd0e:	b919      	cbnz	r1, dd18 <_malloc_r+0x450>
    dd10:	e6bd      	b.n	da8e <_malloc_r+0x1c6>
    dd12:	0049      	lsls	r1, r1, #1
    dd14:	f10e 0e04 	add.w	lr, lr, #4
    dd18:	4219      	tst	r1, r3
    dd1a:	d0fa      	beq.n	dd12 <_malloc_r+0x44a>
    dd1c:	4670      	mov	r0, lr
    dd1e:	e667      	b.n	d9f0 <_malloc_r+0x128>
    dd20:	f103 0810 	add.w	r8, r3, #16
    dd24:	e6d0      	b.n	dac8 <_malloc_r+0x200>
    dd26:	109a      	asrs	r2, r3, #2
    dd28:	f04f 0801 	mov.w	r8, #1
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	fa08 f202 	lsl.w	r2, r8, r2
    dd32:	431a      	orrs	r2, r3
    dd34:	607a      	str	r2, [r7, #4]
    dd36:	e770      	b.n	dc1a <_malloc_r+0x352>
    dd38:	eb02 0108 	add.w	r1, r2, r8
    dd3c:	4249      	negs	r1, r1
    dd3e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    dd42:	4651      	mov	r1, sl
    dd44:	4620      	mov	r0, r4
    dd46:	9200      	str	r2, [sp, #0]
    dd48:	f000 fd32 	bl	e7b0 <_sbrk_r>
    dd4c:	1c43      	adds	r3, r0, #1
    dd4e:	e9dd 2300 	ldrd	r2, r3, [sp]
    dd52:	f47f aeef 	bne.w	db34 <_malloc_r+0x26c>
    dd56:	46da      	mov	sl, fp
    dd58:	e6ef      	b.n	db3a <_malloc_r+0x272>
    dd5a:	2b54      	cmp	r3, #84	; 0x54
    dd5c:	d825      	bhi.n	ddaa <_malloc_r+0x4e2>
    dd5e:	0b13      	lsrs	r3, r2, #12
    dd60:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    dd64:	00c9      	lsls	r1, r1, #3
    dd66:	336e      	adds	r3, #110	; 0x6e
    dd68:	e744      	b.n	dbf4 <_malloc_r+0x32c>
    dd6a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    dd6e:	d825      	bhi.n	ddbc <_malloc_r+0x4f4>
    dd70:	0bf3      	lsrs	r3, r6, #15
    dd72:	f103 0078 	add.w	r0, r3, #120	; 0x78
    dd76:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    dd7a:	00c3      	lsls	r3, r0, #3
    dd7c:	e5ea      	b.n	d954 <_malloc_r+0x8c>
    dd7e:	4b29      	ldr	r3, [pc, #164]	; (de24 <_malloc_r+0x55c>)
    dd80:	6818      	ldr	r0, [r3, #0]
    dd82:	4440      	add	r0, r8
    dd84:	6018      	str	r0, [r3, #0]
    dd86:	e6b1      	b.n	daec <_malloc_r+0x224>
    dd88:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    dd8c:	f1bc 0f00 	cmp.w	ip, #0
    dd90:	f47f aeac 	bne.w	daec <_malloc_r+0x224>
    dd94:	68bd      	ldr	r5, [r7, #8]
    dd96:	44c8      	add	r8, r9
    dd98:	f048 0001 	orr.w	r0, r8, #1
    dd9c:	6068      	str	r0, [r5, #4]
    dd9e:	e6f0      	b.n	db82 <_malloc_r+0x2ba>
    dda0:	4615      	mov	r5, r2
    dda2:	e6ee      	b.n	db82 <_malloc_r+0x2ba>
    dda4:	2301      	movs	r3, #1
    dda6:	6053      	str	r3, [r2, #4]
    dda8:	e794      	b.n	dcd4 <_malloc_r+0x40c>
    ddaa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ddae:	d823      	bhi.n	ddf8 <_malloc_r+0x530>
    ddb0:	0bd3      	lsrs	r3, r2, #15
    ddb2:	f103 0178 	add.w	r1, r3, #120	; 0x78
    ddb6:	00c9      	lsls	r1, r1, #3
    ddb8:	3377      	adds	r3, #119	; 0x77
    ddba:	e71b      	b.n	dbf4 <_malloc_r+0x32c>
    ddbc:	f240 5254 	movw	r2, #1364	; 0x554
    ddc0:	4293      	cmp	r3, r2
    ddc2:	d823      	bhi.n	de0c <_malloc_r+0x544>
    ddc4:	0cb3      	lsrs	r3, r6, #18
    ddc6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    ddca:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    ddce:	00c3      	lsls	r3, r0, #3
    ddd0:	e5c0      	b.n	d954 <_malloc_r+0x8c>
    ddd2:	f1ab 0b08 	sub.w	fp, fp, #8
    ddd6:	44d8      	add	r8, fp
    ddd8:	eba8 0802 	sub.w	r8, r8, r2
    dddc:	f04f 0a00 	mov.w	sl, #0
    dde0:	e6ab      	b.n	db3a <_malloc_r+0x272>
    dde2:	f105 0108 	add.w	r1, r5, #8
    dde6:	4620      	mov	r0, r4
    dde8:	9300      	str	r3, [sp, #0]
    ddea:	f001 f80b 	bl	ee04 <_free_r>
    ddee:	68bd      	ldr	r5, [r7, #8]
    ddf0:	9b00      	ldr	r3, [sp, #0]
    ddf2:	6868      	ldr	r0, [r5, #4]
    ddf4:	6819      	ldr	r1, [r3, #0]
    ddf6:	e6c4      	b.n	db82 <_malloc_r+0x2ba>
    ddf8:	f240 5154 	movw	r1, #1364	; 0x554
    ddfc:	428b      	cmp	r3, r1
    ddfe:	d80b      	bhi.n	de18 <_malloc_r+0x550>
    de00:	0c93      	lsrs	r3, r2, #18
    de02:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    de06:	00c9      	lsls	r1, r1, #3
    de08:	337c      	adds	r3, #124	; 0x7c
    de0a:	e6f3      	b.n	dbf4 <_malloc_r+0x32c>
    de0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    de10:	207f      	movs	r0, #127	; 0x7f
    de12:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    de16:	e59d      	b.n	d954 <_malloc_r+0x8c>
    de18:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    de1c:	237e      	movs	r3, #126	; 0x7e
    de1e:	e6e9      	b.n	dbf4 <_malloc_r+0x32c>
    de20:	687b      	ldr	r3, [r7, #4]
    de22:	e770      	b.n	dd06 <_malloc_r+0x43e>
    de24:	20004a88 	.word	0x20004a88

0000de28 <__malloc_lock>:
    de28:	4801      	ldr	r0, [pc, #4]	; (de30 <__malloc_lock+0x8>)
    de2a:	f000 be8f 	b.w	eb4c <__retarget_lock_acquire_recursive>
    de2e:	bf00      	nop
    de30:	20004a80 	.word	0x20004a80

0000de34 <__malloc_unlock>:
    de34:	4801      	ldr	r0, [pc, #4]	; (de3c <__malloc_unlock+0x8>)
    de36:	f000 be8b 	b.w	eb50 <__retarget_lock_release_recursive>
    de3a:	bf00      	nop
    de3c:	20004a80 	.word	0x20004a80

0000de40 <_realloc_r>:
    de40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de44:	4617      	mov	r7, r2
    de46:	2900      	cmp	r1, #0
    de48:	f000 8098 	beq.w	df7c <_realloc_r+0x13c>
    de4c:	460c      	mov	r4, r1
    de4e:	f107 050b 	add.w	r5, r7, #11
    de52:	4680      	mov	r8, r0
    de54:	f7ff ffe8 	bl	de28 <__malloc_lock>
    de58:	2d16      	cmp	r5, #22
    de5a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    de5e:	d85b      	bhi.n	df18 <_realloc_r+0xd8>
    de60:	2510      	movs	r5, #16
    de62:	462a      	mov	r2, r5
    de64:	42af      	cmp	r7, r5
    de66:	d85c      	bhi.n	df22 <_realloc_r+0xe2>
    de68:	f021 0603 	bic.w	r6, r1, #3
    de6c:	4296      	cmp	r6, r2
    de6e:	f1a4 0908 	sub.w	r9, r4, #8
    de72:	da62      	bge.n	df3a <_realloc_r+0xfa>
    de74:	4bbc      	ldr	r3, [pc, #752]	; (e168 <_realloc_r+0x328>)
    de76:	f8d3 c008 	ldr.w	ip, [r3, #8]
    de7a:	eb09 0006 	add.w	r0, r9, r6
    de7e:	4584      	cmp	ip, r0
    de80:	f000 8097 	beq.w	dfb2 <_realloc_r+0x172>
    de84:	f8d0 c004 	ldr.w	ip, [r0, #4]
    de88:	f02c 0301 	bic.w	r3, ip, #1
    de8c:	4403      	add	r3, r0
    de8e:	685b      	ldr	r3, [r3, #4]
    de90:	07db      	lsls	r3, r3, #31
    de92:	d468      	bmi.n	df66 <_realloc_r+0x126>
    de94:	f02c 0c03 	bic.w	ip, ip, #3
    de98:	eb06 030c 	add.w	r3, r6, ip
    de9c:	4293      	cmp	r3, r2
    de9e:	da47      	bge.n	df30 <_realloc_r+0xf0>
    dea0:	07cb      	lsls	r3, r1, #31
    dea2:	d410      	bmi.n	dec6 <_realloc_r+0x86>
    dea4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    dea8:	eba9 0a03 	sub.w	sl, r9, r3
    deac:	f8da 3004 	ldr.w	r3, [sl, #4]
    deb0:	f023 0103 	bic.w	r1, r3, #3
    deb4:	448c      	add	ip, r1
    deb6:	44b4      	add	ip, r6
    deb8:	4594      	cmp	ip, r2
    deba:	f280 8111 	bge.w	e0e0 <_realloc_r+0x2a0>
    debe:	1873      	adds	r3, r6, r1
    dec0:	4293      	cmp	r3, r2
    dec2:	f280 80e8 	bge.w	e096 <_realloc_r+0x256>
    dec6:	4639      	mov	r1, r7
    dec8:	4640      	mov	r0, r8
    deca:	f7ff fcfd 	bl	d8c8 <_malloc_r>
    dece:	4607      	mov	r7, r0
    ded0:	b1e0      	cbz	r0, df0c <_realloc_r+0xcc>
    ded2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ded6:	f023 0301 	bic.w	r3, r3, #1
    deda:	444b      	add	r3, r9
    dedc:	f1a0 0208 	sub.w	r2, r0, #8
    dee0:	4293      	cmp	r3, r2
    dee2:	f000 80d2 	beq.w	e08a <_realloc_r+0x24a>
    dee6:	1f32      	subs	r2, r6, #4
    dee8:	2a24      	cmp	r2, #36	; 0x24
    deea:	f200 80f5 	bhi.w	e0d8 <_realloc_r+0x298>
    deee:	2a13      	cmp	r2, #19
    def0:	f200 80ac 	bhi.w	e04c <_realloc_r+0x20c>
    def4:	4603      	mov	r3, r0
    def6:	4622      	mov	r2, r4
    def8:	6811      	ldr	r1, [r2, #0]
    defa:	6019      	str	r1, [r3, #0]
    defc:	6851      	ldr	r1, [r2, #4]
    defe:	6059      	str	r1, [r3, #4]
    df00:	6892      	ldr	r2, [r2, #8]
    df02:	609a      	str	r2, [r3, #8]
    df04:	4621      	mov	r1, r4
    df06:	4640      	mov	r0, r8
    df08:	f000 ff7c 	bl	ee04 <_free_r>
    df0c:	4640      	mov	r0, r8
    df0e:	f7ff ff91 	bl	de34 <__malloc_unlock>
    df12:	4638      	mov	r0, r7
    df14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df18:	f025 0507 	bic.w	r5, r5, #7
    df1c:	2d00      	cmp	r5, #0
    df1e:	462a      	mov	r2, r5
    df20:	daa0      	bge.n	de64 <_realloc_r+0x24>
    df22:	230c      	movs	r3, #12
    df24:	f8c8 3000 	str.w	r3, [r8]
    df28:	2700      	movs	r7, #0
    df2a:	4638      	mov	r0, r7
    df2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df30:	461e      	mov	r6, r3
    df32:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    df36:	60d3      	str	r3, [r2, #12]
    df38:	609a      	str	r2, [r3, #8]
    df3a:	1b73      	subs	r3, r6, r5
    df3c:	2b0f      	cmp	r3, #15
    df3e:	d822      	bhi.n	df86 <_realloc_r+0x146>
    df40:	f8d9 3004 	ldr.w	r3, [r9, #4]
    df44:	f003 0301 	and.w	r3, r3, #1
    df48:	4333      	orrs	r3, r6
    df4a:	444e      	add	r6, r9
    df4c:	f8c9 3004 	str.w	r3, [r9, #4]
    df50:	6873      	ldr	r3, [r6, #4]
    df52:	f043 0301 	orr.w	r3, r3, #1
    df56:	6073      	str	r3, [r6, #4]
    df58:	4640      	mov	r0, r8
    df5a:	4627      	mov	r7, r4
    df5c:	f7ff ff6a 	bl	de34 <__malloc_unlock>
    df60:	4638      	mov	r0, r7
    df62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df66:	07c9      	lsls	r1, r1, #31
    df68:	d4ad      	bmi.n	dec6 <_realloc_r+0x86>
    df6a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    df6e:	eba9 0a03 	sub.w	sl, r9, r3
    df72:	f8da 1004 	ldr.w	r1, [sl, #4]
    df76:	f021 0103 	bic.w	r1, r1, #3
    df7a:	e7a0      	b.n	debe <_realloc_r+0x7e>
    df7c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df80:	4611      	mov	r1, r2
    df82:	f7ff bca1 	b.w	d8c8 <_malloc_r>
    df86:	f8d9 2004 	ldr.w	r2, [r9, #4]
    df8a:	eb09 0105 	add.w	r1, r9, r5
    df8e:	f002 0201 	and.w	r2, r2, #1
    df92:	444e      	add	r6, r9
    df94:	f043 0301 	orr.w	r3, r3, #1
    df98:	432a      	orrs	r2, r5
    df9a:	f8c9 2004 	str.w	r2, [r9, #4]
    df9e:	604b      	str	r3, [r1, #4]
    dfa0:	6873      	ldr	r3, [r6, #4]
    dfa2:	f043 0301 	orr.w	r3, r3, #1
    dfa6:	3108      	adds	r1, #8
    dfa8:	6073      	str	r3, [r6, #4]
    dfaa:	4640      	mov	r0, r8
    dfac:	f000 ff2a 	bl	ee04 <_free_r>
    dfb0:	e7d2      	b.n	df58 <_realloc_r+0x118>
    dfb2:	f8dc 0004 	ldr.w	r0, [ip, #4]
    dfb6:	f020 0b03 	bic.w	fp, r0, #3
    dfba:	eb06 0c0b 	add.w	ip, r6, fp
    dfbe:	f105 0010 	add.w	r0, r5, #16
    dfc2:	4584      	cmp	ip, r0
    dfc4:	da4d      	bge.n	e062 <_realloc_r+0x222>
    dfc6:	07c9      	lsls	r1, r1, #31
    dfc8:	f53f af7d 	bmi.w	dec6 <_realloc_r+0x86>
    dfcc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    dfd0:	eba9 0a01 	sub.w	sl, r9, r1
    dfd4:	f8da 1004 	ldr.w	r1, [sl, #4]
    dfd8:	f021 0103 	bic.w	r1, r1, #3
    dfdc:	448b      	add	fp, r1
    dfde:	44b3      	add	fp, r6
    dfe0:	4558      	cmp	r0, fp
    dfe2:	f73f af6c 	bgt.w	debe <_realloc_r+0x7e>
    dfe6:	4657      	mov	r7, sl
    dfe8:	f8da 100c 	ldr.w	r1, [sl, #12]
    dfec:	f857 0f08 	ldr.w	r0, [r7, #8]!
    dff0:	1f32      	subs	r2, r6, #4
    dff2:	2a24      	cmp	r2, #36	; 0x24
    dff4:	60c1      	str	r1, [r0, #12]
    dff6:	6088      	str	r0, [r1, #8]
    dff8:	f200 80db 	bhi.w	e1b2 <_realloc_r+0x372>
    dffc:	2a13      	cmp	r2, #19
    dffe:	f240 80d6 	bls.w	e1ae <_realloc_r+0x36e>
    e002:	6821      	ldr	r1, [r4, #0]
    e004:	f8ca 1008 	str.w	r1, [sl, #8]
    e008:	6861      	ldr	r1, [r4, #4]
    e00a:	f8ca 100c 	str.w	r1, [sl, #12]
    e00e:	2a1b      	cmp	r2, #27
    e010:	f200 80df 	bhi.w	e1d2 <_realloc_r+0x392>
    e014:	3408      	adds	r4, #8
    e016:	f10a 0210 	add.w	r2, sl, #16
    e01a:	6821      	ldr	r1, [r4, #0]
    e01c:	6011      	str	r1, [r2, #0]
    e01e:	6861      	ldr	r1, [r4, #4]
    e020:	6051      	str	r1, [r2, #4]
    e022:	68a1      	ldr	r1, [r4, #8]
    e024:	6091      	str	r1, [r2, #8]
    e026:	eb0a 0105 	add.w	r1, sl, r5
    e02a:	ebab 0205 	sub.w	r2, fp, r5
    e02e:	f042 0201 	orr.w	r2, r2, #1
    e032:	6099      	str	r1, [r3, #8]
    e034:	604a      	str	r2, [r1, #4]
    e036:	f8da 3004 	ldr.w	r3, [sl, #4]
    e03a:	f003 0301 	and.w	r3, r3, #1
    e03e:	432b      	orrs	r3, r5
    e040:	4640      	mov	r0, r8
    e042:	f8ca 3004 	str.w	r3, [sl, #4]
    e046:	f7ff fef5 	bl	de34 <__malloc_unlock>
    e04a:	e76e      	b.n	df2a <_realloc_r+0xea>
    e04c:	6823      	ldr	r3, [r4, #0]
    e04e:	6003      	str	r3, [r0, #0]
    e050:	6863      	ldr	r3, [r4, #4]
    e052:	6043      	str	r3, [r0, #4]
    e054:	2a1b      	cmp	r2, #27
    e056:	d868      	bhi.n	e12a <_realloc_r+0x2ea>
    e058:	f104 0208 	add.w	r2, r4, #8
    e05c:	f100 0308 	add.w	r3, r0, #8
    e060:	e74a      	b.n	def8 <_realloc_r+0xb8>
    e062:	eb09 0205 	add.w	r2, r9, r5
    e066:	609a      	str	r2, [r3, #8]
    e068:	ebac 0305 	sub.w	r3, ip, r5
    e06c:	f043 0301 	orr.w	r3, r3, #1
    e070:	6053      	str	r3, [r2, #4]
    e072:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e076:	f003 0301 	and.w	r3, r3, #1
    e07a:	432b      	orrs	r3, r5
    e07c:	4640      	mov	r0, r8
    e07e:	f844 3c04 	str.w	r3, [r4, #-4]
    e082:	f7ff fed7 	bl	de34 <__malloc_unlock>
    e086:	4627      	mov	r7, r4
    e088:	e74f      	b.n	df2a <_realloc_r+0xea>
    e08a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    e08e:	f023 0303 	bic.w	r3, r3, #3
    e092:	441e      	add	r6, r3
    e094:	e751      	b.n	df3a <_realloc_r+0xfa>
    e096:	4657      	mov	r7, sl
    e098:	f8da 100c 	ldr.w	r1, [sl, #12]
    e09c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    e0a0:	1f32      	subs	r2, r6, #4
    e0a2:	2a24      	cmp	r2, #36	; 0x24
    e0a4:	60c1      	str	r1, [r0, #12]
    e0a6:	6088      	str	r0, [r1, #8]
    e0a8:	d84c      	bhi.n	e144 <_realloc_r+0x304>
    e0aa:	2a13      	cmp	r2, #19
    e0ac:	d948      	bls.n	e140 <_realloc_r+0x300>
    e0ae:	6821      	ldr	r1, [r4, #0]
    e0b0:	f8ca 1008 	str.w	r1, [sl, #8]
    e0b4:	6861      	ldr	r1, [r4, #4]
    e0b6:	f8ca 100c 	str.w	r1, [sl, #12]
    e0ba:	2a1b      	cmp	r2, #27
    e0bc:	d856      	bhi.n	e16c <_realloc_r+0x32c>
    e0be:	3408      	adds	r4, #8
    e0c0:	f10a 0210 	add.w	r2, sl, #16
    e0c4:	461e      	mov	r6, r3
    e0c6:	6823      	ldr	r3, [r4, #0]
    e0c8:	6013      	str	r3, [r2, #0]
    e0ca:	6863      	ldr	r3, [r4, #4]
    e0cc:	6053      	str	r3, [r2, #4]
    e0ce:	68a3      	ldr	r3, [r4, #8]
    e0d0:	6093      	str	r3, [r2, #8]
    e0d2:	46d1      	mov	r9, sl
    e0d4:	463c      	mov	r4, r7
    e0d6:	e730      	b.n	df3a <_realloc_r+0xfa>
    e0d8:	4621      	mov	r1, r4
    e0da:	f000 f9e5 	bl	e4a8 <memmove>
    e0de:	e711      	b.n	df04 <_realloc_r+0xc4>
    e0e0:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    e0e4:	4657      	mov	r7, sl
    e0e6:	60cb      	str	r3, [r1, #12]
    e0e8:	6099      	str	r1, [r3, #8]
    e0ea:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e0ee:	f8da 300c 	ldr.w	r3, [sl, #12]
    e0f2:	60cb      	str	r3, [r1, #12]
    e0f4:	1f32      	subs	r2, r6, #4
    e0f6:	2a24      	cmp	r2, #36	; 0x24
    e0f8:	6099      	str	r1, [r3, #8]
    e0fa:	d82d      	bhi.n	e158 <_realloc_r+0x318>
    e0fc:	2a13      	cmp	r2, #19
    e0fe:	d929      	bls.n	e154 <_realloc_r+0x314>
    e100:	6823      	ldr	r3, [r4, #0]
    e102:	f8ca 3008 	str.w	r3, [sl, #8]
    e106:	6863      	ldr	r3, [r4, #4]
    e108:	f8ca 300c 	str.w	r3, [sl, #12]
    e10c:	2a1b      	cmp	r2, #27
    e10e:	d842      	bhi.n	e196 <_realloc_r+0x356>
    e110:	3408      	adds	r4, #8
    e112:	f10a 0310 	add.w	r3, sl, #16
    e116:	6822      	ldr	r2, [r4, #0]
    e118:	601a      	str	r2, [r3, #0]
    e11a:	6862      	ldr	r2, [r4, #4]
    e11c:	605a      	str	r2, [r3, #4]
    e11e:	68a2      	ldr	r2, [r4, #8]
    e120:	609a      	str	r2, [r3, #8]
    e122:	4666      	mov	r6, ip
    e124:	46d1      	mov	r9, sl
    e126:	463c      	mov	r4, r7
    e128:	e707      	b.n	df3a <_realloc_r+0xfa>
    e12a:	68a3      	ldr	r3, [r4, #8]
    e12c:	6083      	str	r3, [r0, #8]
    e12e:	68e3      	ldr	r3, [r4, #12]
    e130:	60c3      	str	r3, [r0, #12]
    e132:	2a24      	cmp	r2, #36	; 0x24
    e134:	d026      	beq.n	e184 <_realloc_r+0x344>
    e136:	f104 0210 	add.w	r2, r4, #16
    e13a:	f100 0310 	add.w	r3, r0, #16
    e13e:	e6db      	b.n	def8 <_realloc_r+0xb8>
    e140:	463a      	mov	r2, r7
    e142:	e7bf      	b.n	e0c4 <_realloc_r+0x284>
    e144:	4621      	mov	r1, r4
    e146:	4638      	mov	r0, r7
    e148:	461e      	mov	r6, r3
    e14a:	46d1      	mov	r9, sl
    e14c:	f000 f9ac 	bl	e4a8 <memmove>
    e150:	463c      	mov	r4, r7
    e152:	e6f2      	b.n	df3a <_realloc_r+0xfa>
    e154:	463b      	mov	r3, r7
    e156:	e7de      	b.n	e116 <_realloc_r+0x2d6>
    e158:	4621      	mov	r1, r4
    e15a:	4638      	mov	r0, r7
    e15c:	4666      	mov	r6, ip
    e15e:	46d1      	mov	r9, sl
    e160:	f000 f9a2 	bl	e4a8 <memmove>
    e164:	463c      	mov	r4, r7
    e166:	e6e8      	b.n	df3a <_realloc_r+0xfa>
    e168:	200030a4 	.word	0x200030a4
    e16c:	68a1      	ldr	r1, [r4, #8]
    e16e:	f8ca 1010 	str.w	r1, [sl, #16]
    e172:	68e1      	ldr	r1, [r4, #12]
    e174:	f8ca 1014 	str.w	r1, [sl, #20]
    e178:	2a24      	cmp	r2, #36	; 0x24
    e17a:	d020      	beq.n	e1be <_realloc_r+0x37e>
    e17c:	3410      	adds	r4, #16
    e17e:	f10a 0218 	add.w	r2, sl, #24
    e182:	e79f      	b.n	e0c4 <_realloc_r+0x284>
    e184:	6923      	ldr	r3, [r4, #16]
    e186:	6103      	str	r3, [r0, #16]
    e188:	6961      	ldr	r1, [r4, #20]
    e18a:	6141      	str	r1, [r0, #20]
    e18c:	f104 0218 	add.w	r2, r4, #24
    e190:	f100 0318 	add.w	r3, r0, #24
    e194:	e6b0      	b.n	def8 <_realloc_r+0xb8>
    e196:	68a3      	ldr	r3, [r4, #8]
    e198:	f8ca 3010 	str.w	r3, [sl, #16]
    e19c:	68e3      	ldr	r3, [r4, #12]
    e19e:	f8ca 3014 	str.w	r3, [sl, #20]
    e1a2:	2a24      	cmp	r2, #36	; 0x24
    e1a4:	d021      	beq.n	e1ea <_realloc_r+0x3aa>
    e1a6:	3410      	adds	r4, #16
    e1a8:	f10a 0318 	add.w	r3, sl, #24
    e1ac:	e7b3      	b.n	e116 <_realloc_r+0x2d6>
    e1ae:	463a      	mov	r2, r7
    e1b0:	e733      	b.n	e01a <_realloc_r+0x1da>
    e1b2:	4621      	mov	r1, r4
    e1b4:	4638      	mov	r0, r7
    e1b6:	f000 f977 	bl	e4a8 <memmove>
    e1ba:	4b16      	ldr	r3, [pc, #88]	; (e214 <_realloc_r+0x3d4>)
    e1bc:	e733      	b.n	e026 <_realloc_r+0x1e6>
    e1be:	6922      	ldr	r2, [r4, #16]
    e1c0:	f8ca 2018 	str.w	r2, [sl, #24]
    e1c4:	6962      	ldr	r2, [r4, #20]
    e1c6:	f8ca 201c 	str.w	r2, [sl, #28]
    e1ca:	3418      	adds	r4, #24
    e1cc:	f10a 0220 	add.w	r2, sl, #32
    e1d0:	e778      	b.n	e0c4 <_realloc_r+0x284>
    e1d2:	68a1      	ldr	r1, [r4, #8]
    e1d4:	f8ca 1010 	str.w	r1, [sl, #16]
    e1d8:	68e1      	ldr	r1, [r4, #12]
    e1da:	f8ca 1014 	str.w	r1, [sl, #20]
    e1de:	2a24      	cmp	r2, #36	; 0x24
    e1e0:	d00d      	beq.n	e1fe <_realloc_r+0x3be>
    e1e2:	3410      	adds	r4, #16
    e1e4:	f10a 0218 	add.w	r2, sl, #24
    e1e8:	e717      	b.n	e01a <_realloc_r+0x1da>
    e1ea:	6923      	ldr	r3, [r4, #16]
    e1ec:	f8ca 3018 	str.w	r3, [sl, #24]
    e1f0:	6963      	ldr	r3, [r4, #20]
    e1f2:	f8ca 301c 	str.w	r3, [sl, #28]
    e1f6:	3418      	adds	r4, #24
    e1f8:	f10a 0320 	add.w	r3, sl, #32
    e1fc:	e78b      	b.n	e116 <_realloc_r+0x2d6>
    e1fe:	6922      	ldr	r2, [r4, #16]
    e200:	f8ca 2018 	str.w	r2, [sl, #24]
    e204:	6962      	ldr	r2, [r4, #20]
    e206:	f8ca 201c 	str.w	r2, [sl, #28]
    e20a:	3418      	adds	r4, #24
    e20c:	f10a 0220 	add.w	r2, sl, #32
    e210:	e703      	b.n	e01a <_realloc_r+0x1da>
    e212:	bf00      	nop
    e214:	200030a4 	.word	0x200030a4

0000e218 <stdio_exit_handler>:
    e218:	4a02      	ldr	r2, [pc, #8]	; (e224 <stdio_exit_handler+0xc>)
    e21a:	4903      	ldr	r1, [pc, #12]	; (e228 <stdio_exit_handler+0x10>)
    e21c:	4803      	ldr	r0, [pc, #12]	; (e22c <stdio_exit_handler+0x14>)
    e21e:	f000 b8ef 	b.w	e400 <_fwalk_sglue>
    e222:	bf00      	nop
    e224:	200034b4 	.word	0x200034b4
    e228:	000112fd 	.word	0x000112fd
    e22c:	200029d8 	.word	0x200029d8

0000e230 <cleanup_stdio>:
    e230:	4b0c      	ldr	r3, [pc, #48]	; (e264 <cleanup_stdio+0x34>)
    e232:	6841      	ldr	r1, [r0, #4]
    e234:	4299      	cmp	r1, r3
    e236:	b510      	push	{r4, lr}
    e238:	4604      	mov	r4, r0
    e23a:	d001      	beq.n	e240 <cleanup_stdio+0x10>
    e23c:	f003 f85e 	bl	112fc <_fclose_r>
    e240:	68a1      	ldr	r1, [r4, #8]
    e242:	4b09      	ldr	r3, [pc, #36]	; (e268 <cleanup_stdio+0x38>)
    e244:	4299      	cmp	r1, r3
    e246:	d002      	beq.n	e24e <cleanup_stdio+0x1e>
    e248:	4620      	mov	r0, r4
    e24a:	f003 f857 	bl	112fc <_fclose_r>
    e24e:	68e1      	ldr	r1, [r4, #12]
    e250:	4b06      	ldr	r3, [pc, #24]	; (e26c <cleanup_stdio+0x3c>)
    e252:	4299      	cmp	r1, r3
    e254:	d004      	beq.n	e260 <cleanup_stdio+0x30>
    e256:	4620      	mov	r0, r4
    e258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e25c:	f003 b84e 	b.w	112fc <_fclose_r>
    e260:	bd10      	pop	{r4, pc}
    e262:	bf00      	nop
    e264:	20004abc 	.word	0x20004abc
    e268:	20004b24 	.word	0x20004b24
    e26c:	20004b8c 	.word	0x20004b8c

0000e270 <global_stdio_init.part.0>:
    e270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e274:	4c2a      	ldr	r4, [pc, #168]	; (e320 <global_stdio_init.part.0+0xb0>)
    e276:	4b2b      	ldr	r3, [pc, #172]	; (e324 <global_stdio_init.part.0+0xb4>)
    e278:	482b      	ldr	r0, [pc, #172]	; (e328 <global_stdio_init.part.0+0xb8>)
    e27a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; e33c <global_stdio_init.part.0+0xcc>
    e27e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; e340 <global_stdio_init.part.0+0xd0>
    e282:	4f2a      	ldr	r7, [pc, #168]	; (e32c <global_stdio_init.part.0+0xbc>)
    e284:	6018      	str	r0, [r3, #0]
    e286:	2500      	movs	r5, #0
    e288:	2304      	movs	r3, #4
    e28a:	2208      	movs	r2, #8
    e28c:	4629      	mov	r1, r5
    e28e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    e292:	4e27      	ldr	r6, [pc, #156]	; (e330 <global_stdio_init.part.0+0xc0>)
    e294:	6665      	str	r5, [r4, #100]	; 0x64
    e296:	e9c4 5302 	strd	r5, r3, [r4, #8]
    e29a:	e9c4 5500 	strd	r5, r5, [r4]
    e29e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    e2a2:	61a5      	str	r5, [r4, #24]
    e2a4:	f000 f97c 	bl	e5a0 <memset>
    e2a8:	4b22      	ldr	r3, [pc, #136]	; (e334 <global_stdio_init.part.0+0xc4>)
    e2aa:	6763      	str	r3, [r4, #116]	; 0x74
    e2ac:	2208      	movs	r2, #8
    e2ae:	4629      	mov	r1, r5
    e2b0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    e2b4:	e9c4 4907 	strd	r4, r9, [r4, #28]
    e2b8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    e2bc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    e2c0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    e2c4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    e2c8:	6725      	str	r5, [r4, #112]	; 0x70
    e2ca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    e2ce:	62e6      	str	r6, [r4, #44]	; 0x2c
    e2d0:	f000 f966 	bl	e5a0 <memset>
    e2d4:	4b18      	ldr	r3, [pc, #96]	; (e338 <global_stdio_init.part.0+0xc8>)
    e2d6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    e2da:	4629      	mov	r1, r5
    e2dc:	f104 0368 	add.w	r3, r4, #104	; 0x68
    e2e0:	2208      	movs	r2, #8
    e2e2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    e2e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    e2ea:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    e2ee:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    e2f2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    e2f6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    e2fa:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    e2fe:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    e302:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    e306:	f000 f94b 	bl	e5a0 <memset>
    e30a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    e30e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    e312:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    e316:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    e31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e31e:	bf00      	nop
    e320:	20004abc 	.word	0x20004abc
    e324:	20004bf4 	.word	0x20004bf4
    e328:	0000e219 	.word	0x0000e219
    e32c:	000115ad 	.word	0x000115ad
    e330:	000115cd 	.word	0x000115cd
    e334:	00010009 	.word	0x00010009
    e338:	00020012 	.word	0x00020012
    e33c:	00011549 	.word	0x00011549
    e340:	0001156d 	.word	0x0001156d

0000e344 <__sinit>:
    e344:	b510      	push	{r4, lr}
    e346:	4604      	mov	r4, r0
    e348:	480a      	ldr	r0, [pc, #40]	; (e374 <__sinit+0x30>)
    e34a:	f000 fbff 	bl	eb4c <__retarget_lock_acquire_recursive>
    e34e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e350:	b923      	cbnz	r3, e35c <__sinit+0x18>
    e352:	4b09      	ldr	r3, [pc, #36]	; (e378 <__sinit+0x34>)
    e354:	4a09      	ldr	r2, [pc, #36]	; (e37c <__sinit+0x38>)
    e356:	681b      	ldr	r3, [r3, #0]
    e358:	6362      	str	r2, [r4, #52]	; 0x34
    e35a:	b123      	cbz	r3, e366 <__sinit+0x22>
    e35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e360:	4804      	ldr	r0, [pc, #16]	; (e374 <__sinit+0x30>)
    e362:	f000 bbf5 	b.w	eb50 <__retarget_lock_release_recursive>
    e366:	f7ff ff83 	bl	e270 <global_stdio_init.part.0>
    e36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e36e:	4801      	ldr	r0, [pc, #4]	; (e374 <__sinit+0x30>)
    e370:	f000 bbee 	b.w	eb50 <__retarget_lock_release_recursive>
    e374:	20004a84 	.word	0x20004a84
    e378:	20004bf4 	.word	0x20004bf4
    e37c:	0000e231 	.word	0x0000e231

0000e380 <__sfp_lock_acquire>:
    e380:	4801      	ldr	r0, [pc, #4]	; (e388 <__sfp_lock_acquire+0x8>)
    e382:	f000 bbe3 	b.w	eb4c <__retarget_lock_acquire_recursive>
    e386:	bf00      	nop
    e388:	20004a84 	.word	0x20004a84

0000e38c <__sfp_lock_release>:
    e38c:	4801      	ldr	r0, [pc, #4]	; (e394 <__sfp_lock_release+0x8>)
    e38e:	f000 bbdf 	b.w	eb50 <__retarget_lock_release_recursive>
    e392:	bf00      	nop
    e394:	20004a84 	.word	0x20004a84

0000e398 <_vdprintf_r>:
    e398:	b5f0      	push	{r4, r5, r6, r7, lr}
    e39a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    e39e:	af04      	add	r7, sp, #16
    e3a0:	9300      	str	r3, [sp, #0]
    e3a2:	4613      	mov	r3, r2
    e3a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    e3a8:	460e      	mov	r6, r1
    e3aa:	9203      	str	r2, [sp, #12]
    e3ac:	4639      	mov	r1, r7
    e3ae:	aa03      	add	r2, sp, #12
    e3b0:	4605      	mov	r5, r0
    e3b2:	f000 f9bf 	bl	e734 <_vasnprintf_r>
    e3b6:	b188      	cbz	r0, e3dc <_vdprintf_r+0x44>
    e3b8:	4604      	mov	r4, r0
    e3ba:	4602      	mov	r2, r0
    e3bc:	9b03      	ldr	r3, [sp, #12]
    e3be:	4631      	mov	r1, r6
    e3c0:	4628      	mov	r0, r5
    e3c2:	f000 fa07 	bl	e7d4 <_write_r>
    e3c6:	42bc      	cmp	r4, r7
    e3c8:	9003      	str	r0, [sp, #12]
    e3ca:	d004      	beq.n	e3d6 <_vdprintf_r+0x3e>
    e3cc:	4628      	mov	r0, r5
    e3ce:	4621      	mov	r1, r4
    e3d0:	f000 fd18 	bl	ee04 <_free_r>
    e3d4:	9803      	ldr	r0, [sp, #12]
    e3d6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    e3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e3e0:	e7f9      	b.n	e3d6 <_vdprintf_r+0x3e>
    e3e2:	bf00      	nop

0000e3e4 <vdprintf>:
    e3e4:	b410      	push	{r4}
    e3e6:	4c05      	ldr	r4, [pc, #20]	; (e3fc <vdprintf+0x18>)
    e3e8:	4684      	mov	ip, r0
    e3ea:	4613      	mov	r3, r2
    e3ec:	6820      	ldr	r0, [r4, #0]
    e3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    e3f2:	460a      	mov	r2, r1
    e3f4:	4661      	mov	r1, ip
    e3f6:	f7ff bfcf 	b.w	e398 <_vdprintf_r>
    e3fa:	bf00      	nop
    e3fc:	200034c0 	.word	0x200034c0

0000e400 <_fwalk_sglue>:
    e400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e404:	4680      	mov	r8, r0
    e406:	460f      	mov	r7, r1
    e408:	4616      	mov	r6, r2
    e40a:	f04f 0900 	mov.w	r9, #0
    e40e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    e412:	3d01      	subs	r5, #1
    e414:	d411      	bmi.n	e43a <_fwalk_sglue+0x3a>
    e416:	89a3      	ldrh	r3, [r4, #12]
    e418:	2b01      	cmp	r3, #1
    e41a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    e41e:	d908      	bls.n	e432 <_fwalk_sglue+0x32>
    e420:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    e424:	3301      	adds	r3, #1
    e426:	4621      	mov	r1, r4
    e428:	d003      	beq.n	e432 <_fwalk_sglue+0x32>
    e42a:	4640      	mov	r0, r8
    e42c:	47b8      	blx	r7
    e42e:	ea49 0900 	orr.w	r9, r9, r0
    e432:	1c6b      	adds	r3, r5, #1
    e434:	f104 0468 	add.w	r4, r4, #104	; 0x68
    e438:	d1ed      	bne.n	e416 <_fwalk_sglue+0x16>
    e43a:	6836      	ldr	r6, [r6, #0]
    e43c:	2e00      	cmp	r6, #0
    e43e:	d1e6      	bne.n	e40e <_fwalk_sglue+0xe>
    e440:	4648      	mov	r0, r9
    e442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e446:	bf00      	nop

0000e448 <memcmp>:
    e448:	2a03      	cmp	r2, #3
    e44a:	b570      	push	{r4, r5, r6, lr}
    e44c:	d914      	bls.n	e478 <memcmp+0x30>
    e44e:	ea40 0301 	orr.w	r3, r0, r1
    e452:	079b      	lsls	r3, r3, #30
    e454:	d122      	bne.n	e49c <memcmp+0x54>
    e456:	4604      	mov	r4, r0
    e458:	460b      	mov	r3, r1
    e45a:	4619      	mov	r1, r3
    e45c:	4620      	mov	r0, r4
    e45e:	680e      	ldr	r6, [r1, #0]
    e460:	6805      	ldr	r5, [r0, #0]
    e462:	42b5      	cmp	r5, r6
    e464:	f104 0404 	add.w	r4, r4, #4
    e468:	f103 0304 	add.w	r3, r3, #4
    e46c:	d116      	bne.n	e49c <memcmp+0x54>
    e46e:	3a04      	subs	r2, #4
    e470:	2a03      	cmp	r2, #3
    e472:	4620      	mov	r0, r4
    e474:	4619      	mov	r1, r3
    e476:	d8f0      	bhi.n	e45a <memcmp+0x12>
    e478:	1e54      	subs	r4, r2, #1
    e47a:	b19a      	cbz	r2, e4a4 <memcmp+0x5c>
    e47c:	1e42      	subs	r2, r0, #1
    e47e:	3901      	subs	r1, #1
    e480:	e001      	b.n	e486 <memcmp+0x3e>
    e482:	18c3      	adds	r3, r0, r3
    e484:	d00c      	beq.n	e4a0 <memcmp+0x58>
    e486:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    e48a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    e48e:	45e6      	cmp	lr, ip
    e490:	eba4 0302 	sub.w	r3, r4, r2
    e494:	d0f5      	beq.n	e482 <memcmp+0x3a>
    e496:	ebae 000c 	sub.w	r0, lr, ip
    e49a:	bd70      	pop	{r4, r5, r6, pc}
    e49c:	1e54      	subs	r4, r2, #1
    e49e:	e7ed      	b.n	e47c <memcmp+0x34>
    e4a0:	4618      	mov	r0, r3
    e4a2:	bd70      	pop	{r4, r5, r6, pc}
    e4a4:	4610      	mov	r0, r2
    e4a6:	bd70      	pop	{r4, r5, r6, pc}

0000e4a8 <memmove>:
    e4a8:	4288      	cmp	r0, r1
    e4aa:	d90d      	bls.n	e4c8 <memmove+0x20>
    e4ac:	188b      	adds	r3, r1, r2
    e4ae:	4283      	cmp	r3, r0
    e4b0:	d90a      	bls.n	e4c8 <memmove+0x20>
    e4b2:	eb00 0c02 	add.w	ip, r0, r2
    e4b6:	b1ba      	cbz	r2, e4e8 <memmove+0x40>
    e4b8:	4662      	mov	r2, ip
    e4ba:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    e4be:	f802 cd01 	strb.w	ip, [r2, #-1]!
    e4c2:	4299      	cmp	r1, r3
    e4c4:	d1f9      	bne.n	e4ba <memmove+0x12>
    e4c6:	4770      	bx	lr
    e4c8:	2a0f      	cmp	r2, #15
    e4ca:	d80e      	bhi.n	e4ea <memmove+0x42>
    e4cc:	4603      	mov	r3, r0
    e4ce:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    e4d2:	b14a      	cbz	r2, e4e8 <memmove+0x40>
    e4d4:	f10c 0c01 	add.w	ip, ip, #1
    e4d8:	3b01      	subs	r3, #1
    e4da:	448c      	add	ip, r1
    e4dc:	f811 2b01 	ldrb.w	r2, [r1], #1
    e4e0:	f803 2f01 	strb.w	r2, [r3, #1]!
    e4e4:	4561      	cmp	r1, ip
    e4e6:	d1f9      	bne.n	e4dc <memmove+0x34>
    e4e8:	4770      	bx	lr
    e4ea:	ea40 0301 	orr.w	r3, r0, r1
    e4ee:	079b      	lsls	r3, r3, #30
    e4f0:	d150      	bne.n	e594 <memmove+0xec>
    e4f2:	f1a2 0310 	sub.w	r3, r2, #16
    e4f6:	b570      	push	{r4, r5, r6, lr}
    e4f8:	f101 0c20 	add.w	ip, r1, #32
    e4fc:	f023 050f 	bic.w	r5, r3, #15
    e500:	f101 0e10 	add.w	lr, r1, #16
    e504:	f100 0410 	add.w	r4, r0, #16
    e508:	44ac      	add	ip, r5
    e50a:	091b      	lsrs	r3, r3, #4
    e50c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    e510:	f844 5c10 	str.w	r5, [r4, #-16]
    e514:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    e518:	f844 5c0c 	str.w	r5, [r4, #-12]
    e51c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    e520:	f844 5c08 	str.w	r5, [r4, #-8]
    e524:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    e528:	f844 5c04 	str.w	r5, [r4, #-4]
    e52c:	f10e 0e10 	add.w	lr, lr, #16
    e530:	45e6      	cmp	lr, ip
    e532:	f104 0410 	add.w	r4, r4, #16
    e536:	d1e9      	bne.n	e50c <memmove+0x64>
    e538:	3301      	adds	r3, #1
    e53a:	f012 0f0c 	tst.w	r2, #12
    e53e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    e542:	f002 040f 	and.w	r4, r2, #15
    e546:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    e54a:	d027      	beq.n	e59c <memmove+0xf4>
    e54c:	3c04      	subs	r4, #4
    e54e:	f024 0603 	bic.w	r6, r4, #3
    e552:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    e556:	441e      	add	r6, r3
    e558:	1f1c      	subs	r4, r3, #4
    e55a:	468e      	mov	lr, r1
    e55c:	f85e 5b04 	ldr.w	r5, [lr], #4
    e560:	f844 5f04 	str.w	r5, [r4, #4]!
    e564:	42b4      	cmp	r4, r6
    e566:	d1f9      	bne.n	e55c <memmove+0xb4>
    e568:	f10c 0401 	add.w	r4, ip, #1
    e56c:	f002 0203 	and.w	r2, r2, #3
    e570:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e574:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    e578:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    e57c:	b14a      	cbz	r2, e592 <memmove+0xea>
    e57e:	f10c 0c01 	add.w	ip, ip, #1
    e582:	3b01      	subs	r3, #1
    e584:	448c      	add	ip, r1
    e586:	f811 2b01 	ldrb.w	r2, [r1], #1
    e58a:	f803 2f01 	strb.w	r2, [r3, #1]!
    e58e:	4561      	cmp	r1, ip
    e590:	d1f9      	bne.n	e586 <memmove+0xde>
    e592:	bd70      	pop	{r4, r5, r6, pc}
    e594:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    e598:	4603      	mov	r3, r0
    e59a:	e79b      	b.n	e4d4 <memmove+0x2c>
    e59c:	4622      	mov	r2, r4
    e59e:	e7eb      	b.n	e578 <memmove+0xd0>

0000e5a0 <memset>:
    e5a0:	0783      	lsls	r3, r0, #30
    e5a2:	b530      	push	{r4, r5, lr}
    e5a4:	d048      	beq.n	e638 <memset+0x98>
    e5a6:	1e54      	subs	r4, r2, #1
    e5a8:	2a00      	cmp	r2, #0
    e5aa:	d03f      	beq.n	e62c <memset+0x8c>
    e5ac:	b2ca      	uxtb	r2, r1
    e5ae:	4603      	mov	r3, r0
    e5b0:	e001      	b.n	e5b6 <memset+0x16>
    e5b2:	3c01      	subs	r4, #1
    e5b4:	d33a      	bcc.n	e62c <memset+0x8c>
    e5b6:	f803 2b01 	strb.w	r2, [r3], #1
    e5ba:	079d      	lsls	r5, r3, #30
    e5bc:	d1f9      	bne.n	e5b2 <memset+0x12>
    e5be:	2c03      	cmp	r4, #3
    e5c0:	d92d      	bls.n	e61e <memset+0x7e>
    e5c2:	b2cd      	uxtb	r5, r1
    e5c4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e5c8:	2c0f      	cmp	r4, #15
    e5ca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e5ce:	d936      	bls.n	e63e <memset+0x9e>
    e5d0:	f1a4 0210 	sub.w	r2, r4, #16
    e5d4:	f022 0c0f 	bic.w	ip, r2, #15
    e5d8:	f103 0e20 	add.w	lr, r3, #32
    e5dc:	44e6      	add	lr, ip
    e5de:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    e5e2:	f103 0210 	add.w	r2, r3, #16
    e5e6:	e942 5504 	strd	r5, r5, [r2, #-16]
    e5ea:	e942 5502 	strd	r5, r5, [r2, #-8]
    e5ee:	3210      	adds	r2, #16
    e5f0:	4572      	cmp	r2, lr
    e5f2:	d1f8      	bne.n	e5e6 <memset+0x46>
    e5f4:	f10c 0201 	add.w	r2, ip, #1
    e5f8:	f014 0f0c 	tst.w	r4, #12
    e5fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e600:	f004 0c0f 	and.w	ip, r4, #15
    e604:	d013      	beq.n	e62e <memset+0x8e>
    e606:	f1ac 0304 	sub.w	r3, ip, #4
    e60a:	f023 0303 	bic.w	r3, r3, #3
    e60e:	3304      	adds	r3, #4
    e610:	4413      	add	r3, r2
    e612:	f842 5b04 	str.w	r5, [r2], #4
    e616:	4293      	cmp	r3, r2
    e618:	d1fb      	bne.n	e612 <memset+0x72>
    e61a:	f00c 0403 	and.w	r4, ip, #3
    e61e:	b12c      	cbz	r4, e62c <memset+0x8c>
    e620:	b2c9      	uxtb	r1, r1
    e622:	441c      	add	r4, r3
    e624:	f803 1b01 	strb.w	r1, [r3], #1
    e628:	429c      	cmp	r4, r3
    e62a:	d1fb      	bne.n	e624 <memset+0x84>
    e62c:	bd30      	pop	{r4, r5, pc}
    e62e:	4664      	mov	r4, ip
    e630:	4613      	mov	r3, r2
    e632:	2c00      	cmp	r4, #0
    e634:	d1f4      	bne.n	e620 <memset+0x80>
    e636:	e7f9      	b.n	e62c <memset+0x8c>
    e638:	4603      	mov	r3, r0
    e63a:	4614      	mov	r4, r2
    e63c:	e7bf      	b.n	e5be <memset+0x1e>
    e63e:	461a      	mov	r2, r3
    e640:	46a4      	mov	ip, r4
    e642:	e7e0      	b.n	e606 <memset+0x66>

0000e644 <strncmp>:
    e644:	2a00      	cmp	r2, #0
    e646:	d03e      	beq.n	e6c6 <strncmp+0x82>
    e648:	ea40 0301 	orr.w	r3, r0, r1
    e64c:	079b      	lsls	r3, r3, #30
    e64e:	b530      	push	{r4, r5, lr}
    e650:	4684      	mov	ip, r0
    e652:	d12f      	bne.n	e6b4 <strncmp+0x70>
    e654:	2a03      	cmp	r2, #3
    e656:	d92d      	bls.n	e6b4 <strncmp+0x70>
    e658:	460b      	mov	r3, r1
    e65a:	e008      	b.n	e66e <strncmp+0x2a>
    e65c:	3a04      	subs	r2, #4
    e65e:	4684      	mov	ip, r0
    e660:	4619      	mov	r1, r3
    e662:	d025      	beq.n	e6b0 <strncmp+0x6c>
    e664:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    e668:	d122      	bne.n	e6b0 <strncmp+0x6c>
    e66a:	2a03      	cmp	r2, #3
    e66c:	d922      	bls.n	e6b4 <strncmp+0x70>
    e66e:	6804      	ldr	r4, [r0, #0]
    e670:	4619      	mov	r1, r3
    e672:	f853 5b04 	ldr.w	r5, [r3], #4
    e676:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    e67a:	42ac      	cmp	r4, r5
    e67c:	4684      	mov	ip, r0
    e67e:	ea2e 0e04 	bic.w	lr, lr, r4
    e682:	f100 0004 	add.w	r0, r0, #4
    e686:	d0e9      	beq.n	e65c <strncmp+0x18>
    e688:	f89c 0000 	ldrb.w	r0, [ip]
    e68c:	780c      	ldrb	r4, [r1, #0]
    e68e:	42a0      	cmp	r0, r4
    e690:	d11b      	bne.n	e6ca <strncmp+0x86>
    e692:	46e6      	mov	lr, ip
    e694:	b168      	cbz	r0, e6b2 <strncmp+0x6e>
    e696:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    e69a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e69e:	eba2 030e 	sub.w	r3, r2, lr
    e6a2:	42a0      	cmp	r0, r4
    e6a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    e6a8:	d10f      	bne.n	e6ca <strncmp+0x86>
    e6aa:	eb1c 0303 	adds.w	r3, ip, r3
    e6ae:	d1f1      	bne.n	e694 <strncmp+0x50>
    e6b0:	2000      	movs	r0, #0
    e6b2:	bd30      	pop	{r4, r5, pc}
    e6b4:	f89c 0000 	ldrb.w	r0, [ip]
    e6b8:	780c      	ldrb	r4, [r1, #0]
    e6ba:	4284      	cmp	r4, r0
    e6bc:	d105      	bne.n	e6ca <strncmp+0x86>
    e6be:	2a01      	cmp	r2, #1
    e6c0:	d0f6      	beq.n	e6b0 <strncmp+0x6c>
    e6c2:	46e6      	mov	lr, ip
    e6c4:	e7e6      	b.n	e694 <strncmp+0x50>
    e6c6:	4610      	mov	r0, r2
    e6c8:	4770      	bx	lr
    e6ca:	1b00      	subs	r0, r0, r4
    e6cc:	bd30      	pop	{r4, r5, pc}
    e6ce:	bf00      	nop

0000e6d0 <strncpy>:
    e6d0:	ea40 0301 	orr.w	r3, r0, r1
    e6d4:	079b      	lsls	r3, r3, #30
    e6d6:	b530      	push	{r4, r5, lr}
    e6d8:	d101      	bne.n	e6de <strncpy+0xe>
    e6da:	2a03      	cmp	r2, #3
    e6dc:	d80f      	bhi.n	e6fe <strncpy+0x2e>
    e6de:	4684      	mov	ip, r0
    e6e0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    e6e4:	e007      	b.n	e6f6 <strncpy+0x26>
    e6e6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    e6ea:	f803 1b01 	strb.w	r1, [r3], #1
    e6ee:	1e54      	subs	r4, r2, #1
    e6f0:	b1c1      	cbz	r1, e724 <strncpy+0x54>
    e6f2:	469c      	mov	ip, r3
    e6f4:	4622      	mov	r2, r4
    e6f6:	4663      	mov	r3, ip
    e6f8:	2a00      	cmp	r2, #0
    e6fa:	d1f4      	bne.n	e6e6 <strncpy+0x16>
    e6fc:	bd30      	pop	{r4, r5, pc}
    e6fe:	460b      	mov	r3, r1
    e700:	4684      	mov	ip, r0
    e702:	4619      	mov	r1, r3
    e704:	f853 5b04 	ldr.w	r5, [r3], #4
    e708:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    e70c:	ea24 0405 	bic.w	r4, r4, r5
    e710:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    e714:	d1e4      	bne.n	e6e0 <strncpy+0x10>
    e716:	3a04      	subs	r2, #4
    e718:	2a03      	cmp	r2, #3
    e71a:	f84c 5b04 	str.w	r5, [ip], #4
    e71e:	4619      	mov	r1, r3
    e720:	d8ef      	bhi.n	e702 <strncpy+0x32>
    e722:	e7dd      	b.n	e6e0 <strncpy+0x10>
    e724:	4494      	add	ip, r2
    e726:	2c00      	cmp	r4, #0
    e728:	d0e8      	beq.n	e6fc <strncpy+0x2c>
    e72a:	f803 1b01 	strb.w	r1, [r3], #1
    e72e:	4563      	cmp	r3, ip
    e730:	d1fb      	bne.n	e72a <strncpy+0x5a>
    e732:	bd30      	pop	{r4, r5, pc}

0000e734 <_vasnprintf_r>:
    e734:	b530      	push	{r4, r5, lr}
    e736:	6814      	ldr	r4, [r2, #0]
    e738:	4615      	mov	r5, r2
    e73a:	b09b      	sub	sp, #108	; 0x6c
    e73c:	461a      	mov	r2, r3
    e73e:	b109      	cbz	r1, e744 <_vasnprintf_r+0x10>
    e740:	2c00      	cmp	r4, #0
    e742:	d119      	bne.n	e778 <_vasnprintf_r+0x44>
    e744:	2100      	movs	r1, #0
    e746:	f44f 7322 	mov.w	r3, #648	; 0x288
    e74a:	f8ad 300c 	strh.w	r3, [sp, #12]
    e74e:	9100      	str	r1, [sp, #0]
    e750:	9104      	str	r1, [sp, #16]
    e752:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e756:	9102      	str	r1, [sp, #8]
    e758:	9105      	str	r1, [sp, #20]
    e75a:	f8ad 300e 	strh.w	r3, [sp, #14]
    e75e:	4669      	mov	r1, sp
    e760:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e762:	f000 fc6d 	bl	f040 <_svfprintf_r>
    e766:	2800      	cmp	r0, #0
    e768:	db13      	blt.n	e792 <_vasnprintf_r+0x5e>
    e76a:	9b00      	ldr	r3, [sp, #0]
    e76c:	6028      	str	r0, [r5, #0]
    e76e:	2200      	movs	r2, #0
    e770:	701a      	strb	r2, [r3, #0]
    e772:	9804      	ldr	r0, [sp, #16]
    e774:	b01b      	add	sp, #108	; 0x6c
    e776:	bd30      	pop	{r4, r5, pc}
    e778:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    e77c:	9100      	str	r1, [sp, #0]
    e77e:	9104      	str	r1, [sp, #16]
    e780:	f8ad 300c 	strh.w	r3, [sp, #12]
    e784:	4621      	mov	r1, r4
    e786:	dae4      	bge.n	e752 <_vasnprintf_r+0x1e>
    e788:	238b      	movs	r3, #139	; 0x8b
    e78a:	6003      	str	r3, [r0, #0]
    e78c:	2000      	movs	r0, #0
    e78e:	b01b      	add	sp, #108	; 0x6c
    e790:	bd30      	pop	{r4, r5, pc}
    e792:	2000      	movs	r0, #0
    e794:	e7ee      	b.n	e774 <_vasnprintf_r+0x40>
    e796:	bf00      	nop

0000e798 <__locale_mb_cur_max>:
    e798:	4b01      	ldr	r3, [pc, #4]	; (e7a0 <__locale_mb_cur_max+0x8>)
    e79a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    e79e:	4770      	bx	lr
    e7a0:	20002f38 	.word	0x20002f38

0000e7a4 <__cxa_atexit>:
    e7a4:	4613      	mov	r3, r2
    e7a6:	460a      	mov	r2, r1
    e7a8:	4601      	mov	r1, r0
    e7aa:	2002      	movs	r0, #2
    e7ac:	f000 ba96 	b.w	ecdc <__register_exitproc>

0000e7b0 <_sbrk_r>:
    e7b0:	b538      	push	{r3, r4, r5, lr}
    e7b2:	4d07      	ldr	r5, [pc, #28]	; (e7d0 <_sbrk_r+0x20>)
    e7b4:	2200      	movs	r2, #0
    e7b6:	4604      	mov	r4, r0
    e7b8:	4608      	mov	r0, r1
    e7ba:	602a      	str	r2, [r5, #0]
    e7bc:	f7fd fdd0 	bl	c360 <_sbrk>
    e7c0:	1c43      	adds	r3, r0, #1
    e7c2:	d000      	beq.n	e7c6 <_sbrk_r+0x16>
    e7c4:	bd38      	pop	{r3, r4, r5, pc}
    e7c6:	682b      	ldr	r3, [r5, #0]
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	d0fb      	beq.n	e7c4 <_sbrk_r+0x14>
    e7cc:	6023      	str	r3, [r4, #0]
    e7ce:	bd38      	pop	{r3, r4, r5, pc}
    e7d0:	200077c0 	.word	0x200077c0

0000e7d4 <_write_r>:
    e7d4:	b538      	push	{r3, r4, r5, lr}
    e7d6:	460c      	mov	r4, r1
    e7d8:	4d08      	ldr	r5, [pc, #32]	; (e7fc <_write_r+0x28>)
    e7da:	4684      	mov	ip, r0
    e7dc:	4611      	mov	r1, r2
    e7de:	4620      	mov	r0, r4
    e7e0:	461a      	mov	r2, r3
    e7e2:	2300      	movs	r3, #0
    e7e4:	602b      	str	r3, [r5, #0]
    e7e6:	4664      	mov	r4, ip
    e7e8:	f7fd f896 	bl	b918 <_write>
    e7ec:	1c43      	adds	r3, r0, #1
    e7ee:	d000      	beq.n	e7f2 <_write_r+0x1e>
    e7f0:	bd38      	pop	{r3, r4, r5, pc}
    e7f2:	682b      	ldr	r3, [r5, #0]
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d0fb      	beq.n	e7f0 <_write_r+0x1c>
    e7f8:	6023      	str	r3, [r4, #0]
    e7fa:	bd38      	pop	{r3, r4, r5, pc}
    e7fc:	200077c0 	.word	0x200077c0

0000e800 <__errno>:
    e800:	4b01      	ldr	r3, [pc, #4]	; (e808 <__errno+0x8>)
    e802:	6818      	ldr	r0, [r3, #0]
    e804:	4770      	bx	lr
    e806:	bf00      	nop
    e808:	200034c0 	.word	0x200034c0
	...
    e820:	eba2 0003 	sub.w	r0, r2, r3
    e824:	4770      	bx	lr
    e826:	bf00      	nop

0000e828 <strcmp>:
    e828:	7802      	ldrb	r2, [r0, #0]
    e82a:	780b      	ldrb	r3, [r1, #0]
    e82c:	2a01      	cmp	r2, #1
    e82e:	bf28      	it	cs
    e830:	429a      	cmpcs	r2, r3
    e832:	d1f5      	bne.n	e820 <__errno+0x20>
    e834:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    e838:	ea40 0401 	orr.w	r4, r0, r1
    e83c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e840:	f06f 0c00 	mvn.w	ip, #0
    e844:	ea4f 7244 	mov.w	r2, r4, lsl #29
    e848:	b312      	cbz	r2, e890 <strcmp+0x68>
    e84a:	ea80 0401 	eor.w	r4, r0, r1
    e84e:	f014 0f07 	tst.w	r4, #7
    e852:	d16a      	bne.n	e92a <strcmp+0x102>
    e854:	f000 0407 	and.w	r4, r0, #7
    e858:	f020 0007 	bic.w	r0, r0, #7
    e85c:	f004 0503 	and.w	r5, r4, #3
    e860:	f021 0107 	bic.w	r1, r1, #7
    e864:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e868:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    e86c:	f014 0f04 	tst.w	r4, #4
    e870:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    e874:	fa0c f405 	lsl.w	r4, ip, r5
    e878:	ea62 0204 	orn	r2, r2, r4
    e87c:	ea66 0604 	orn	r6, r6, r4
    e880:	d00a      	beq.n	e898 <strcmp+0x70>
    e882:	ea63 0304 	orn	r3, r3, r4
    e886:	4662      	mov	r2, ip
    e888:	ea67 0704 	orn	r7, r7, r4
    e88c:	4666      	mov	r6, ip
    e88e:	e003      	b.n	e898 <strcmp+0x70>
    e890:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    e894:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    e898:	fa82 f54c 	uadd8	r5, r2, ip
    e89c:	ea82 0406 	eor.w	r4, r2, r6
    e8a0:	faa4 f48c 	sel	r4, r4, ip
    e8a4:	bb6c      	cbnz	r4, e902 <strcmp+0xda>
    e8a6:	fa83 f54c 	uadd8	r5, r3, ip
    e8aa:	ea83 0507 	eor.w	r5, r3, r7
    e8ae:	faa5 f58c 	sel	r5, r5, ip
    e8b2:	b995      	cbnz	r5, e8da <strcmp+0xb2>
    e8b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    e8b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    e8bc:	fa82 f54c 	uadd8	r5, r2, ip
    e8c0:	ea82 0406 	eor.w	r4, r2, r6
    e8c4:	faa4 f48c 	sel	r4, r4, ip
    e8c8:	fa83 f54c 	uadd8	r5, r3, ip
    e8cc:	ea83 0507 	eor.w	r5, r3, r7
    e8d0:	faa5 f58c 	sel	r5, r5, ip
    e8d4:	4325      	orrs	r5, r4
    e8d6:	d0db      	beq.n	e890 <strcmp+0x68>
    e8d8:	b99c      	cbnz	r4, e902 <strcmp+0xda>
    e8da:	ba2d      	rev	r5, r5
    e8dc:	fab5 f485 	clz	r4, r5
    e8e0:	f024 0407 	bic.w	r4, r4, #7
    e8e4:	fa27 f104 	lsr.w	r1, r7, r4
    e8e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    e8ec:	fa23 f304 	lsr.w	r3, r3, r4
    e8f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    e8f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e8f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e8fc:	eba0 0001 	sub.w	r0, r0, r1
    e900:	4770      	bx	lr
    e902:	ba24      	rev	r4, r4
    e904:	fab4 f484 	clz	r4, r4
    e908:	f024 0407 	bic.w	r4, r4, #7
    e90c:	fa26 f104 	lsr.w	r1, r6, r4
    e910:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    e914:	fa22 f204 	lsr.w	r2, r2, r4
    e918:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    e91c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e920:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e924:	eba0 0001 	sub.w	r0, r0, r1
    e928:	4770      	bx	lr
    e92a:	f014 0f03 	tst.w	r4, #3
    e92e:	d13c      	bne.n	e9aa <strcmp+0x182>
    e930:	f010 0403 	ands.w	r4, r0, #3
    e934:	d128      	bne.n	e988 <strcmp+0x160>
    e936:	f850 2b08 	ldr.w	r2, [r0], #8
    e93a:	f851 3b08 	ldr.w	r3, [r1], #8
    e93e:	fa82 f54c 	uadd8	r5, r2, ip
    e942:	ea82 0503 	eor.w	r5, r2, r3
    e946:	faa5 f58c 	sel	r5, r5, ip
    e94a:	b95d      	cbnz	r5, e964 <strcmp+0x13c>
    e94c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e950:	f851 3c04 	ldr.w	r3, [r1, #-4]
    e954:	fa82 f54c 	uadd8	r5, r2, ip
    e958:	ea82 0503 	eor.w	r5, r2, r3
    e95c:	faa5 f58c 	sel	r5, r5, ip
    e960:	2d00      	cmp	r5, #0
    e962:	d0e8      	beq.n	e936 <strcmp+0x10e>
    e964:	ba2d      	rev	r5, r5
    e966:	fab5 f485 	clz	r4, r5
    e96a:	f024 0407 	bic.w	r4, r4, #7
    e96e:	fa23 f104 	lsr.w	r1, r3, r4
    e972:	fa22 f204 	lsr.w	r2, r2, r4
    e976:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    e97a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e97e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    e982:	eba0 0001 	sub.w	r0, r0, r1
    e986:	4770      	bx	lr
    e988:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    e98c:	f020 0003 	bic.w	r0, r0, #3
    e990:	f850 2b08 	ldr.w	r2, [r0], #8
    e994:	f021 0103 	bic.w	r1, r1, #3
    e998:	f851 3b08 	ldr.w	r3, [r1], #8
    e99c:	fa0c f404 	lsl.w	r4, ip, r4
    e9a0:	ea62 0204 	orn	r2, r2, r4
    e9a4:	ea63 0304 	orn	r3, r3, r4
    e9a8:	e7c9      	b.n	e93e <strcmp+0x116>
    e9aa:	f010 0403 	ands.w	r4, r0, #3
    e9ae:	d01a      	beq.n	e9e6 <strcmp+0x1be>
    e9b0:	eba1 0104 	sub.w	r1, r1, r4
    e9b4:	f020 0003 	bic.w	r0, r0, #3
    e9b8:	07e4      	lsls	r4, r4, #31
    e9ba:	f850 2b04 	ldr.w	r2, [r0], #4
    e9be:	d006      	beq.n	e9ce <strcmp+0x1a6>
    e9c0:	d20f      	bcs.n	e9e2 <strcmp+0x1ba>
    e9c2:	788b      	ldrb	r3, [r1, #2]
    e9c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    e9c8:	1ae4      	subs	r4, r4, r3
    e9ca:	d106      	bne.n	e9da <strcmp+0x1b2>
    e9cc:	b12b      	cbz	r3, e9da <strcmp+0x1b2>
    e9ce:	78cb      	ldrb	r3, [r1, #3]
    e9d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    e9d4:	1ae4      	subs	r4, r4, r3
    e9d6:	d100      	bne.n	e9da <strcmp+0x1b2>
    e9d8:	b91b      	cbnz	r3, e9e2 <strcmp+0x1ba>
    e9da:	4620      	mov	r0, r4
    e9dc:	f85d 4b10 	ldr.w	r4, [sp], #16
    e9e0:	4770      	bx	lr
    e9e2:	f101 0104 	add.w	r1, r1, #4
    e9e6:	f850 2b04 	ldr.w	r2, [r0], #4
    e9ea:	07cc      	lsls	r4, r1, #31
    e9ec:	f021 0103 	bic.w	r1, r1, #3
    e9f0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9f4:	d848      	bhi.n	ea88 <strcmp+0x260>
    e9f6:	d224      	bcs.n	ea42 <strcmp+0x21a>
    e9f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    e9fc:	fa82 f54c 	uadd8	r5, r2, ip
    ea00:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    ea04:	faa5 f58c 	sel	r5, r5, ip
    ea08:	d10a      	bne.n	ea20 <strcmp+0x1f8>
    ea0a:	b965      	cbnz	r5, ea26 <strcmp+0x1fe>
    ea0c:	f851 3b04 	ldr.w	r3, [r1], #4
    ea10:	ea84 0402 	eor.w	r4, r4, r2
    ea14:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    ea18:	d10e      	bne.n	ea38 <strcmp+0x210>
    ea1a:	f850 2b04 	ldr.w	r2, [r0], #4
    ea1e:	e7eb      	b.n	e9f8 <strcmp+0x1d0>
    ea20:	ea4f 2313 	mov.w	r3, r3, lsr #8
    ea24:	e055      	b.n	ead2 <strcmp+0x2aa>
    ea26:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    ea2a:	d14d      	bne.n	eac8 <strcmp+0x2a0>
    ea2c:	7808      	ldrb	r0, [r1, #0]
    ea2e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    ea32:	f1c0 0000 	rsb	r0, r0, #0
    ea36:	4770      	bx	lr
    ea38:	ea4f 6212 	mov.w	r2, r2, lsr #24
    ea3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ea40:	e047      	b.n	ead2 <strcmp+0x2aa>
    ea42:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    ea46:	fa82 f54c 	uadd8	r5, r2, ip
    ea4a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    ea4e:	faa5 f58c 	sel	r5, r5, ip
    ea52:	d10a      	bne.n	ea6a <strcmp+0x242>
    ea54:	b965      	cbnz	r5, ea70 <strcmp+0x248>
    ea56:	f851 3b04 	ldr.w	r3, [r1], #4
    ea5a:	ea84 0402 	eor.w	r4, r4, r2
    ea5e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    ea62:	d10c      	bne.n	ea7e <strcmp+0x256>
    ea64:	f850 2b04 	ldr.w	r2, [r0], #4
    ea68:	e7eb      	b.n	ea42 <strcmp+0x21a>
    ea6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    ea6e:	e030      	b.n	ead2 <strcmp+0x2aa>
    ea70:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    ea74:	d128      	bne.n	eac8 <strcmp+0x2a0>
    ea76:	880b      	ldrh	r3, [r1, #0]
    ea78:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ea7c:	e029      	b.n	ead2 <strcmp+0x2aa>
    ea7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ea82:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    ea86:	e024      	b.n	ead2 <strcmp+0x2aa>
    ea88:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    ea8c:	fa82 f54c 	uadd8	r5, r2, ip
    ea90:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    ea94:	faa5 f58c 	sel	r5, r5, ip
    ea98:	d10a      	bne.n	eab0 <strcmp+0x288>
    ea9a:	b965      	cbnz	r5, eab6 <strcmp+0x28e>
    ea9c:	f851 3b04 	ldr.w	r3, [r1], #4
    eaa0:	ea84 0402 	eor.w	r4, r4, r2
    eaa4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    eaa8:	d109      	bne.n	eabe <strcmp+0x296>
    eaaa:	f850 2b04 	ldr.w	r2, [r0], #4
    eaae:	e7eb      	b.n	ea88 <strcmp+0x260>
    eab0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    eab4:	e00d      	b.n	ead2 <strcmp+0x2aa>
    eab6:	f015 0fff 	tst.w	r5, #255	; 0xff
    eaba:	d105      	bne.n	eac8 <strcmp+0x2a0>
    eabc:	680b      	ldr	r3, [r1, #0]
    eabe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    eac2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    eac6:	e004      	b.n	ead2 <strcmp+0x2aa>
    eac8:	f04f 0000 	mov.w	r0, #0
    eacc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    ead0:	4770      	bx	lr
    ead2:	ba12      	rev	r2, r2
    ead4:	ba1b      	rev	r3, r3
    ead6:	fa82 f44c 	uadd8	r4, r2, ip
    eada:	ea82 0403 	eor.w	r4, r2, r3
    eade:	faa4 f58c 	sel	r5, r4, ip
    eae2:	fab5 f485 	clz	r4, r5
    eae6:	fa02 f204 	lsl.w	r2, r2, r4
    eaea:	fa03 f304 	lsl.w	r3, r3, r4
    eaee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    eaf2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    eaf6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    eafa:	4770      	bx	lr

0000eafc <__libc_init_array>:
    eafc:	b570      	push	{r4, r5, r6, lr}
    eafe:	4e0d      	ldr	r6, [pc, #52]	; (eb34 <__libc_init_array+0x38>)
    eb00:	4d0d      	ldr	r5, [pc, #52]	; (eb38 <__libc_init_array+0x3c>)
    eb02:	1b76      	subs	r6, r6, r5
    eb04:	10b6      	asrs	r6, r6, #2
    eb06:	d006      	beq.n	eb16 <__libc_init_array+0x1a>
    eb08:	2400      	movs	r4, #0
    eb0a:	f855 3b04 	ldr.w	r3, [r5], #4
    eb0e:	3401      	adds	r4, #1
    eb10:	4798      	blx	r3
    eb12:	42a6      	cmp	r6, r4
    eb14:	d1f9      	bne.n	eb0a <__libc_init_array+0xe>
    eb16:	4e09      	ldr	r6, [pc, #36]	; (eb3c <__libc_init_array+0x40>)
    eb18:	4d09      	ldr	r5, [pc, #36]	; (eb40 <__libc_init_array+0x44>)
    eb1a:	1b76      	subs	r6, r6, r5
    eb1c:	f005 fa4c 	bl	13fb8 <___init_veneer>
    eb20:	10b6      	asrs	r6, r6, #2
    eb22:	d006      	beq.n	eb32 <__libc_init_array+0x36>
    eb24:	2400      	movs	r4, #0
    eb26:	f855 3b04 	ldr.w	r3, [r5], #4
    eb2a:	3401      	adds	r4, #1
    eb2c:	4798      	blx	r3
    eb2e:	42a6      	cmp	r6, r4
    eb30:	d1f9      	bne.n	eb26 <__libc_init_array+0x2a>
    eb32:	bd70      	pop	{r4, r5, r6, pc}
    eb34:	60001dd0 	.word	0x60001dd0
    eb38:	60001dd0 	.word	0x60001dd0
    eb3c:	60001e58 	.word	0x60001e58
    eb40:	60001dd0 	.word	0x60001dd0

0000eb44 <__retarget_lock_init_recursive>:
    eb44:	4770      	bx	lr
    eb46:	bf00      	nop

0000eb48 <__retarget_lock_close_recursive>:
    eb48:	4770      	bx	lr
    eb4a:	bf00      	nop

0000eb4c <__retarget_lock_acquire_recursive>:
    eb4c:	4770      	bx	lr
    eb4e:	bf00      	nop

0000eb50 <__retarget_lock_release_recursive>:
    eb50:	4770      	bx	lr
    eb52:	bf00      	nop
	...

0000eb60 <memchr>:
    eb60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    eb64:	2a10      	cmp	r2, #16
    eb66:	db2b      	blt.n	ebc0 <memchr+0x60>
    eb68:	f010 0f07 	tst.w	r0, #7
    eb6c:	d008      	beq.n	eb80 <memchr+0x20>
    eb6e:	f810 3b01 	ldrb.w	r3, [r0], #1
    eb72:	3a01      	subs	r2, #1
    eb74:	428b      	cmp	r3, r1
    eb76:	d02d      	beq.n	ebd4 <memchr+0x74>
    eb78:	f010 0f07 	tst.w	r0, #7
    eb7c:	b342      	cbz	r2, ebd0 <memchr+0x70>
    eb7e:	d1f6      	bne.n	eb6e <memchr+0xe>
    eb80:	b4f0      	push	{r4, r5, r6, r7}
    eb82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    eb86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    eb8a:	f022 0407 	bic.w	r4, r2, #7
    eb8e:	f07f 0700 	mvns.w	r7, #0
    eb92:	2300      	movs	r3, #0
    eb94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    eb98:	3c08      	subs	r4, #8
    eb9a:	ea85 0501 	eor.w	r5, r5, r1
    eb9e:	ea86 0601 	eor.w	r6, r6, r1
    eba2:	fa85 f547 	uadd8	r5, r5, r7
    eba6:	faa3 f587 	sel	r5, r3, r7
    ebaa:	fa86 f647 	uadd8	r6, r6, r7
    ebae:	faa5 f687 	sel	r6, r5, r7
    ebb2:	b98e      	cbnz	r6, ebd8 <memchr+0x78>
    ebb4:	d1ee      	bne.n	eb94 <memchr+0x34>
    ebb6:	bcf0      	pop	{r4, r5, r6, r7}
    ebb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ebbc:	f002 0207 	and.w	r2, r2, #7
    ebc0:	b132      	cbz	r2, ebd0 <memchr+0x70>
    ebc2:	f810 3b01 	ldrb.w	r3, [r0], #1
    ebc6:	3a01      	subs	r2, #1
    ebc8:	ea83 0301 	eor.w	r3, r3, r1
    ebcc:	b113      	cbz	r3, ebd4 <memchr+0x74>
    ebce:	d1f8      	bne.n	ebc2 <memchr+0x62>
    ebd0:	2000      	movs	r0, #0
    ebd2:	4770      	bx	lr
    ebd4:	3801      	subs	r0, #1
    ebd6:	4770      	bx	lr
    ebd8:	2d00      	cmp	r5, #0
    ebda:	bf06      	itte	eq
    ebdc:	4635      	moveq	r5, r6
    ebde:	3803      	subeq	r0, #3
    ebe0:	3807      	subne	r0, #7
    ebe2:	f015 0f01 	tst.w	r5, #1
    ebe6:	d107      	bne.n	ebf8 <memchr+0x98>
    ebe8:	3001      	adds	r0, #1
    ebea:	f415 7f80 	tst.w	r5, #256	; 0x100
    ebee:	bf02      	ittt	eq
    ebf0:	3001      	addeq	r0, #1
    ebf2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ebf6:	3001      	addeq	r0, #1
    ebf8:	bcf0      	pop	{r4, r5, r6, r7}
    ebfa:	3801      	subs	r0, #1
    ebfc:	4770      	bx	lr
    ebfe:	bf00      	nop

0000ec00 <strlen>:
    ec00:	f890 f000 	pld	[r0]
    ec04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ec08:	f020 0107 	bic.w	r1, r0, #7
    ec0c:	f06f 0c00 	mvn.w	ip, #0
    ec10:	f010 0407 	ands.w	r4, r0, #7
    ec14:	f891 f020 	pld	[r1, #32]
    ec18:	f040 8049 	bne.w	ecae <strlen+0xae>
    ec1c:	f04f 0400 	mov.w	r4, #0
    ec20:	f06f 0007 	mvn.w	r0, #7
    ec24:	e9d1 2300 	ldrd	r2, r3, [r1]
    ec28:	f891 f040 	pld	[r1, #64]	; 0x40
    ec2c:	f100 0008 	add.w	r0, r0, #8
    ec30:	fa82 f24c 	uadd8	r2, r2, ip
    ec34:	faa4 f28c 	sel	r2, r4, ip
    ec38:	fa83 f34c 	uadd8	r3, r3, ip
    ec3c:	faa2 f38c 	sel	r3, r2, ip
    ec40:	bb4b      	cbnz	r3, ec96 <strlen+0x96>
    ec42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ec46:	fa82 f24c 	uadd8	r2, r2, ip
    ec4a:	f100 0008 	add.w	r0, r0, #8
    ec4e:	faa4 f28c 	sel	r2, r4, ip
    ec52:	fa83 f34c 	uadd8	r3, r3, ip
    ec56:	faa2 f38c 	sel	r3, r2, ip
    ec5a:	b9e3      	cbnz	r3, ec96 <strlen+0x96>
    ec5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    ec60:	fa82 f24c 	uadd8	r2, r2, ip
    ec64:	f100 0008 	add.w	r0, r0, #8
    ec68:	faa4 f28c 	sel	r2, r4, ip
    ec6c:	fa83 f34c 	uadd8	r3, r3, ip
    ec70:	faa2 f38c 	sel	r3, r2, ip
    ec74:	b97b      	cbnz	r3, ec96 <strlen+0x96>
    ec76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ec7a:	f101 0120 	add.w	r1, r1, #32
    ec7e:	fa82 f24c 	uadd8	r2, r2, ip
    ec82:	f100 0008 	add.w	r0, r0, #8
    ec86:	faa4 f28c 	sel	r2, r4, ip
    ec8a:	fa83 f34c 	uadd8	r3, r3, ip
    ec8e:	faa2 f38c 	sel	r3, r2, ip
    ec92:	2b00      	cmp	r3, #0
    ec94:	d0c6      	beq.n	ec24 <strlen+0x24>
    ec96:	2a00      	cmp	r2, #0
    ec98:	bf04      	itt	eq
    ec9a:	3004      	addeq	r0, #4
    ec9c:	461a      	moveq	r2, r3
    ec9e:	ba12      	rev	r2, r2
    eca0:	fab2 f282 	clz	r2, r2
    eca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    eca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ecac:	4770      	bx	lr
    ecae:	e9d1 2300 	ldrd	r2, r3, [r1]
    ecb2:	f004 0503 	and.w	r5, r4, #3
    ecb6:	f1c4 0000 	rsb	r0, r4, #0
    ecba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ecbe:	f014 0f04 	tst.w	r4, #4
    ecc2:	f891 f040 	pld	[r1, #64]	; 0x40
    ecc6:	fa0c f505 	lsl.w	r5, ip, r5
    ecca:	ea62 0205 	orn	r2, r2, r5
    ecce:	bf1c      	itt	ne
    ecd0:	ea63 0305 	ornne	r3, r3, r5
    ecd4:	4662      	movne	r2, ip
    ecd6:	f04f 0400 	mov.w	r4, #0
    ecda:	e7a9      	b.n	ec30 <strlen+0x30>

0000ecdc <__register_exitproc>:
    ecdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ece0:	f8df a07c 	ldr.w	sl, [pc, #124]	; ed60 <__register_exitproc+0x84>
    ece4:	4606      	mov	r6, r0
    ece6:	f8da 0000 	ldr.w	r0, [sl]
    ecea:	4698      	mov	r8, r3
    ecec:	460f      	mov	r7, r1
    ecee:	4691      	mov	r9, r2
    ecf0:	f7ff ff2c 	bl	eb4c <__retarget_lock_acquire_recursive>
    ecf4:	4b18      	ldr	r3, [pc, #96]	; (ed58 <__register_exitproc+0x7c>)
    ecf6:	681c      	ldr	r4, [r3, #0]
    ecf8:	b324      	cbz	r4, ed44 <__register_exitproc+0x68>
    ecfa:	6865      	ldr	r5, [r4, #4]
    ecfc:	2d1f      	cmp	r5, #31
    ecfe:	dc24      	bgt.n	ed4a <__register_exitproc+0x6e>
    ed00:	b95e      	cbnz	r6, ed1a <__register_exitproc+0x3e>
    ed02:	1c6b      	adds	r3, r5, #1
    ed04:	3502      	adds	r5, #2
    ed06:	f8da 0000 	ldr.w	r0, [sl]
    ed0a:	6063      	str	r3, [r4, #4]
    ed0c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    ed10:	f7ff ff1e 	bl	eb50 <__retarget_lock_release_recursive>
    ed14:	2000      	movs	r0, #0
    ed16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed1a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    ed1e:	2301      	movs	r3, #1
    ed20:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ed24:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    ed28:	40ab      	lsls	r3, r5
    ed2a:	431a      	orrs	r2, r3
    ed2c:	2e02      	cmp	r6, #2
    ed2e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    ed32:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ed36:	d1e4      	bne.n	ed02 <__register_exitproc+0x26>
    ed38:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    ed3c:	431a      	orrs	r2, r3
    ed3e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    ed42:	e7de      	b.n	ed02 <__register_exitproc+0x26>
    ed44:	4c05      	ldr	r4, [pc, #20]	; (ed5c <__register_exitproc+0x80>)
    ed46:	601c      	str	r4, [r3, #0]
    ed48:	e7d7      	b.n	ecfa <__register_exitproc+0x1e>
    ed4a:	f8da 0000 	ldr.w	r0, [sl]
    ed4e:	f7ff feff 	bl	eb50 <__retarget_lock_release_recursive>
    ed52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ed56:	e7de      	b.n	ed16 <__register_exitproc+0x3a>
    ed58:	200048e8 	.word	0x200048e8
    ed5c:	200048ec 	.word	0x200048ec
    ed60:	20002f2c 	.word	0x20002f2c

0000ed64 <_malloc_trim_r>:
    ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed66:	4f24      	ldr	r7, [pc, #144]	; (edf8 <_malloc_trim_r+0x94>)
    ed68:	460c      	mov	r4, r1
    ed6a:	4606      	mov	r6, r0
    ed6c:	f7ff f85c 	bl	de28 <__malloc_lock>
    ed70:	68bb      	ldr	r3, [r7, #8]
    ed72:	685d      	ldr	r5, [r3, #4]
    ed74:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    ed78:	310f      	adds	r1, #15
    ed7a:	f025 0503 	bic.w	r5, r5, #3
    ed7e:	194b      	adds	r3, r1, r5
    ed80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    ed84:	f023 030f 	bic.w	r3, r3, #15
    ed88:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    ed8c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    ed90:	db07      	blt.n	eda2 <_malloc_trim_r+0x3e>
    ed92:	2100      	movs	r1, #0
    ed94:	4630      	mov	r0, r6
    ed96:	f7ff fd0b 	bl	e7b0 <_sbrk_r>
    ed9a:	68bb      	ldr	r3, [r7, #8]
    ed9c:	442b      	add	r3, r5
    ed9e:	4298      	cmp	r0, r3
    eda0:	d004      	beq.n	edac <_malloc_trim_r+0x48>
    eda2:	4630      	mov	r0, r6
    eda4:	f7ff f846 	bl	de34 <__malloc_unlock>
    eda8:	2000      	movs	r0, #0
    edaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edac:	4261      	negs	r1, r4
    edae:	4630      	mov	r0, r6
    edb0:	f7ff fcfe 	bl	e7b0 <_sbrk_r>
    edb4:	3001      	adds	r0, #1
    edb6:	d00d      	beq.n	edd4 <_malloc_trim_r+0x70>
    edb8:	4a10      	ldr	r2, [pc, #64]	; (edfc <_malloc_trim_r+0x98>)
    edba:	68bb      	ldr	r3, [r7, #8]
    edbc:	1b2d      	subs	r5, r5, r4
    edbe:	f045 0501 	orr.w	r5, r5, #1
    edc2:	605d      	str	r5, [r3, #4]
    edc4:	6813      	ldr	r3, [r2, #0]
    edc6:	4630      	mov	r0, r6
    edc8:	1b1b      	subs	r3, r3, r4
    edca:	6013      	str	r3, [r2, #0]
    edcc:	f7ff f832 	bl	de34 <__malloc_unlock>
    edd0:	2001      	movs	r0, #1
    edd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edd4:	2100      	movs	r1, #0
    edd6:	4630      	mov	r0, r6
    edd8:	f7ff fcea 	bl	e7b0 <_sbrk_r>
    eddc:	68ba      	ldr	r2, [r7, #8]
    edde:	1a83      	subs	r3, r0, r2
    ede0:	2b0f      	cmp	r3, #15
    ede2:	ddde      	ble.n	eda2 <_malloc_trim_r+0x3e>
    ede4:	f043 0301 	orr.w	r3, r3, #1
    ede8:	6053      	str	r3, [r2, #4]
    edea:	4b05      	ldr	r3, [pc, #20]	; (ee00 <_malloc_trim_r+0x9c>)
    edec:	4903      	ldr	r1, [pc, #12]	; (edfc <_malloc_trim_r+0x98>)
    edee:	681b      	ldr	r3, [r3, #0]
    edf0:	1ac0      	subs	r0, r0, r3
    edf2:	6008      	str	r0, [r1, #0]
    edf4:	e7d5      	b.n	eda2 <_malloc_trim_r+0x3e>
    edf6:	bf00      	nop
    edf8:	200030a4 	.word	0x200030a4
    edfc:	20004a88 	.word	0x20004a88
    ee00:	200034ac 	.word	0x200034ac

0000ee04 <_free_r>:
    ee04:	2900      	cmp	r1, #0
    ee06:	d061      	beq.n	eecc <_free_r+0xc8>
    ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee0a:	460c      	mov	r4, r1
    ee0c:	4606      	mov	r6, r0
    ee0e:	f7ff f80b 	bl	de28 <__malloc_lock>
    ee12:	f854 2c04 	ldr.w	r2, [r4, #-4]
    ee16:	4f7b      	ldr	r7, [pc, #492]	; (f004 <_free_r+0x200>)
    ee18:	f1a4 0508 	sub.w	r5, r4, #8
    ee1c:	f022 0101 	bic.w	r1, r2, #1
    ee20:	eb05 0c01 	add.w	ip, r5, r1
    ee24:	68b8      	ldr	r0, [r7, #8]
    ee26:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ee2a:	4560      	cmp	r0, ip
    ee2c:	f023 0303 	bic.w	r3, r3, #3
    ee30:	f000 808b 	beq.w	ef4a <_free_r+0x146>
    ee34:	07d2      	lsls	r2, r2, #31
    ee36:	f8cc 3004 	str.w	r3, [ip, #4]
    ee3a:	d432      	bmi.n	eea2 <_free_r+0x9e>
    ee3c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    ee40:	1aad      	subs	r5, r5, r2
    ee42:	4411      	add	r1, r2
    ee44:	68aa      	ldr	r2, [r5, #8]
    ee46:	f107 0008 	add.w	r0, r7, #8
    ee4a:	4282      	cmp	r2, r0
    ee4c:	d06a      	beq.n	ef24 <_free_r+0x120>
    ee4e:	eb0c 0403 	add.w	r4, ip, r3
    ee52:	f8d4 e004 	ldr.w	lr, [r4, #4]
    ee56:	68ec      	ldr	r4, [r5, #12]
    ee58:	60d4      	str	r4, [r2, #12]
    ee5a:	f01e 0f01 	tst.w	lr, #1
    ee5e:	60a2      	str	r2, [r4, #8]
    ee60:	f000 8097 	beq.w	ef92 <_free_r+0x18e>
    ee64:	f041 0301 	orr.w	r3, r1, #1
    ee68:	606b      	str	r3, [r5, #4]
    ee6a:	f8cc 1000 	str.w	r1, [ip]
    ee6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ee72:	d235      	bcs.n	eee0 <_free_r+0xdc>
    ee74:	6878      	ldr	r0, [r7, #4]
    ee76:	08cb      	lsrs	r3, r1, #3
    ee78:	2201      	movs	r2, #1
    ee7a:	0949      	lsrs	r1, r1, #5
    ee7c:	3301      	adds	r3, #1
    ee7e:	408a      	lsls	r2, r1
    ee80:	4302      	orrs	r2, r0
    ee82:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    ee86:	607a      	str	r2, [r7, #4]
    ee88:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    ee8c:	3a08      	subs	r2, #8
    ee8e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    ee92:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ee96:	60cd      	str	r5, [r1, #12]
    ee98:	4630      	mov	r0, r6
    ee9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ee9e:	f7fe bfc9 	b.w	de34 <__malloc_unlock>
    eea2:	eb0c 0203 	add.w	r2, ip, r3
    eea6:	6852      	ldr	r2, [r2, #4]
    eea8:	07d0      	lsls	r0, r2, #31
    eeaa:	d410      	bmi.n	eece <_free_r+0xca>
    eeac:	4419      	add	r1, r3
    eeae:	f107 0008 	add.w	r0, r7, #8
    eeb2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    eeb6:	4283      	cmp	r3, r0
    eeb8:	d073      	beq.n	efa2 <_free_r+0x19e>
    eeba:	f8dc 200c 	ldr.w	r2, [ip, #12]
    eebe:	60da      	str	r2, [r3, #12]
    eec0:	6093      	str	r3, [r2, #8]
    eec2:	f041 0301 	orr.w	r3, r1, #1
    eec6:	606b      	str	r3, [r5, #4]
    eec8:	5069      	str	r1, [r5, r1]
    eeca:	e7d0      	b.n	ee6e <_free_r+0x6a>
    eecc:	4770      	bx	lr
    eece:	f041 0301 	orr.w	r3, r1, #1
    eed2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    eed6:	f844 3c04 	str.w	r3, [r4, #-4]
    eeda:	f8cc 1000 	str.w	r1, [ip]
    eede:	d3c9      	bcc.n	ee74 <_free_r+0x70>
    eee0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    eee4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    eee8:	d248      	bcs.n	ef7c <_free_r+0x178>
    eeea:	098b      	lsrs	r3, r1, #6
    eeec:	f103 0039 	add.w	r0, r3, #57	; 0x39
    eef0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    eef4:	00c3      	lsls	r3, r0, #3
    eef6:	18f8      	adds	r0, r7, r3
    eef8:	58fb      	ldr	r3, [r7, r3]
    eefa:	3808      	subs	r0, #8
    eefc:	4298      	cmp	r0, r3
    eefe:	d059      	beq.n	efb4 <_free_r+0x1b0>
    ef00:	685a      	ldr	r2, [r3, #4]
    ef02:	f022 0203 	bic.w	r2, r2, #3
    ef06:	428a      	cmp	r2, r1
    ef08:	d902      	bls.n	ef10 <_free_r+0x10c>
    ef0a:	689b      	ldr	r3, [r3, #8]
    ef0c:	4298      	cmp	r0, r3
    ef0e:	d1f7      	bne.n	ef00 <_free_r+0xfc>
    ef10:	68d8      	ldr	r0, [r3, #12]
    ef12:	e9c5 3002 	strd	r3, r0, [r5, #8]
    ef16:	6085      	str	r5, [r0, #8]
    ef18:	60dd      	str	r5, [r3, #12]
    ef1a:	4630      	mov	r0, r6
    ef1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ef20:	f7fe bf88 	b.w	de34 <__malloc_unlock>
    ef24:	eb0c 0203 	add.w	r2, ip, r3
    ef28:	6852      	ldr	r2, [r2, #4]
    ef2a:	07d2      	lsls	r2, r2, #31
    ef2c:	d463      	bmi.n	eff6 <_free_r+0x1f2>
    ef2e:	440b      	add	r3, r1
    ef30:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    ef34:	60ca      	str	r2, [r1, #12]
    ef36:	6091      	str	r1, [r2, #8]
    ef38:	f043 0201 	orr.w	r2, r3, #1
    ef3c:	606a      	str	r2, [r5, #4]
    ef3e:	4630      	mov	r0, r6
    ef40:	50eb      	str	r3, [r5, r3]
    ef42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ef46:	f7fe bf75 	b.w	de34 <__malloc_unlock>
    ef4a:	440b      	add	r3, r1
    ef4c:	07d1      	lsls	r1, r2, #31
    ef4e:	d407      	bmi.n	ef60 <_free_r+0x15c>
    ef50:	f854 2c08 	ldr.w	r2, [r4, #-8]
    ef54:	1aad      	subs	r5, r5, r2
    ef56:	4413      	add	r3, r2
    ef58:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    ef5c:	60ca      	str	r2, [r1, #12]
    ef5e:	6091      	str	r1, [r2, #8]
    ef60:	f043 0201 	orr.w	r2, r3, #1
    ef64:	606a      	str	r2, [r5, #4]
    ef66:	4a28      	ldr	r2, [pc, #160]	; (f008 <_free_r+0x204>)
    ef68:	60bd      	str	r5, [r7, #8]
    ef6a:	6812      	ldr	r2, [r2, #0]
    ef6c:	429a      	cmp	r2, r3
    ef6e:	d893      	bhi.n	ee98 <_free_r+0x94>
    ef70:	4b26      	ldr	r3, [pc, #152]	; (f00c <_free_r+0x208>)
    ef72:	4630      	mov	r0, r6
    ef74:	6819      	ldr	r1, [r3, #0]
    ef76:	f7ff fef5 	bl	ed64 <_malloc_trim_r>
    ef7a:	e78d      	b.n	ee98 <_free_r+0x94>
    ef7c:	2b14      	cmp	r3, #20
    ef7e:	d90a      	bls.n	ef96 <_free_r+0x192>
    ef80:	2b54      	cmp	r3, #84	; 0x54
    ef82:	d81f      	bhi.n	efc4 <_free_r+0x1c0>
    ef84:	0b0b      	lsrs	r3, r1, #12
    ef86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    ef8a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    ef8e:	00c3      	lsls	r3, r0, #3
    ef90:	e7b1      	b.n	eef6 <_free_r+0xf2>
    ef92:	4419      	add	r1, r3
    ef94:	e78d      	b.n	eeb2 <_free_r+0xae>
    ef96:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    ef9a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    ef9e:	00c3      	lsls	r3, r0, #3
    efa0:	e7a9      	b.n	eef6 <_free_r+0xf2>
    efa2:	f041 0301 	orr.w	r3, r1, #1
    efa6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    efaa:	e9c5 0002 	strd	r0, r0, [r5, #8]
    efae:	606b      	str	r3, [r5, #4]
    efb0:	5069      	str	r1, [r5, r1]
    efb2:	e771      	b.n	ee98 <_free_r+0x94>
    efb4:	6879      	ldr	r1, [r7, #4]
    efb6:	1092      	asrs	r2, r2, #2
    efb8:	2401      	movs	r4, #1
    efba:	fa04 f202 	lsl.w	r2, r4, r2
    efbe:	430a      	orrs	r2, r1
    efc0:	607a      	str	r2, [r7, #4]
    efc2:	e7a6      	b.n	ef12 <_free_r+0x10e>
    efc4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    efc8:	d806      	bhi.n	efd8 <_free_r+0x1d4>
    efca:	0bcb      	lsrs	r3, r1, #15
    efcc:	f103 0078 	add.w	r0, r3, #120	; 0x78
    efd0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    efd4:	00c3      	lsls	r3, r0, #3
    efd6:	e78e      	b.n	eef6 <_free_r+0xf2>
    efd8:	f240 5254 	movw	r2, #1364	; 0x554
    efdc:	4293      	cmp	r3, r2
    efde:	d806      	bhi.n	efee <_free_r+0x1ea>
    efe0:	0c8b      	lsrs	r3, r1, #18
    efe2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    efe6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    efea:	00c3      	lsls	r3, r0, #3
    efec:	e783      	b.n	eef6 <_free_r+0xf2>
    efee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    eff2:	227e      	movs	r2, #126	; 0x7e
    eff4:	e77f      	b.n	eef6 <_free_r+0xf2>
    eff6:	f041 0301 	orr.w	r3, r1, #1
    effa:	606b      	str	r3, [r5, #4]
    effc:	f8cc 1000 	str.w	r1, [ip]
    f000:	e74a      	b.n	ee98 <_free_r+0x94>
    f002:	bf00      	nop
    f004:	200030a4 	.word	0x200030a4
    f008:	200034b0 	.word	0x200034b0
    f00c:	20004ab8 	.word	0x20004ab8

0000f010 <__ascii_mbtowc>:
    f010:	b082      	sub	sp, #8
    f012:	b149      	cbz	r1, f028 <__ascii_mbtowc+0x18>
    f014:	b15a      	cbz	r2, f02e <__ascii_mbtowc+0x1e>
    f016:	b16b      	cbz	r3, f034 <__ascii_mbtowc+0x24>
    f018:	7813      	ldrb	r3, [r2, #0]
    f01a:	600b      	str	r3, [r1, #0]
    f01c:	7812      	ldrb	r2, [r2, #0]
    f01e:	1e10      	subs	r0, r2, #0
    f020:	bf18      	it	ne
    f022:	2001      	movne	r0, #1
    f024:	b002      	add	sp, #8
    f026:	4770      	bx	lr
    f028:	a901      	add	r1, sp, #4
    f02a:	2a00      	cmp	r2, #0
    f02c:	d1f3      	bne.n	f016 <__ascii_mbtowc+0x6>
    f02e:	4610      	mov	r0, r2
    f030:	b002      	add	sp, #8
    f032:	4770      	bx	lr
    f034:	f06f 0001 	mvn.w	r0, #1
    f038:	e7f4      	b.n	f024 <__ascii_mbtowc+0x14>
    f03a:	bf00      	nop
    f03c:	0000      	movs	r0, r0
	...

0000f040 <_svfprintf_r>:
    f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f044:	ed2d 8b08 	vpush	{d8-d11}
    f048:	b0d1      	sub	sp, #324	; 0x144
    f04a:	460c      	mov	r4, r1
    f04c:	ee0b 1a10 	vmov	s22, r1
    f050:	4690      	mov	r8, r2
    f052:	9308      	str	r3, [sp, #32]
    f054:	4683      	mov	fp, r0
    f056:	f002 facb 	bl	115f0 <_localeconv_r>
    f05a:	6803      	ldr	r3, [r0, #0]
    f05c:	9312      	str	r3, [sp, #72]	; 0x48
    f05e:	4618      	mov	r0, r3
    f060:	f7ff fdce 	bl	ec00 <strlen>
    f064:	af20      	add	r7, sp, #128	; 0x80
    f066:	9010      	str	r0, [sp, #64]	; 0x40
    f068:	2208      	movs	r2, #8
    f06a:	2100      	movs	r1, #0
    f06c:	4638      	mov	r0, r7
    f06e:	f7ff fa97 	bl	e5a0 <memset>
    f072:	89a3      	ldrh	r3, [r4, #12]
    f074:	061b      	lsls	r3, r3, #24
    f076:	d503      	bpl.n	f080 <_svfprintf_r+0x40>
    f078:	6923      	ldr	r3, [r4, #16]
    f07a:	2b00      	cmp	r3, #0
    f07c:	f000 8755 	beq.w	ff2a <_svfprintf_r+0xeea>
    f080:	2300      	movs	r3, #0
    f082:	ed9f 8b83 	vldr	d8, [pc, #524]	; f290 <_svfprintf_r+0x250>
    f086:	ed9f 9b84 	vldr	d9, [pc, #528]	; f298 <_svfprintf_r+0x258>
    f08a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    f08e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    f092:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    f096:	aa27      	add	r2, sp, #156	; 0x9c
    f098:	930e      	str	r3, [sp, #56]	; 0x38
    f09a:	9224      	str	r2, [sp, #144]	; 0x90
    f09c:	4692      	mov	sl, r2
    f09e:	9311      	str	r3, [sp, #68]	; 0x44
    f0a0:	9304      	str	r3, [sp, #16]
    f0a2:	4644      	mov	r4, r8
    f0a4:	46a1      	mov	r9, r4
    f0a6:	4b7e      	ldr	r3, [pc, #504]	; (f2a0 <_svfprintf_r+0x260>)
    f0a8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    f0ac:	f7ff fb74 	bl	e798 <__locale_mb_cur_max>
    f0b0:	464a      	mov	r2, r9
    f0b2:	4603      	mov	r3, r0
    f0b4:	a91c      	add	r1, sp, #112	; 0x70
    f0b6:	9700      	str	r7, [sp, #0]
    f0b8:	4658      	mov	r0, fp
    f0ba:	47a8      	blx	r5
    f0bc:	2800      	cmp	r0, #0
    f0be:	f000 80b0 	beq.w	f222 <_svfprintf_r+0x1e2>
    f0c2:	f2c0 80a6 	blt.w	f212 <_svfprintf_r+0x1d2>
    f0c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    f0c8:	2a25      	cmp	r2, #37	; 0x25
    f0ca:	4603      	mov	r3, r0
    f0cc:	d001      	beq.n	f0d2 <_svfprintf_r+0x92>
    f0ce:	4499      	add	r9, r3
    f0d0:	e7e9      	b.n	f0a6 <_svfprintf_r+0x66>
    f0d2:	ebb9 0504 	subs.w	r5, r9, r4
    f0d6:	4606      	mov	r6, r0
    f0d8:	f040 80a7 	bne.w	f22a <_svfprintf_r+0x1ea>
    f0dc:	2300      	movs	r3, #0
    f0de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f0e2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    f0e6:	4698      	mov	r8, r3
    f0e8:	9306      	str	r3, [sp, #24]
    f0ea:	f109 0901 	add.w	r9, r9, #1
    f0ee:	f899 3000 	ldrb.w	r3, [r9]
    f0f2:	9203      	str	r2, [sp, #12]
    f0f4:	252b      	movs	r5, #43	; 0x2b
    f0f6:	2620      	movs	r6, #32
    f0f8:	f109 0901 	add.w	r9, r9, #1
    f0fc:	f1a3 0220 	sub.w	r2, r3, #32
    f100:	2a5a      	cmp	r2, #90	; 0x5a
    f102:	f200 80cf 	bhi.w	f2a4 <_svfprintf_r+0x264>
    f106:	e8df f012 	tbh	[pc, r2, lsl #1]
    f10a:	02e8      	.short	0x02e8
    f10c:	00cd00cd 	.word	0x00cd00cd
    f110:	00cd02e3 	.word	0x00cd02e3
    f114:	00cd00cd 	.word	0x00cd00cd
    f118:	00cd006a 	.word	0x00cd006a
    f11c:	020500cd 	.word	0x020500cd
    f120:	00cd0284 	.word	0x00cd0284
    f124:	02c90210 	.word	0x02c90210
    f128:	02bd00cd 	.word	0x02bd00cd
    f12c:	005b005b 	.word	0x005b005b
    f130:	005b005b 	.word	0x005b005b
    f134:	005b005b 	.word	0x005b005b
    f138:	005b005b 	.word	0x005b005b
    f13c:	00cd005b 	.word	0x00cd005b
    f140:	00cd00cd 	.word	0x00cd00cd
    f144:	00cd00cd 	.word	0x00cd00cd
    f148:	00cd00cd 	.word	0x00cd00cd
    f14c:	00cd0153 	.word	0x00cd0153
    f150:	021a0183 	.word	0x021a0183
    f154:	01530153 	.word	0x01530153
    f158:	00cd0153 	.word	0x00cd0153
    f15c:	00cd00cd 	.word	0x00cd00cd
    f160:	021500cd 	.word	0x021500cd
    f164:	00cd00cd 	.word	0x00cd00cd
    f168:	00cd0296 	.word	0x00cd0296
    f16c:	00cd00cd 	.word	0x00cd00cd
    f170:	00cd01ab 	.word	0x00cd01ab
    f174:	00cd02aa 	.word	0x00cd02aa
    f178:	06e300cd 	.word	0x06e300cd
    f17c:	00cd00cd 	.word	0x00cd00cd
    f180:	00cd00cd 	.word	0x00cd00cd
    f184:	00cd00cd 	.word	0x00cd00cd
    f188:	00cd00cd 	.word	0x00cd00cd
    f18c:	00cd0153 	.word	0x00cd0153
    f190:	01de0183 	.word	0x01de0183
    f194:	01530153 	.word	0x01530153
    f198:	02770153 	.word	0x02770153
    f19c:	007f01de 	.word	0x007f01de
    f1a0:	028900cd 	.word	0x028900cd
    f1a4:	025f00cd 	.word	0x025f00cd
    f1a8:	022f06e0 	.word	0x022f06e0
    f1ac:	00cd007f 	.word	0x00cd007f
    f1b0:	007c01ab 	.word	0x007c01ab
    f1b4:	00cd06b8 	.word	0x00cd06b8
    f1b8:	06bd00cd 	.word	0x06bd00cd
    f1bc:	007c00cd 	.word	0x007c00cd
    f1c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f1c4:	2100      	movs	r1, #0
    f1c6:	f819 3b01 	ldrb.w	r3, [r9], #1
    f1ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f1ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f1d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f1d6:	2a09      	cmp	r2, #9
    f1d8:	d9f5      	bls.n	f1c6 <_svfprintf_r+0x186>
    f1da:	9106      	str	r1, [sp, #24]
    f1dc:	e78e      	b.n	f0fc <_svfprintf_r+0xbc>
    f1de:	4658      	mov	r0, fp
    f1e0:	f002 fa06 	bl	115f0 <_localeconv_r>
    f1e4:	6843      	ldr	r3, [r0, #4]
    f1e6:	9315      	str	r3, [sp, #84]	; 0x54
    f1e8:	4618      	mov	r0, r3
    f1ea:	f7ff fd09 	bl	ec00 <strlen>
    f1ee:	9016      	str	r0, [sp, #88]	; 0x58
    f1f0:	4658      	mov	r0, fp
    f1f2:	f002 f9fd 	bl	115f0 <_localeconv_r>
    f1f6:	6883      	ldr	r3, [r0, #8]
    f1f8:	9313      	str	r3, [sp, #76]	; 0x4c
    f1fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f1fc:	2b00      	cmp	r3, #0
    f1fe:	f040 862d 	bne.w	fe5c <_svfprintf_r+0xe1c>
    f202:	f899 3000 	ldrb.w	r3, [r9]
    f206:	e777      	b.n	f0f8 <_svfprintf_r+0xb8>
    f208:	f899 3000 	ldrb.w	r3, [r9]
    f20c:	f048 0820 	orr.w	r8, r8, #32
    f210:	e772      	b.n	f0f8 <_svfprintf_r+0xb8>
    f212:	2208      	movs	r2, #8
    f214:	2100      	movs	r1, #0
    f216:	4638      	mov	r0, r7
    f218:	f7ff f9c2 	bl	e5a0 <memset>
    f21c:	2301      	movs	r3, #1
    f21e:	4499      	add	r9, r3
    f220:	e741      	b.n	f0a6 <_svfprintf_r+0x66>
    f222:	ebb9 0504 	subs.w	r5, r9, r4
    f226:	4606      	mov	r6, r0
    f228:	d011      	beq.n	f24e <_svfprintf_r+0x20e>
    f22a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f22c:	442b      	add	r3, r5
    f22e:	9326      	str	r3, [sp, #152]	; 0x98
    f230:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f232:	3301      	adds	r3, #1
    f234:	2b07      	cmp	r3, #7
    f236:	e9ca 4500 	strd	r4, r5, [sl]
    f23a:	9325      	str	r3, [sp, #148]	; 0x94
    f23c:	dc1c      	bgt.n	f278 <_svfprintf_r+0x238>
    f23e:	f10a 0a08 	add.w	sl, sl, #8
    f242:	9b04      	ldr	r3, [sp, #16]
    f244:	442b      	add	r3, r5
    f246:	9304      	str	r3, [sp, #16]
    f248:	2e00      	cmp	r6, #0
    f24a:	f47f af47 	bne.w	f0dc <_svfprintf_r+0x9c>
    f24e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    f250:	2b00      	cmp	r3, #0
    f252:	f041 820b 	bne.w	1066c <_svfprintf_r+0x162c>
    f256:	ee1b 3a10 	vmov	r3, s22
    f25a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    f25e:	f013 0f40 	tst.w	r3, #64	; 0x40
    f262:	9b04      	ldr	r3, [sp, #16]
    f264:	bf18      	it	ne
    f266:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    f26a:	9304      	str	r3, [sp, #16]
    f26c:	9804      	ldr	r0, [sp, #16]
    f26e:	b051      	add	sp, #324	; 0x144
    f270:	ecbd 8b08 	vpop	{d8-d11}
    f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f278:	ee1b 1a10 	vmov	r1, s22
    f27c:	aa24      	add	r2, sp, #144	; 0x90
    f27e:	4658      	mov	r0, fp
    f280:	f003 f9e0 	bl	12644 <__ssprint_r>
    f284:	2800      	cmp	r0, #0
    f286:	d1e6      	bne.n	f256 <_svfprintf_r+0x216>
    f288:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f28c:	e7d9      	b.n	f242 <_svfprintf_r+0x202>
    f28e:	bf00      	nop
	...
    f298:	ffffffff 	.word	0xffffffff
    f29c:	7fefffff 	.word	0x7fefffff
    f2a0:	20002f38 	.word	0x20002f38
    f2a4:	930b      	str	r3, [sp, #44]	; 0x2c
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d0d1      	beq.n	f24e <_svfprintf_r+0x20e>
    f2aa:	2100      	movs	r1, #0
    f2ac:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    f2b0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    f2b4:	2301      	movs	r3, #1
    f2b6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f2ba:	9302      	str	r3, [sp, #8]
    f2bc:	9107      	str	r1, [sp, #28]
    f2be:	9305      	str	r3, [sp, #20]
    f2c0:	9103      	str	r1, [sp, #12]
    f2c2:	910f      	str	r1, [sp, #60]	; 0x3c
    f2c4:	ac37      	add	r4, sp, #220	; 0xdc
    f2c6:	f018 0302 	ands.w	r3, r8, #2
    f2ca:	9309      	str	r3, [sp, #36]	; 0x24
    f2cc:	d002      	beq.n	f2d4 <_svfprintf_r+0x294>
    f2ce:	9b02      	ldr	r3, [sp, #8]
    f2d0:	3302      	adds	r3, #2
    f2d2:	9302      	str	r3, [sp, #8]
    f2d4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    f2d8:	930a      	str	r3, [sp, #40]	; 0x28
    f2da:	d105      	bne.n	f2e8 <_svfprintf_r+0x2a8>
    f2dc:	9b06      	ldr	r3, [sp, #24]
    f2de:	9a02      	ldr	r2, [sp, #8]
    f2e0:	1a9d      	subs	r5, r3, r2
    f2e2:	2d00      	cmp	r5, #0
    f2e4:	f300 8369 	bgt.w	f9ba <_svfprintf_r+0x97a>
    f2e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f2ea:	b189      	cbz	r1, f310 <_svfprintf_r+0x2d0>
    f2ec:	9925      	ldr	r1, [sp, #148]	; 0x94
    f2ee:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    f2f2:	3101      	adds	r1, #1
    f2f4:	3201      	adds	r2, #1
    f2f6:	f8ca 0000 	str.w	r0, [sl]
    f2fa:	2907      	cmp	r1, #7
    f2fc:	f04f 0001 	mov.w	r0, #1
    f300:	9226      	str	r2, [sp, #152]	; 0x98
    f302:	9125      	str	r1, [sp, #148]	; 0x94
    f304:	f8ca 0004 	str.w	r0, [sl, #4]
    f308:	f300 83a2 	bgt.w	fa50 <_svfprintf_r+0xa10>
    f30c:	f10a 0a08 	add.w	sl, sl, #8
    f310:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f312:	b183      	cbz	r3, f336 <_svfprintf_r+0x2f6>
    f314:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f316:	a91a      	add	r1, sp, #104	; 0x68
    f318:	3301      	adds	r3, #1
    f31a:	3202      	adds	r2, #2
    f31c:	f8ca 1000 	str.w	r1, [sl]
    f320:	2b07      	cmp	r3, #7
    f322:	f04f 0102 	mov.w	r1, #2
    f326:	9226      	str	r2, [sp, #152]	; 0x98
    f328:	9325      	str	r3, [sp, #148]	; 0x94
    f32a:	f8ca 1004 	str.w	r1, [sl, #4]
    f32e:	f300 83a3 	bgt.w	fa78 <_svfprintf_r+0xa38>
    f332:	f10a 0a08 	add.w	sl, sl, #8
    f336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f338:	2b80      	cmp	r3, #128	; 0x80
    f33a:	f000 826c 	beq.w	f816 <_svfprintf_r+0x7d6>
    f33e:	9b03      	ldr	r3, [sp, #12]
    f340:	9905      	ldr	r1, [sp, #20]
    f342:	1a5d      	subs	r5, r3, r1
    f344:	2d00      	cmp	r5, #0
    f346:	f300 82a5 	bgt.w	f894 <_svfprintf_r+0x854>
    f34a:	f418 7f80 	tst.w	r8, #256	; 0x100
    f34e:	f040 820d 	bne.w	f76c <_svfprintf_r+0x72c>
    f352:	9b05      	ldr	r3, [sp, #20]
    f354:	f8ca 3004 	str.w	r3, [sl, #4]
    f358:	441a      	add	r2, r3
    f35a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f35c:	f8ca 4000 	str.w	r4, [sl]
    f360:	3301      	adds	r3, #1
    f362:	2b07      	cmp	r3, #7
    f364:	9226      	str	r2, [sp, #152]	; 0x98
    f366:	9325      	str	r3, [sp, #148]	; 0x94
    f368:	f300 831b 	bgt.w	f9a2 <_svfprintf_r+0x962>
    f36c:	f10a 0a08 	add.w	sl, sl, #8
    f370:	f018 0f04 	tst.w	r8, #4
    f374:	d005      	beq.n	f382 <_svfprintf_r+0x342>
    f376:	9b06      	ldr	r3, [sp, #24]
    f378:	9902      	ldr	r1, [sp, #8]
    f37a:	1a5c      	subs	r4, r3, r1
    f37c:	2c00      	cmp	r4, #0
    f37e:	f300 8388 	bgt.w	fa92 <_svfprintf_r+0xa52>
    f382:	9b04      	ldr	r3, [sp, #16]
    f384:	9906      	ldr	r1, [sp, #24]
    f386:	9802      	ldr	r0, [sp, #8]
    f388:	4281      	cmp	r1, r0
    f38a:	bfac      	ite	ge
    f38c:	185b      	addge	r3, r3, r1
    f38e:	181b      	addlt	r3, r3, r0
    f390:	9304      	str	r3, [sp, #16]
    f392:	2a00      	cmp	r2, #0
    f394:	f040 82b0 	bne.w	f8f8 <_svfprintf_r+0x8b8>
    f398:	2300      	movs	r3, #0
    f39a:	9325      	str	r3, [sp, #148]	; 0x94
    f39c:	9b07      	ldr	r3, [sp, #28]
    f39e:	b11b      	cbz	r3, f3a8 <_svfprintf_r+0x368>
    f3a0:	9907      	ldr	r1, [sp, #28]
    f3a2:	4658      	mov	r0, fp
    f3a4:	f7ff fd2e 	bl	ee04 <_free_r>
    f3a8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f3ac:	464c      	mov	r4, r9
    f3ae:	e679      	b.n	f0a4 <_svfprintf_r+0x64>
    f3b0:	930b      	str	r3, [sp, #44]	; 0x2c
    f3b2:	9b08      	ldr	r3, [sp, #32]
    f3b4:	3307      	adds	r3, #7
    f3b6:	f023 0307 	bic.w	r3, r3, #7
    f3ba:	ecb3 8b02 	vldmia	r3!, {d8}
    f3be:	eeb0 7bc8 	vabs.f64	d7, d8
    f3c2:	eeb4 7b49 	vcmp.f64	d7, d9
    f3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3ca:	9308      	str	r3, [sp, #32]
    f3cc:	f340 84e9 	ble.w	fda2 <_svfprintf_r+0xd62>
    f3d0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    f3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3d8:	f101 8059 	bmi.w	1048e <_svfprintf_r+0x144e>
    f3dc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f3e0:	4cab      	ldr	r4, [pc, #684]	; (f690 <_svfprintf_r+0x650>)
    f3e2:	4bac      	ldr	r3, [pc, #688]	; (f694 <_svfprintf_r+0x654>)
    f3e4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f3e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f3ea:	2a47      	cmp	r2, #71	; 0x47
    f3ec:	bfc8      	it	gt
    f3ee:	461c      	movgt	r4, r3
    f3f0:	2300      	movs	r3, #0
    f3f2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f3f6:	2203      	movs	r2, #3
    f3f8:	9307      	str	r3, [sp, #28]
    f3fa:	9202      	str	r2, [sp, #8]
    f3fc:	9205      	str	r2, [sp, #20]
    f3fe:	9303      	str	r3, [sp, #12]
    f400:	930f      	str	r3, [sp, #60]	; 0x3c
    f402:	2900      	cmp	r1, #0
    f404:	f43f af5f 	beq.w	f2c6 <_svfprintf_r+0x286>
    f408:	9b02      	ldr	r3, [sp, #8]
    f40a:	3301      	adds	r3, #1
    f40c:	9302      	str	r3, [sp, #8]
    f40e:	e75a      	b.n	f2c6 <_svfprintf_r+0x286>
    f410:	2b43      	cmp	r3, #67	; 0x43
    f412:	930b      	str	r3, [sp, #44]	; 0x2c
    f414:	d003      	beq.n	f41e <_svfprintf_r+0x3de>
    f416:	f018 0f10 	tst.w	r8, #16
    f41a:	f000 855d 	beq.w	fed8 <_svfprintf_r+0xe98>
    f41e:	9d08      	ldr	r5, [sp, #32]
    f420:	2208      	movs	r2, #8
    f422:	2100      	movs	r1, #0
    f424:	a822      	add	r0, sp, #136	; 0x88
    f426:	ac37      	add	r4, sp, #220	; 0xdc
    f428:	f7ff f8ba 	bl	e5a0 <memset>
    f42c:	ab22      	add	r3, sp, #136	; 0x88
    f42e:	f855 2b04 	ldr.w	r2, [r5], #4
    f432:	4621      	mov	r1, r4
    f434:	4658      	mov	r0, fp
    f436:	f002 f91d 	bl	11674 <_wcrtomb_r>
    f43a:	4603      	mov	r3, r0
    f43c:	3301      	adds	r3, #1
    f43e:	9005      	str	r0, [sp, #20]
    f440:	f001 82ee 	beq.w	10a20 <_svfprintf_r+0x19e0>
    f444:	9b05      	ldr	r3, [sp, #20]
    f446:	9508      	str	r5, [sp, #32]
    f448:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f44c:	9302      	str	r3, [sp, #8]
    f44e:	2100      	movs	r1, #0
    f450:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    f454:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f458:	9107      	str	r1, [sp, #28]
    f45a:	9103      	str	r1, [sp, #12]
    f45c:	910f      	str	r1, [sp, #60]	; 0x3c
    f45e:	e732      	b.n	f2c6 <_svfprintf_r+0x286>
    f460:	930b      	str	r3, [sp, #44]	; 0x2c
    f462:	9b08      	ldr	r3, [sp, #32]
    f464:	461a      	mov	r2, r3
    f466:	2300      	movs	r3, #0
    f468:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    f46c:	4613      	mov	r3, r2
    f46e:	f853 4b04 	ldr.w	r4, [r3], #4
    f472:	9308      	str	r3, [sp, #32]
    f474:	2c00      	cmp	r4, #0
    f476:	f000 8548 	beq.w	ff0a <_svfprintf_r+0xeca>
    f47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f47c:	2b53      	cmp	r3, #83	; 0x53
    f47e:	f000 86ec 	beq.w	1025a <_svfprintf_r+0x121a>
    f482:	f018 0310 	ands.w	r3, r8, #16
    f486:	930c      	str	r3, [sp, #48]	; 0x30
    f488:	f040 86e7 	bne.w	1025a <_svfprintf_r+0x121a>
    f48c:	9b03      	ldr	r3, [sp, #12]
    f48e:	1c5d      	adds	r5, r3, #1
    f490:	f001 80e5 	beq.w	1065e <_svfprintf_r+0x161e>
    f494:	990c      	ldr	r1, [sp, #48]	; 0x30
    f496:	461a      	mov	r2, r3
    f498:	4620      	mov	r0, r4
    f49a:	f7ff fb61 	bl	eb60 <memchr>
    f49e:	9007      	str	r0, [sp, #28]
    f4a0:	2800      	cmp	r0, #0
    f4a2:	f001 8328 	beq.w	10af6 <_svfprintf_r+0x1ab6>
    f4a6:	9b07      	ldr	r3, [sp, #28]
    f4a8:	1b1a      	subs	r2, r3, r4
    f4aa:	9205      	str	r2, [sp, #20]
    f4ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f4ae:	9303      	str	r3, [sp, #12]
    f4b0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f4b4:	930f      	str	r3, [sp, #60]	; 0x3c
    f4b6:	930d      	str	r3, [sp, #52]	; 0x34
    f4b8:	9307      	str	r3, [sp, #28]
    f4ba:	2373      	movs	r3, #115	; 0x73
    f4bc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f4c0:	9202      	str	r2, [sp, #8]
    f4c2:	930b      	str	r3, [sp, #44]	; 0x2c
    f4c4:	e79d      	b.n	f402 <_svfprintf_r+0x3c2>
    f4c6:	f018 0f20 	tst.w	r8, #32
    f4ca:	930b      	str	r3, [sp, #44]	; 0x2c
    f4cc:	9b08      	ldr	r3, [sp, #32]
    f4ce:	d03d      	beq.n	f54c <_svfprintf_r+0x50c>
    f4d0:	3307      	adds	r3, #7
    f4d2:	f023 0307 	bic.w	r3, r3, #7
    f4d6:	461a      	mov	r2, r3
    f4d8:	4611      	mov	r1, r2
    f4da:	685b      	ldr	r3, [r3, #4]
    f4dc:	f851 2b08 	ldr.w	r2, [r1], #8
    f4e0:	9108      	str	r1, [sp, #32]
    f4e2:	4619      	mov	r1, r3
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	f2c0 840c 	blt.w	fd02 <_svfprintf_r+0xcc2>
    f4ea:	9b03      	ldr	r3, [sp, #12]
    f4ec:	3301      	adds	r3, #1
    f4ee:	f000 829e 	beq.w	fa2e <_svfprintf_r+0x9ee>
    f4f2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    f4f6:	ea52 0301 	orrs.w	r3, r2, r1
    f4fa:	9002      	str	r0, [sp, #8]
    f4fc:	f040 8299 	bne.w	fa32 <_svfprintf_r+0x9f2>
    f500:	9b03      	ldr	r3, [sp, #12]
    f502:	2b00      	cmp	r3, #0
    f504:	f040 829a 	bne.w	fa3c <_svfprintf_r+0x9fc>
    f508:	4680      	mov	r8, r0
    f50a:	2300      	movs	r3, #0
    f50c:	9303      	str	r3, [sp, #12]
    f50e:	9305      	str	r3, [sp, #20]
    f510:	ac50      	add	r4, sp, #320	; 0x140
    f512:	e106      	b.n	f722 <_svfprintf_r+0x6e2>
    f514:	9b08      	ldr	r3, [sp, #32]
    f516:	f853 2b04 	ldr.w	r2, [r3], #4
    f51a:	9206      	str	r2, [sp, #24]
    f51c:	2a00      	cmp	r2, #0
    f51e:	f280 8419 	bge.w	fd54 <_svfprintf_r+0xd14>
    f522:	9a06      	ldr	r2, [sp, #24]
    f524:	9308      	str	r3, [sp, #32]
    f526:	4252      	negs	r2, r2
    f528:	9206      	str	r2, [sp, #24]
    f52a:	f899 3000 	ldrb.w	r3, [r9]
    f52e:	f048 0804 	orr.w	r8, r8, #4
    f532:	e5e1      	b.n	f0f8 <_svfprintf_r+0xb8>
    f534:	f899 3000 	ldrb.w	r3, [r9]
    f538:	f048 0808 	orr.w	r8, r8, #8
    f53c:	e5dc      	b.n	f0f8 <_svfprintf_r+0xb8>
    f53e:	f048 0810 	orr.w	r8, r8, #16
    f542:	f018 0f20 	tst.w	r8, #32
    f546:	930b      	str	r3, [sp, #44]	; 0x2c
    f548:	9b08      	ldr	r3, [sp, #32]
    f54a:	d1c1      	bne.n	f4d0 <_svfprintf_r+0x490>
    f54c:	f018 0f10 	tst.w	r8, #16
    f550:	f040 840b 	bne.w	fd6a <_svfprintf_r+0xd2a>
    f554:	f018 0f40 	tst.w	r8, #64	; 0x40
    f558:	f000 8403 	beq.w	fd62 <_svfprintf_r+0xd22>
    f55c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    f560:	9308      	str	r3, [sp, #32]
    f562:	17d1      	asrs	r1, r2, #31
    f564:	460b      	mov	r3, r1
    f566:	e7bd      	b.n	f4e4 <_svfprintf_r+0x4a4>
    f568:	9b08      	ldr	r3, [sp, #32]
    f56a:	f048 0202 	orr.w	r2, r8, #2
    f56e:	9202      	str	r2, [sp, #8]
    f570:	f853 2b04 	ldr.w	r2, [r3], #4
    f574:	9308      	str	r3, [sp, #32]
    f576:	f647 0330 	movw	r3, #30768	; 0x7830
    f57a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    f57e:	2078      	movs	r0, #120	; 0x78
    f580:	4b45      	ldr	r3, [pc, #276]	; (f698 <_svfprintf_r+0x658>)
    f582:	9311      	str	r3, [sp, #68]	; 0x44
    f584:	2100      	movs	r1, #0
    f586:	2302      	movs	r3, #2
    f588:	900b      	str	r0, [sp, #44]	; 0x2c
    f58a:	2000      	movs	r0, #0
    f58c:	9c03      	ldr	r4, [sp, #12]
    f58e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    f592:	1c60      	adds	r0, r4, #1
    f594:	f000 80ad 	beq.w	f6f2 <_svfprintf_r+0x6b2>
    f598:	9802      	ldr	r0, [sp, #8]
    f59a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    f59e:	ea52 0001 	orrs.w	r0, r2, r1
    f5a2:	f040 80a4 	bne.w	f6ee <_svfprintf_r+0x6ae>
    f5a6:	2c00      	cmp	r4, #0
    f5a8:	f040 86ae 	bne.w	10308 <_svfprintf_r+0x12c8>
    f5ac:	2b00      	cmp	r3, #0
    f5ae:	d1ac      	bne.n	f50a <_svfprintf_r+0x4ca>
    f5b0:	9b02      	ldr	r3, [sp, #8]
    f5b2:	f013 0301 	ands.w	r3, r3, #1
    f5b6:	9305      	str	r3, [sp, #20]
    f5b8:	f000 83d1 	beq.w	fd5e <_svfprintf_r+0xd1e>
    f5bc:	2330      	movs	r3, #48	; 0x30
    f5be:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    f5c2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    f5c6:	e0ac      	b.n	f722 <_svfprintf_r+0x6e2>
    f5c8:	f018 0f20 	tst.w	r8, #32
    f5cc:	f040 83d4 	bne.w	fd78 <_svfprintf_r+0xd38>
    f5d0:	f018 0f10 	tst.w	r8, #16
    f5d4:	f040 869f 	bne.w	10316 <_svfprintf_r+0x12d6>
    f5d8:	f018 0f40 	tst.w	r8, #64	; 0x40
    f5dc:	f040 8797 	bne.w	1050e <_svfprintf_r+0x14ce>
    f5e0:	f418 7f00 	tst.w	r8, #512	; 0x200
    f5e4:	f000 8697 	beq.w	10316 <_svfprintf_r+0x12d6>
    f5e8:	9b08      	ldr	r3, [sp, #32]
    f5ea:	9904      	ldr	r1, [sp, #16]
    f5ec:	f853 2b04 	ldr.w	r2, [r3], #4
    f5f0:	9308      	str	r3, [sp, #32]
    f5f2:	7011      	strb	r1, [r2, #0]
    f5f4:	464c      	mov	r4, r9
    f5f6:	e555      	b.n	f0a4 <_svfprintf_r+0x64>
    f5f8:	f899 3000 	ldrb.w	r3, [r9]
    f5fc:	2b68      	cmp	r3, #104	; 0x68
    f5fe:	bf03      	ittte	eq
    f600:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    f604:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    f608:	f109 0901 	addeq.w	r9, r9, #1
    f60c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    f610:	e572      	b.n	f0f8 <_svfprintf_r+0xb8>
    f612:	f899 3000 	ldrb.w	r3, [r9]
    f616:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    f61a:	e56d      	b.n	f0f8 <_svfprintf_r+0xb8>
    f61c:	f899 3000 	ldrb.w	r3, [r9]
    f620:	2b6c      	cmp	r3, #108	; 0x6c
    f622:	bf03      	ittte	eq
    f624:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    f628:	f048 0820 	orreq.w	r8, r8, #32
    f62c:	f109 0901 	addeq.w	r9, r9, #1
    f630:	f048 0810 	orrne.w	r8, r8, #16
    f634:	e560      	b.n	f0f8 <_svfprintf_r+0xb8>
    f636:	930b      	str	r3, [sp, #44]	; 0x2c
    f638:	f048 0810 	orr.w	r8, r8, #16
    f63c:	f018 0120 	ands.w	r1, r8, #32
    f640:	f000 8351 	beq.w	fce6 <_svfprintf_r+0xca6>
    f644:	9b08      	ldr	r3, [sp, #32]
    f646:	3307      	adds	r3, #7
    f648:	f023 0307 	bic.w	r3, r3, #7
    f64c:	6859      	ldr	r1, [r3, #4]
    f64e:	f853 2b08 	ldr.w	r2, [r3], #8
    f652:	9308      	str	r3, [sp, #32]
    f654:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f658:	9302      	str	r3, [sp, #8]
    f65a:	2300      	movs	r3, #0
    f65c:	e795      	b.n	f58a <_svfprintf_r+0x54a>
    f65e:	930b      	str	r3, [sp, #44]	; 0x2c
    f660:	f048 0310 	orr.w	r3, r8, #16
    f664:	9302      	str	r3, [sp, #8]
    f666:	9b02      	ldr	r3, [sp, #8]
    f668:	f013 0120 	ands.w	r1, r3, #32
    f66c:	f000 8329 	beq.w	fcc2 <_svfprintf_r+0xc82>
    f670:	9b08      	ldr	r3, [sp, #32]
    f672:	3307      	adds	r3, #7
    f674:	f023 0307 	bic.w	r3, r3, #7
    f678:	6859      	ldr	r1, [r3, #4]
    f67a:	f853 2b08 	ldr.w	r2, [r3], #8
    f67e:	9308      	str	r3, [sp, #32]
    f680:	2301      	movs	r3, #1
    f682:	e782      	b.n	f58a <_svfprintf_r+0x54a>
    f684:	f899 3000 	ldrb.w	r3, [r9]
    f688:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    f68c:	e534      	b.n	f0f8 <_svfprintf_r+0xb8>
    f68e:	bf00      	nop
    f690:	20002614 	.word	0x20002614
    f694:	20002618 	.word	0x20002618
    f698:	20002624 	.word	0x20002624
    f69c:	4649      	mov	r1, r9
    f69e:	f811 3b01 	ldrb.w	r3, [r1], #1
    f6a2:	2b2a      	cmp	r3, #42	; 0x2a
    f6a4:	f001 8249 	beq.w	10b3a <_svfprintf_r+0x1afa>
    f6a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f6ac:	2a09      	cmp	r2, #9
    f6ae:	4689      	mov	r9, r1
    f6b0:	bf98      	it	ls
    f6b2:	2100      	movls	r1, #0
    f6b4:	f201 8144 	bhi.w	10940 <_svfprintf_r+0x1900>
    f6b8:	f819 3b01 	ldrb.w	r3, [r9], #1
    f6bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f6c0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f6c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f6c8:	2a09      	cmp	r2, #9
    f6ca:	d9f5      	bls.n	f6b8 <_svfprintf_r+0x678>
    f6cc:	9103      	str	r1, [sp, #12]
    f6ce:	e515      	b.n	f0fc <_svfprintf_r+0xbc>
    f6d0:	f899 3000 	ldrb.w	r3, [r9]
    f6d4:	f048 0801 	orr.w	r8, r8, #1
    f6d8:	e50e      	b.n	f0f8 <_svfprintf_r+0xb8>
    f6da:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    f6de:	2b00      	cmp	r3, #0
    f6e0:	f47f ad8f 	bne.w	f202 <_svfprintf_r+0x1c2>
    f6e4:	f899 3000 	ldrb.w	r3, [r9]
    f6e8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    f6ec:	e504      	b.n	f0f8 <_svfprintf_r+0xb8>
    f6ee:	f8cd 8008 	str.w	r8, [sp, #8]
    f6f2:	2b01      	cmp	r3, #1
    f6f4:	f000 819d 	beq.w	fa32 <_svfprintf_r+0x9f2>
    f6f8:	2b02      	cmp	r3, #2
    f6fa:	ac50      	add	r4, sp, #320	; 0x140
    f6fc:	d120      	bne.n	f740 <_svfprintf_r+0x700>
    f6fe:	9811      	ldr	r0, [sp, #68]	; 0x44
    f700:	f002 030f 	and.w	r3, r2, #15
    f704:	0912      	lsrs	r2, r2, #4
    f706:	5cc3      	ldrb	r3, [r0, r3]
    f708:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f70c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f710:	0909      	lsrs	r1, r1, #4
    f712:	ea52 0301 	orrs.w	r3, r2, r1
    f716:	d1f3      	bne.n	f700 <_svfprintf_r+0x6c0>
    f718:	ab50      	add	r3, sp, #320	; 0x140
    f71a:	1b1b      	subs	r3, r3, r4
    f71c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f720:	9305      	str	r3, [sp, #20]
    f722:	9a05      	ldr	r2, [sp, #20]
    f724:	9803      	ldr	r0, [sp, #12]
    f726:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f72a:	4282      	cmp	r2, r0
    f72c:	f04f 0300 	mov.w	r3, #0
    f730:	bfb8      	it	lt
    f732:	4602      	movlt	r2, r0
    f734:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f738:	9307      	str	r3, [sp, #28]
    f73a:	9202      	str	r2, [sp, #8]
    f73c:	930f      	str	r3, [sp, #60]	; 0x3c
    f73e:	e660      	b.n	f402 <_svfprintf_r+0x3c2>
    f740:	f002 0307 	and.w	r3, r2, #7
    f744:	08d2      	lsrs	r2, r2, #3
    f746:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    f74a:	08c9      	lsrs	r1, r1, #3
    f74c:	3330      	adds	r3, #48	; 0x30
    f74e:	ea52 0501 	orrs.w	r5, r2, r1
    f752:	4620      	mov	r0, r4
    f754:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f758:	d1f2      	bne.n	f740 <_svfprintf_r+0x700>
    f75a:	9a02      	ldr	r2, [sp, #8]
    f75c:	07d1      	lsls	r1, r2, #31
    f75e:	f100 824d 	bmi.w	fbfc <_svfprintf_r+0xbbc>
    f762:	ab50      	add	r3, sp, #320	; 0x140
    f764:	1b1b      	subs	r3, r3, r4
    f766:	4690      	mov	r8, r2
    f768:	9305      	str	r3, [sp, #20]
    f76a:	e7da      	b.n	f722 <_svfprintf_r+0x6e2>
    f76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f76e:	2b65      	cmp	r3, #101	; 0x65
    f770:	f340 80d4 	ble.w	f91c <_svfprintf_r+0x8dc>
    f774:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f77c:	f040 81c1 	bne.w	fb02 <_svfprintf_r+0xac2>
    f780:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f782:	49ba      	ldr	r1, [pc, #744]	; (fa6c <_svfprintf_r+0xa2c>)
    f784:	f8ca 1000 	str.w	r1, [sl]
    f788:	3301      	adds	r3, #1
    f78a:	3201      	adds	r2, #1
    f78c:	2101      	movs	r1, #1
    f78e:	2b07      	cmp	r3, #7
    f790:	9226      	str	r2, [sp, #152]	; 0x98
    f792:	9325      	str	r3, [sp, #148]	; 0x94
    f794:	f8ca 1004 	str.w	r1, [sl, #4]
    f798:	f300 8551 	bgt.w	1023e <_svfprintf_r+0x11fe>
    f79c:	f10a 0a08 	add.w	sl, sl, #8
    f7a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f7a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    f7a4:	428b      	cmp	r3, r1
    f7a6:	f280 82d0 	bge.w	fd4a <_svfprintf_r+0xd0a>
    f7aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f7ac:	9912      	ldr	r1, [sp, #72]	; 0x48
    f7ae:	441a      	add	r2, r3
    f7b0:	e9ca 1300 	strd	r1, r3, [sl]
    f7b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f7b6:	9226      	str	r2, [sp, #152]	; 0x98
    f7b8:	3301      	adds	r3, #1
    f7ba:	2b07      	cmp	r3, #7
    f7bc:	9325      	str	r3, [sp, #148]	; 0x94
    f7be:	f300 8397 	bgt.w	fef0 <_svfprintf_r+0xeb0>
    f7c2:	f10a 0a08 	add.w	sl, sl, #8
    f7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f7c8:	1e5c      	subs	r4, r3, #1
    f7ca:	2c00      	cmp	r4, #0
    f7cc:	f77f add0 	ble.w	f370 <_svfprintf_r+0x330>
    f7d0:	2c10      	cmp	r4, #16
    f7d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f7d4:	f340 856e 	ble.w	102b4 <_svfprintf_r+0x1274>
    f7d8:	ee1b 6a10 	vmov	r6, s22
    f7dc:	2510      	movs	r5, #16
    f7de:	e005      	b.n	f7ec <_svfprintf_r+0x7ac>
    f7e0:	f10a 0a08 	add.w	sl, sl, #8
    f7e4:	3c10      	subs	r4, #16
    f7e6:	2c10      	cmp	r4, #16
    f7e8:	f340 8564 	ble.w	102b4 <_svfprintf_r+0x1274>
    f7ec:	3301      	adds	r3, #1
    f7ee:	49a0      	ldr	r1, [pc, #640]	; (fa70 <_svfprintf_r+0xa30>)
    f7f0:	3210      	adds	r2, #16
    f7f2:	2b07      	cmp	r3, #7
    f7f4:	e9ca 1500 	strd	r1, r5, [sl]
    f7f8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f7fc:	ddf0      	ble.n	f7e0 <_svfprintf_r+0x7a0>
    f7fe:	aa24      	add	r2, sp, #144	; 0x90
    f800:	4631      	mov	r1, r6
    f802:	4658      	mov	r0, fp
    f804:	f002 ff1e 	bl	12644 <__ssprint_r>
    f808:	2800      	cmp	r0, #0
    f80a:	d17e      	bne.n	f90a <_svfprintf_r+0x8ca>
    f80c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f810:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f814:	e7e6      	b.n	f7e4 <_svfprintf_r+0x7a4>
    f816:	9b06      	ldr	r3, [sp, #24]
    f818:	9902      	ldr	r1, [sp, #8]
    f81a:	1a5d      	subs	r5, r3, r1
    f81c:	2d00      	cmp	r5, #0
    f81e:	f77f ad8e 	ble.w	f33e <_svfprintf_r+0x2fe>
    f822:	2d10      	cmp	r5, #16
    f824:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f826:	dd21      	ble.n	f86c <_svfprintf_r+0x82c>
    f828:	9409      	str	r4, [sp, #36]	; 0x24
    f82a:	2610      	movs	r6, #16
    f82c:	ee1b 4a10 	vmov	r4, s22
    f830:	e004      	b.n	f83c <_svfprintf_r+0x7fc>
    f832:	3d10      	subs	r5, #16
    f834:	2d10      	cmp	r5, #16
    f836:	f10a 0a08 	add.w	sl, sl, #8
    f83a:	dd16      	ble.n	f86a <_svfprintf_r+0x82a>
    f83c:	3301      	adds	r3, #1
    f83e:	498c      	ldr	r1, [pc, #560]	; (fa70 <_svfprintf_r+0xa30>)
    f840:	3210      	adds	r2, #16
    f842:	2b07      	cmp	r3, #7
    f844:	e9ca 1600 	strd	r1, r6, [sl]
    f848:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f84c:	ddf1      	ble.n	f832 <_svfprintf_r+0x7f2>
    f84e:	aa24      	add	r2, sp, #144	; 0x90
    f850:	4621      	mov	r1, r4
    f852:	4658      	mov	r0, fp
    f854:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f858:	f002 fef4 	bl	12644 <__ssprint_r>
    f85c:	2800      	cmp	r0, #0
    f85e:	d154      	bne.n	f90a <_svfprintf_r+0x8ca>
    f860:	3d10      	subs	r5, #16
    f862:	2d10      	cmp	r5, #16
    f864:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f868:	dce8      	bgt.n	f83c <_svfprintf_r+0x7fc>
    f86a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f86c:	4980      	ldr	r1, [pc, #512]	; (fa70 <_svfprintf_r+0xa30>)
    f86e:	f8ca 5004 	str.w	r5, [sl, #4]
    f872:	3301      	adds	r3, #1
    f874:	442a      	add	r2, r5
    f876:	2b07      	cmp	r3, #7
    f878:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f87c:	f8ca 1000 	str.w	r1, [sl]
    f880:	f300 8526 	bgt.w	102d0 <_svfprintf_r+0x1290>
    f884:	9b03      	ldr	r3, [sp, #12]
    f886:	9905      	ldr	r1, [sp, #20]
    f888:	1a5d      	subs	r5, r3, r1
    f88a:	2d00      	cmp	r5, #0
    f88c:	f10a 0a08 	add.w	sl, sl, #8
    f890:	f77f ad5b 	ble.w	f34a <_svfprintf_r+0x30a>
    f894:	2d10      	cmp	r5, #16
    f896:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f898:	dd1f      	ble.n	f8da <_svfprintf_r+0x89a>
    f89a:	4651      	mov	r1, sl
    f89c:	2610      	movs	r6, #16
    f89e:	ee1b aa10 	vmov	sl, s22
    f8a2:	e004      	b.n	f8ae <_svfprintf_r+0x86e>
    f8a4:	3d10      	subs	r5, #16
    f8a6:	2d10      	cmp	r5, #16
    f8a8:	f101 0108 	add.w	r1, r1, #8
    f8ac:	dd14      	ble.n	f8d8 <_svfprintf_r+0x898>
    f8ae:	3301      	adds	r3, #1
    f8b0:	486f      	ldr	r0, [pc, #444]	; (fa70 <_svfprintf_r+0xa30>)
    f8b2:	3210      	adds	r2, #16
    f8b4:	2b07      	cmp	r3, #7
    f8b6:	e9c1 0600 	strd	r0, r6, [r1]
    f8ba:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f8be:	ddf1      	ble.n	f8a4 <_svfprintf_r+0x864>
    f8c0:	aa24      	add	r2, sp, #144	; 0x90
    f8c2:	4651      	mov	r1, sl
    f8c4:	4658      	mov	r0, fp
    f8c6:	f002 febd 	bl	12644 <__ssprint_r>
    f8ca:	b9f0      	cbnz	r0, f90a <_svfprintf_r+0x8ca>
    f8cc:	3d10      	subs	r5, #16
    f8ce:	2d10      	cmp	r5, #16
    f8d0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f8d4:	a927      	add	r1, sp, #156	; 0x9c
    f8d6:	dcea      	bgt.n	f8ae <_svfprintf_r+0x86e>
    f8d8:	468a      	mov	sl, r1
    f8da:	3301      	adds	r3, #1
    f8dc:	4964      	ldr	r1, [pc, #400]	; (fa70 <_svfprintf_r+0xa30>)
    f8de:	f8ca 5004 	str.w	r5, [sl, #4]
    f8e2:	442a      	add	r2, r5
    f8e4:	2b07      	cmp	r3, #7
    f8e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f8ea:	f8ca 1000 	str.w	r1, [sl]
    f8ee:	f300 81da 	bgt.w	fca6 <_svfprintf_r+0xc66>
    f8f2:	f10a 0a08 	add.w	sl, sl, #8
    f8f6:	e528      	b.n	f34a <_svfprintf_r+0x30a>
    f8f8:	ee1b 1a10 	vmov	r1, s22
    f8fc:	aa24      	add	r2, sp, #144	; 0x90
    f8fe:	4658      	mov	r0, fp
    f900:	f002 fea0 	bl	12644 <__ssprint_r>
    f904:	2800      	cmp	r0, #0
    f906:	f43f ad47 	beq.w	f398 <_svfprintf_r+0x358>
    f90a:	9b07      	ldr	r3, [sp, #28]
    f90c:	2b00      	cmp	r3, #0
    f90e:	f43f aca2 	beq.w	f256 <_svfprintf_r+0x216>
    f912:	9907      	ldr	r1, [sp, #28]
    f914:	4658      	mov	r0, fp
    f916:	f7ff fa75 	bl	ee04 <_free_r>
    f91a:	e49c      	b.n	f256 <_svfprintf_r+0x216>
    f91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f91e:	2b01      	cmp	r3, #1
    f920:	f340 817a 	ble.w	fc18 <_svfprintf_r+0xbd8>
    f924:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f926:	f8ca 4000 	str.w	r4, [sl]
    f92a:	3301      	adds	r3, #1
    f92c:	3201      	adds	r2, #1
    f92e:	2101      	movs	r1, #1
    f930:	2b07      	cmp	r3, #7
    f932:	9226      	str	r2, [sp, #152]	; 0x98
    f934:	9325      	str	r3, [sp, #148]	; 0x94
    f936:	f8ca 1004 	str.w	r1, [sl, #4]
    f93a:	f300 81f8 	bgt.w	fd2e <_svfprintf_r+0xcee>
    f93e:	f10a 0a08 	add.w	sl, sl, #8
    f942:	9910      	ldr	r1, [sp, #64]	; 0x40
    f944:	9812      	ldr	r0, [sp, #72]	; 0x48
    f946:	3301      	adds	r3, #1
    f948:	440a      	add	r2, r1
    f94a:	2b07      	cmp	r3, #7
    f94c:	e9ca 0100 	strd	r0, r1, [sl]
    f950:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f954:	f300 81dd 	bgt.w	fd12 <_svfprintf_r+0xcd2>
    f958:	f10a 0a08 	add.w	sl, sl, #8
    f95c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f964:	f000 8177 	beq.w	fc56 <_svfprintf_r+0xc16>
    f968:	990e      	ldr	r1, [sp, #56]	; 0x38
    f96a:	3301      	adds	r3, #1
    f96c:	3901      	subs	r1, #1
    f96e:	3401      	adds	r4, #1
    f970:	440a      	add	r2, r1
    f972:	2b07      	cmp	r3, #7
    f974:	f8ca 4000 	str.w	r4, [sl]
    f978:	9325      	str	r3, [sp, #148]	; 0x94
    f97a:	f8ca 1004 	str.w	r1, [sl, #4]
    f97e:	9226      	str	r2, [sp, #152]	; 0x98
    f980:	f300 815b 	bgt.w	fc3a <_svfprintf_r+0xbfa>
    f984:	f10a 0a08 	add.w	sl, sl, #8
    f988:	9914      	ldr	r1, [sp, #80]	; 0x50
    f98a:	f8ca 1004 	str.w	r1, [sl, #4]
    f98e:	3301      	adds	r3, #1
    f990:	440a      	add	r2, r1
    f992:	2b07      	cmp	r3, #7
    f994:	a91e      	add	r1, sp, #120	; 0x78
    f996:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f99a:	f8ca 1000 	str.w	r1, [sl]
    f99e:	f77f ace5 	ble.w	f36c <_svfprintf_r+0x32c>
    f9a2:	ee1b 1a10 	vmov	r1, s22
    f9a6:	aa24      	add	r2, sp, #144	; 0x90
    f9a8:	4658      	mov	r0, fp
    f9aa:	f002 fe4b 	bl	12644 <__ssprint_r>
    f9ae:	2800      	cmp	r0, #0
    f9b0:	d1ab      	bne.n	f90a <_svfprintf_r+0x8ca>
    f9b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f9b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f9b8:	e4da      	b.n	f370 <_svfprintf_r+0x330>
    f9ba:	2d10      	cmp	r5, #16
    f9bc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    f9c0:	4e2c      	ldr	r6, [pc, #176]	; (fa74 <_svfprintf_r+0xa34>)
    f9c2:	dd24      	ble.n	fa0e <_svfprintf_r+0x9ce>
    f9c4:	9417      	str	r4, [sp, #92]	; 0x5c
    f9c6:	2310      	movs	r3, #16
    f9c8:	ee1b 4a10 	vmov	r4, s22
    f9cc:	4608      	mov	r0, r1
    f9ce:	e004      	b.n	f9da <_svfprintf_r+0x99a>
    f9d0:	3d10      	subs	r5, #16
    f9d2:	2d10      	cmp	r5, #16
    f9d4:	f10a 0a08 	add.w	sl, sl, #8
    f9d8:	dd17      	ble.n	fa0a <_svfprintf_r+0x9ca>
    f9da:	3001      	adds	r0, #1
    f9dc:	3210      	adds	r2, #16
    f9de:	2807      	cmp	r0, #7
    f9e0:	e9ca 6300 	strd	r6, r3, [sl]
    f9e4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    f9e8:	ddf2      	ble.n	f9d0 <_svfprintf_r+0x990>
    f9ea:	aa24      	add	r2, sp, #144	; 0x90
    f9ec:	4621      	mov	r1, r4
    f9ee:	4658      	mov	r0, fp
    f9f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f9f4:	f002 fe26 	bl	12644 <__ssprint_r>
    f9f8:	2800      	cmp	r0, #0
    f9fa:	d186      	bne.n	f90a <_svfprintf_r+0x8ca>
    f9fc:	3d10      	subs	r5, #16
    f9fe:	2d10      	cmp	r5, #16
    fa00:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    fa04:	f04f 0310 	mov.w	r3, #16
    fa08:	dce7      	bgt.n	f9da <_svfprintf_r+0x99a>
    fa0a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    fa0c:	4601      	mov	r1, r0
    fa0e:	3101      	adds	r1, #1
    fa10:	442a      	add	r2, r5
    fa12:	2907      	cmp	r1, #7
    fa14:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    fa18:	f8ca 6000 	str.w	r6, [sl]
    fa1c:	f8ca 5004 	str.w	r5, [sl, #4]
    fa20:	f300 83bd 	bgt.w	1019e <_svfprintf_r+0x115e>
    fa24:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fa28:	f10a 0a08 	add.w	sl, sl, #8
    fa2c:	e45d      	b.n	f2ea <_svfprintf_r+0x2aa>
    fa2e:	f8cd 8008 	str.w	r8, [sp, #8]
    fa32:	2a0a      	cmp	r2, #10
    fa34:	f171 0300 	sbcs.w	r3, r1, #0
    fa38:	f080 8345 	bcs.w	100c6 <_svfprintf_r+0x1086>
    fa3c:	3230      	adds	r2, #48	; 0x30
    fa3e:	2301      	movs	r3, #1
    fa40:	f8dd 8008 	ldr.w	r8, [sp, #8]
    fa44:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    fa48:	9305      	str	r3, [sp, #20]
    fa4a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    fa4e:	e668      	b.n	f722 <_svfprintf_r+0x6e2>
    fa50:	ee1b 1a10 	vmov	r1, s22
    fa54:	aa24      	add	r2, sp, #144	; 0x90
    fa56:	4658      	mov	r0, fp
    fa58:	f002 fdf4 	bl	12644 <__ssprint_r>
    fa5c:	2800      	cmp	r0, #0
    fa5e:	f47f af54 	bne.w	f90a <_svfprintf_r+0x8ca>
    fa62:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fa64:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fa68:	e452      	b.n	f310 <_svfprintf_r+0x2d0>
    fa6a:	bf00      	nop
    fa6c:	20002654 	.word	0x20002654
    fa70:	200029b4 	.word	0x200029b4
    fa74:	20002658 	.word	0x20002658
    fa78:	ee1b 1a10 	vmov	r1, s22
    fa7c:	aa24      	add	r2, sp, #144	; 0x90
    fa7e:	4658      	mov	r0, fp
    fa80:	f002 fde0 	bl	12644 <__ssprint_r>
    fa84:	2800      	cmp	r0, #0
    fa86:	f47f af40 	bne.w	f90a <_svfprintf_r+0x8ca>
    fa8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fa8c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fa90:	e451      	b.n	f336 <_svfprintf_r+0x2f6>
    fa92:	2c10      	cmp	r4, #16
    fa94:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fa96:	4ebe      	ldr	r6, [pc, #760]	; (fd90 <_svfprintf_r+0xd50>)
    fa98:	dd1f      	ble.n	fada <_svfprintf_r+0xa9a>
    fa9a:	ee1b 8a10 	vmov	r8, s22
    fa9e:	2510      	movs	r5, #16
    faa0:	e004      	b.n	faac <_svfprintf_r+0xa6c>
    faa2:	3c10      	subs	r4, #16
    faa4:	2c10      	cmp	r4, #16
    faa6:	f10a 0a08 	add.w	sl, sl, #8
    faaa:	dd16      	ble.n	fada <_svfprintf_r+0xa9a>
    faac:	3301      	adds	r3, #1
    faae:	3210      	adds	r2, #16
    fab0:	2b07      	cmp	r3, #7
    fab2:	e9ca 6500 	strd	r6, r5, [sl]
    fab6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    faba:	ddf2      	ble.n	faa2 <_svfprintf_r+0xa62>
    fabc:	aa24      	add	r2, sp, #144	; 0x90
    fabe:	4641      	mov	r1, r8
    fac0:	4658      	mov	r0, fp
    fac2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fac6:	f002 fdbd 	bl	12644 <__ssprint_r>
    faca:	2800      	cmp	r0, #0
    facc:	f47f af1d 	bne.w	f90a <_svfprintf_r+0x8ca>
    fad0:	3c10      	subs	r4, #16
    fad2:	2c10      	cmp	r4, #16
    fad4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fad8:	dce8      	bgt.n	faac <_svfprintf_r+0xa6c>
    fada:	3301      	adds	r3, #1
    fadc:	4422      	add	r2, r4
    fade:	2b07      	cmp	r3, #7
    fae0:	e9ca 6400 	strd	r6, r4, [sl]
    fae4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fae8:	f77f ac4b 	ble.w	f382 <_svfprintf_r+0x342>
    faec:	ee1b 1a10 	vmov	r1, s22
    faf0:	aa24      	add	r2, sp, #144	; 0x90
    faf2:	4658      	mov	r0, fp
    faf4:	f002 fda6 	bl	12644 <__ssprint_r>
    faf8:	2800      	cmp	r0, #0
    fafa:	f47f af06 	bne.w	f90a <_svfprintf_r+0x8ca>
    fafe:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fb00:	e43f      	b.n	f382 <_svfprintf_r+0x342>
    fb02:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fb04:	2900      	cmp	r1, #0
    fb06:	f340 835a 	ble.w	101be <_svfprintf_r+0x117e>
    fb0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fb0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb0e:	429e      	cmp	r6, r3
    fb10:	bfa8      	it	ge
    fb12:	461e      	movge	r6, r3
    fb14:	2e00      	cmp	r6, #0
    fb16:	dd0b      	ble.n	fb30 <_svfprintf_r+0xaf0>
    fb18:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb1a:	3301      	adds	r3, #1
    fb1c:	4432      	add	r2, r6
    fb1e:	2b07      	cmp	r3, #7
    fb20:	e9ca 4600 	strd	r4, r6, [sl]
    fb24:	9226      	str	r2, [sp, #152]	; 0x98
    fb26:	9325      	str	r3, [sp, #148]	; 0x94
    fb28:	f300 8689 	bgt.w	1083e <_svfprintf_r+0x17fe>
    fb2c:	f10a 0a08 	add.w	sl, sl, #8
    fb30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    fb32:	2e00      	cmp	r6, #0
    fb34:	bfa8      	it	ge
    fb36:	1bad      	subge	r5, r5, r6
    fb38:	2d00      	cmp	r5, #0
    fb3a:	f300 8203 	bgt.w	ff44 <_svfprintf_r+0xf04>
    fb3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fb40:	f418 6f80 	tst.w	r8, #1024	; 0x400
    fb44:	4423      	add	r3, r4
    fb46:	9305      	str	r3, [sp, #20]
    fb48:	f040 821f 	bne.w	ff8a <_svfprintf_r+0xf4a>
    fb4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fb4e:	990e      	ldr	r1, [sp, #56]	; 0x38
    fb50:	428b      	cmp	r3, r1
    fb52:	db03      	blt.n	fb5c <_svfprintf_r+0xb1c>
    fb54:	f018 0f01 	tst.w	r8, #1
    fb58:	f000 84cf 	beq.w	104fa <_svfprintf_r+0x14ba>
    fb5c:	9910      	ldr	r1, [sp, #64]	; 0x40
    fb5e:	9812      	ldr	r0, [sp, #72]	; 0x48
    fb60:	440a      	add	r2, r1
    fb62:	e9ca 0100 	strd	r0, r1, [sl]
    fb66:	9925      	ldr	r1, [sp, #148]	; 0x94
    fb68:	9226      	str	r2, [sp, #152]	; 0x98
    fb6a:	3101      	adds	r1, #1
    fb6c:	2907      	cmp	r1, #7
    fb6e:	9125      	str	r1, [sp, #148]	; 0x94
    fb70:	f300 86a5 	bgt.w	108be <_svfprintf_r+0x187e>
    fb74:	f10a 0a08 	add.w	sl, sl, #8
    fb78:	990e      	ldr	r1, [sp, #56]	; 0x38
    fb7a:	1865      	adds	r5, r4, r1
    fb7c:	1acc      	subs	r4, r1, r3
    fb7e:	9b05      	ldr	r3, [sp, #20]
    fb80:	1aed      	subs	r5, r5, r3
    fb82:	42a5      	cmp	r5, r4
    fb84:	bfa8      	it	ge
    fb86:	4625      	movge	r5, r4
    fb88:	2d00      	cmp	r5, #0
    fb8a:	dd0d      	ble.n	fba8 <_svfprintf_r+0xb68>
    fb8c:	f8ca 3000 	str.w	r3, [sl]
    fb90:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb92:	f8ca 5004 	str.w	r5, [sl, #4]
    fb96:	3301      	adds	r3, #1
    fb98:	442a      	add	r2, r5
    fb9a:	2b07      	cmp	r3, #7
    fb9c:	9226      	str	r2, [sp, #152]	; 0x98
    fb9e:	9325      	str	r3, [sp, #148]	; 0x94
    fba0:	f300 86bb 	bgt.w	1091a <_svfprintf_r+0x18da>
    fba4:	f10a 0a08 	add.w	sl, sl, #8
    fba8:	2d00      	cmp	r5, #0
    fbaa:	bfa8      	it	ge
    fbac:	1b64      	subge	r4, r4, r5
    fbae:	2c00      	cmp	r4, #0
    fbb0:	f77f abde 	ble.w	f370 <_svfprintf_r+0x330>
    fbb4:	2c10      	cmp	r4, #16
    fbb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fbb8:	f340 837c 	ble.w	102b4 <_svfprintf_r+0x1274>
    fbbc:	ee1b 6a10 	vmov	r6, s22
    fbc0:	2510      	movs	r5, #16
    fbc2:	e005      	b.n	fbd0 <_svfprintf_r+0xb90>
    fbc4:	f10a 0a08 	add.w	sl, sl, #8
    fbc8:	3c10      	subs	r4, #16
    fbca:	2c10      	cmp	r4, #16
    fbcc:	f340 8372 	ble.w	102b4 <_svfprintf_r+0x1274>
    fbd0:	3301      	adds	r3, #1
    fbd2:	4970      	ldr	r1, [pc, #448]	; (fd94 <_svfprintf_r+0xd54>)
    fbd4:	3210      	adds	r2, #16
    fbd6:	2b07      	cmp	r3, #7
    fbd8:	e9ca 1500 	strd	r1, r5, [sl]
    fbdc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fbe0:	ddf0      	ble.n	fbc4 <_svfprintf_r+0xb84>
    fbe2:	aa24      	add	r2, sp, #144	; 0x90
    fbe4:	4631      	mov	r1, r6
    fbe6:	4658      	mov	r0, fp
    fbe8:	f002 fd2c 	bl	12644 <__ssprint_r>
    fbec:	2800      	cmp	r0, #0
    fbee:	f47f ae8c 	bne.w	f90a <_svfprintf_r+0x8ca>
    fbf2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fbf6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fbfa:	e7e5      	b.n	fbc8 <_svfprintf_r+0xb88>
    fbfc:	2b30      	cmp	r3, #48	; 0x30
    fbfe:	f43f ad8b 	beq.w	f718 <_svfprintf_r+0x6d8>
    fc02:	2330      	movs	r3, #48	; 0x30
    fc04:	3802      	subs	r0, #2
    fc06:	f804 3c01 	strb.w	r3, [r4, #-1]
    fc0a:	ab50      	add	r3, sp, #320	; 0x140
    fc0c:	1a1b      	subs	r3, r3, r0
    fc0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    fc12:	9305      	str	r3, [sp, #20]
    fc14:	4604      	mov	r4, r0
    fc16:	e584      	b.n	f722 <_svfprintf_r+0x6e2>
    fc18:	f018 0f01 	tst.w	r8, #1
    fc1c:	f47f ae82 	bne.w	f924 <_svfprintf_r+0x8e4>
    fc20:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fc22:	f8ca 4000 	str.w	r4, [sl]
    fc26:	3301      	adds	r3, #1
    fc28:	3201      	adds	r2, #1
    fc2a:	2101      	movs	r1, #1
    fc2c:	2b07      	cmp	r3, #7
    fc2e:	9226      	str	r2, [sp, #152]	; 0x98
    fc30:	9325      	str	r3, [sp, #148]	; 0x94
    fc32:	f8ca 1004 	str.w	r1, [sl, #4]
    fc36:	f77f aea5 	ble.w	f984 <_svfprintf_r+0x944>
    fc3a:	ee1b 1a10 	vmov	r1, s22
    fc3e:	aa24      	add	r2, sp, #144	; 0x90
    fc40:	4658      	mov	r0, fp
    fc42:	f002 fcff 	bl	12644 <__ssprint_r>
    fc46:	2800      	cmp	r0, #0
    fc48:	f47f ae5f 	bne.w	f90a <_svfprintf_r+0x8ca>
    fc4c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fc50:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fc54:	e698      	b.n	f988 <_svfprintf_r+0x948>
    fc56:	990e      	ldr	r1, [sp, #56]	; 0x38
    fc58:	1e4c      	subs	r4, r1, #1
    fc5a:	2c00      	cmp	r4, #0
    fc5c:	f77f ae94 	ble.w	f988 <_svfprintf_r+0x948>
    fc60:	2c10      	cmp	r4, #16
    fc62:	f340 8361 	ble.w	10328 <_svfprintf_r+0x12e8>
    fc66:	ee1b 6a10 	vmov	r6, s22
    fc6a:	2510      	movs	r5, #16
    fc6c:	e005      	b.n	fc7a <_svfprintf_r+0xc3a>
    fc6e:	f10a 0a08 	add.w	sl, sl, #8
    fc72:	3c10      	subs	r4, #16
    fc74:	2c10      	cmp	r4, #16
    fc76:	f340 8357 	ble.w	10328 <_svfprintf_r+0x12e8>
    fc7a:	3301      	adds	r3, #1
    fc7c:	4945      	ldr	r1, [pc, #276]	; (fd94 <_svfprintf_r+0xd54>)
    fc7e:	3210      	adds	r2, #16
    fc80:	2b07      	cmp	r3, #7
    fc82:	e9ca 1500 	strd	r1, r5, [sl]
    fc86:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fc8a:	ddf0      	ble.n	fc6e <_svfprintf_r+0xc2e>
    fc8c:	aa24      	add	r2, sp, #144	; 0x90
    fc8e:	4631      	mov	r1, r6
    fc90:	4658      	mov	r0, fp
    fc92:	f002 fcd7 	bl	12644 <__ssprint_r>
    fc96:	2800      	cmp	r0, #0
    fc98:	f47f ae37 	bne.w	f90a <_svfprintf_r+0x8ca>
    fc9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fca0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fca4:	e7e5      	b.n	fc72 <_svfprintf_r+0xc32>
    fca6:	ee1b 1a10 	vmov	r1, s22
    fcaa:	aa24      	add	r2, sp, #144	; 0x90
    fcac:	4658      	mov	r0, fp
    fcae:	f002 fcc9 	bl	12644 <__ssprint_r>
    fcb2:	2800      	cmp	r0, #0
    fcb4:	f47f ae29 	bne.w	f90a <_svfprintf_r+0x8ca>
    fcb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fcba:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fcbe:	f7ff bb44 	b.w	f34a <_svfprintf_r+0x30a>
    fcc2:	9b02      	ldr	r3, [sp, #8]
    fcc4:	f013 0310 	ands.w	r3, r3, #16
    fcc8:	f040 80c1 	bne.w	fe4e <_svfprintf_r+0xe0e>
    fccc:	9a02      	ldr	r2, [sp, #8]
    fcce:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    fcd2:	f000 837a 	beq.w	103ca <_svfprintf_r+0x138a>
    fcd6:	9808      	ldr	r0, [sp, #32]
    fcd8:	f850 2b04 	ldr.w	r2, [r0], #4
    fcdc:	9008      	str	r0, [sp, #32]
    fcde:	4619      	mov	r1, r3
    fce0:	b292      	uxth	r2, r2
    fce2:	2301      	movs	r3, #1
    fce4:	e451      	b.n	f58a <_svfprintf_r+0x54a>
    fce6:	f018 0310 	ands.w	r3, r8, #16
    fcea:	d155      	bne.n	fd98 <_svfprintf_r+0xd58>
    fcec:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    fcf0:	f000 835d 	beq.w	103ae <_svfprintf_r+0x136e>
    fcf4:	9808      	ldr	r0, [sp, #32]
    fcf6:	f850 2b04 	ldr.w	r2, [r0], #4
    fcfa:	9008      	str	r0, [sp, #32]
    fcfc:	4619      	mov	r1, r3
    fcfe:	b292      	uxth	r2, r2
    fd00:	e4a8      	b.n	f654 <_svfprintf_r+0x614>
    fd02:	4252      	negs	r2, r2
    fd04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fd08:	f8cd 8008 	str.w	r8, [sp, #8]
    fd0c:	202d      	movs	r0, #45	; 0x2d
    fd0e:	2301      	movs	r3, #1
    fd10:	e43c      	b.n	f58c <_svfprintf_r+0x54c>
    fd12:	ee1b 1a10 	vmov	r1, s22
    fd16:	aa24      	add	r2, sp, #144	; 0x90
    fd18:	4658      	mov	r0, fp
    fd1a:	f002 fc93 	bl	12644 <__ssprint_r>
    fd1e:	2800      	cmp	r0, #0
    fd20:	f47f adf3 	bne.w	f90a <_svfprintf_r+0x8ca>
    fd24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fd28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fd2c:	e616      	b.n	f95c <_svfprintf_r+0x91c>
    fd2e:	ee1b 1a10 	vmov	r1, s22
    fd32:	aa24      	add	r2, sp, #144	; 0x90
    fd34:	4658      	mov	r0, fp
    fd36:	f002 fc85 	bl	12644 <__ssprint_r>
    fd3a:	2800      	cmp	r0, #0
    fd3c:	f47f ade5 	bne.w	f90a <_svfprintf_r+0x8ca>
    fd40:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fd44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fd48:	e5fb      	b.n	f942 <_svfprintf_r+0x902>
    fd4a:	f018 0f01 	tst.w	r8, #1
    fd4e:	f43f ab0f 	beq.w	f370 <_svfprintf_r+0x330>
    fd52:	e52a      	b.n	f7aa <_svfprintf_r+0x76a>
    fd54:	9308      	str	r3, [sp, #32]
    fd56:	f899 3000 	ldrb.w	r3, [r9]
    fd5a:	f7ff b9cd 	b.w	f0f8 <_svfprintf_r+0xb8>
    fd5e:	ac50      	add	r4, sp, #320	; 0x140
    fd60:	e4df      	b.n	f722 <_svfprintf_r+0x6e2>
    fd62:	f418 7f00 	tst.w	r8, #512	; 0x200
    fd66:	f040 83db 	bne.w	10520 <_svfprintf_r+0x14e0>
    fd6a:	f853 2b04 	ldr.w	r2, [r3], #4
    fd6e:	9308      	str	r3, [sp, #32]
    fd70:	17d1      	asrs	r1, r2, #31
    fd72:	460b      	mov	r3, r1
    fd74:	f7ff bbb6 	b.w	f4e4 <_svfprintf_r+0x4a4>
    fd78:	9b08      	ldr	r3, [sp, #32]
    fd7a:	9804      	ldr	r0, [sp, #16]
    fd7c:	f853 1b04 	ldr.w	r1, [r3], #4
    fd80:	9308      	str	r3, [sp, #32]
    fd82:	17c2      	asrs	r2, r0, #31
    fd84:	e9c1 0200 	strd	r0, r2, [r1]
    fd88:	464c      	mov	r4, r9
    fd8a:	f7ff b98b 	b.w	f0a4 <_svfprintf_r+0x64>
    fd8e:	bf00      	nop
    fd90:	20002658 	.word	0x20002658
    fd94:	200029b4 	.word	0x200029b4
    fd98:	9b08      	ldr	r3, [sp, #32]
    fd9a:	f853 2b04 	ldr.w	r2, [r3], #4
    fd9e:	9308      	str	r3, [sp, #32]
    fda0:	e458      	b.n	f654 <_svfprintf_r+0x614>
    fda2:	eeb4 8b48 	vcmp.f64	d8, d8
    fda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fdaa:	f180 8694 	bvs.w	10ad6 <_svfprintf_r+0x1a96>
    fdae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fdb0:	2b61      	cmp	r3, #97	; 0x61
    fdb2:	f000 8552 	beq.w	1085a <_svfprintf_r+0x181a>
    fdb6:	2b41      	cmp	r3, #65	; 0x41
    fdb8:	f000 85c0 	beq.w	1093c <_svfprintf_r+0x18fc>
    fdbc:	9b03      	ldr	r3, [sp, #12]
    fdbe:	3301      	adds	r3, #1
    fdc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fdc2:	f023 0520 	bic.w	r5, r3, #32
    fdc6:	f000 8480 	beq.w	106ca <_svfprintf_r+0x168a>
    fdca:	2d47      	cmp	r5, #71	; 0x47
    fdcc:	d104      	bne.n	fdd8 <_svfprintf_r+0xd98>
    fdce:	9b03      	ldr	r3, [sp, #12]
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	bf08      	it	eq
    fdd4:	2301      	moveq	r3, #1
    fdd6:	9303      	str	r3, [sp, #12]
    fdd8:	ee18 3a90 	vmov	r3, s17
    fddc:	2b00      	cmp	r3, #0
    fdde:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    fde2:	4646      	mov	r6, r8
    fde4:	f2c0 8618 	blt.w	10a18 <_svfprintf_r+0x19d8>
    fde8:	eeb0 ab48 	vmov.f64	d10, d8
    fdec:	2300      	movs	r3, #0
    fdee:	4690      	mov	r8, r2
    fdf0:	9309      	str	r3, [sp, #36]	; 0x24
    fdf2:	9307      	str	r3, [sp, #28]
    fdf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fdf6:	3b41      	subs	r3, #65	; 0x41
    fdf8:	2b25      	cmp	r3, #37	; 0x25
    fdfa:	f200 8398 	bhi.w	1052e <_svfprintf_r+0x14ee>
    fdfe:	e8df f013 	tbh	[pc, r3, lsl #1]
    fe02:	046f      	.short	0x046f
    fe04:	03960396 	.word	0x03960396
    fe08:	04680396 	.word	0x04680396
    fe0c:	0396046c 	.word	0x0396046c
    fe10:	03960396 	.word	0x03960396
    fe14:	03960396 	.word	0x03960396
    fe18:	03960396 	.word	0x03960396
    fe1c:	03960396 	.word	0x03960396
    fe20:	03960396 	.word	0x03960396
    fe24:	03960396 	.word	0x03960396
    fe28:	03960396 	.word	0x03960396
    fe2c:	03960396 	.word	0x03960396
    fe30:	03960396 	.word	0x03960396
    fe34:	03960396 	.word	0x03960396
    fe38:	03960396 	.word	0x03960396
    fe3c:	03960396 	.word	0x03960396
    fe40:	03960396 	.word	0x03960396
    fe44:	03960396 	.word	0x03960396
    fe48:	04680396 	.word	0x04680396
    fe4c:	046c      	.short	0x046c
    fe4e:	9b08      	ldr	r3, [sp, #32]
    fe50:	f853 2b04 	ldr.w	r2, [r3], #4
    fe54:	9308      	str	r3, [sp, #32]
    fe56:	2301      	movs	r3, #1
    fe58:	f7ff bb97 	b.w	f58a <_svfprintf_r+0x54a>
    fe5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe5e:	2b00      	cmp	r3, #0
    fe60:	f43f a9cf 	beq.w	f202 <_svfprintf_r+0x1c2>
    fe64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe66:	781b      	ldrb	r3, [r3, #0]
    fe68:	2b00      	cmp	r3, #0
    fe6a:	f43f a9ca 	beq.w	f202 <_svfprintf_r+0x1c2>
    fe6e:	f899 3000 	ldrb.w	r3, [r9]
    fe72:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    fe76:	f7ff b93f 	b.w	f0f8 <_svfprintf_r+0xb8>
    fe7a:	930b      	str	r3, [sp, #44]	; 0x2c
    fe7c:	f8cd 8008 	str.w	r8, [sp, #8]
    fe80:	f7ff bbf1 	b.w	f666 <_svfprintf_r+0x626>
    fe84:	930b      	str	r3, [sp, #44]	; 0x2c
    fe86:	4b9a      	ldr	r3, [pc, #616]	; (100f0 <_svfprintf_r+0x10b0>)
    fe88:	9311      	str	r3, [sp, #68]	; 0x44
    fe8a:	f018 0120 	ands.w	r1, r8, #32
    fe8e:	f000 8105 	beq.w	1009c <_svfprintf_r+0x105c>
    fe92:	9b08      	ldr	r3, [sp, #32]
    fe94:	3307      	adds	r3, #7
    fe96:	f023 0307 	bic.w	r3, r3, #7
    fe9a:	6859      	ldr	r1, [r3, #4]
    fe9c:	f853 2b08 	ldr.w	r2, [r3], #8
    fea0:	9308      	str	r3, [sp, #32]
    fea2:	f018 0f01 	tst.w	r8, #1
    fea6:	d00a      	beq.n	febe <_svfprintf_r+0xe7e>
    fea8:	ea52 0301 	orrs.w	r3, r2, r1
    feac:	d007      	beq.n	febe <_svfprintf_r+0xe7e>
    feae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    feb0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    feb4:	2330      	movs	r3, #48	; 0x30
    feb6:	f048 0802 	orr.w	r8, r8, #2
    feba:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    febe:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    fec2:	9302      	str	r3, [sp, #8]
    fec4:	2302      	movs	r3, #2
    fec6:	f7ff bb60 	b.w	f58a <_svfprintf_r+0x54a>
    feca:	930b      	str	r3, [sp, #44]	; 0x2c
    fecc:	f7ff bbb6 	b.w	f63c <_svfprintf_r+0x5fc>
    fed0:	930b      	str	r3, [sp, #44]	; 0x2c
    fed2:	4b88      	ldr	r3, [pc, #544]	; (100f4 <_svfprintf_r+0x10b4>)
    fed4:	9311      	str	r3, [sp, #68]	; 0x44
    fed6:	e7d8      	b.n	fe8a <_svfprintf_r+0xe4a>
    fed8:	9b08      	ldr	r3, [sp, #32]
    feda:	2101      	movs	r1, #1
    fedc:	f853 2b04 	ldr.w	r2, [r3], #4
    fee0:	9102      	str	r1, [sp, #8]
    fee2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    fee6:	9308      	str	r3, [sp, #32]
    fee8:	9105      	str	r1, [sp, #20]
    feea:	ac37      	add	r4, sp, #220	; 0xdc
    feec:	f7ff baaf 	b.w	f44e <_svfprintf_r+0x40e>
    fef0:	ee1b 1a10 	vmov	r1, s22
    fef4:	aa24      	add	r2, sp, #144	; 0x90
    fef6:	4658      	mov	r0, fp
    fef8:	f002 fba4 	bl	12644 <__ssprint_r>
    fefc:	2800      	cmp	r0, #0
    fefe:	f47f ad04 	bne.w	f90a <_svfprintf_r+0x8ca>
    ff02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ff04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ff08:	e45d      	b.n	f7c6 <_svfprintf_r+0x786>
    ff0a:	9b03      	ldr	r3, [sp, #12]
    ff0c:	9407      	str	r4, [sp, #28]
    ff0e:	2b06      	cmp	r3, #6
    ff10:	4622      	mov	r2, r4
    ff12:	bf28      	it	cs
    ff14:	2306      	movcs	r3, #6
    ff16:	9403      	str	r4, [sp, #12]
    ff18:	4621      	mov	r1, r4
    ff1a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    ff1e:	4c76      	ldr	r4, [pc, #472]	; (100f8 <_svfprintf_r+0x10b8>)
    ff20:	9302      	str	r3, [sp, #8]
    ff22:	9305      	str	r3, [sp, #20]
    ff24:	920f      	str	r2, [sp, #60]	; 0x3c
    ff26:	f7ff ba6c 	b.w	f402 <_svfprintf_r+0x3c2>
    ff2a:	2140      	movs	r1, #64	; 0x40
    ff2c:	4658      	mov	r0, fp
    ff2e:	f7fd fccb 	bl	d8c8 <_malloc_r>
    ff32:	6020      	str	r0, [r4, #0]
    ff34:	6120      	str	r0, [r4, #16]
    ff36:	2800      	cmp	r0, #0
    ff38:	f000 860f 	beq.w	10b5a <_svfprintf_r+0x1b1a>
    ff3c:	2340      	movs	r3, #64	; 0x40
    ff3e:	6163      	str	r3, [r4, #20]
    ff40:	f7ff b89e 	b.w	f080 <_svfprintf_r+0x40>
    ff44:	2d10      	cmp	r5, #16
    ff46:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ff48:	f340 825d 	ble.w	10406 <_svfprintf_r+0x13c6>
    ff4c:	4651      	mov	r1, sl
    ff4e:	2610      	movs	r6, #16
    ff50:	ee1b aa10 	vmov	sl, s22
    ff54:	e004      	b.n	ff60 <_svfprintf_r+0xf20>
    ff56:	3108      	adds	r1, #8
    ff58:	3d10      	subs	r5, #16
    ff5a:	2d10      	cmp	r5, #16
    ff5c:	f340 8252 	ble.w	10404 <_svfprintf_r+0x13c4>
    ff60:	3301      	adds	r3, #1
    ff62:	4866      	ldr	r0, [pc, #408]	; (100fc <_svfprintf_r+0x10bc>)
    ff64:	3210      	adds	r2, #16
    ff66:	2b07      	cmp	r3, #7
    ff68:	e9c1 0600 	strd	r0, r6, [r1]
    ff6c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ff70:	ddf1      	ble.n	ff56 <_svfprintf_r+0xf16>
    ff72:	aa24      	add	r2, sp, #144	; 0x90
    ff74:	4651      	mov	r1, sl
    ff76:	4658      	mov	r0, fp
    ff78:	f002 fb64 	bl	12644 <__ssprint_r>
    ff7c:	2800      	cmp	r0, #0
    ff7e:	f47f acc4 	bne.w	f90a <_svfprintf_r+0x8ca>
    ff82:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ff86:	a927      	add	r1, sp, #156	; 0x9c
    ff88:	e7e6      	b.n	ff58 <_svfprintf_r+0xf18>
    ff8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff8c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    ff90:	18e3      	adds	r3, r4, r3
    ff92:	9303      	str	r3, [sp, #12]
    ff94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ff96:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    ff9a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    ff9c:	9d05      	ldr	r5, [sp, #20]
    ff9e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    ffa2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    ffa6:	940b      	str	r4, [sp, #44]	; 0x2c
    ffa8:	ee1b 1a10 	vmov	r1, s22
    ffac:	4650      	mov	r0, sl
    ffae:	2b00      	cmp	r3, #0
    ffb0:	d034      	beq.n	1001c <_svfprintf_r+0xfdc>
    ffb2:	f1b8 0f00 	cmp.w	r8, #0
    ffb6:	d135      	bne.n	10024 <_svfprintf_r+0xfe4>
    ffb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ffba:	3b01      	subs	r3, #1
    ffbc:	3e01      	subs	r6, #1
    ffbe:	930d      	str	r3, [sp, #52]	; 0x34
    ffc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ffc2:	e9c0 3900 	strd	r3, r9, [r0]
    ffc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ffc8:	3301      	adds	r3, #1
    ffca:	444a      	add	r2, r9
    ffcc:	2b07      	cmp	r3, #7
    ffce:	9226      	str	r2, [sp, #152]	; 0x98
    ffd0:	9325      	str	r3, [sp, #148]	; 0x94
    ffd2:	dc6c      	bgt.n	100ae <_svfprintf_r+0x106e>
    ffd4:	3008      	adds	r0, #8
    ffd6:	9b03      	ldr	r3, [sp, #12]
    ffd8:	f896 c000 	ldrb.w	ip, [r6]
    ffdc:	1b5b      	subs	r3, r3, r5
    ffde:	4563      	cmp	r3, ip
    ffe0:	bfa8      	it	ge
    ffe2:	4663      	movge	r3, ip
    ffe4:	2b00      	cmp	r3, #0
    ffe6:	469a      	mov	sl, r3
    ffe8:	dd0c      	ble.n	10004 <_svfprintf_r+0xfc4>
    ffea:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ffec:	3401      	adds	r4, #1
    ffee:	441a      	add	r2, r3
    fff0:	2c07      	cmp	r4, #7
    fff2:	e9c0 5300 	strd	r5, r3, [r0]
    fff6:	9226      	str	r2, [sp, #152]	; 0x98
    fff8:	9425      	str	r4, [sp, #148]	; 0x94
    fffa:	f300 8177 	bgt.w	102ec <_svfprintf_r+0x12ac>
    fffe:	f896 c000 	ldrb.w	ip, [r6]
   10002:	3008      	adds	r0, #8
   10004:	f1ba 0f00 	cmp.w	sl, #0
   10008:	bfac      	ite	ge
   1000a:	ebac 040a 	subge.w	r4, ip, sl
   1000e:	4664      	movlt	r4, ip
   10010:	2c00      	cmp	r4, #0
   10012:	dc0a      	bgt.n	1002a <_svfprintf_r+0xfea>
   10014:	4465      	add	r5, ip
   10016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10018:	2b00      	cmp	r3, #0
   1001a:	d1ca      	bne.n	ffb2 <_svfprintf_r+0xf72>
   1001c:	f1b8 0f00 	cmp.w	r8, #0
   10020:	f000 83ac 	beq.w	1077c <_svfprintf_r+0x173c>
   10024:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10028:	e7ca      	b.n	ffc0 <_svfprintf_r+0xf80>
   1002a:	2c10      	cmp	r4, #16
   1002c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   10030:	dd24      	ble.n	1007c <_svfprintf_r+0x103c>
   10032:	9505      	str	r5, [sp, #20]
   10034:	f04f 0a10 	mov.w	sl, #16
   10038:	4663      	mov	r3, ip
   1003a:	460d      	mov	r5, r1
   1003c:	e004      	b.n	10048 <_svfprintf_r+0x1008>
   1003e:	3c10      	subs	r4, #16
   10040:	2c10      	cmp	r4, #16
   10042:	f100 0008 	add.w	r0, r0, #8
   10046:	dd16      	ble.n	10076 <_svfprintf_r+0x1036>
   10048:	3301      	adds	r3, #1
   1004a:	492c      	ldr	r1, [pc, #176]	; (100fc <_svfprintf_r+0x10bc>)
   1004c:	3210      	adds	r2, #16
   1004e:	2b07      	cmp	r3, #7
   10050:	e9c0 1a00 	strd	r1, sl, [r0]
   10054:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10058:	ddf1      	ble.n	1003e <_svfprintf_r+0xffe>
   1005a:	aa24      	add	r2, sp, #144	; 0x90
   1005c:	4629      	mov	r1, r5
   1005e:	4658      	mov	r0, fp
   10060:	f002 faf0 	bl	12644 <__ssprint_r>
   10064:	2800      	cmp	r0, #0
   10066:	f47f ac50 	bne.w	f90a <_svfprintf_r+0x8ca>
   1006a:	3c10      	subs	r4, #16
   1006c:	2c10      	cmp	r4, #16
   1006e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   10072:	a827      	add	r0, sp, #156	; 0x9c
   10074:	dce8      	bgt.n	10048 <_svfprintf_r+0x1008>
   10076:	4629      	mov	r1, r5
   10078:	9d05      	ldr	r5, [sp, #20]
   1007a:	469c      	mov	ip, r3
   1007c:	f10c 0301 	add.w	r3, ip, #1
   10080:	4422      	add	r2, r4
   10082:	6044      	str	r4, [r0, #4]
   10084:	2b07      	cmp	r3, #7
   10086:	4c1d      	ldr	r4, [pc, #116]	; (100fc <_svfprintf_r+0x10bc>)
   10088:	6004      	str	r4, [r0, #0]
   1008a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1008e:	f300 83c6 	bgt.w	1081e <_svfprintf_r+0x17de>
   10092:	f896 c000 	ldrb.w	ip, [r6]
   10096:	3008      	adds	r0, #8
   10098:	4465      	add	r5, ip
   1009a:	e7bc      	b.n	10016 <_svfprintf_r+0xfd6>
   1009c:	f018 0310 	ands.w	r3, r8, #16
   100a0:	f000 80c2 	beq.w	10228 <_svfprintf_r+0x11e8>
   100a4:	9b08      	ldr	r3, [sp, #32]
   100a6:	f853 2b04 	ldr.w	r2, [r3], #4
   100aa:	9308      	str	r3, [sp, #32]
   100ac:	e6f9      	b.n	fea2 <_svfprintf_r+0xe62>
   100ae:	aa24      	add	r2, sp, #144	; 0x90
   100b0:	4658      	mov	r0, fp
   100b2:	9105      	str	r1, [sp, #20]
   100b4:	f002 fac6 	bl	12644 <__ssprint_r>
   100b8:	2800      	cmp	r0, #0
   100ba:	f47f ac26 	bne.w	f90a <_svfprintf_r+0x8ca>
   100be:	9a26      	ldr	r2, [sp, #152]	; 0x98
   100c0:	9905      	ldr	r1, [sp, #20]
   100c2:	a827      	add	r0, sp, #156	; 0x9c
   100c4:	e787      	b.n	ffd6 <_svfprintf_r+0xf96>
   100c6:	9802      	ldr	r0, [sp, #8]
   100c8:	f8cd a01c 	str.w	sl, [sp, #28]
   100cc:	ac50      	add	r4, sp, #320	; 0x140
   100ce:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   100d2:	2500      	movs	r5, #0
   100d4:	ee0a ba10 	vmov	s20, fp
   100d8:	4b09      	ldr	r3, [pc, #36]	; (10100 <_svfprintf_r+0x10c0>)
   100da:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   100de:	f8cd 9014 	str.w	r9, [sp, #20]
   100e2:	46a3      	mov	fp, r4
   100e4:	f04f 0805 	mov.w	r8, #5
   100e8:	46ac      	mov	ip, r5
   100ea:	4604      	mov	r4, r0
   100ec:	e010      	b.n	10110 <_svfprintf_r+0x10d0>
   100ee:	bf00      	nop
   100f0:	20002624 	.word	0x20002624
   100f4:	20002638 	.word	0x20002638
   100f8:	2000264c 	.word	0x2000264c
   100fc:	200029b4 	.word	0x200029b4
   10100:	cccccccd 	.word	0xcccccccd
   10104:	2a0a      	cmp	r2, #10
   10106:	f171 0100 	sbcs.w	r1, r1, #0
   1010a:	d336      	bcc.n	1017a <_svfprintf_r+0x113a>
   1010c:	464a      	mov	r2, r9
   1010e:	4631      	mov	r1, r6
   10110:	1850      	adds	r0, r2, r1
   10112:	f140 0000 	adc.w	r0, r0, #0
   10116:	fba3 5600 	umull	r5, r6, r3, r0
   1011a:	f026 0503 	bic.w	r5, r6, #3
   1011e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   10122:	1b40      	subs	r0, r0, r5
   10124:	1a15      	subs	r5, r2, r0
   10126:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   1012a:	f161 0e00 	sbc.w	lr, r1, #0
   1012e:	fb06 f605 	mul.w	r6, r6, r5
   10132:	fba5 9503 	umull	r9, r5, r5, r3
   10136:	fb03 660e 	mla	r6, r3, lr, r6
   1013a:	f009 0e01 	and.w	lr, r9, #1
   1013e:	442e      	add	r6, r5
   10140:	fbae 5e08 	umull	r5, lr, lr, r8
   10144:	182d      	adds	r5, r5, r0
   10146:	ea4f 0959 	mov.w	r9, r9, lsr #1
   1014a:	3530      	adds	r5, #48	; 0x30
   1014c:	f80b 5c01 	strb.w	r5, [fp, #-1]
   10150:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   10154:	f10c 0c01 	add.w	ip, ip, #1
   10158:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1015c:	0876      	lsrs	r6, r6, #1
   1015e:	2c00      	cmp	r4, #0
   10160:	d0d0      	beq.n	10104 <_svfprintf_r+0x10c4>
   10162:	f89a 0000 	ldrb.w	r0, [sl]
   10166:	4584      	cmp	ip, r0
   10168:	d1cc      	bne.n	10104 <_svfprintf_r+0x10c4>
   1016a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1016e:	d0c9      	beq.n	10104 <_svfprintf_r+0x10c4>
   10170:	2a0a      	cmp	r2, #10
   10172:	f171 0100 	sbcs.w	r1, r1, #0
   10176:	f080 818f 	bcs.w	10498 <_svfprintf_r+0x1458>
   1017a:	465c      	mov	r4, fp
   1017c:	ab50      	add	r3, sp, #320	; 0x140
   1017e:	1b1b      	subs	r3, r3, r4
   10180:	f8dd 9014 	ldr.w	r9, [sp, #20]
   10184:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   10188:	ee1a ba10 	vmov	fp, s20
   1018c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   10190:	f8dd 8008 	ldr.w	r8, [sp, #8]
   10194:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   10198:	9305      	str	r3, [sp, #20]
   1019a:	f7ff bac2 	b.w	f722 <_svfprintf_r+0x6e2>
   1019e:	ee1b 1a10 	vmov	r1, s22
   101a2:	aa24      	add	r2, sp, #144	; 0x90
   101a4:	4658      	mov	r0, fp
   101a6:	f002 fa4d 	bl	12644 <__ssprint_r>
   101aa:	2800      	cmp	r0, #0
   101ac:	f47f abad 	bne.w	f90a <_svfprintf_r+0x8ca>
   101b0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   101b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   101b6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   101ba:	f7ff b896 	b.w	f2ea <_svfprintf_r+0x2aa>
   101be:	9b25      	ldr	r3, [sp, #148]	; 0x94
   101c0:	48be      	ldr	r0, [pc, #760]	; (104bc <_svfprintf_r+0x147c>)
   101c2:	f8ca 0000 	str.w	r0, [sl]
   101c6:	3301      	adds	r3, #1
   101c8:	3201      	adds	r2, #1
   101ca:	2001      	movs	r0, #1
   101cc:	2b07      	cmp	r3, #7
   101ce:	9226      	str	r2, [sp, #152]	; 0x98
   101d0:	9325      	str	r3, [sp, #148]	; 0x94
   101d2:	f8ca 0004 	str.w	r0, [sl, #4]
   101d6:	f300 8177 	bgt.w	104c8 <_svfprintf_r+0x1488>
   101da:	f10a 0a08 	add.w	sl, sl, #8
   101de:	2900      	cmp	r1, #0
   101e0:	f040 80af 	bne.w	10342 <_svfprintf_r+0x1302>
   101e4:	990e      	ldr	r1, [sp, #56]	; 0x38
   101e6:	f008 0301 	and.w	r3, r8, #1
   101ea:	430b      	orrs	r3, r1
   101ec:	f43f a8c0 	beq.w	f370 <_svfprintf_r+0x330>
   101f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   101f2:	9912      	ldr	r1, [sp, #72]	; 0x48
   101f4:	441a      	add	r2, r3
   101f6:	e9ca 1300 	strd	r1, r3, [sl]
   101fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   101fc:	9226      	str	r2, [sp, #152]	; 0x98
   101fe:	3301      	adds	r3, #1
   10200:	2b07      	cmp	r3, #7
   10202:	9325      	str	r3, [sp, #148]	; 0x94
   10204:	f300 8252 	bgt.w	106ac <_svfprintf_r+0x166c>
   10208:	f10a 0a08 	add.w	sl, sl, #8
   1020c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1020e:	f8ca 4000 	str.w	r4, [sl]
   10212:	3301      	adds	r3, #1
   10214:	440a      	add	r2, r1
   10216:	2b07      	cmp	r3, #7
   10218:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1021c:	f8ca 1004 	str.w	r1, [sl, #4]
   10220:	f77f a8a4 	ble.w	f36c <_svfprintf_r+0x32c>
   10224:	f7ff bbbd 	b.w	f9a2 <_svfprintf_r+0x962>
   10228:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   1022c:	f000 80dd 	beq.w	103ea <_svfprintf_r+0x13aa>
   10230:	9808      	ldr	r0, [sp, #32]
   10232:	f850 2b04 	ldr.w	r2, [r0], #4
   10236:	9008      	str	r0, [sp, #32]
   10238:	4619      	mov	r1, r3
   1023a:	b292      	uxth	r2, r2
   1023c:	e631      	b.n	fea2 <_svfprintf_r+0xe62>
   1023e:	ee1b 1a10 	vmov	r1, s22
   10242:	aa24      	add	r2, sp, #144	; 0x90
   10244:	4658      	mov	r0, fp
   10246:	f002 f9fd 	bl	12644 <__ssprint_r>
   1024a:	2800      	cmp	r0, #0
   1024c:	f47f ab5d 	bne.w	f90a <_svfprintf_r+0x8ca>
   10250:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10252:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10256:	f7ff baa3 	b.w	f7a0 <_svfprintf_r+0x760>
   1025a:	ae22      	add	r6, sp, #136	; 0x88
   1025c:	2208      	movs	r2, #8
   1025e:	2100      	movs	r1, #0
   10260:	4630      	mov	r0, r6
   10262:	941d      	str	r4, [sp, #116]	; 0x74
   10264:	f7fe f99c 	bl	e5a0 <memset>
   10268:	9b03      	ldr	r3, [sp, #12]
   1026a:	1c5a      	adds	r2, r3, #1
   1026c:	f000 80db 	beq.w	10426 <_svfprintf_r+0x13e6>
   10270:	2500      	movs	r5, #0
   10272:	f8cd 9008 	str.w	r9, [sp, #8]
   10276:	f8cd 801c 	str.w	r8, [sp, #28]
   1027a:	4699      	mov	r9, r3
   1027c:	46a8      	mov	r8, r5
   1027e:	e00c      	b.n	1029a <_svfprintf_r+0x125a>
   10280:	a937      	add	r1, sp, #220	; 0xdc
   10282:	4658      	mov	r0, fp
   10284:	f001 f9f6 	bl	11674 <_wcrtomb_r>
   10288:	1c43      	adds	r3, r0, #1
   1028a:	4440      	add	r0, r8
   1028c:	f000 83c8 	beq.w	10a20 <_svfprintf_r+0x19e0>
   10290:	4548      	cmp	r0, r9
   10292:	dc08      	bgt.n	102a6 <_svfprintf_r+0x1266>
   10294:	f000 8418 	beq.w	10ac8 <_svfprintf_r+0x1a88>
   10298:	4680      	mov	r8, r0
   1029a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1029c:	5952      	ldr	r2, [r2, r5]
   1029e:	4633      	mov	r3, r6
   102a0:	3504      	adds	r5, #4
   102a2:	2a00      	cmp	r2, #0
   102a4:	d1ec      	bne.n	10280 <_svfprintf_r+0x1240>
   102a6:	f8cd 8014 	str.w	r8, [sp, #20]
   102aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
   102ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
   102b2:	e0c5      	b.n	10440 <_svfprintf_r+0x1400>
   102b4:	3301      	adds	r3, #1
   102b6:	4982      	ldr	r1, [pc, #520]	; (104c0 <_svfprintf_r+0x1480>)
   102b8:	f8ca 4004 	str.w	r4, [sl, #4]
   102bc:	4422      	add	r2, r4
   102be:	2b07      	cmp	r3, #7
   102c0:	f8ca 1000 	str.w	r1, [sl]
   102c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   102c8:	f77f a850 	ble.w	f36c <_svfprintf_r+0x32c>
   102cc:	f7ff bb69 	b.w	f9a2 <_svfprintf_r+0x962>
   102d0:	ee1b 1a10 	vmov	r1, s22
   102d4:	aa24      	add	r2, sp, #144	; 0x90
   102d6:	4658      	mov	r0, fp
   102d8:	f002 f9b4 	bl	12644 <__ssprint_r>
   102dc:	2800      	cmp	r0, #0
   102de:	f47f ab14 	bne.w	f90a <_svfprintf_r+0x8ca>
   102e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   102e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   102e8:	f7ff b829 	b.w	f33e <_svfprintf_r+0x2fe>
   102ec:	aa24      	add	r2, sp, #144	; 0x90
   102ee:	4658      	mov	r0, fp
   102f0:	9105      	str	r1, [sp, #20]
   102f2:	f002 f9a7 	bl	12644 <__ssprint_r>
   102f6:	2800      	cmp	r0, #0
   102f8:	f47f ab07 	bne.w	f90a <_svfprintf_r+0x8ca>
   102fc:	f896 c000 	ldrb.w	ip, [r6]
   10300:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10302:	9905      	ldr	r1, [sp, #20]
   10304:	a827      	add	r0, sp, #156	; 0x9c
   10306:	e67d      	b.n	10004 <_svfprintf_r+0xfc4>
   10308:	2b01      	cmp	r3, #1
   1030a:	f8cd 8008 	str.w	r8, [sp, #8]
   1030e:	f47f a9f3 	bne.w	f6f8 <_svfprintf_r+0x6b8>
   10312:	f7ff bb93 	b.w	fa3c <_svfprintf_r+0x9fc>
   10316:	9b08      	ldr	r3, [sp, #32]
   10318:	9904      	ldr	r1, [sp, #16]
   1031a:	f853 2b04 	ldr.w	r2, [r3], #4
   1031e:	464c      	mov	r4, r9
   10320:	6011      	str	r1, [r2, #0]
   10322:	9308      	str	r3, [sp, #32]
   10324:	f7fe bebe 	b.w	f0a4 <_svfprintf_r+0x64>
   10328:	3301      	adds	r3, #1
   1032a:	4965      	ldr	r1, [pc, #404]	; (104c0 <_svfprintf_r+0x1480>)
   1032c:	f8ca 4004 	str.w	r4, [sl, #4]
   10330:	4422      	add	r2, r4
   10332:	2b07      	cmp	r3, #7
   10334:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10338:	f8ca 1000 	str.w	r1, [sl]
   1033c:	f77f ab22 	ble.w	f984 <_svfprintf_r+0x944>
   10340:	e47b      	b.n	fc3a <_svfprintf_r+0xbfa>
   10342:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10344:	9812      	ldr	r0, [sp, #72]	; 0x48
   10346:	441a      	add	r2, r3
   10348:	e9ca 0300 	strd	r0, r3, [sl]
   1034c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1034e:	9226      	str	r2, [sp, #152]	; 0x98
   10350:	3301      	adds	r3, #1
   10352:	2b07      	cmp	r3, #7
   10354:	9325      	str	r3, [sp, #148]	; 0x94
   10356:	f300 81a9 	bgt.w	106ac <_svfprintf_r+0x166c>
   1035a:	f10a 0a08 	add.w	sl, sl, #8
   1035e:	2900      	cmp	r1, #0
   10360:	f6bf af54 	bge.w	1020c <_svfprintf_r+0x11cc>
   10364:	424d      	negs	r5, r1
   10366:	3110      	adds	r1, #16
   10368:	f280 830f 	bge.w	1098a <_svfprintf_r+0x194a>
   1036c:	ee1b 1a10 	vmov	r1, s22
   10370:	2610      	movs	r6, #16
   10372:	e005      	b.n	10380 <_svfprintf_r+0x1340>
   10374:	f10a 0a08 	add.w	sl, sl, #8
   10378:	3d10      	subs	r5, #16
   1037a:	2d10      	cmp	r5, #16
   1037c:	f340 8305 	ble.w	1098a <_svfprintf_r+0x194a>
   10380:	3301      	adds	r3, #1
   10382:	484f      	ldr	r0, [pc, #316]	; (104c0 <_svfprintf_r+0x1480>)
   10384:	3210      	adds	r2, #16
   10386:	2b07      	cmp	r3, #7
   10388:	e9ca 0600 	strd	r0, r6, [sl]
   1038c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10390:	ddf0      	ble.n	10374 <_svfprintf_r+0x1334>
   10392:	aa24      	add	r2, sp, #144	; 0x90
   10394:	4658      	mov	r0, fp
   10396:	9103      	str	r1, [sp, #12]
   10398:	f002 f954 	bl	12644 <__ssprint_r>
   1039c:	2800      	cmp	r0, #0
   1039e:	f47f aab4 	bne.w	f90a <_svfprintf_r+0x8ca>
   103a2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   103a6:	9903      	ldr	r1, [sp, #12]
   103a8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   103ac:	e7e4      	b.n	10378 <_svfprintf_r+0x1338>
   103ae:	9b08      	ldr	r3, [sp, #32]
   103b0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   103b4:	bf1a      	itte	ne
   103b6:	4611      	movne	r1, r2
   103b8:	f853 2b04 	ldrne.w	r2, [r3], #4
   103bc:	f853 2b04 	ldreq.w	r2, [r3], #4
   103c0:	9308      	str	r3, [sp, #32]
   103c2:	bf18      	it	ne
   103c4:	b2d2      	uxtbne	r2, r2
   103c6:	f7ff b945 	b.w	f654 <_svfprintf_r+0x614>
   103ca:	9b02      	ldr	r3, [sp, #8]
   103cc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   103d0:	9b08      	ldr	r3, [sp, #32]
   103d2:	bf1a      	itte	ne
   103d4:	4611      	movne	r1, r2
   103d6:	f853 2b04 	ldrne.w	r2, [r3], #4
   103da:	f853 2b04 	ldreq.w	r2, [r3], #4
   103de:	9308      	str	r3, [sp, #32]
   103e0:	bf18      	it	ne
   103e2:	b2d2      	uxtbne	r2, r2
   103e4:	2301      	movs	r3, #1
   103e6:	f7ff b8d0 	b.w	f58a <_svfprintf_r+0x54a>
   103ea:	9b08      	ldr	r3, [sp, #32]
   103ec:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   103f0:	bf1a      	itte	ne
   103f2:	4611      	movne	r1, r2
   103f4:	f853 2b04 	ldrne.w	r2, [r3], #4
   103f8:	f853 2b04 	ldreq.w	r2, [r3], #4
   103fc:	9308      	str	r3, [sp, #32]
   103fe:	bf18      	it	ne
   10400:	b2d2      	uxtbne	r2, r2
   10402:	e54e      	b.n	fea2 <_svfprintf_r+0xe62>
   10404:	468a      	mov	sl, r1
   10406:	3301      	adds	r3, #1
   10408:	492d      	ldr	r1, [pc, #180]	; (104c0 <_svfprintf_r+0x1480>)
   1040a:	f8ca 5004 	str.w	r5, [sl, #4]
   1040e:	442a      	add	r2, r5
   10410:	2b07      	cmp	r3, #7
   10412:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10416:	f8ca 1000 	str.w	r1, [sl]
   1041a:	f300 8139 	bgt.w	10690 <_svfprintf_r+0x1650>
   1041e:	f10a 0a08 	add.w	sl, sl, #8
   10422:	f7ff bb8c 	b.w	fb3e <_svfprintf_r+0xafe>
   10426:	2300      	movs	r3, #0
   10428:	4619      	mov	r1, r3
   1042a:	9600      	str	r6, [sp, #0]
   1042c:	aa1d      	add	r2, sp, #116	; 0x74
   1042e:	4658      	mov	r0, fp
   10430:	f001 f946 	bl	116c0 <_wcsrtombs_r>
   10434:	4603      	mov	r3, r0
   10436:	3301      	adds	r3, #1
   10438:	9005      	str	r0, [sp, #20]
   1043a:	f000 82f1 	beq.w	10a20 <_svfprintf_r+0x19e0>
   1043e:	941d      	str	r4, [sp, #116]	; 0x74
   10440:	9b05      	ldr	r3, [sp, #20]
   10442:	2b00      	cmp	r3, #0
   10444:	d04e      	beq.n	104e4 <_svfprintf_r+0x14a4>
   10446:	2b63      	cmp	r3, #99	; 0x63
   10448:	f300 8118 	bgt.w	1067c <_svfprintf_r+0x163c>
   1044c:	2300      	movs	r3, #0
   1044e:	9307      	str	r3, [sp, #28]
   10450:	ac37      	add	r4, sp, #220	; 0xdc
   10452:	2208      	movs	r2, #8
   10454:	2100      	movs	r1, #0
   10456:	4630      	mov	r0, r6
   10458:	f7fe f8a2 	bl	e5a0 <memset>
   1045c:	9d05      	ldr	r5, [sp, #20]
   1045e:	9600      	str	r6, [sp, #0]
   10460:	462b      	mov	r3, r5
   10462:	aa1d      	add	r2, sp, #116	; 0x74
   10464:	4621      	mov	r1, r4
   10466:	4658      	mov	r0, fp
   10468:	f001 f92a 	bl	116c0 <_wcsrtombs_r>
   1046c:	4285      	cmp	r5, r0
   1046e:	f040 837c 	bne.w	10b6a <_svfprintf_r+0x1b2a>
   10472:	9a05      	ldr	r2, [sp, #20]
   10474:	2300      	movs	r3, #0
   10476:	54a3      	strb	r3, [r4, r2]
   10478:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1047c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   10480:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10484:	9303      	str	r3, [sp, #12]
   10486:	9202      	str	r2, [sp, #8]
   10488:	930f      	str	r3, [sp, #60]	; 0x3c
   1048a:	f7fe bfba 	b.w	f402 <_svfprintf_r+0x3c2>
   1048e:	212d      	movs	r1, #45	; 0x2d
   10490:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   10494:	f7fe bfa4 	b.w	f3e0 <_svfprintf_r+0x3a0>
   10498:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1049a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1049c:	ebab 0b03 	sub.w	fp, fp, r3
   104a0:	461a      	mov	r2, r3
   104a2:	4658      	mov	r0, fp
   104a4:	f7fe f914 	bl	e6d0 <strncpy>
   104a8:	f89a 2001 	ldrb.w	r2, [sl, #1]
   104ac:	4b05      	ldr	r3, [pc, #20]	; (104c4 <_svfprintf_r+0x1484>)
   104ae:	b10a      	cbz	r2, 104b4 <_svfprintf_r+0x1474>
   104b0:	f10a 0a01 	add.w	sl, sl, #1
   104b4:	f04f 0c00 	mov.w	ip, #0
   104b8:	e628      	b.n	1010c <_svfprintf_r+0x10cc>
   104ba:	bf00      	nop
   104bc:	20002654 	.word	0x20002654
   104c0:	200029b4 	.word	0x200029b4
   104c4:	cccccccd 	.word	0xcccccccd
   104c8:	ee1b 1a10 	vmov	r1, s22
   104cc:	aa24      	add	r2, sp, #144	; 0x90
   104ce:	4658      	mov	r0, fp
   104d0:	f002 f8b8 	bl	12644 <__ssprint_r>
   104d4:	2800      	cmp	r0, #0
   104d6:	f47f aa18 	bne.w	f90a <_svfprintf_r+0x8ca>
   104da:	991b      	ldr	r1, [sp, #108]	; 0x6c
   104dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   104de:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   104e2:	e67c      	b.n	101de <_svfprintf_r+0x119e>
   104e4:	9b05      	ldr	r3, [sp, #20]
   104e6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   104ea:	930f      	str	r3, [sp, #60]	; 0x3c
   104ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
   104f0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   104f4:	9307      	str	r3, [sp, #28]
   104f6:	f7fe bf84 	b.w	f402 <_svfprintf_r+0x3c2>
   104fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   104fc:	9805      	ldr	r0, [sp, #20]
   104fe:	1865      	adds	r5, r4, r1
   10500:	1a2d      	subs	r5, r5, r0
   10502:	1acc      	subs	r4, r1, r3
   10504:	42a5      	cmp	r5, r4
   10506:	bfa8      	it	ge
   10508:	4625      	movge	r5, r4
   1050a:	f7ff bb4d 	b.w	fba8 <_svfprintf_r+0xb68>
   1050e:	9b08      	ldr	r3, [sp, #32]
   10510:	9904      	ldr	r1, [sp, #16]
   10512:	f853 2b04 	ldr.w	r2, [r3], #4
   10516:	9308      	str	r3, [sp, #32]
   10518:	8011      	strh	r1, [r2, #0]
   1051a:	464c      	mov	r4, r9
   1051c:	f7fe bdc2 	b.w	f0a4 <_svfprintf_r+0x64>
   10520:	f913 2b04 	ldrsb.w	r2, [r3], #4
   10524:	9308      	str	r3, [sp, #32]
   10526:	17d1      	asrs	r1, r2, #31
   10528:	460b      	mov	r3, r1
   1052a:	f7fe bfdb 	b.w	f4e4 <_svfprintf_r+0x4a4>
   1052e:	9a03      	ldr	r2, [sp, #12]
   10530:	2102      	movs	r1, #2
   10532:	ab22      	add	r3, sp, #136	; 0x88
   10534:	9301      	str	r3, [sp, #4]
   10536:	ab1d      	add	r3, sp, #116	; 0x74
   10538:	9300      	str	r3, [sp, #0]
   1053a:	4658      	mov	r0, fp
   1053c:	ab1b      	add	r3, sp, #108	; 0x6c
   1053e:	eeb0 0b4a 	vmov.f64	d0, d10
   10542:	9202      	str	r2, [sp, #8]
   10544:	f001 f9f4 	bl	11930 <_dtoa_r>
   10548:	2d47      	cmp	r5, #71	; 0x47
   1054a:	9a02      	ldr	r2, [sp, #8]
   1054c:	4604      	mov	r4, r0
   1054e:	f000 8161 	beq.w	10814 <_svfprintf_r+0x17d4>
   10552:	2d46      	cmp	r5, #70	; 0x46
   10554:	4410      	add	r0, r2
   10556:	d105      	bne.n	10564 <_svfprintf_r+0x1524>
   10558:	7823      	ldrb	r3, [r4, #0]
   1055a:	2b30      	cmp	r3, #48	; 0x30
   1055c:	f000 826f 	beq.w	10a3e <_svfprintf_r+0x19fe>
   10560:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10562:	4410      	add	r0, r2
   10564:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1056c:	f040 8146 	bne.w	107fc <_svfprintf_r+0x17bc>
   10570:	4603      	mov	r3, r0
   10572:	1b1b      	subs	r3, r3, r4
   10574:	930e      	str	r3, [sp, #56]	; 0x38
   10576:	2d47      	cmp	r5, #71	; 0x47
   10578:	f000 8110 	beq.w	1079c <_svfprintf_r+0x175c>
   1057c:	2d46      	cmp	r5, #70	; 0x46
   1057e:	f000 81b5 	beq.w	108ec <_svfprintf_r+0x18ac>
   10582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10584:	930c      	str	r3, [sp, #48]	; 0x30
   10586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10588:	2d41      	cmp	r5, #65	; 0x41
   1058a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1058e:	931b      	str	r3, [sp, #108]	; 0x6c
   10590:	f000 81e5 	beq.w	1095e <_svfprintf_r+0x191e>
   10594:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   10598:	2100      	movs	r1, #0
   1059a:	2b00      	cmp	r3, #0
   1059c:	bfb8      	it	lt
   1059e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   105a0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   105a4:	bfba      	itte	lt
   105a6:	f1c3 0301 	rsblt	r3, r3, #1
   105aa:	222d      	movlt	r2, #45	; 0x2d
   105ac:	222b      	movge	r2, #43	; 0x2b
   105ae:	2b09      	cmp	r3, #9
   105b0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   105b4:	f340 81da 	ble.w	1096c <_svfprintf_r+0x192c>
   105b8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   105bc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 109dc <_svfprintf_r+0x199c>
   105c0:	462a      	mov	r2, r5
   105c2:	4610      	mov	r0, r2
   105c4:	fb8c 2103 	smull	r2, r1, ip, r3
   105c8:	17da      	asrs	r2, r3, #31
   105ca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   105ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   105d2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   105d6:	3130      	adds	r1, #48	; 0x30
   105d8:	f800 1c01 	strb.w	r1, [r0, #-1]
   105dc:	4619      	mov	r1, r3
   105de:	2963      	cmp	r1, #99	; 0x63
   105e0:	4613      	mov	r3, r2
   105e2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   105e6:	dcec      	bgt.n	105c2 <_svfprintf_r+0x1582>
   105e8:	3330      	adds	r3, #48	; 0x30
   105ea:	b2d9      	uxtb	r1, r3
   105ec:	1e83      	subs	r3, r0, #2
   105ee:	429d      	cmp	r5, r3
   105f0:	f802 1c01 	strb.w	r1, [r2, #-1]
   105f4:	f240 828b 	bls.w	10b0e <_svfprintf_r+0x1ace>
   105f8:	4613      	mov	r3, r2
   105fa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   105fe:	e001      	b.n	10604 <_svfprintf_r+0x15c4>
   10600:	f813 1b01 	ldrb.w	r1, [r3], #1
   10604:	f802 1b01 	strb.w	r1, [r2], #1
   10608:	429d      	cmp	r5, r3
   1060a:	d1f9      	bne.n	10600 <_svfprintf_r+0x15c0>
   1060c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   10610:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   10614:	1a1b      	subs	r3, r3, r0
   10616:	4413      	add	r3, r2
   10618:	aa1e      	add	r2, sp, #120	; 0x78
   1061a:	1a9b      	subs	r3, r3, r2
   1061c:	9314      	str	r3, [sp, #80]	; 0x50
   1061e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10620:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10622:	2b01      	cmp	r3, #1
   10624:	441a      	add	r2, r3
   10626:	9205      	str	r2, [sp, #20]
   10628:	f340 8203 	ble.w	10a32 <_svfprintf_r+0x19f2>
   1062c:	9b05      	ldr	r3, [sp, #20]
   1062e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10630:	4413      	add	r3, r2
   10632:	9305      	str	r3, [sp, #20]
   10634:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   10638:	9a05      	ldr	r2, [sp, #20]
   1063a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   1063e:	2300      	movs	r3, #0
   10640:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   10644:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   10648:	930f      	str	r3, [sp, #60]	; 0x3c
   1064a:	9202      	str	r2, [sp, #8]
   1064c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1064e:	2b00      	cmp	r3, #0
   10650:	f040 80b1 	bne.w	107b6 <_svfprintf_r+0x1776>
   10654:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10658:	9303      	str	r3, [sp, #12]
   1065a:	f7fe bed2 	b.w	f402 <_svfprintf_r+0x3c2>
   1065e:	4620      	mov	r0, r4
   10660:	f7fe face 	bl	ec00 <strlen>
   10664:	4602      	mov	r2, r0
   10666:	9005      	str	r0, [sp, #20]
   10668:	f7fe bf20 	b.w	f4ac <_svfprintf_r+0x46c>
   1066c:	ee1b 1a10 	vmov	r1, s22
   10670:	aa24      	add	r2, sp, #144	; 0x90
   10672:	4658      	mov	r0, fp
   10674:	f001 ffe6 	bl	12644 <__ssprint_r>
   10678:	f7fe bded 	b.w	f256 <_svfprintf_r+0x216>
   1067c:	1c59      	adds	r1, r3, #1
   1067e:	4658      	mov	r0, fp
   10680:	f7fd f922 	bl	d8c8 <_malloc_r>
   10684:	4604      	mov	r4, r0
   10686:	2800      	cmp	r0, #0
   10688:	f000 81ca 	beq.w	10a20 <_svfprintf_r+0x19e0>
   1068c:	9007      	str	r0, [sp, #28]
   1068e:	e6e0      	b.n	10452 <_svfprintf_r+0x1412>
   10690:	ee1b 1a10 	vmov	r1, s22
   10694:	aa24      	add	r2, sp, #144	; 0x90
   10696:	4658      	mov	r0, fp
   10698:	f001 ffd4 	bl	12644 <__ssprint_r>
   1069c:	2800      	cmp	r0, #0
   1069e:	f47f a934 	bne.w	f90a <_svfprintf_r+0x8ca>
   106a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   106a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   106a8:	f7ff ba49 	b.w	fb3e <_svfprintf_r+0xafe>
   106ac:	ee1b 1a10 	vmov	r1, s22
   106b0:	aa24      	add	r2, sp, #144	; 0x90
   106b2:	4658      	mov	r0, fp
   106b4:	f001 ffc6 	bl	12644 <__ssprint_r>
   106b8:	2800      	cmp	r0, #0
   106ba:	f47f a926 	bne.w	f90a <_svfprintf_r+0x8ca>
   106be:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   106c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   106c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   106c8:	e649      	b.n	1035e <_svfprintf_r+0x131e>
   106ca:	2306      	movs	r3, #6
   106cc:	9303      	str	r3, [sp, #12]
   106ce:	f7ff bb83 	b.w	fdd8 <_svfprintf_r+0xd98>
   106d2:	9b03      	ldr	r3, [sp, #12]
   106d4:	2102      	movs	r1, #2
   106d6:	1c5a      	adds	r2, r3, #1
   106d8:	e72b      	b.n	10532 <_svfprintf_r+0x14f2>
   106da:	9a03      	ldr	r2, [sp, #12]
   106dc:	2103      	movs	r1, #3
   106de:	e728      	b.n	10532 <_svfprintf_r+0x14f2>
   106e0:	a81b      	add	r0, sp, #108	; 0x6c
   106e2:	eeb0 0b4a 	vmov.f64	d0, d10
   106e6:	f000 fff7 	bl	116d8 <frexp>
   106ea:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   106ee:	ee20 0b07 	vmul.f64	d0, d0, d7
   106f2:	eeb5 0b40 	vcmp.f64	d0, #0.0
   106f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   106fa:	d101      	bne.n	10700 <_svfprintf_r+0x16c0>
   106fc:	2301      	movs	r3, #1
   106fe:	931b      	str	r3, [sp, #108]	; 0x6c
   10700:	48b3      	ldr	r0, [pc, #716]	; (109d0 <_svfprintf_r+0x1990>)
   10702:	9b03      	ldr	r3, [sp, #12]
   10704:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   10708:	3b01      	subs	r3, #1
   1070a:	4622      	mov	r2, r4
   1070c:	e004      	b.n	10718 <_svfprintf_r+0x16d8>
   1070e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   10712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10716:	d013      	beq.n	10740 <_svfprintf_r+0x1700>
   10718:	ee20 0b05 	vmul.f64	d0, d0, d5
   1071c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   10720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10724:	ee17 1a90 	vmov	r1, s15
   10728:	5c41      	ldrb	r1, [r0, r1]
   1072a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   1072e:	4694      	mov	ip, r2
   10730:	ee30 0b46 	vsub.f64	d0, d0, d6
   10734:	f802 1b01 	strb.w	r1, [r2], #1
   10738:	4619      	mov	r1, r3
   1073a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1073e:	d1e6      	bne.n	1070e <_svfprintf_r+0x16ce>
   10740:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   10744:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1074c:	f300 8148 	bgt.w	109e0 <_svfprintf_r+0x19a0>
   10750:	eeb4 0b46 	vcmp.f64	d0, d6
   10754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10758:	d104      	bne.n	10764 <_svfprintf_r+0x1724>
   1075a:	ee17 3a90 	vmov	r3, s15
   1075e:	07db      	lsls	r3, r3, #31
   10760:	f100 813e 	bmi.w	109e0 <_svfprintf_r+0x19a0>
   10764:	2900      	cmp	r1, #0
   10766:	db06      	blt.n	10776 <_svfprintf_r+0x1736>
   10768:	1c4b      	adds	r3, r1, #1
   1076a:	4413      	add	r3, r2
   1076c:	2130      	movs	r1, #48	; 0x30
   1076e:	f802 1b01 	strb.w	r1, [r2], #1
   10772:	4293      	cmp	r3, r2
   10774:	d1fb      	bne.n	1076e <_svfprintf_r+0x172e>
   10776:	1b13      	subs	r3, r2, r4
   10778:	930e      	str	r3, [sp, #56]	; 0x38
   1077a:	e6fc      	b.n	10576 <_svfprintf_r+0x1536>
   1077c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1077e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10780:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10784:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10788:	9613      	str	r6, [sp, #76]	; 0x4c
   1078a:	18e3      	adds	r3, r4, r3
   1078c:	429d      	cmp	r5, r3
   1078e:	4629      	mov	r1, r5
   10790:	bf28      	it	cs
   10792:	4619      	movcs	r1, r3
   10794:	4682      	mov	sl, r0
   10796:	9105      	str	r1, [sp, #20]
   10798:	f7ff b9d8 	b.w	fb4c <_svfprintf_r+0xb0c>
   1079c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1079e:	930c      	str	r3, [sp, #48]	; 0x30
   107a0:	1cda      	adds	r2, r3, #3
   107a2:	db02      	blt.n	107aa <_svfprintf_r+0x176a>
   107a4:	9a03      	ldr	r2, [sp, #12]
   107a6:	4293      	cmp	r3, r2
   107a8:	dd0c      	ble.n	107c4 <_svfprintf_r+0x1784>
   107aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   107ac:	3b02      	subs	r3, #2
   107ae:	930b      	str	r3, [sp, #44]	; 0x2c
   107b0:	f023 0520 	bic.w	r5, r3, #32
   107b4:	e6e7      	b.n	10586 <_svfprintf_r+0x1546>
   107b6:	212d      	movs	r1, #45	; 0x2d
   107b8:	2300      	movs	r3, #0
   107ba:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   107be:	9303      	str	r3, [sp, #12]
   107c0:	f7fe be22 	b.w	f408 <_svfprintf_r+0x3c8>
   107c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   107c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   107c8:	4293      	cmp	r3, r2
   107ca:	f2c0 80bd 	blt.w	10948 <_svfprintf_r+0x1908>
   107ce:	07f0      	lsls	r0, r6, #31
   107d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   107d2:	f140 8132 	bpl.w	10a3a <_svfprintf_r+0x19fa>
   107d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   107d8:	4413      	add	r3, r2
   107da:	9305      	str	r3, [sp, #20]
   107dc:	0571      	lsls	r1, r6, #21
   107de:	d503      	bpl.n	107e8 <_svfprintf_r+0x17a8>
   107e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   107e2:	2b00      	cmp	r3, #0
   107e4:	f300 8135 	bgt.w	10a52 <_svfprintf_r+0x1a12>
   107e8:	9b05      	ldr	r3, [sp, #20]
   107ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   107ee:	9302      	str	r3, [sp, #8]
   107f0:	2367      	movs	r3, #103	; 0x67
   107f2:	930b      	str	r3, [sp, #44]	; 0x2c
   107f4:	2300      	movs	r3, #0
   107f6:	930f      	str	r3, [sp, #60]	; 0x3c
   107f8:	930d      	str	r3, [sp, #52]	; 0x34
   107fa:	e727      	b.n	1064c <_svfprintf_r+0x160c>
   107fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   107fe:	4283      	cmp	r3, r0
   10800:	f4bf aeb7 	bcs.w	10572 <_svfprintf_r+0x1532>
   10804:	2130      	movs	r1, #48	; 0x30
   10806:	1c5a      	adds	r2, r3, #1
   10808:	9222      	str	r2, [sp, #136]	; 0x88
   1080a:	7019      	strb	r1, [r3, #0]
   1080c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1080e:	4298      	cmp	r0, r3
   10810:	d8f9      	bhi.n	10806 <_svfprintf_r+0x17c6>
   10812:	e6ae      	b.n	10572 <_svfprintf_r+0x1532>
   10814:	07f3      	lsls	r3, r6, #31
   10816:	f100 80a7 	bmi.w	10968 <_svfprintf_r+0x1928>
   1081a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1081c:	e6a9      	b.n	10572 <_svfprintf_r+0x1532>
   1081e:	aa24      	add	r2, sp, #144	; 0x90
   10820:	4658      	mov	r0, fp
   10822:	9105      	str	r1, [sp, #20]
   10824:	f001 ff0e 	bl	12644 <__ssprint_r>
   10828:	2800      	cmp	r0, #0
   1082a:	f47f a86e 	bne.w	f90a <_svfprintf_r+0x8ca>
   1082e:	f896 c000 	ldrb.w	ip, [r6]
   10832:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10834:	9905      	ldr	r1, [sp, #20]
   10836:	a827      	add	r0, sp, #156	; 0x9c
   10838:	4465      	add	r5, ip
   1083a:	f7ff bbec 	b.w	10016 <_svfprintf_r+0xfd6>
   1083e:	ee1b 1a10 	vmov	r1, s22
   10842:	aa24      	add	r2, sp, #144	; 0x90
   10844:	4658      	mov	r0, fp
   10846:	f001 fefd 	bl	12644 <__ssprint_r>
   1084a:	2800      	cmp	r0, #0
   1084c:	f47f a85d 	bne.w	f90a <_svfprintf_r+0x8ca>
   10850:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10852:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10856:	f7ff b96b 	b.w	fb30 <_svfprintf_r+0xaf0>
   1085a:	2378      	movs	r3, #120	; 0x78
   1085c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   10860:	2330      	movs	r3, #48	; 0x30
   10862:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   10866:	9b03      	ldr	r3, [sp, #12]
   10868:	2b63      	cmp	r3, #99	; 0x63
   1086a:	f048 0602 	orr.w	r6, r8, #2
   1086e:	f300 80a6 	bgt.w	109be <_svfprintf_r+0x197e>
   10872:	2300      	movs	r3, #0
   10874:	9307      	str	r3, [sp, #28]
   10876:	ac37      	add	r4, sp, #220	; 0xdc
   10878:	ee18 3a90 	vmov	r3, s17
   1087c:	2b00      	cmp	r3, #0
   1087e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   10882:	db2b      	blt.n	108dc <_svfprintf_r+0x189c>
   10884:	eeb0 ab48 	vmov.f64	d10, d8
   10888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1088a:	f023 0520 	bic.w	r5, r3, #32
   1088e:	2300      	movs	r3, #0
   10890:	9309      	str	r3, [sp, #36]	; 0x24
   10892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10894:	2b61      	cmp	r3, #97	; 0x61
   10896:	f47f aaad 	bne.w	fdf4 <_svfprintf_r+0xdb4>
   1089a:	eeb0 0b4a 	vmov.f64	d0, d10
   1089e:	a81b      	add	r0, sp, #108	; 0x6c
   108a0:	f000 ff1a 	bl	116d8 <frexp>
   108a4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   108a8:	ee20 0b07 	vmul.f64	d0, d0, d7
   108ac:	eeb5 0b40 	vcmp.f64	d0, #0.0
   108b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108b4:	d101      	bne.n	108ba <_svfprintf_r+0x187a>
   108b6:	2301      	movs	r3, #1
   108b8:	931b      	str	r3, [sp, #108]	; 0x6c
   108ba:	4846      	ldr	r0, [pc, #280]	; (109d4 <_svfprintf_r+0x1994>)
   108bc:	e721      	b.n	10702 <_svfprintf_r+0x16c2>
   108be:	ee1b 1a10 	vmov	r1, s22
   108c2:	aa24      	add	r2, sp, #144	; 0x90
   108c4:	4658      	mov	r0, fp
   108c6:	f001 febd 	bl	12644 <__ssprint_r>
   108ca:	2800      	cmp	r0, #0
   108cc:	f47f a81d 	bne.w	f90a <_svfprintf_r+0x8ca>
   108d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   108d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   108d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   108d8:	f7ff b94e 	b.w	fb78 <_svfprintf_r+0xb38>
   108dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   108de:	f023 0520 	bic.w	r5, r3, #32
   108e2:	232d      	movs	r3, #45	; 0x2d
   108e4:	9309      	str	r3, [sp, #36]	; 0x24
   108e6:	eeb1 ab48 	vneg.f64	d10, d8
   108ea:	e7d2      	b.n	10892 <_svfprintf_r+0x1852>
   108ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   108ee:	920c      	str	r2, [sp, #48]	; 0x30
   108f0:	2a00      	cmp	r2, #0
   108f2:	f006 0301 	and.w	r3, r6, #1
   108f6:	f340 810d 	ble.w	10b14 <_svfprintf_r+0x1ad4>
   108fa:	9903      	ldr	r1, [sp, #12]
   108fc:	430b      	orrs	r3, r1
   108fe:	f040 80cf 	bne.w	10aa0 <_svfprintf_r+0x1a60>
   10902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10904:	9305      	str	r3, [sp, #20]
   10906:	2366      	movs	r3, #102	; 0x66
   10908:	930b      	str	r3, [sp, #44]	; 0x2c
   1090a:	0572      	lsls	r2, r6, #21
   1090c:	f100 80a3 	bmi.w	10a56 <_svfprintf_r+0x1a16>
   10910:	9b05      	ldr	r3, [sp, #20]
   10912:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10916:	9302      	str	r3, [sp, #8]
   10918:	e76c      	b.n	107f4 <_svfprintf_r+0x17b4>
   1091a:	ee1b 1a10 	vmov	r1, s22
   1091e:	aa24      	add	r2, sp, #144	; 0x90
   10920:	4658      	mov	r0, fp
   10922:	f001 fe8f 	bl	12644 <__ssprint_r>
   10926:	2800      	cmp	r0, #0
   10928:	f47e afef 	bne.w	f90a <_svfprintf_r+0x8ca>
   1092c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1092e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10930:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10932:	1b1c      	subs	r4, r3, r4
   10934:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10938:	f7ff b936 	b.w	fba8 <_svfprintf_r+0xb68>
   1093c:	2358      	movs	r3, #88	; 0x58
   1093e:	e78d      	b.n	1085c <_svfprintf_r+0x181c>
   10940:	2200      	movs	r2, #0
   10942:	9203      	str	r2, [sp, #12]
   10944:	f7fe bbda 	b.w	f0fc <_svfprintf_r+0xbc>
   10948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1094a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1094c:	189a      	adds	r2, r3, r2
   1094e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10950:	9205      	str	r2, [sp, #20]
   10952:	2b00      	cmp	r3, #0
   10954:	f340 80ab 	ble.w	10aae <_svfprintf_r+0x1a6e>
   10958:	2367      	movs	r3, #103	; 0x67
   1095a:	930b      	str	r3, [sp, #44]	; 0x2c
   1095c:	e7d5      	b.n	1090a <_svfprintf_r+0x18ca>
   1095e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10960:	320f      	adds	r2, #15
   10962:	b2d2      	uxtb	r2, r2
   10964:	2101      	movs	r1, #1
   10966:	e618      	b.n	1059a <_svfprintf_r+0x155a>
   10968:	18a0      	adds	r0, r4, r2
   1096a:	e5fb      	b.n	10564 <_svfprintf_r+0x1524>
   1096c:	2900      	cmp	r1, #0
   1096e:	f040 80a8 	bne.w	10ac2 <_svfprintf_r+0x1a82>
   10972:	2230      	movs	r2, #48	; 0x30
   10974:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   10978:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   1097c:	3330      	adds	r3, #48	; 0x30
   1097e:	f802 3b01 	strb.w	r3, [r2], #1
   10982:	ab1e      	add	r3, sp, #120	; 0x78
   10984:	1ad3      	subs	r3, r2, r3
   10986:	9314      	str	r3, [sp, #80]	; 0x50
   10988:	e649      	b.n	1061e <_svfprintf_r+0x15de>
   1098a:	3301      	adds	r3, #1
   1098c:	4912      	ldr	r1, [pc, #72]	; (109d8 <_svfprintf_r+0x1998>)
   1098e:	f8ca 5004 	str.w	r5, [sl, #4]
   10992:	442a      	add	r2, r5
   10994:	2b07      	cmp	r3, #7
   10996:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1099a:	f8ca 1000 	str.w	r1, [sl]
   1099e:	f77f ac33 	ble.w	10208 <_svfprintf_r+0x11c8>
   109a2:	ee1b 1a10 	vmov	r1, s22
   109a6:	aa24      	add	r2, sp, #144	; 0x90
   109a8:	4658      	mov	r0, fp
   109aa:	f001 fe4b 	bl	12644 <__ssprint_r>
   109ae:	2800      	cmp	r0, #0
   109b0:	f47e afab 	bne.w	f90a <_svfprintf_r+0x8ca>
   109b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   109b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   109bc:	e426      	b.n	1020c <_svfprintf_r+0x11cc>
   109be:	1c59      	adds	r1, r3, #1
   109c0:	4658      	mov	r0, fp
   109c2:	f7fc ff81 	bl	d8c8 <_malloc_r>
   109c6:	4604      	mov	r4, r0
   109c8:	b350      	cbz	r0, 10a20 <_svfprintf_r+0x19e0>
   109ca:	9007      	str	r0, [sp, #28]
   109cc:	e754      	b.n	10878 <_svfprintf_r+0x1838>
   109ce:	bf00      	nop
   109d0:	20002638 	.word	0x20002638
   109d4:	20002624 	.word	0x20002624
   109d8:	200029b4 	.word	0x200029b4
   109dc:	66666667 	.word	0x66666667
   109e0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   109e4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   109e8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   109ec:	4561      	cmp	r1, ip
   109ee:	4613      	mov	r3, r2
   109f0:	d10a      	bne.n	10a08 <_svfprintf_r+0x19c8>
   109f2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   109f6:	f803 ec01 	strb.w	lr, [r3, #-1]
   109fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   109fc:	1e59      	subs	r1, r3, #1
   109fe:	9122      	str	r1, [sp, #136]	; 0x88
   10a00:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   10a04:	458c      	cmp	ip, r1
   10a06:	d0f6      	beq.n	109f6 <_svfprintf_r+0x19b6>
   10a08:	2939      	cmp	r1, #57	; 0x39
   10a0a:	bf16      	itet	ne
   10a0c:	3101      	addne	r1, #1
   10a0e:	7a81      	ldrbeq	r1, [r0, #10]
   10a10:	b2c9      	uxtbne	r1, r1
   10a12:	f803 1c01 	strb.w	r1, [r3, #-1]
   10a16:	e6ae      	b.n	10776 <_svfprintf_r+0x1736>
   10a18:	2300      	movs	r3, #0
   10a1a:	4690      	mov	r8, r2
   10a1c:	9307      	str	r3, [sp, #28]
   10a1e:	e760      	b.n	108e2 <_svfprintf_r+0x18a2>
   10a20:	ee1b 2a10 	vmov	r2, s22
   10a24:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a2c:	8193      	strh	r3, [r2, #12]
   10a2e:	f7fe bc16 	b.w	f25e <_svfprintf_r+0x21e>
   10a32:	07f5      	lsls	r5, r6, #31
   10a34:	f57f adfe 	bpl.w	10634 <_svfprintf_r+0x15f4>
   10a38:	e5f8      	b.n	1062c <_svfprintf_r+0x15ec>
   10a3a:	9305      	str	r3, [sp, #20]
   10a3c:	e6ce      	b.n	107dc <_svfprintf_r+0x179c>
   10a3e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a46:	f43f ad8b 	beq.w	10560 <_svfprintf_r+0x1520>
   10a4a:	f1c2 0201 	rsb	r2, r2, #1
   10a4e:	921b      	str	r2, [sp, #108]	; 0x6c
   10a50:	e587      	b.n	10562 <_svfprintf_r+0x1522>
   10a52:	2367      	movs	r3, #103	; 0x67
   10a54:	930b      	str	r3, [sp, #44]	; 0x2c
   10a56:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10a58:	780b      	ldrb	r3, [r1, #0]
   10a5a:	2bff      	cmp	r3, #255	; 0xff
   10a5c:	d079      	beq.n	10b52 <_svfprintf_r+0x1b12>
   10a5e:	2500      	movs	r5, #0
   10a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a62:	4628      	mov	r0, r5
   10a64:	e003      	b.n	10a6e <_svfprintf_r+0x1a2e>
   10a66:	3001      	adds	r0, #1
   10a68:	3101      	adds	r1, #1
   10a6a:	2bff      	cmp	r3, #255	; 0xff
   10a6c:	d008      	beq.n	10a80 <_svfprintf_r+0x1a40>
   10a6e:	4293      	cmp	r3, r2
   10a70:	da06      	bge.n	10a80 <_svfprintf_r+0x1a40>
   10a72:	1ad2      	subs	r2, r2, r3
   10a74:	784b      	ldrb	r3, [r1, #1]
   10a76:	2b00      	cmp	r3, #0
   10a78:	d1f5      	bne.n	10a66 <_svfprintf_r+0x1a26>
   10a7a:	780b      	ldrb	r3, [r1, #0]
   10a7c:	3501      	adds	r5, #1
   10a7e:	e7f4      	b.n	10a6a <_svfprintf_r+0x1a2a>
   10a80:	920c      	str	r2, [sp, #48]	; 0x30
   10a82:	9113      	str	r1, [sp, #76]	; 0x4c
   10a84:	900d      	str	r0, [sp, #52]	; 0x34
   10a86:	950f      	str	r5, [sp, #60]	; 0x3c
   10a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a8c:	9916      	ldr	r1, [sp, #88]	; 0x58
   10a8e:	4413      	add	r3, r2
   10a90:	9a05      	ldr	r2, [sp, #20]
   10a92:	fb01 2303 	mla	r3, r1, r3, r2
   10a96:	9305      	str	r3, [sp, #20]
   10a98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10a9c:	9302      	str	r3, [sp, #8]
   10a9e:	e5d5      	b.n	1064c <_svfprintf_r+0x160c>
   10aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10aa2:	18d3      	adds	r3, r2, r3
   10aa4:	4419      	add	r1, r3
   10aa6:	2366      	movs	r3, #102	; 0x66
   10aa8:	9105      	str	r1, [sp, #20]
   10aaa:	930b      	str	r3, [sp, #44]	; 0x2c
   10aac:	e72d      	b.n	1090a <_svfprintf_r+0x18ca>
   10aae:	f1c3 0301 	rsb	r3, r3, #1
   10ab2:	441a      	add	r2, r3
   10ab4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10ab8:	9302      	str	r3, [sp, #8]
   10aba:	2367      	movs	r3, #103	; 0x67
   10abc:	9205      	str	r2, [sp, #20]
   10abe:	930b      	str	r3, [sp, #44]	; 0x2c
   10ac0:	e698      	b.n	107f4 <_svfprintf_r+0x17b4>
   10ac2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   10ac6:	e759      	b.n	1097c <_svfprintf_r+0x193c>
   10ac8:	9b03      	ldr	r3, [sp, #12]
   10aca:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10ace:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10ad2:	9305      	str	r3, [sp, #20]
   10ad4:	e4b4      	b.n	10440 <_svfprintf_r+0x1400>
   10ad6:	ee18 3a90 	vmov	r3, s17
   10ada:	2b00      	cmp	r3, #0
   10adc:	bfb4      	ite	lt
   10ade:	212d      	movlt	r1, #45	; 0x2d
   10ae0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   10ae4:	4c25      	ldr	r4, [pc, #148]	; (10b7c <_svfprintf_r+0x1b3c>)
   10ae6:	4b26      	ldr	r3, [pc, #152]	; (10b80 <_svfprintf_r+0x1b40>)
   10ae8:	bfb8      	it	lt
   10aea:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   10aee:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   10af2:	f7fe bc79 	b.w	f3e8 <_svfprintf_r+0x3a8>
   10af6:	9b03      	ldr	r3, [sp, #12]
   10af8:	9302      	str	r3, [sp, #8]
   10afa:	9305      	str	r3, [sp, #20]
   10afc:	2373      	movs	r3, #115	; 0x73
   10afe:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10b02:	9003      	str	r0, [sp, #12]
   10b04:	900f      	str	r0, [sp, #60]	; 0x3c
   10b06:	900d      	str	r0, [sp, #52]	; 0x34
   10b08:	930b      	str	r3, [sp, #44]	; 0x2c
   10b0a:	f7fe bc7a 	b.w	f402 <_svfprintf_r+0x3c2>
   10b0e:	2302      	movs	r3, #2
   10b10:	9314      	str	r3, [sp, #80]	; 0x50
   10b12:	e584      	b.n	1061e <_svfprintf_r+0x15de>
   10b14:	9a03      	ldr	r2, [sp, #12]
   10b16:	4313      	orrs	r3, r2
   10b18:	d105      	bne.n	10b26 <_svfprintf_r+0x1ae6>
   10b1a:	2301      	movs	r3, #1
   10b1c:	2266      	movs	r2, #102	; 0x66
   10b1e:	9302      	str	r3, [sp, #8]
   10b20:	920b      	str	r2, [sp, #44]	; 0x2c
   10b22:	9305      	str	r3, [sp, #20]
   10b24:	e666      	b.n	107f4 <_svfprintf_r+0x17b4>
   10b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10b28:	3301      	adds	r3, #1
   10b2a:	441a      	add	r2, r3
   10b2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10b30:	9302      	str	r3, [sp, #8]
   10b32:	2366      	movs	r3, #102	; 0x66
   10b34:	9205      	str	r2, [sp, #20]
   10b36:	930b      	str	r3, [sp, #44]	; 0x2c
   10b38:	e65c      	b.n	107f4 <_svfprintf_r+0x17b4>
   10b3a:	9a08      	ldr	r2, [sp, #32]
   10b3c:	f899 3001 	ldrb.w	r3, [r9, #1]
   10b40:	4689      	mov	r9, r1
   10b42:	f852 1b04 	ldr.w	r1, [r2], #4
   10b46:	9208      	str	r2, [sp, #32]
   10b48:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   10b4c:	9103      	str	r1, [sp, #12]
   10b4e:	f7fe bad3 	b.w	f0f8 <_svfprintf_r+0xb8>
   10b52:	2300      	movs	r3, #0
   10b54:	930f      	str	r3, [sp, #60]	; 0x3c
   10b56:	930d      	str	r3, [sp, #52]	; 0x34
   10b58:	e796      	b.n	10a88 <_svfprintf_r+0x1a48>
   10b5a:	230c      	movs	r3, #12
   10b5c:	f8cb 3000 	str.w	r3, [fp]
   10b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b64:	9304      	str	r3, [sp, #16]
   10b66:	f7fe bb81 	b.w	f26c <_svfprintf_r+0x22c>
   10b6a:	ee1b 2a10 	vmov	r2, s22
   10b6e:	8993      	ldrh	r3, [r2, #12]
   10b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10b74:	8193      	strh	r3, [r2, #12]
   10b76:	f7fe bec8 	b.w	f90a <_svfprintf_r+0x8ca>
   10b7a:	bf00      	nop
   10b7c:	2000261c 	.word	0x2000261c
   10b80:	20002620 	.word	0x20002620

00010b84 <_Balloc>:
   10b84:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10b86:	b570      	push	{r4, r5, r6, lr}
   10b88:	4605      	mov	r5, r0
   10b8a:	460c      	mov	r4, r1
   10b8c:	b14b      	cbz	r3, 10ba2 <_Balloc+0x1e>
   10b8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   10b92:	b180      	cbz	r0, 10bb6 <_Balloc+0x32>
   10b94:	6802      	ldr	r2, [r0, #0]
   10b96:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   10b9a:	2300      	movs	r3, #0
   10b9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   10ba0:	bd70      	pop	{r4, r5, r6, pc}
   10ba2:	2221      	movs	r2, #33	; 0x21
   10ba4:	2104      	movs	r1, #4
   10ba6:	f000 fdf3 	bl	11790 <_calloc_r>
   10baa:	4603      	mov	r3, r0
   10bac:	6468      	str	r0, [r5, #68]	; 0x44
   10bae:	2800      	cmp	r0, #0
   10bb0:	d1ed      	bne.n	10b8e <_Balloc+0xa>
   10bb2:	2000      	movs	r0, #0
   10bb4:	bd70      	pop	{r4, r5, r6, pc}
   10bb6:	2101      	movs	r1, #1
   10bb8:	fa01 f604 	lsl.w	r6, r1, r4
   10bbc:	1d72      	adds	r2, r6, #5
   10bbe:	0092      	lsls	r2, r2, #2
   10bc0:	4628      	mov	r0, r5
   10bc2:	f000 fde5 	bl	11790 <_calloc_r>
   10bc6:	2800      	cmp	r0, #0
   10bc8:	d0f3      	beq.n	10bb2 <_Balloc+0x2e>
   10bca:	e9c0 4601 	strd	r4, r6, [r0, #4]
   10bce:	e7e4      	b.n	10b9a <_Balloc+0x16>

00010bd0 <_Bfree>:
   10bd0:	b131      	cbz	r1, 10be0 <_Bfree+0x10>
   10bd2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10bd4:	684a      	ldr	r2, [r1, #4]
   10bd6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10bda:	6008      	str	r0, [r1, #0]
   10bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   10be0:	4770      	bx	lr
   10be2:	bf00      	nop

00010be4 <__multadd>:
   10be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10be8:	690e      	ldr	r6, [r1, #16]
   10bea:	4680      	mov	r8, r0
   10bec:	460f      	mov	r7, r1
   10bee:	461d      	mov	r5, r3
   10bf0:	f101 0e14 	add.w	lr, r1, #20
   10bf4:	2000      	movs	r0, #0
   10bf6:	f8de 1000 	ldr.w	r1, [lr]
   10bfa:	b28c      	uxth	r4, r1
   10bfc:	fb02 5304 	mla	r3, r2, r4, r5
   10c00:	0c09      	lsrs	r1, r1, #16
   10c02:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10c06:	fb02 cc01 	mla	ip, r2, r1, ip
   10c0a:	3001      	adds	r0, #1
   10c0c:	b29c      	uxth	r4, r3
   10c0e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   10c12:	4286      	cmp	r6, r0
   10c14:	f84e 4b04 	str.w	r4, [lr], #4
   10c18:	ea4f 451c 	mov.w	r5, ip, lsr #16
   10c1c:	dceb      	bgt.n	10bf6 <__multadd+0x12>
   10c1e:	b13d      	cbz	r5, 10c30 <__multadd+0x4c>
   10c20:	68bb      	ldr	r3, [r7, #8]
   10c22:	42b3      	cmp	r3, r6
   10c24:	dd07      	ble.n	10c36 <__multadd+0x52>
   10c26:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   10c2a:	3601      	adds	r6, #1
   10c2c:	615d      	str	r5, [r3, #20]
   10c2e:	613e      	str	r6, [r7, #16]
   10c30:	4638      	mov	r0, r7
   10c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c36:	6879      	ldr	r1, [r7, #4]
   10c38:	4640      	mov	r0, r8
   10c3a:	3101      	adds	r1, #1
   10c3c:	f7ff ffa2 	bl	10b84 <_Balloc>
   10c40:	4604      	mov	r4, r0
   10c42:	b1b0      	cbz	r0, 10c72 <__multadd+0x8e>
   10c44:	693a      	ldr	r2, [r7, #16]
   10c46:	3202      	adds	r2, #2
   10c48:	f107 010c 	add.w	r1, r7, #12
   10c4c:	0092      	lsls	r2, r2, #2
   10c4e:	300c      	adds	r0, #12
   10c50:	f7fb f926 	bl	bea0 <memcpy>
   10c54:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   10c58:	687a      	ldr	r2, [r7, #4]
   10c5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10c5e:	6039      	str	r1, [r7, #0]
   10c60:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10c64:	4627      	mov	r7, r4
   10c66:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   10c6a:	3601      	adds	r6, #1
   10c6c:	615d      	str	r5, [r3, #20]
   10c6e:	613e      	str	r6, [r7, #16]
   10c70:	e7de      	b.n	10c30 <__multadd+0x4c>
   10c72:	4b03      	ldr	r3, [pc, #12]	; (10c80 <__multadd+0x9c>)
   10c74:	4803      	ldr	r0, [pc, #12]	; (10c84 <__multadd+0xa0>)
   10c76:	4622      	mov	r2, r4
   10c78:	21ba      	movs	r1, #186	; 0xba
   10c7a:	f000 fd69 	bl	11750 <__assert_func>
   10c7e:	bf00      	nop
   10c80:	20002424 	.word	0x20002424
   10c84:	20002438 	.word	0x20002438

00010c88 <__hi0bits>:
   10c88:	0c03      	lsrs	r3, r0, #16
   10c8a:	041b      	lsls	r3, r3, #16
   10c8c:	b9d3      	cbnz	r3, 10cc4 <__hi0bits+0x3c>
   10c8e:	0400      	lsls	r0, r0, #16
   10c90:	2310      	movs	r3, #16
   10c92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   10c96:	bf04      	itt	eq
   10c98:	0200      	lsleq	r0, r0, #8
   10c9a:	3308      	addeq	r3, #8
   10c9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   10ca0:	bf04      	itt	eq
   10ca2:	0100      	lsleq	r0, r0, #4
   10ca4:	3304      	addeq	r3, #4
   10ca6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   10caa:	bf04      	itt	eq
   10cac:	0080      	lsleq	r0, r0, #2
   10cae:	3302      	addeq	r3, #2
   10cb0:	2800      	cmp	r0, #0
   10cb2:	db05      	blt.n	10cc0 <__hi0bits+0x38>
   10cb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   10cb8:	f103 0301 	add.w	r3, r3, #1
   10cbc:	bf08      	it	eq
   10cbe:	2320      	moveq	r3, #32
   10cc0:	4618      	mov	r0, r3
   10cc2:	4770      	bx	lr
   10cc4:	2300      	movs	r3, #0
   10cc6:	e7e4      	b.n	10c92 <__hi0bits+0xa>

00010cc8 <__lo0bits>:
   10cc8:	6803      	ldr	r3, [r0, #0]
   10cca:	f013 0207 	ands.w	r2, r3, #7
   10cce:	d008      	beq.n	10ce2 <__lo0bits+0x1a>
   10cd0:	07d9      	lsls	r1, r3, #31
   10cd2:	d41f      	bmi.n	10d14 <__lo0bits+0x4c>
   10cd4:	079a      	lsls	r2, r3, #30
   10cd6:	d522      	bpl.n	10d1e <__lo0bits+0x56>
   10cd8:	085b      	lsrs	r3, r3, #1
   10cda:	6003      	str	r3, [r0, #0]
   10cdc:	2201      	movs	r2, #1
   10cde:	4610      	mov	r0, r2
   10ce0:	4770      	bx	lr
   10ce2:	b299      	uxth	r1, r3
   10ce4:	b909      	cbnz	r1, 10cea <__lo0bits+0x22>
   10ce6:	0c1b      	lsrs	r3, r3, #16
   10ce8:	2210      	movs	r2, #16
   10cea:	b2d9      	uxtb	r1, r3
   10cec:	b909      	cbnz	r1, 10cf2 <__lo0bits+0x2a>
   10cee:	3208      	adds	r2, #8
   10cf0:	0a1b      	lsrs	r3, r3, #8
   10cf2:	0719      	lsls	r1, r3, #28
   10cf4:	bf04      	itt	eq
   10cf6:	091b      	lsreq	r3, r3, #4
   10cf8:	3204      	addeq	r2, #4
   10cfa:	0799      	lsls	r1, r3, #30
   10cfc:	bf04      	itt	eq
   10cfe:	089b      	lsreq	r3, r3, #2
   10d00:	3202      	addeq	r2, #2
   10d02:	07d9      	lsls	r1, r3, #31
   10d04:	d403      	bmi.n	10d0e <__lo0bits+0x46>
   10d06:	085b      	lsrs	r3, r3, #1
   10d08:	f102 0201 	add.w	r2, r2, #1
   10d0c:	d005      	beq.n	10d1a <__lo0bits+0x52>
   10d0e:	6003      	str	r3, [r0, #0]
   10d10:	4610      	mov	r0, r2
   10d12:	4770      	bx	lr
   10d14:	2200      	movs	r2, #0
   10d16:	4610      	mov	r0, r2
   10d18:	4770      	bx	lr
   10d1a:	2220      	movs	r2, #32
   10d1c:	e7df      	b.n	10cde <__lo0bits+0x16>
   10d1e:	089b      	lsrs	r3, r3, #2
   10d20:	2202      	movs	r2, #2
   10d22:	6003      	str	r3, [r0, #0]
   10d24:	4610      	mov	r0, r2
   10d26:	4770      	bx	lr

00010d28 <__i2b>:
   10d28:	b538      	push	{r3, r4, r5, lr}
   10d2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10d2c:	4604      	mov	r4, r0
   10d2e:	460d      	mov	r5, r1
   10d30:	b14b      	cbz	r3, 10d46 <__i2b+0x1e>
   10d32:	6858      	ldr	r0, [r3, #4]
   10d34:	b1b0      	cbz	r0, 10d64 <__i2b+0x3c>
   10d36:	6802      	ldr	r2, [r0, #0]
   10d38:	605a      	str	r2, [r3, #4]
   10d3a:	2200      	movs	r2, #0
   10d3c:	2301      	movs	r3, #1
   10d3e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   10d42:	60c2      	str	r2, [r0, #12]
   10d44:	bd38      	pop	{r3, r4, r5, pc}
   10d46:	2221      	movs	r2, #33	; 0x21
   10d48:	2104      	movs	r1, #4
   10d4a:	f000 fd21 	bl	11790 <_calloc_r>
   10d4e:	4603      	mov	r3, r0
   10d50:	6460      	str	r0, [r4, #68]	; 0x44
   10d52:	2800      	cmp	r0, #0
   10d54:	d1ed      	bne.n	10d32 <__i2b+0xa>
   10d56:	4b09      	ldr	r3, [pc, #36]	; (10d7c <__i2b+0x54>)
   10d58:	4809      	ldr	r0, [pc, #36]	; (10d80 <__i2b+0x58>)
   10d5a:	2200      	movs	r2, #0
   10d5c:	f240 1145 	movw	r1, #325	; 0x145
   10d60:	f000 fcf6 	bl	11750 <__assert_func>
   10d64:	221c      	movs	r2, #28
   10d66:	2101      	movs	r1, #1
   10d68:	4620      	mov	r0, r4
   10d6a:	f000 fd11 	bl	11790 <_calloc_r>
   10d6e:	2800      	cmp	r0, #0
   10d70:	d0f1      	beq.n	10d56 <__i2b+0x2e>
   10d72:	2201      	movs	r2, #1
   10d74:	2302      	movs	r3, #2
   10d76:	e9c0 2301 	strd	r2, r3, [r0, #4]
   10d7a:	e7de      	b.n	10d3a <__i2b+0x12>
   10d7c:	20002424 	.word	0x20002424
   10d80:	20002438 	.word	0x20002438

00010d84 <__multiply>:
   10d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d88:	690e      	ldr	r6, [r1, #16]
   10d8a:	6915      	ldr	r5, [r2, #16]
   10d8c:	42ae      	cmp	r6, r5
   10d8e:	b085      	sub	sp, #20
   10d90:	4688      	mov	r8, r1
   10d92:	4614      	mov	r4, r2
   10d94:	db05      	blt.n	10da2 <__multiply+0x1e>
   10d96:	462a      	mov	r2, r5
   10d98:	4623      	mov	r3, r4
   10d9a:	4635      	mov	r5, r6
   10d9c:	460c      	mov	r4, r1
   10d9e:	4616      	mov	r6, r2
   10da0:	4698      	mov	r8, r3
   10da2:	68a3      	ldr	r3, [r4, #8]
   10da4:	6861      	ldr	r1, [r4, #4]
   10da6:	19af      	adds	r7, r5, r6
   10da8:	42bb      	cmp	r3, r7
   10daa:	bfb8      	it	lt
   10dac:	3101      	addlt	r1, #1
   10dae:	f7ff fee9 	bl	10b84 <_Balloc>
   10db2:	9001      	str	r0, [sp, #4]
   10db4:	2800      	cmp	r0, #0
   10db6:	f000 8087 	beq.w	10ec8 <__multiply+0x144>
   10dba:	9b01      	ldr	r3, [sp, #4]
   10dbc:	f103 0914 	add.w	r9, r3, #20
   10dc0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   10dc4:	45d1      	cmp	r9, sl
   10dc6:	d205      	bcs.n	10dd4 <__multiply+0x50>
   10dc8:	464b      	mov	r3, r9
   10dca:	2200      	movs	r2, #0
   10dcc:	f843 2b04 	str.w	r2, [r3], #4
   10dd0:	459a      	cmp	sl, r3
   10dd2:	d8fb      	bhi.n	10dcc <__multiply+0x48>
   10dd4:	f108 0814 	add.w	r8, r8, #20
   10dd8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   10ddc:	f104 0314 	add.w	r3, r4, #20
   10de0:	45d8      	cmp	r8, fp
   10de2:	461a      	mov	r2, r3
   10de4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   10de8:	d25f      	bcs.n	10eaa <__multiply+0x126>
   10dea:	1b2b      	subs	r3, r5, r4
   10dec:	3b15      	subs	r3, #21
   10dee:	f023 0303 	bic.w	r3, r3, #3
   10df2:	3304      	adds	r3, #4
   10df4:	3415      	adds	r4, #21
   10df6:	42a5      	cmp	r5, r4
   10df8:	bf38      	it	cc
   10dfa:	2304      	movcc	r3, #4
   10dfc:	e9cd a702 	strd	sl, r7, [sp, #8]
   10e00:	46ac      	mov	ip, r5
   10e02:	461f      	mov	r7, r3
   10e04:	4692      	mov	sl, r2
   10e06:	e005      	b.n	10e14 <__multiply+0x90>
   10e08:	0c09      	lsrs	r1, r1, #16
   10e0a:	d129      	bne.n	10e60 <__multiply+0xdc>
   10e0c:	45c3      	cmp	fp, r8
   10e0e:	f109 0904 	add.w	r9, r9, #4
   10e12:	d948      	bls.n	10ea6 <__multiply+0x122>
   10e14:	f858 1b04 	ldr.w	r1, [r8], #4
   10e18:	b28d      	uxth	r5, r1
   10e1a:	2d00      	cmp	r5, #0
   10e1c:	d0f4      	beq.n	10e08 <__multiply+0x84>
   10e1e:	4656      	mov	r6, sl
   10e20:	464c      	mov	r4, r9
   10e22:	2300      	movs	r3, #0
   10e24:	f856 1b04 	ldr.w	r1, [r6], #4
   10e28:	6822      	ldr	r2, [r4, #0]
   10e2a:	fa1f fe81 	uxth.w	lr, r1
   10e2e:	b290      	uxth	r0, r2
   10e30:	0c09      	lsrs	r1, r1, #16
   10e32:	fb05 000e 	mla	r0, r5, lr, r0
   10e36:	0c12      	lsrs	r2, r2, #16
   10e38:	4403      	add	r3, r0
   10e3a:	fb05 2201 	mla	r2, r5, r1, r2
   10e3e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   10e42:	b29b      	uxth	r3, r3
   10e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10e48:	45b4      	cmp	ip, r6
   10e4a:	f844 3b04 	str.w	r3, [r4], #4
   10e4e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   10e52:	d8e7      	bhi.n	10e24 <__multiply+0xa0>
   10e54:	f849 3007 	str.w	r3, [r9, r7]
   10e58:	f858 1c04 	ldr.w	r1, [r8, #-4]
   10e5c:	0c09      	lsrs	r1, r1, #16
   10e5e:	d0d5      	beq.n	10e0c <__multiply+0x88>
   10e60:	f8d9 3000 	ldr.w	r3, [r9]
   10e64:	4650      	mov	r0, sl
   10e66:	461a      	mov	r2, r3
   10e68:	464c      	mov	r4, r9
   10e6a:	2600      	movs	r6, #0
   10e6c:	8805      	ldrh	r5, [r0, #0]
   10e6e:	0c12      	lsrs	r2, r2, #16
   10e70:	fb01 2205 	mla	r2, r1, r5, r2
   10e74:	4416      	add	r6, r2
   10e76:	b29b      	uxth	r3, r3
   10e78:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   10e7c:	f844 3b04 	str.w	r3, [r4], #4
   10e80:	f850 5b04 	ldr.w	r5, [r0], #4
   10e84:	6822      	ldr	r2, [r4, #0]
   10e86:	0c2d      	lsrs	r5, r5, #16
   10e88:	b293      	uxth	r3, r2
   10e8a:	fb01 3305 	mla	r3, r1, r5, r3
   10e8e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   10e92:	4584      	cmp	ip, r0
   10e94:	ea4f 4613 	mov.w	r6, r3, lsr #16
   10e98:	d8e8      	bhi.n	10e6c <__multiply+0xe8>
   10e9a:	45c3      	cmp	fp, r8
   10e9c:	f849 3007 	str.w	r3, [r9, r7]
   10ea0:	f109 0904 	add.w	r9, r9, #4
   10ea4:	d8b6      	bhi.n	10e14 <__multiply+0x90>
   10ea6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   10eaa:	2f00      	cmp	r7, #0
   10eac:	dc02      	bgt.n	10eb4 <__multiply+0x130>
   10eae:	e005      	b.n	10ebc <__multiply+0x138>
   10eb0:	3f01      	subs	r7, #1
   10eb2:	d003      	beq.n	10ebc <__multiply+0x138>
   10eb4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   10eb8:	2b00      	cmp	r3, #0
   10eba:	d0f9      	beq.n	10eb0 <__multiply+0x12c>
   10ebc:	9b01      	ldr	r3, [sp, #4]
   10ebe:	4618      	mov	r0, r3
   10ec0:	611f      	str	r7, [r3, #16]
   10ec2:	b005      	add	sp, #20
   10ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ec8:	4b03      	ldr	r3, [pc, #12]	; (10ed8 <__multiply+0x154>)
   10eca:	4804      	ldr	r0, [pc, #16]	; (10edc <__multiply+0x158>)
   10ecc:	9a01      	ldr	r2, [sp, #4]
   10ece:	f44f 71b1 	mov.w	r1, #354	; 0x162
   10ed2:	f000 fc3d 	bl	11750 <__assert_func>
   10ed6:	bf00      	nop
   10ed8:	20002424 	.word	0x20002424
   10edc:	20002438 	.word	0x20002438

00010ee0 <__pow5mult>:
   10ee0:	f012 0303 	ands.w	r3, r2, #3
   10ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ee8:	4614      	mov	r4, r2
   10eea:	4606      	mov	r6, r0
   10eec:	d132      	bne.n	10f54 <__pow5mult+0x74>
   10eee:	460d      	mov	r5, r1
   10ef0:	10a4      	asrs	r4, r4, #2
   10ef2:	d020      	beq.n	10f36 <__pow5mult+0x56>
   10ef4:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   10ef8:	f1b8 0f00 	cmp.w	r8, #0
   10efc:	d033      	beq.n	10f66 <__pow5mult+0x86>
   10efe:	07e3      	lsls	r3, r4, #31
   10f00:	f04f 0700 	mov.w	r7, #0
   10f04:	d407      	bmi.n	10f16 <__pow5mult+0x36>
   10f06:	1064      	asrs	r4, r4, #1
   10f08:	d015      	beq.n	10f36 <__pow5mult+0x56>
   10f0a:	f8d8 0000 	ldr.w	r0, [r8]
   10f0e:	b1a8      	cbz	r0, 10f3c <__pow5mult+0x5c>
   10f10:	4680      	mov	r8, r0
   10f12:	07e3      	lsls	r3, r4, #31
   10f14:	d5f7      	bpl.n	10f06 <__pow5mult+0x26>
   10f16:	4642      	mov	r2, r8
   10f18:	4629      	mov	r1, r5
   10f1a:	4630      	mov	r0, r6
   10f1c:	f7ff ff32 	bl	10d84 <__multiply>
   10f20:	b1b5      	cbz	r5, 10f50 <__pow5mult+0x70>
   10f22:	6869      	ldr	r1, [r5, #4]
   10f24:	6c73      	ldr	r3, [r6, #68]	; 0x44
   10f26:	1064      	asrs	r4, r4, #1
   10f28:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   10f2c:	602a      	str	r2, [r5, #0]
   10f2e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   10f32:	4605      	mov	r5, r0
   10f34:	d1e9      	bne.n	10f0a <__pow5mult+0x2a>
   10f36:	4628      	mov	r0, r5
   10f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f3c:	4642      	mov	r2, r8
   10f3e:	4641      	mov	r1, r8
   10f40:	4630      	mov	r0, r6
   10f42:	f7ff ff1f 	bl	10d84 <__multiply>
   10f46:	f8c8 0000 	str.w	r0, [r8]
   10f4a:	6007      	str	r7, [r0, #0]
   10f4c:	4680      	mov	r8, r0
   10f4e:	e7e0      	b.n	10f12 <__pow5mult+0x32>
   10f50:	4605      	mov	r5, r0
   10f52:	e7d8      	b.n	10f06 <__pow5mult+0x26>
   10f54:	3b01      	subs	r3, #1
   10f56:	4a0f      	ldr	r2, [pc, #60]	; (10f94 <__pow5mult+0xb4>)
   10f58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   10f5c:	2300      	movs	r3, #0
   10f5e:	f7ff fe41 	bl	10be4 <__multadd>
   10f62:	4605      	mov	r5, r0
   10f64:	e7c4      	b.n	10ef0 <__pow5mult+0x10>
   10f66:	2101      	movs	r1, #1
   10f68:	4630      	mov	r0, r6
   10f6a:	f7ff fe0b 	bl	10b84 <_Balloc>
   10f6e:	4680      	mov	r8, r0
   10f70:	b140      	cbz	r0, 10f84 <__pow5mult+0xa4>
   10f72:	2301      	movs	r3, #1
   10f74:	f240 2271 	movw	r2, #625	; 0x271
   10f78:	e9c0 3204 	strd	r3, r2, [r0, #16]
   10f7c:	2300      	movs	r3, #0
   10f7e:	6430      	str	r0, [r6, #64]	; 0x40
   10f80:	6003      	str	r3, [r0, #0]
   10f82:	e7bc      	b.n	10efe <__pow5mult+0x1e>
   10f84:	4b04      	ldr	r3, [pc, #16]	; (10f98 <__pow5mult+0xb8>)
   10f86:	4805      	ldr	r0, [pc, #20]	; (10f9c <__pow5mult+0xbc>)
   10f88:	4642      	mov	r2, r8
   10f8a:	f240 1145 	movw	r1, #325	; 0x145
   10f8e:	f000 fbdf 	bl	11750 <__assert_func>
   10f92:	bf00      	nop
   10f94:	200028f8 	.word	0x200028f8
   10f98:	20002424 	.word	0x20002424
   10f9c:	20002438 	.word	0x20002438

00010fa0 <__lshift>:
   10fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10fa4:	460d      	mov	r5, r1
   10fa6:	4614      	mov	r4, r2
   10fa8:	692f      	ldr	r7, [r5, #16]
   10faa:	68ab      	ldr	r3, [r5, #8]
   10fac:	6849      	ldr	r1, [r1, #4]
   10fae:	eb07 1762 	add.w	r7, r7, r2, asr #5
   10fb2:	1c7e      	adds	r6, r7, #1
   10fb4:	429e      	cmp	r6, r3
   10fb6:	4680      	mov	r8, r0
   10fb8:	ea4f 1962 	mov.w	r9, r2, asr #5
   10fbc:	dd04      	ble.n	10fc8 <__lshift+0x28>
   10fbe:	005b      	lsls	r3, r3, #1
   10fc0:	429e      	cmp	r6, r3
   10fc2:	f101 0101 	add.w	r1, r1, #1
   10fc6:	dcfa      	bgt.n	10fbe <__lshift+0x1e>
   10fc8:	4640      	mov	r0, r8
   10fca:	f7ff fddb 	bl	10b84 <_Balloc>
   10fce:	4684      	mov	ip, r0
   10fd0:	2800      	cmp	r0, #0
   10fd2:	d052      	beq.n	1107a <__lshift+0xda>
   10fd4:	f1b9 0f00 	cmp.w	r9, #0
   10fd8:	f100 0214 	add.w	r2, r0, #20
   10fdc:	dd0e      	ble.n	10ffc <__lshift+0x5c>
   10fde:	f109 0105 	add.w	r1, r9, #5
   10fe2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   10fe6:	4613      	mov	r3, r2
   10fe8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   10fec:	2000      	movs	r0, #0
   10fee:	f843 0b04 	str.w	r0, [r3], #4
   10ff2:	428b      	cmp	r3, r1
   10ff4:	d1fb      	bne.n	10fee <__lshift+0x4e>
   10ff6:	f1ae 0314 	sub.w	r3, lr, #20
   10ffa:	441a      	add	r2, r3
   10ffc:	6929      	ldr	r1, [r5, #16]
   10ffe:	f105 0314 	add.w	r3, r5, #20
   11002:	f014 0e1f 	ands.w	lr, r4, #31
   11006:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1100a:	d02e      	beq.n	1106a <__lshift+0xca>
   1100c:	f1ce 0920 	rsb	r9, lr, #32
   11010:	4610      	mov	r0, r2
   11012:	f04f 0a00 	mov.w	sl, #0
   11016:	681c      	ldr	r4, [r3, #0]
   11018:	fa04 f40e 	lsl.w	r4, r4, lr
   1101c:	ea44 040a 	orr.w	r4, r4, sl
   11020:	f840 4b04 	str.w	r4, [r0], #4
   11024:	f853 4b04 	ldr.w	r4, [r3], #4
   11028:	4299      	cmp	r1, r3
   1102a:	fa24 fa09 	lsr.w	sl, r4, r9
   1102e:	d8f2      	bhi.n	11016 <__lshift+0x76>
   11030:	1b4b      	subs	r3, r1, r5
   11032:	3b15      	subs	r3, #21
   11034:	f023 0303 	bic.w	r3, r3, #3
   11038:	3304      	adds	r3, #4
   1103a:	f105 0015 	add.w	r0, r5, #21
   1103e:	4281      	cmp	r1, r0
   11040:	bf38      	it	cc
   11042:	2304      	movcc	r3, #4
   11044:	f1ba 0f00 	cmp.w	sl, #0
   11048:	bf18      	it	ne
   1104a:	4637      	movne	r7, r6
   1104c:	f842 a003 	str.w	sl, [r2, r3]
   11050:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11054:	686a      	ldr	r2, [r5, #4]
   11056:	f8cc 7010 	str.w	r7, [ip, #16]
   1105a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1105e:	6029      	str	r1, [r5, #0]
   11060:	4660      	mov	r0, ip
   11062:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   11066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1106a:	3a04      	subs	r2, #4
   1106c:	f853 0b04 	ldr.w	r0, [r3], #4
   11070:	f842 0f04 	str.w	r0, [r2, #4]!
   11074:	4299      	cmp	r1, r3
   11076:	d8f9      	bhi.n	1106c <__lshift+0xcc>
   11078:	e7ea      	b.n	11050 <__lshift+0xb0>
   1107a:	4b03      	ldr	r3, [pc, #12]	; (11088 <__lshift+0xe8>)
   1107c:	4803      	ldr	r0, [pc, #12]	; (1108c <__lshift+0xec>)
   1107e:	4662      	mov	r2, ip
   11080:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   11084:	f000 fb64 	bl	11750 <__assert_func>
   11088:	20002424 	.word	0x20002424
   1108c:	20002438 	.word	0x20002438

00011090 <__mcmp>:
   11090:	690b      	ldr	r3, [r1, #16]
   11092:	4684      	mov	ip, r0
   11094:	6900      	ldr	r0, [r0, #16]
   11096:	1ac0      	subs	r0, r0, r3
   11098:	d116      	bne.n	110c8 <__mcmp+0x38>
   1109a:	f10c 0c14 	add.w	ip, ip, #20
   1109e:	3114      	adds	r1, #20
   110a0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   110a4:	b410      	push	{r4}
   110a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   110aa:	e001      	b.n	110b0 <__mcmp+0x20>
   110ac:	4594      	cmp	ip, r2
   110ae:	d208      	bcs.n	110c2 <__mcmp+0x32>
   110b0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   110b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   110b8:	428c      	cmp	r4, r1
   110ba:	d0f7      	beq.n	110ac <__mcmp+0x1c>
   110bc:	d205      	bcs.n	110ca <__mcmp+0x3a>
   110be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   110c6:	4770      	bx	lr
   110c8:	4770      	bx	lr
   110ca:	2001      	movs	r0, #1
   110cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   110d0:	4770      	bx	lr
   110d2:	bf00      	nop

000110d4 <__mdiff>:
   110d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110d8:	690f      	ldr	r7, [r1, #16]
   110da:	6913      	ldr	r3, [r2, #16]
   110dc:	1aff      	subs	r7, r7, r3
   110de:	2f00      	cmp	r7, #0
   110e0:	460e      	mov	r6, r1
   110e2:	4690      	mov	r8, r2
   110e4:	d17f      	bne.n	111e6 <__mdiff+0x112>
   110e6:	f101 0514 	add.w	r5, r1, #20
   110ea:	3214      	adds	r2, #20
   110ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   110f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   110f4:	e001      	b.n	110fa <__mdiff+0x26>
   110f6:	429d      	cmp	r5, r3
   110f8:	d278      	bcs.n	111ec <__mdiff+0x118>
   110fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   110fe:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11102:	42a1      	cmp	r1, r4
   11104:	d0f7      	beq.n	110f6 <__mdiff+0x22>
   11106:	d369      	bcc.n	111dc <__mdiff+0x108>
   11108:	6871      	ldr	r1, [r6, #4]
   1110a:	f7ff fd3b 	bl	10b84 <_Balloc>
   1110e:	4681      	mov	r9, r0
   11110:	2800      	cmp	r0, #0
   11112:	d077      	beq.n	11204 <__mdiff+0x130>
   11114:	6935      	ldr	r5, [r6, #16]
   11116:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1111a:	60c7      	str	r7, [r0, #12]
   1111c:	f108 0e14 	add.w	lr, r8, #20
   11120:	f106 0014 	add.w	r0, r6, #20
   11124:	f109 0a14 	add.w	sl, r9, #20
   11128:	f106 0110 	add.w	r1, r6, #16
   1112c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   11130:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   11134:	4656      	mov	r6, sl
   11136:	f04f 0c00 	mov.w	ip, #0
   1113a:	f85e 4b04 	ldr.w	r4, [lr], #4
   1113e:	f851 bf04 	ldr.w	fp, [r1, #4]!
   11142:	b2a3      	uxth	r3, r4
   11144:	fa1c fc8b 	uxtah	ip, ip, fp
   11148:	ebac 0303 	sub.w	r3, ip, r3
   1114c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11150:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   11154:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   11158:	b29b      	uxth	r3, r3
   1115a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1115e:	4572      	cmp	r2, lr
   11160:	f846 3b04 	str.w	r3, [r6], #4
   11164:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   11168:	d8e7      	bhi.n	1113a <__mdiff+0x66>
   1116a:	eba2 0108 	sub.w	r1, r2, r8
   1116e:	3915      	subs	r1, #21
   11170:	f108 0815 	add.w	r8, r8, #21
   11174:	4542      	cmp	r2, r8
   11176:	f021 0403 	bic.w	r4, r1, #3
   1117a:	f104 0404 	add.w	r4, r4, #4
   1117e:	bf38      	it	cc
   11180:	2404      	movcc	r4, #4
   11182:	4420      	add	r0, r4
   11184:	f021 0203 	bic.w	r2, r1, #3
   11188:	bf38      	it	cc
   1118a:	2200      	movcc	r2, #0
   1118c:	4287      	cmp	r7, r0
   1118e:	4452      	add	r2, sl
   11190:	4454      	add	r4, sl
   11192:	d918      	bls.n	111c6 <__mdiff+0xf2>
   11194:	4626      	mov	r6, r4
   11196:	4601      	mov	r1, r0
   11198:	f851 3b04 	ldr.w	r3, [r1], #4
   1119c:	fa1c fc83 	uxtah	ip, ip, r3
   111a0:	ea4f 422c 	mov.w	r2, ip, asr #16
   111a4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   111a8:	fa1f fc8c 	uxth.w	ip, ip
   111ac:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   111b0:	428f      	cmp	r7, r1
   111b2:	f846 3b04 	str.w	r3, [r6], #4
   111b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   111ba:	d8ed      	bhi.n	11198 <__mdiff+0xc4>
   111bc:	3f01      	subs	r7, #1
   111be:	1a3f      	subs	r7, r7, r0
   111c0:	f027 0703 	bic.w	r7, r7, #3
   111c4:	19e2      	adds	r2, r4, r7
   111c6:	b923      	cbnz	r3, 111d2 <__mdiff+0xfe>
   111c8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   111cc:	3d01      	subs	r5, #1
   111ce:	2b00      	cmp	r3, #0
   111d0:	d0fa      	beq.n	111c8 <__mdiff+0xf4>
   111d2:	f8c9 5010 	str.w	r5, [r9, #16]
   111d6:	4648      	mov	r0, r9
   111d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111dc:	4633      	mov	r3, r6
   111de:	2701      	movs	r7, #1
   111e0:	4646      	mov	r6, r8
   111e2:	4698      	mov	r8, r3
   111e4:	e790      	b.n	11108 <__mdiff+0x34>
   111e6:	dbf9      	blt.n	111dc <__mdiff+0x108>
   111e8:	2700      	movs	r7, #0
   111ea:	e78d      	b.n	11108 <__mdiff+0x34>
   111ec:	2100      	movs	r1, #0
   111ee:	f7ff fcc9 	bl	10b84 <_Balloc>
   111f2:	4681      	mov	r9, r0
   111f4:	b168      	cbz	r0, 11212 <__mdiff+0x13e>
   111f6:	2201      	movs	r2, #1
   111f8:	2300      	movs	r3, #0
   111fa:	e9c9 2304 	strd	r2, r3, [r9, #16]
   111fe:	4648      	mov	r0, r9
   11200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11204:	4b06      	ldr	r3, [pc, #24]	; (11220 <__mdiff+0x14c>)
   11206:	4807      	ldr	r0, [pc, #28]	; (11224 <__mdiff+0x150>)
   11208:	464a      	mov	r2, r9
   1120a:	f240 2145 	movw	r1, #581	; 0x245
   1120e:	f000 fa9f 	bl	11750 <__assert_func>
   11212:	4b03      	ldr	r3, [pc, #12]	; (11220 <__mdiff+0x14c>)
   11214:	4803      	ldr	r0, [pc, #12]	; (11224 <__mdiff+0x150>)
   11216:	464a      	mov	r2, r9
   11218:	f240 2137 	movw	r1, #567	; 0x237
   1121c:	f000 fa98 	bl	11750 <__assert_func>
   11220:	20002424 	.word	0x20002424
   11224:	20002438 	.word	0x20002438

00011228 <__d2b>:
   11228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1122c:	4688      	mov	r8, r1
   1122e:	b083      	sub	sp, #12
   11230:	2101      	movs	r1, #1
   11232:	ec57 6b10 	vmov	r6, r7, d0
   11236:	4615      	mov	r5, r2
   11238:	f7ff fca4 	bl	10b84 <_Balloc>
   1123c:	4604      	mov	r4, r0
   1123e:	2800      	cmp	r0, #0
   11240:	d051      	beq.n	112e6 <__d2b+0xbe>
   11242:	f3c7 590a 	ubfx	r9, r7, #20, #11
   11246:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1124a:	f1b9 0f00 	cmp.w	r9, #0
   1124e:	d001      	beq.n	11254 <__d2b+0x2c>
   11250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11254:	2e00      	cmp	r6, #0
   11256:	9301      	str	r3, [sp, #4]
   11258:	d118      	bne.n	1128c <__d2b+0x64>
   1125a:	a801      	add	r0, sp, #4
   1125c:	f7ff fd34 	bl	10cc8 <__lo0bits>
   11260:	9a01      	ldr	r2, [sp, #4]
   11262:	6162      	str	r2, [r4, #20]
   11264:	2201      	movs	r2, #1
   11266:	f100 0320 	add.w	r3, r0, #32
   1126a:	6122      	str	r2, [r4, #16]
   1126c:	f1b9 0f00 	cmp.w	r9, #0
   11270:	d025      	beq.n	112be <__d2b+0x96>
   11272:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   11276:	eb09 0203 	add.w	r2, r9, r3
   1127a:	4620      	mov	r0, r4
   1127c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   11280:	f8c8 2000 	str.w	r2, [r8]
   11284:	602b      	str	r3, [r5, #0]
   11286:	b003      	add	sp, #12
   11288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1128c:	4668      	mov	r0, sp
   1128e:	9600      	str	r6, [sp, #0]
   11290:	f7ff fd1a 	bl	10cc8 <__lo0bits>
   11294:	4603      	mov	r3, r0
   11296:	b310      	cbz	r0, 112de <__d2b+0xb6>
   11298:	e9dd 0200 	ldrd	r0, r2, [sp]
   1129c:	f1c3 0120 	rsb	r1, r3, #32
   112a0:	fa02 f101 	lsl.w	r1, r2, r1
   112a4:	4301      	orrs	r1, r0
   112a6:	40da      	lsrs	r2, r3
   112a8:	6161      	str	r1, [r4, #20]
   112aa:	9201      	str	r2, [sp, #4]
   112ac:	2a00      	cmp	r2, #0
   112ae:	61a2      	str	r2, [r4, #24]
   112b0:	bf14      	ite	ne
   112b2:	2202      	movne	r2, #2
   112b4:	2201      	moveq	r2, #1
   112b6:	6122      	str	r2, [r4, #16]
   112b8:	f1b9 0f00 	cmp.w	r9, #0
   112bc:	d1d9      	bne.n	11272 <__d2b+0x4a>
   112be:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   112c2:	f8c8 3000 	str.w	r3, [r8]
   112c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   112ca:	6918      	ldr	r0, [r3, #16]
   112cc:	f7ff fcdc 	bl	10c88 <__hi0bits>
   112d0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   112d4:	4620      	mov	r0, r4
   112d6:	602b      	str	r3, [r5, #0]
   112d8:	b003      	add	sp, #12
   112da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   112de:	9a00      	ldr	r2, [sp, #0]
   112e0:	6162      	str	r2, [r4, #20]
   112e2:	9a01      	ldr	r2, [sp, #4]
   112e4:	e7e2      	b.n	112ac <__d2b+0x84>
   112e6:	4b03      	ldr	r3, [pc, #12]	; (112f4 <__d2b+0xcc>)
   112e8:	4803      	ldr	r0, [pc, #12]	; (112f8 <__d2b+0xd0>)
   112ea:	4622      	mov	r2, r4
   112ec:	f240 310f 	movw	r1, #783	; 0x30f
   112f0:	f000 fa2e 	bl	11750 <__assert_func>
   112f4:	20002424 	.word	0x20002424
   112f8:	20002438 	.word	0x20002438

000112fc <_fclose_r>:
   112fc:	b570      	push	{r4, r5, r6, lr}
   112fe:	2900      	cmp	r1, #0
   11300:	d04b      	beq.n	1139a <_fclose_r+0x9e>
   11302:	4606      	mov	r6, r0
   11304:	460c      	mov	r4, r1
   11306:	b110      	cbz	r0, 1130e <_fclose_r+0x12>
   11308:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1130a:	2b00      	cmp	r3, #0
   1130c:	d048      	beq.n	113a0 <_fclose_r+0xa4>
   1130e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11310:	07d8      	lsls	r0, r3, #31
   11312:	d534      	bpl.n	1137e <_fclose_r+0x82>
   11314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11318:	2b00      	cmp	r3, #0
   1131a:	d03e      	beq.n	1139a <_fclose_r+0x9e>
   1131c:	4621      	mov	r1, r4
   1131e:	4630      	mov	r0, r6
   11320:	f000 f850 	bl	113c4 <__sflush_r>
   11324:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11326:	4605      	mov	r5, r0
   11328:	b133      	cbz	r3, 11338 <_fclose_r+0x3c>
   1132a:	69e1      	ldr	r1, [r4, #28]
   1132c:	4630      	mov	r0, r6
   1132e:	4798      	blx	r3
   11330:	2800      	cmp	r0, #0
   11332:	bfb8      	it	lt
   11334:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   11338:	89a3      	ldrh	r3, [r4, #12]
   1133a:	061a      	lsls	r2, r3, #24
   1133c:	d43c      	bmi.n	113b8 <_fclose_r+0xbc>
   1133e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11340:	b141      	cbz	r1, 11354 <_fclose_r+0x58>
   11342:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11346:	4299      	cmp	r1, r3
   11348:	d002      	beq.n	11350 <_fclose_r+0x54>
   1134a:	4630      	mov	r0, r6
   1134c:	f7fd fd5a 	bl	ee04 <_free_r>
   11350:	2300      	movs	r3, #0
   11352:	6323      	str	r3, [r4, #48]	; 0x30
   11354:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11356:	b121      	cbz	r1, 11362 <_fclose_r+0x66>
   11358:	4630      	mov	r0, r6
   1135a:	f7fd fd53 	bl	ee04 <_free_r>
   1135e:	2300      	movs	r3, #0
   11360:	6463      	str	r3, [r4, #68]	; 0x44
   11362:	f7fd f80d 	bl	e380 <__sfp_lock_acquire>
   11366:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11368:	2200      	movs	r2, #0
   1136a:	07db      	lsls	r3, r3, #31
   1136c:	81a2      	strh	r2, [r4, #12]
   1136e:	d51f      	bpl.n	113b0 <_fclose_r+0xb4>
   11370:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11372:	f7fd fbe9 	bl	eb48 <__retarget_lock_close_recursive>
   11376:	f7fd f809 	bl	e38c <__sfp_lock_release>
   1137a:	4628      	mov	r0, r5
   1137c:	bd70      	pop	{r4, r5, r6, pc}
   1137e:	89a3      	ldrh	r3, [r4, #12]
   11380:	0599      	lsls	r1, r3, #22
   11382:	d4cb      	bmi.n	1131c <_fclose_r+0x20>
   11384:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11386:	f7fd fbe1 	bl	eb4c <__retarget_lock_acquire_recursive>
   1138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1138e:	2b00      	cmp	r3, #0
   11390:	d1c4      	bne.n	1131c <_fclose_r+0x20>
   11392:	6e65      	ldr	r5, [r4, #100]	; 0x64
   11394:	f015 0501 	ands.w	r5, r5, #1
   11398:	d005      	beq.n	113a6 <_fclose_r+0xaa>
   1139a:	2500      	movs	r5, #0
   1139c:	4628      	mov	r0, r5
   1139e:	bd70      	pop	{r4, r5, r6, pc}
   113a0:	f7fc ffd0 	bl	e344 <__sinit>
   113a4:	e7b3      	b.n	1130e <_fclose_r+0x12>
   113a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   113a8:	f7fd fbd2 	bl	eb50 <__retarget_lock_release_recursive>
   113ac:	4628      	mov	r0, r5
   113ae:	bd70      	pop	{r4, r5, r6, pc}
   113b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   113b2:	f7fd fbcd 	bl	eb50 <__retarget_lock_release_recursive>
   113b6:	e7db      	b.n	11370 <_fclose_r+0x74>
   113b8:	6921      	ldr	r1, [r4, #16]
   113ba:	4630      	mov	r0, r6
   113bc:	f7fd fd22 	bl	ee04 <_free_r>
   113c0:	e7bd      	b.n	1133e <_fclose_r+0x42>
   113c2:	bf00      	nop

000113c4 <__sflush_r>:
   113c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   113c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113cc:	460c      	mov	r4, r1
   113ce:	0711      	lsls	r1, r2, #28
   113d0:	4680      	mov	r8, r0
   113d2:	d447      	bmi.n	11464 <__sflush_r+0xa0>
   113d4:	6863      	ldr	r3, [r4, #4]
   113d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   113da:	2b00      	cmp	r3, #0
   113dc:	81a2      	strh	r2, [r4, #12]
   113de:	dd5e      	ble.n	1149e <__sflush_r+0xda>
   113e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   113e2:	2d00      	cmp	r5, #0
   113e4:	d058      	beq.n	11498 <__sflush_r+0xd4>
   113e6:	2300      	movs	r3, #0
   113e8:	f8d8 6000 	ldr.w	r6, [r8]
   113ec:	f8c8 3000 	str.w	r3, [r8]
   113f0:	b293      	uxth	r3, r2
   113f2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   113f6:	d156      	bne.n	114a6 <__sflush_r+0xe2>
   113f8:	2301      	movs	r3, #1
   113fa:	69e1      	ldr	r1, [r4, #28]
   113fc:	4640      	mov	r0, r8
   113fe:	47a8      	blx	r5
   11400:	1c43      	adds	r3, r0, #1
   11402:	d067      	beq.n	114d4 <__sflush_r+0x110>
   11404:	89a3      	ldrh	r3, [r4, #12]
   11406:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   11408:	075f      	lsls	r7, r3, #29
   1140a:	d505      	bpl.n	11418 <__sflush_r+0x54>
   1140c:	6863      	ldr	r3, [r4, #4]
   1140e:	1ac0      	subs	r0, r0, r3
   11410:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11412:	b10b      	cbz	r3, 11418 <__sflush_r+0x54>
   11414:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11416:	1ac0      	subs	r0, r0, r3
   11418:	69e1      	ldr	r1, [r4, #28]
   1141a:	4602      	mov	r2, r0
   1141c:	2300      	movs	r3, #0
   1141e:	4640      	mov	r0, r8
   11420:	47a8      	blx	r5
   11422:	1c41      	adds	r1, r0, #1
   11424:	d141      	bne.n	114aa <__sflush_r+0xe6>
   11426:	f8d8 3000 	ldr.w	r3, [r8]
   1142a:	2b00      	cmp	r3, #0
   1142c:	d03d      	beq.n	114aa <__sflush_r+0xe6>
   1142e:	2b1d      	cmp	r3, #29
   11430:	d001      	beq.n	11436 <__sflush_r+0x72>
   11432:	2b16      	cmp	r3, #22
   11434:	d156      	bne.n	114e4 <__sflush_r+0x120>
   11436:	89a3      	ldrh	r3, [r4, #12]
   11438:	6922      	ldr	r2, [r4, #16]
   1143a:	6022      	str	r2, [r4, #0]
   1143c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11440:	2100      	movs	r1, #0
   11442:	6061      	str	r1, [r4, #4]
   11444:	81a3      	strh	r3, [r4, #12]
   11446:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11448:	f8c8 6000 	str.w	r6, [r8]
   1144c:	b321      	cbz	r1, 11498 <__sflush_r+0xd4>
   1144e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11452:	4299      	cmp	r1, r3
   11454:	d002      	beq.n	1145c <__sflush_r+0x98>
   11456:	4640      	mov	r0, r8
   11458:	f7fd fcd4 	bl	ee04 <_free_r>
   1145c:	2000      	movs	r0, #0
   1145e:	6320      	str	r0, [r4, #48]	; 0x30
   11460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11464:	6926      	ldr	r6, [r4, #16]
   11466:	b1be      	cbz	r6, 11498 <__sflush_r+0xd4>
   11468:	b293      	uxth	r3, r2
   1146a:	6825      	ldr	r5, [r4, #0]
   1146c:	6026      	str	r6, [r4, #0]
   1146e:	079a      	lsls	r2, r3, #30
   11470:	bf0c      	ite	eq
   11472:	6963      	ldreq	r3, [r4, #20]
   11474:	2300      	movne	r3, #0
   11476:	1bad      	subs	r5, r5, r6
   11478:	60a3      	str	r3, [r4, #8]
   1147a:	e00b      	b.n	11494 <__sflush_r+0xd0>
   1147c:	462b      	mov	r3, r5
   1147e:	4632      	mov	r2, r6
   11480:	69e1      	ldr	r1, [r4, #28]
   11482:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11484:	4640      	mov	r0, r8
   11486:	47b8      	blx	r7
   11488:	f1b0 0c00 	subs.w	ip, r0, #0
   1148c:	eba5 050c 	sub.w	r5, r5, ip
   11490:	4466      	add	r6, ip
   11492:	dd17      	ble.n	114c4 <__sflush_r+0x100>
   11494:	2d00      	cmp	r5, #0
   11496:	dcf1      	bgt.n	1147c <__sflush_r+0xb8>
   11498:	2000      	movs	r0, #0
   1149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1149e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   114a0:	2b00      	cmp	r3, #0
   114a2:	dc9d      	bgt.n	113e0 <__sflush_r+0x1c>
   114a4:	e7f8      	b.n	11498 <__sflush_r+0xd4>
   114a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   114a8:	e7ae      	b.n	11408 <__sflush_r+0x44>
   114aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   114ae:	6922      	ldr	r2, [r4, #16]
   114b0:	6022      	str	r2, [r4, #0]
   114b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   114b6:	81a3      	strh	r3, [r4, #12]
   114b8:	2200      	movs	r2, #0
   114ba:	04db      	lsls	r3, r3, #19
   114bc:	6062      	str	r2, [r4, #4]
   114be:	d5c2      	bpl.n	11446 <__sflush_r+0x82>
   114c0:	6520      	str	r0, [r4, #80]	; 0x50
   114c2:	e7c0      	b.n	11446 <__sflush_r+0x82>
   114c4:	89a3      	ldrh	r3, [r4, #12]
   114c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   114ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   114ce:	81a3      	strh	r3, [r4, #12]
   114d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114d4:	f8d8 3000 	ldr.w	r3, [r8]
   114d8:	2b00      	cmp	r3, #0
   114da:	d093      	beq.n	11404 <__sflush_r+0x40>
   114dc:	2b1d      	cmp	r3, #29
   114de:	d006      	beq.n	114ee <__sflush_r+0x12a>
   114e0:	2b16      	cmp	r3, #22
   114e2:	d004      	beq.n	114ee <__sflush_r+0x12a>
   114e4:	89a3      	ldrh	r3, [r4, #12]
   114e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   114ea:	81a3      	strh	r3, [r4, #12]
   114ec:	e7d5      	b.n	1149a <__sflush_r+0xd6>
   114ee:	f8c8 6000 	str.w	r6, [r8]
   114f2:	e7d1      	b.n	11498 <__sflush_r+0xd4>

000114f4 <_fflush_r>:
   114f4:	b538      	push	{r3, r4, r5, lr}
   114f6:	460c      	mov	r4, r1
   114f8:	4605      	mov	r5, r0
   114fa:	b108      	cbz	r0, 11500 <_fflush_r+0xc>
   114fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   114fe:	b303      	cbz	r3, 11542 <_fflush_r+0x4e>
   11500:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11504:	b188      	cbz	r0, 1152a <_fflush_r+0x36>
   11506:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11508:	07db      	lsls	r3, r3, #31
   1150a:	d401      	bmi.n	11510 <_fflush_r+0x1c>
   1150c:	0581      	lsls	r1, r0, #22
   1150e:	d50f      	bpl.n	11530 <_fflush_r+0x3c>
   11510:	4628      	mov	r0, r5
   11512:	4621      	mov	r1, r4
   11514:	f7ff ff56 	bl	113c4 <__sflush_r>
   11518:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1151a:	07da      	lsls	r2, r3, #31
   1151c:	4605      	mov	r5, r0
   1151e:	d402      	bmi.n	11526 <_fflush_r+0x32>
   11520:	89a3      	ldrh	r3, [r4, #12]
   11522:	059b      	lsls	r3, r3, #22
   11524:	d508      	bpl.n	11538 <_fflush_r+0x44>
   11526:	4628      	mov	r0, r5
   11528:	bd38      	pop	{r3, r4, r5, pc}
   1152a:	4605      	mov	r5, r0
   1152c:	4628      	mov	r0, r5
   1152e:	bd38      	pop	{r3, r4, r5, pc}
   11530:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11532:	f7fd fb0b 	bl	eb4c <__retarget_lock_acquire_recursive>
   11536:	e7eb      	b.n	11510 <_fflush_r+0x1c>
   11538:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1153a:	f7fd fb09 	bl	eb50 <__retarget_lock_release_recursive>
   1153e:	4628      	mov	r0, r5
   11540:	bd38      	pop	{r3, r4, r5, pc}
   11542:	f7fc feff 	bl	e344 <__sinit>
   11546:	e7db      	b.n	11500 <_fflush_r+0xc>

00011548 <__sread>:
   11548:	b510      	push	{r4, lr}
   1154a:	460c      	mov	r4, r1
   1154c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11550:	f000 f87a 	bl	11648 <_read_r>
   11554:	2800      	cmp	r0, #0
   11556:	db03      	blt.n	11560 <__sread+0x18>
   11558:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1155a:	4403      	add	r3, r0
   1155c:	6523      	str	r3, [r4, #80]	; 0x50
   1155e:	bd10      	pop	{r4, pc}
   11560:	89a3      	ldrh	r3, [r4, #12]
   11562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   11566:	81a3      	strh	r3, [r4, #12]
   11568:	bd10      	pop	{r4, pc}
   1156a:	bf00      	nop

0001156c <__swrite>:
   1156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11570:	460c      	mov	r4, r1
   11572:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   11576:	461f      	mov	r7, r3
   11578:	05cb      	lsls	r3, r1, #23
   1157a:	4605      	mov	r5, r0
   1157c:	4616      	mov	r6, r2
   1157e:	d40b      	bmi.n	11598 <__swrite+0x2c>
   11580:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   11584:	81a1      	strh	r1, [r4, #12]
   11586:	463b      	mov	r3, r7
   11588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1158c:	4632      	mov	r2, r6
   1158e:	4628      	mov	r0, r5
   11590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11594:	f7fd b91e 	b.w	e7d4 <_write_r>
   11598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1159c:	2302      	movs	r3, #2
   1159e:	2200      	movs	r2, #0
   115a0:	f000 f83c 	bl	1161c <_lseek_r>
   115a4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   115a8:	e7ea      	b.n	11580 <__swrite+0x14>
   115aa:	bf00      	nop

000115ac <__sseek>:
   115ac:	b510      	push	{r4, lr}
   115ae:	460c      	mov	r4, r1
   115b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   115b4:	f000 f832 	bl	1161c <_lseek_r>
   115b8:	89a3      	ldrh	r3, [r4, #12]
   115ba:	1c42      	adds	r2, r0, #1
   115bc:	bf0e      	itee	eq
   115be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   115c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   115c6:	6520      	strne	r0, [r4, #80]	; 0x50
   115c8:	81a3      	strh	r3, [r4, #12]
   115ca:	bd10      	pop	{r4, pc}

000115cc <__sclose>:
   115cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   115d0:	f000 b812 	b.w	115f8 <_close_r>

000115d4 <__ascii_wctomb>:
   115d4:	b149      	cbz	r1, 115ea <__ascii_wctomb+0x16>
   115d6:	2aff      	cmp	r2, #255	; 0xff
   115d8:	d802      	bhi.n	115e0 <__ascii_wctomb+0xc>
   115da:	700a      	strb	r2, [r1, #0]
   115dc:	2001      	movs	r0, #1
   115de:	4770      	bx	lr
   115e0:	238a      	movs	r3, #138	; 0x8a
   115e2:	6003      	str	r3, [r0, #0]
   115e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   115e8:	4770      	bx	lr
   115ea:	4608      	mov	r0, r1
   115ec:	4770      	bx	lr
   115ee:	bf00      	nop

000115f0 <_localeconv_r>:
   115f0:	4800      	ldr	r0, [pc, #0]	; (115f4 <_localeconv_r+0x4>)
   115f2:	4770      	bx	lr
   115f4:	20003028 	.word	0x20003028

000115f8 <_close_r>:
   115f8:	b538      	push	{r3, r4, r5, lr}
   115fa:	4d07      	ldr	r5, [pc, #28]	; (11618 <_close_r+0x20>)
   115fc:	2200      	movs	r2, #0
   115fe:	4604      	mov	r4, r0
   11600:	4608      	mov	r0, r1
   11602:	602a      	str	r2, [r5, #0]
   11604:	f7fa fec8 	bl	c398 <_close>
   11608:	1c43      	adds	r3, r0, #1
   1160a:	d000      	beq.n	1160e <_close_r+0x16>
   1160c:	bd38      	pop	{r3, r4, r5, pc}
   1160e:	682b      	ldr	r3, [r5, #0]
   11610:	2b00      	cmp	r3, #0
   11612:	d0fb      	beq.n	1160c <_close_r+0x14>
   11614:	6023      	str	r3, [r4, #0]
   11616:	bd38      	pop	{r3, r4, r5, pc}
   11618:	200077c0 	.word	0x200077c0

0001161c <_lseek_r>:
   1161c:	b538      	push	{r3, r4, r5, lr}
   1161e:	460c      	mov	r4, r1
   11620:	4d08      	ldr	r5, [pc, #32]	; (11644 <_lseek_r+0x28>)
   11622:	4684      	mov	ip, r0
   11624:	4611      	mov	r1, r2
   11626:	4620      	mov	r0, r4
   11628:	461a      	mov	r2, r3
   1162a:	2300      	movs	r3, #0
   1162c:	602b      	str	r3, [r5, #0]
   1162e:	4664      	mov	r4, ip
   11630:	f7fa febe 	bl	c3b0 <_lseek>
   11634:	1c43      	adds	r3, r0, #1
   11636:	d000      	beq.n	1163a <_lseek_r+0x1e>
   11638:	bd38      	pop	{r3, r4, r5, pc}
   1163a:	682b      	ldr	r3, [r5, #0]
   1163c:	2b00      	cmp	r3, #0
   1163e:	d0fb      	beq.n	11638 <_lseek_r+0x1c>
   11640:	6023      	str	r3, [r4, #0]
   11642:	bd38      	pop	{r3, r4, r5, pc}
   11644:	200077c0 	.word	0x200077c0

00011648 <_read_r>:
   11648:	b538      	push	{r3, r4, r5, lr}
   1164a:	460c      	mov	r4, r1
   1164c:	4d08      	ldr	r5, [pc, #32]	; (11670 <_read_r+0x28>)
   1164e:	4684      	mov	ip, r0
   11650:	4611      	mov	r1, r2
   11652:	4620      	mov	r0, r4
   11654:	461a      	mov	r2, r3
   11656:	2300      	movs	r3, #0
   11658:	602b      	str	r3, [r5, #0]
   1165a:	4664      	mov	r4, ip
   1165c:	f7fa fe9a 	bl	c394 <_read>
   11660:	1c43      	adds	r3, r0, #1
   11662:	d000      	beq.n	11666 <_read_r+0x1e>
   11664:	bd38      	pop	{r3, r4, r5, pc}
   11666:	682b      	ldr	r3, [r5, #0]
   11668:	2b00      	cmp	r3, #0
   1166a:	d0fb      	beq.n	11664 <_read_r+0x1c>
   1166c:	6023      	str	r3, [r4, #0]
   1166e:	bd38      	pop	{r3, r4, r5, pc}
   11670:	200077c0 	.word	0x200077c0

00011674 <_wcrtomb_r>:
   11674:	b570      	push	{r4, r5, r6, lr}
   11676:	4605      	mov	r5, r0
   11678:	b084      	sub	sp, #16
   1167a:	b15b      	cbz	r3, 11694 <_wcrtomb_r+0x20>
   1167c:	461c      	mov	r4, r3
   1167e:	b169      	cbz	r1, 1169c <_wcrtomb_r+0x28>
   11680:	4b0e      	ldr	r3, [pc, #56]	; (116bc <_wcrtomb_r+0x48>)
   11682:	4628      	mov	r0, r5
   11684:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11688:	4623      	mov	r3, r4
   1168a:	47b0      	blx	r6
   1168c:	1c43      	adds	r3, r0, #1
   1168e:	d00f      	beq.n	116b0 <_wcrtomb_r+0x3c>
   11690:	b004      	add	sp, #16
   11692:	bd70      	pop	{r4, r5, r6, pc}
   11694:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11698:	2900      	cmp	r1, #0
   1169a:	d1f1      	bne.n	11680 <_wcrtomb_r+0xc>
   1169c:	4a07      	ldr	r2, [pc, #28]	; (116bc <_wcrtomb_r+0x48>)
   1169e:	4623      	mov	r3, r4
   116a0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   116a4:	4628      	mov	r0, r5
   116a6:	460a      	mov	r2, r1
   116a8:	a901      	add	r1, sp, #4
   116aa:	47b0      	blx	r6
   116ac:	1c43      	adds	r3, r0, #1
   116ae:	d1ef      	bne.n	11690 <_wcrtomb_r+0x1c>
   116b0:	2200      	movs	r2, #0
   116b2:	238a      	movs	r3, #138	; 0x8a
   116b4:	6022      	str	r2, [r4, #0]
   116b6:	602b      	str	r3, [r5, #0]
   116b8:	b004      	add	sp, #16
   116ba:	bd70      	pop	{r4, r5, r6, pc}
   116bc:	20002f38 	.word	0x20002f38

000116c0 <_wcsrtombs_r>:
   116c0:	b510      	push	{r4, lr}
   116c2:	b082      	sub	sp, #8
   116c4:	9c04      	ldr	r4, [sp, #16]
   116c6:	e9cd 3400 	strd	r3, r4, [sp]
   116ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116ce:	f002 fb69 	bl	13da4 <_wcsnrtombs_r>
   116d2:	b002      	add	sp, #8
   116d4:	bd10      	pop	{r4, pc}
   116d6:	bf00      	nop

000116d8 <frexp>:
   116d8:	b430      	push	{r4, r5}
   116da:	b082      	sub	sp, #8
   116dc:	ed8d 0b00 	vstr	d0, [sp]
   116e0:	9a01      	ldr	r2, [sp, #4]
   116e2:	4c19      	ldr	r4, [pc, #100]	; (11748 <frexp+0x70>)
   116e4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   116e8:	2100      	movs	r1, #0
   116ea:	42a3      	cmp	r3, r4
   116ec:	6001      	str	r1, [r0, #0]
   116ee:	dc21      	bgt.n	11734 <frexp+0x5c>
   116f0:	9c00      	ldr	r4, [sp, #0]
   116f2:	431c      	orrs	r4, r3
   116f4:	d01e      	beq.n	11734 <frexp+0x5c>
   116f6:	4c15      	ldr	r4, [pc, #84]	; (1174c <frexp+0x74>)
   116f8:	4014      	ands	r4, r2
   116fa:	b954      	cbnz	r4, 11712 <frexp+0x3a>
   116fc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 11740 <frexp+0x68>
   11700:	ee20 7b07 	vmul.f64	d7, d0, d7
   11704:	ed8d 7b00 	vstr	d7, [sp]
   11708:	9a01      	ldr	r2, [sp, #4]
   1170a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1170e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11712:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   11716:	e9dd 4500 	ldrd	r4, r5, [sp]
   1171a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   1171e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   11722:	151b      	asrs	r3, r3, #20
   11724:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   11728:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1172c:	e9cd 4500 	strd	r4, r5, [sp]
   11730:	440b      	add	r3, r1
   11732:	6003      	str	r3, [r0, #0]
   11734:	ed9d 0b00 	vldr	d0, [sp]
   11738:	b002      	add	sp, #8
   1173a:	bc30      	pop	{r4, r5}
   1173c:	4770      	bx	lr
   1173e:	bf00      	nop
   11740:	00000000 	.word	0x00000000
   11744:	43500000 	.word	0x43500000
   11748:	7fefffff 	.word	0x7fefffff
   1174c:	7ff00000 	.word	0x7ff00000

00011750 <__assert_func>:
   11750:	b500      	push	{lr}
   11752:	4c0b      	ldr	r4, [pc, #44]	; (11780 <__assert_func+0x30>)
   11754:	6825      	ldr	r5, [r4, #0]
   11756:	4614      	mov	r4, r2
   11758:	68ee      	ldr	r6, [r5, #12]
   1175a:	461a      	mov	r2, r3
   1175c:	b085      	sub	sp, #20
   1175e:	4603      	mov	r3, r0
   11760:	460d      	mov	r5, r1
   11762:	b14c      	cbz	r4, 11778 <__assert_func+0x28>
   11764:	4907      	ldr	r1, [pc, #28]	; (11784 <__assert_func+0x34>)
   11766:	9500      	str	r5, [sp, #0]
   11768:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1176c:	4630      	mov	r0, r6
   1176e:	4906      	ldr	r1, [pc, #24]	; (11788 <__assert_func+0x38>)
   11770:	f000 ff54 	bl	1261c <fiprintf>
   11774:	f7fa fe22 	bl	c3bc <abort>
   11778:	4904      	ldr	r1, [pc, #16]	; (1178c <__assert_func+0x3c>)
   1177a:	460c      	mov	r4, r1
   1177c:	e7f3      	b.n	11766 <__assert_func+0x16>
   1177e:	bf00      	nop
   11780:	200034c0 	.word	0x200034c0
   11784:	200023e4 	.word	0x200023e4
   11788:	200023f4 	.word	0x200023f4
   1178c:	20000620 	.word	0x20000620

00011790 <_calloc_r>:
   11790:	b538      	push	{r3, r4, r5, lr}
   11792:	fba1 1402 	umull	r1, r4, r1, r2
   11796:	bb8c      	cbnz	r4, 117fc <_calloc_r+0x6c>
   11798:	f7fc f896 	bl	d8c8 <_malloc_r>
   1179c:	4605      	mov	r5, r0
   1179e:	b1e0      	cbz	r0, 117da <_calloc_r+0x4a>
   117a0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   117a4:	f022 0203 	bic.w	r2, r2, #3
   117a8:	3a04      	subs	r2, #4
   117aa:	2a24      	cmp	r2, #36	; 0x24
   117ac:	d817      	bhi.n	117de <_calloc_r+0x4e>
   117ae:	2a13      	cmp	r2, #19
   117b0:	d91a      	bls.n	117e8 <_calloc_r+0x58>
   117b2:	2a1b      	cmp	r2, #27
   117b4:	e9c0 4400 	strd	r4, r4, [r0]
   117b8:	d91d      	bls.n	117f6 <_calloc_r+0x66>
   117ba:	2a24      	cmp	r2, #36	; 0x24
   117bc:	bf14      	ite	ne
   117be:	f100 0210 	addne.w	r2, r0, #16
   117c2:	f100 0218 	addeq.w	r2, r0, #24
   117c6:	f04f 0300 	mov.w	r3, #0
   117ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
   117ce:	bf04      	itt	eq
   117d0:	6104      	streq	r4, [r0, #16]
   117d2:	6144      	streq	r4, [r0, #20]
   117d4:	e9c2 3300 	strd	r3, r3, [r2]
   117d8:	6093      	str	r3, [r2, #8]
   117da:	4628      	mov	r0, r5
   117dc:	bd38      	pop	{r3, r4, r5, pc}
   117de:	4621      	mov	r1, r4
   117e0:	f7fc fede 	bl	e5a0 <memset>
   117e4:	4628      	mov	r0, r5
   117e6:	bd38      	pop	{r3, r4, r5, pc}
   117e8:	4602      	mov	r2, r0
   117ea:	2300      	movs	r3, #0
   117ec:	e9c2 3300 	strd	r3, r3, [r2]
   117f0:	6093      	str	r3, [r2, #8]
   117f2:	4628      	mov	r0, r5
   117f4:	bd38      	pop	{r3, r4, r5, pc}
   117f6:	f100 0208 	add.w	r2, r0, #8
   117fa:	e7f6      	b.n	117ea <_calloc_r+0x5a>
   117fc:	f7fd f800 	bl	e800 <__errno>
   11800:	230c      	movs	r3, #12
   11802:	2500      	movs	r5, #0
   11804:	6003      	str	r3, [r0, #0]
   11806:	e7e8      	b.n	117da <_calloc_r+0x4a>

00011808 <quorem>:
   11808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1180c:	6903      	ldr	r3, [r0, #16]
   1180e:	690c      	ldr	r4, [r1, #16]
   11810:	42a3      	cmp	r3, r4
   11812:	b083      	sub	sp, #12
   11814:	f2c0 8087 	blt.w	11926 <quorem+0x11e>
   11818:	3c01      	subs	r4, #1
   1181a:	f101 0514 	add.w	r5, r1, #20
   1181e:	00a3      	lsls	r3, r4, #2
   11820:	f100 0814 	add.w	r8, r0, #20
   11824:	9300      	str	r3, [sp, #0]
   11826:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1182a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1182e:	3301      	adds	r3, #1
   11830:	4681      	mov	r9, r0
   11832:	429a      	cmp	r2, r3
   11834:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   11838:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1183c:	9001      	str	r0, [sp, #4]
   1183e:	fbb2 f6f3 	udiv	r6, r2, r3
   11842:	d33b      	bcc.n	118bc <quorem+0xb4>
   11844:	f04f 0c00 	mov.w	ip, #0
   11848:	46ae      	mov	lr, r5
   1184a:	4640      	mov	r0, r8
   1184c:	46e2      	mov	sl, ip
   1184e:	4663      	mov	r3, ip
   11850:	f85e bb04 	ldr.w	fp, [lr], #4
   11854:	6802      	ldr	r2, [r0, #0]
   11856:	fa1f fc8b 	uxth.w	ip, fp
   1185a:	fb06 330c 	mla	r3, r6, ip, r3
   1185e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11862:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   11866:	fb06 cc0b 	mla	ip, r6, fp, ip
   1186a:	b29b      	uxth	r3, r3
   1186c:	ebaa 0303 	sub.w	r3, sl, r3
   11870:	fa1f fa8c 	uxth.w	sl, ip
   11874:	fa13 f382 	uxtah	r3, r3, r2
   11878:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1187c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11880:	b29b      	uxth	r3, r3
   11882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11886:	4577      	cmp	r7, lr
   11888:	f840 3b04 	str.w	r3, [r0], #4
   1188c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   11890:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11894:	d2dc      	bcs.n	11850 <quorem+0x48>
   11896:	9b00      	ldr	r3, [sp, #0]
   11898:	f858 3003 	ldr.w	r3, [r8, r3]
   1189c:	b973      	cbnz	r3, 118bc <quorem+0xb4>
   1189e:	9b01      	ldr	r3, [sp, #4]
   118a0:	3b04      	subs	r3, #4
   118a2:	4598      	cmp	r8, r3
   118a4:	d304      	bcc.n	118b0 <quorem+0xa8>
   118a6:	e007      	b.n	118b8 <quorem+0xb0>
   118a8:	4598      	cmp	r8, r3
   118aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   118ae:	d203      	bcs.n	118b8 <quorem+0xb0>
   118b0:	f853 2904 	ldr.w	r2, [r3], #-4
   118b4:	2a00      	cmp	r2, #0
   118b6:	d0f7      	beq.n	118a8 <quorem+0xa0>
   118b8:	f8c9 4010 	str.w	r4, [r9, #16]
   118bc:	4648      	mov	r0, r9
   118be:	f7ff fbe7 	bl	11090 <__mcmp>
   118c2:	2800      	cmp	r0, #0
   118c4:	db2b      	blt.n	1191e <quorem+0x116>
   118c6:	3601      	adds	r6, #1
   118c8:	4641      	mov	r1, r8
   118ca:	2300      	movs	r3, #0
   118cc:	f855 0b04 	ldr.w	r0, [r5], #4
   118d0:	f8d1 c000 	ldr.w	ip, [r1]
   118d4:	b282      	uxth	r2, r0
   118d6:	1a9a      	subs	r2, r3, r2
   118d8:	0c03      	lsrs	r3, r0, #16
   118da:	fa12 f28c 	uxtah	r2, r2, ip
   118de:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   118e2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   118e6:	b292      	uxth	r2, r2
   118e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   118ec:	42af      	cmp	r7, r5
   118ee:	f841 2b04 	str.w	r2, [r1], #4
   118f2:	ea4f 4323 	mov.w	r3, r3, asr #16
   118f6:	d2e9      	bcs.n	118cc <quorem+0xc4>
   118f8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   118fc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11900:	b96a      	cbnz	r2, 1191e <quorem+0x116>
   11902:	3b04      	subs	r3, #4
   11904:	4598      	cmp	r8, r3
   11906:	d304      	bcc.n	11912 <quorem+0x10a>
   11908:	e007      	b.n	1191a <quorem+0x112>
   1190a:	4598      	cmp	r8, r3
   1190c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   11910:	d203      	bcs.n	1191a <quorem+0x112>
   11912:	f853 2904 	ldr.w	r2, [r3], #-4
   11916:	2a00      	cmp	r2, #0
   11918:	d0f7      	beq.n	1190a <quorem+0x102>
   1191a:	f8c9 4010 	str.w	r4, [r9, #16]
   1191e:	4630      	mov	r0, r6
   11920:	b003      	add	sp, #12
   11922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11926:	2000      	movs	r0, #0
   11928:	b003      	add	sp, #12
   1192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1192e:	bf00      	nop

00011930 <_dtoa_r>:
   11930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11934:	ed2d 8b02 	vpush	{d8}
   11938:	b08f      	sub	sp, #60	; 0x3c
   1193a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1193e:	9101      	str	r1, [sp, #4]
   11940:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11942:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   11944:	9305      	str	r3, [sp, #20]
   11946:	ec57 6b10 	vmov	r6, r7, d0
   1194a:	4604      	mov	r4, r0
   1194c:	4693      	mov	fp, r2
   1194e:	b141      	cbz	r1, 11962 <_dtoa_r+0x32>
   11950:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11952:	604a      	str	r2, [r1, #4]
   11954:	2301      	movs	r3, #1
   11956:	4093      	lsls	r3, r2
   11958:	608b      	str	r3, [r1, #8]
   1195a:	f7ff f939 	bl	10bd0 <_Bfree>
   1195e:	2300      	movs	r3, #0
   11960:	63a3      	str	r3, [r4, #56]	; 0x38
   11962:	f1b7 0800 	subs.w	r8, r7, #0
   11966:	bfb4      	ite	lt
   11968:	2301      	movlt	r3, #1
   1196a:	2300      	movge	r3, #0
   1196c:	602b      	str	r3, [r5, #0]
   1196e:	4bbe      	ldr	r3, [pc, #760]	; (11c68 <_dtoa_r+0x338>)
   11970:	bfbc      	itt	lt
   11972:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11976:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1197a:	ea33 0308 	bics.w	r3, r3, r8
   1197e:	f000 809f 	beq.w	11ac0 <_dtoa_r+0x190>
   11982:	ed9d 8b02 	vldr	d8, [sp, #8]
   11986:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1198e:	d111      	bne.n	119b4 <_dtoa_r+0x84>
   11990:	9a05      	ldr	r2, [sp, #20]
   11992:	2301      	movs	r3, #1
   11994:	6013      	str	r3, [r2, #0]
   11996:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11998:	2b00      	cmp	r3, #0
   1199a:	f000 823f 	beq.w	11e1c <_dtoa_r+0x4ec>
   1199e:	4bb3      	ldr	r3, [pc, #716]	; (11c6c <_dtoa_r+0x33c>)
   119a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   119a2:	6013      	str	r3, [r2, #0]
   119a4:	3b01      	subs	r3, #1
   119a6:	9300      	str	r3, [sp, #0]
   119a8:	9800      	ldr	r0, [sp, #0]
   119aa:	b00f      	add	sp, #60	; 0x3c
   119ac:	ecbd 8b02 	vpop	{d8}
   119b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b4:	aa0c      	add	r2, sp, #48	; 0x30
   119b6:	a90d      	add	r1, sp, #52	; 0x34
   119b8:	4620      	mov	r0, r4
   119ba:	eeb0 0b48 	vmov.f64	d0, d8
   119be:	f7ff fc33 	bl	11228 <__d2b>
   119c2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   119c6:	4605      	mov	r5, r0
   119c8:	f040 8092 	bne.w	11af0 <_dtoa_r+0x1c0>
   119cc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   119d0:	440b      	add	r3, r1
   119d2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   119d6:	2a20      	cmp	r2, #32
   119d8:	f340 82fa 	ble.w	11fd0 <_dtoa_r+0x6a0>
   119dc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   119e0:	fa08 f802 	lsl.w	r8, r8, r2
   119e4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   119e8:	40d6      	lsrs	r6, r2
   119ea:	ea48 0206 	orr.w	r2, r8, r6
   119ee:	ee07 2a10 	vmov	s14, r2
   119f2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   119f6:	1e58      	subs	r0, r3, #1
   119f8:	ee17 6a90 	vmov	r6, s15
   119fc:	ec53 2b17 	vmov	r2, r3, d7
   11a00:	f04f 0a01 	mov.w	sl, #1
   11a04:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   11a08:	ed9f 3b91 	vldr	d3, [pc, #580]	; 11c50 <_dtoa_r+0x320>
   11a0c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 11c58 <_dtoa_r+0x328>
   11a10:	ed9f 5b93 	vldr	d5, [pc, #588]	; 11c60 <_dtoa_r+0x330>
   11a14:	ee06 0a90 	vmov	s13, r0
   11a18:	ec43 2b12 	vmov	d2, r2, r3
   11a1c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   11a20:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   11a24:	ee32 6b46 	vsub.f64	d6, d2, d6
   11a28:	eea6 7b03 	vfma.f64	d7, d6, d3
   11a2c:	eea4 7b05 	vfma.f64	d7, d4, d5
   11a30:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11a34:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   11a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11a3c:	ee16 7a90 	vmov	r7, s13
   11a40:	d508      	bpl.n	11a54 <_dtoa_r+0x124>
   11a42:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   11a46:	eeb4 6b47 	vcmp.f64	d6, d7
   11a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11a4e:	bf18      	it	ne
   11a50:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   11a54:	2f16      	cmp	r7, #22
   11a56:	f200 8145 	bhi.w	11ce4 <_dtoa_r+0x3b4>
   11a5a:	4b85      	ldr	r3, [pc, #532]	; (11c70 <_dtoa_r+0x340>)
   11a5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11a60:	ed93 7b00 	vldr	d7, [r3]
   11a64:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11a6c:	d557      	bpl.n	11b1e <_dtoa_r+0x1ee>
   11a6e:	1a09      	subs	r1, r1, r0
   11a70:	2300      	movs	r3, #0
   11a72:	f1b1 0801 	subs.w	r8, r1, #1
   11a76:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   11a7a:	930a      	str	r3, [sp, #40]	; 0x28
   11a7c:	f100 8139 	bmi.w	11cf2 <_dtoa_r+0x3c2>
   11a80:	2300      	movs	r3, #0
   11a82:	9306      	str	r3, [sp, #24]
   11a84:	2f00      	cmp	r7, #0
   11a86:	da52      	bge.n	11b2e <_dtoa_r+0x1fe>
   11a88:	9b06      	ldr	r3, [sp, #24]
   11a8a:	9704      	str	r7, [sp, #16]
   11a8c:	1bdb      	subs	r3, r3, r7
   11a8e:	9306      	str	r3, [sp, #24]
   11a90:	427b      	negs	r3, r7
   11a92:	9308      	str	r3, [sp, #32]
   11a94:	9b01      	ldr	r3, [sp, #4]
   11a96:	2b09      	cmp	r3, #9
   11a98:	f04f 0700 	mov.w	r7, #0
   11a9c:	d84e      	bhi.n	11b3c <_dtoa_r+0x20c>
   11a9e:	2b05      	cmp	r3, #5
   11aa0:	f340 829d 	ble.w	11fde <_dtoa_r+0x6ae>
   11aa4:	3b04      	subs	r3, #4
   11aa6:	9301      	str	r3, [sp, #4]
   11aa8:	2600      	movs	r6, #0
   11aaa:	9b01      	ldr	r3, [sp, #4]
   11aac:	1e9a      	subs	r2, r3, #2
   11aae:	2a03      	cmp	r2, #3
   11ab0:	f200 8125 	bhi.w	11cfe <_dtoa_r+0x3ce>
   11ab4:	e8df f012 	tbh	[pc, r2, lsl #1]
   11ab8:	03a703aa 	.word	0x03a703aa
   11abc:	037e039d 	.word	0x037e039d
   11ac0:	9a05      	ldr	r2, [sp, #20]
   11ac2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   11ac6:	f242 730f 	movw	r3, #9999	; 0x270f
   11aca:	ea58 0806 	orrs.w	r8, r8, r6
   11ace:	6013      	str	r3, [r2, #0]
   11ad0:	d11e      	bne.n	11b10 <_dtoa_r+0x1e0>
   11ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11ad4:	2b00      	cmp	r3, #0
   11ad6:	f000 8591 	beq.w	125fc <_dtoa_r+0xccc>
   11ada:	4b66      	ldr	r3, [pc, #408]	; (11c74 <_dtoa_r+0x344>)
   11adc:	9300      	str	r3, [sp, #0]
   11ade:	3308      	adds	r3, #8
   11ae0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11ae2:	9800      	ldr	r0, [sp, #0]
   11ae4:	6013      	str	r3, [r2, #0]
   11ae6:	b00f      	add	sp, #60	; 0x3c
   11ae8:	ecbd 8b02 	vpop	{d8}
   11aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af0:	ee18 6a90 	vmov	r6, s17
   11af4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   11af8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   11afc:	ec53 2b18 	vmov	r2, r3, d8
   11b00:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11b04:	990c      	ldr	r1, [sp, #48]	; 0x30
   11b06:	f04f 0a00 	mov.w	sl, #0
   11b0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   11b0e:	e77b      	b.n	11a08 <_dtoa_r+0xd8>
   11b10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11b12:	2b00      	cmp	r3, #0
   11b14:	f040 833b 	bne.w	1218e <_dtoa_r+0x85e>
   11b18:	4b57      	ldr	r3, [pc, #348]	; (11c78 <_dtoa_r+0x348>)
   11b1a:	9300      	str	r3, [sp, #0]
   11b1c:	e744      	b.n	119a8 <_dtoa_r+0x78>
   11b1e:	1a09      	subs	r1, r1, r0
   11b20:	2300      	movs	r3, #0
   11b22:	f1b1 0801 	subs.w	r8, r1, #1
   11b26:	930a      	str	r3, [sp, #40]	; 0x28
   11b28:	f100 80e3 	bmi.w	11cf2 <_dtoa_r+0x3c2>
   11b2c:	9306      	str	r3, [sp, #24]
   11b2e:	2300      	movs	r3, #0
   11b30:	9308      	str	r3, [sp, #32]
   11b32:	9b01      	ldr	r3, [sp, #4]
   11b34:	9704      	str	r7, [sp, #16]
   11b36:	2b09      	cmp	r3, #9
   11b38:	44b8      	add	r8, r7
   11b3a:	d9b0      	bls.n	11a9e <_dtoa_r+0x16e>
   11b3c:	2300      	movs	r3, #0
   11b3e:	2601      	movs	r6, #1
   11b40:	9301      	str	r3, [sp, #4]
   11b42:	9607      	str	r6, [sp, #28]
   11b44:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   11b48:	469b      	mov	fp, r3
   11b4a:	2100      	movs	r1, #0
   11b4c:	63e1      	str	r1, [r4, #60]	; 0x3c
   11b4e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   11b52:	4620      	mov	r0, r4
   11b54:	f7ff f816 	bl	10b84 <_Balloc>
   11b58:	9000      	str	r0, [sp, #0]
   11b5a:	2800      	cmp	r0, #0
   11b5c:	f000 8540 	beq.w	125e0 <_dtoa_r+0xcb0>
   11b60:	9b00      	ldr	r3, [sp, #0]
   11b62:	63a3      	str	r3, [r4, #56]	; 0x38
   11b64:	f1b9 0f0e 	cmp.w	r9, #14
   11b68:	f200 80dc 	bhi.w	11d24 <_dtoa_r+0x3f4>
   11b6c:	2e00      	cmp	r6, #0
   11b6e:	f000 80d9 	beq.w	11d24 <_dtoa_r+0x3f4>
   11b72:	9b04      	ldr	r3, [sp, #16]
   11b74:	2b00      	cmp	r3, #0
   11b76:	f340 83de 	ble.w	12336 <_dtoa_r+0xa06>
   11b7a:	4a3d      	ldr	r2, [pc, #244]	; (11c70 <_dtoa_r+0x340>)
   11b7c:	f003 010f 	and.w	r1, r3, #15
   11b80:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11b84:	ed92 7b00 	vldr	d7, [r2]
   11b88:	111a      	asrs	r2, r3, #4
   11b8a:	05db      	lsls	r3, r3, #23
   11b8c:	f140 8382 	bpl.w	12294 <_dtoa_r+0x964>
   11b90:	493a      	ldr	r1, [pc, #232]	; (11c7c <_dtoa_r+0x34c>)
   11b92:	ed91 6b08 	vldr	d6, [r1, #32]
   11b96:	f002 020f 	and.w	r2, r2, #15
   11b9a:	2003      	movs	r0, #3
   11b9c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   11ba0:	b15a      	cbz	r2, 11bba <_dtoa_r+0x28a>
   11ba2:	4936      	ldr	r1, [pc, #216]	; (11c7c <_dtoa_r+0x34c>)
   11ba4:	07d6      	lsls	r6, r2, #31
   11ba6:	d504      	bpl.n	11bb2 <_dtoa_r+0x282>
   11ba8:	ed91 6b00 	vldr	d6, [r1]
   11bac:	3001      	adds	r0, #1
   11bae:	ee27 7b06 	vmul.f64	d7, d7, d6
   11bb2:	1052      	asrs	r2, r2, #1
   11bb4:	f101 0108 	add.w	r1, r1, #8
   11bb8:	d1f4      	bne.n	11ba4 <_dtoa_r+0x274>
   11bba:	ee85 6b07 	vdiv.f64	d6, d5, d7
   11bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11bc0:	b13b      	cbz	r3, 11bd2 <_dtoa_r+0x2a2>
   11bc2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11bc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11bce:	f100 84ae 	bmi.w	1252e <_dtoa_r+0xbfe>
   11bd2:	ee07 0a90 	vmov	s15, r0
   11bd6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   11bda:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   11bde:	eea5 7b06 	vfma.f64	d7, d5, d6
   11be2:	ee17 2a90 	vmov	r2, s15
   11be6:	ec51 0b17 	vmov	r0, r1, d7
   11bea:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11bee:	f1b9 0f00 	cmp.w	r9, #0
   11bf2:	f000 8388 	beq.w	12306 <_dtoa_r+0x9d6>
   11bf6:	9e04      	ldr	r6, [sp, #16]
   11bf8:	464a      	mov	r2, r9
   11bfa:	9b07      	ldr	r3, [sp, #28]
   11bfc:	2b00      	cmp	r3, #0
   11bfe:	f000 8447 	beq.w	12490 <_dtoa_r+0xb60>
   11c02:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   11c06:	4b1a      	ldr	r3, [pc, #104]	; (11c70 <_dtoa_r+0x340>)
   11c08:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   11c0c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11c10:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   11c14:	ee36 7b47 	vsub.f64	d7, d6, d7
   11c18:	ed1c 6b02 	vldr	d6, [ip, #-8]
   11c1c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   11c20:	ec41 0b16 	vmov	d6, r0, r1
   11c24:	ee14 0a90 	vmov	r0, s9
   11c28:	ee35 5b46 	vsub.f64	d5, d5, d6
   11c2c:	9900      	ldr	r1, [sp, #0]
   11c2e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11c32:	3030      	adds	r0, #48	; 0x30
   11c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c38:	f801 0b01 	strb.w	r0, [r1], #1
   11c3c:	f300 84ac 	bgt.w	12598 <_dtoa_r+0xc68>
   11c40:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   11c44:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11c48:	f04f 0c00 	mov.w	ip, #0
   11c4c:	e031      	b.n	11cb2 <_dtoa_r+0x382>
   11c4e:	bf00      	nop
   11c50:	636f4361 	.word	0x636f4361
   11c54:	3fd287a7 	.word	0x3fd287a7
   11c58:	8b60c8b3 	.word	0x8b60c8b3
   11c5c:	3fc68a28 	.word	0x3fc68a28
   11c60:	509f79fb 	.word	0x509f79fb
   11c64:	3fd34413 	.word	0x3fd34413
   11c68:	7ff00000 	.word	0x7ff00000
   11c6c:	20002655 	.word	0x20002655
   11c70:	20000328 	.word	0x20000328
   11c74:	200025a0 	.word	0x200025a0
   11c78:	200025ac 	.word	0x200025ac
   11c7c:	20000300 	.word	0x20000300
   11c80:	f10c 0c01 	add.w	ip, ip, #1
   11c84:	4594      	cmp	ip, r2
   11c86:	da4d      	bge.n	11d24 <_dtoa_r+0x3f4>
   11c88:	ee27 7b04 	vmul.f64	d7, d7, d4
   11c8c:	ee25 5b04 	vmul.f64	d5, d5, d4
   11c90:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11c94:	ee16 3a90 	vmov	r3, s13
   11c98:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   11c9c:	3330      	adds	r3, #48	; 0x30
   11c9e:	ee37 7b43 	vsub.f64	d7, d7, d3
   11ca2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11caa:	f801 3b01 	strb.w	r3, [r1], #1
   11cae:	f100 8473 	bmi.w	12598 <_dtoa_r+0xc68>
   11cb2:	ee32 6b47 	vsub.f64	d6, d2, d7
   11cb6:	eeb4 6bc5 	vcmpe.f64	d6, d5
   11cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11cbe:	d5df      	bpl.n	11c80 <_dtoa_r+0x350>
   11cc0:	9a00      	ldr	r2, [sp, #0]
   11cc2:	9604      	str	r6, [sp, #16]
   11cc4:	e002      	b.n	11ccc <_dtoa_r+0x39c>
   11cc6:	428a      	cmp	r2, r1
   11cc8:	f000 8450 	beq.w	1256c <_dtoa_r+0xc3c>
   11ccc:	4689      	mov	r9, r1
   11cce:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   11cd2:	2b39      	cmp	r3, #57	; 0x39
   11cd4:	d0f7      	beq.n	11cc6 <_dtoa_r+0x396>
   11cd6:	3301      	adds	r3, #1
   11cd8:	b2db      	uxtb	r3, r3
   11cda:	700b      	strb	r3, [r1, #0]
   11cdc:	9b04      	ldr	r3, [sp, #16]
   11cde:	3301      	adds	r3, #1
   11ce0:	9304      	str	r3, [sp, #16]
   11ce2:	e155      	b.n	11f90 <_dtoa_r+0x660>
   11ce4:	1a09      	subs	r1, r1, r0
   11ce6:	2301      	movs	r3, #1
   11ce8:	f1b1 0801 	subs.w	r8, r1, #1
   11cec:	930a      	str	r3, [sp, #40]	; 0x28
   11cee:	f57f aec7 	bpl.w	11a80 <_dtoa_r+0x150>
   11cf2:	f1c1 0301 	rsb	r3, r1, #1
   11cf6:	9306      	str	r3, [sp, #24]
   11cf8:	f04f 0800 	mov.w	r8, #0
   11cfc:	e6c2      	b.n	11a84 <_dtoa_r+0x154>
   11cfe:	2600      	movs	r6, #0
   11d00:	63e6      	str	r6, [r4, #60]	; 0x3c
   11d02:	4631      	mov	r1, r6
   11d04:	4620      	mov	r0, r4
   11d06:	f7fe ff3d 	bl	10b84 <_Balloc>
   11d0a:	9000      	str	r0, [sp, #0]
   11d0c:	2800      	cmp	r0, #0
   11d0e:	f000 8467 	beq.w	125e0 <_dtoa_r+0xcb0>
   11d12:	9b00      	ldr	r3, [sp, #0]
   11d14:	63a3      	str	r3, [r4, #56]	; 0x38
   11d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d1a:	930b      	str	r3, [sp, #44]	; 0x2c
   11d1c:	4699      	mov	r9, r3
   11d1e:	2301      	movs	r3, #1
   11d20:	46b3      	mov	fp, r6
   11d22:	9307      	str	r3, [sp, #28]
   11d24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11d26:	2a00      	cmp	r2, #0
   11d28:	db55      	blt.n	11dd6 <_dtoa_r+0x4a6>
   11d2a:	9904      	ldr	r1, [sp, #16]
   11d2c:	290e      	cmp	r1, #14
   11d2e:	dc52      	bgt.n	11dd6 <_dtoa_r+0x4a6>
   11d30:	4bb7      	ldr	r3, [pc, #732]	; (12010 <_dtoa_r+0x6e0>)
   11d32:	f1bb 0f00 	cmp.w	fp, #0
   11d36:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   11d3a:	ed93 6b00 	vldr	d6, [r3]
   11d3e:	da15      	bge.n	11d6c <_dtoa_r+0x43c>
   11d40:	f1b9 0f00 	cmp.w	r9, #0
   11d44:	dc12      	bgt.n	11d6c <_dtoa_r+0x43c>
   11d46:	f040 82f2 	bne.w	1232e <_dtoa_r+0x9fe>
   11d4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   11d4e:	ee26 7b07 	vmul.f64	d7, d6, d7
   11d52:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11d5a:	46ca      	mov	sl, r9
   11d5c:	464e      	mov	r6, r9
   11d5e:	f200 826d 	bhi.w	1223c <_dtoa_r+0x90c>
   11d62:	f8dd 8000 	ldr.w	r8, [sp]
   11d66:	ea6f 0b0b 	mvn.w	fp, fp
   11d6a:	e270      	b.n	1224e <_dtoa_r+0x91e>
   11d6c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11d70:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11d74:	9900      	ldr	r1, [sp, #0]
   11d76:	ee17 3a10 	vmov	r3, s14
   11d7a:	f1b9 0f01 	cmp.w	r9, #1
   11d7e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11d82:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11d86:	f801 3b01 	strb.w	r3, [r1], #1
   11d8a:	eea5 8b46 	vfms.f64	d8, d5, d6
   11d8e:	f000 8334 	beq.w	123fa <_dtoa_r+0xaca>
   11d92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11d96:	2301      	movs	r3, #1
   11d98:	e011      	b.n	11dbe <_dtoa_r+0x48e>
   11d9a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11d9e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11da2:	3301      	adds	r3, #1
   11da4:	ee17 2a10 	vmov	r2, s14
   11da8:	454b      	cmp	r3, r9
   11daa:	f102 0230 	add.w	r2, r2, #48	; 0x30
   11dae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11db2:	f801 2b01 	strb.w	r2, [r1], #1
   11db6:	eea5 8b46 	vfms.f64	d8, d5, d6
   11dba:	f000 831e 	beq.w	123fa <_dtoa_r+0xaca>
   11dbe:	ee28 8b04 	vmul.f64	d8, d8, d4
   11dc2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11dca:	d1e6      	bne.n	11d9a <_dtoa_r+0x46a>
   11dcc:	9b04      	ldr	r3, [sp, #16]
   11dce:	3301      	adds	r3, #1
   11dd0:	9304      	str	r3, [sp, #16]
   11dd2:	4689      	mov	r9, r1
   11dd4:	e0dc      	b.n	11f90 <_dtoa_r+0x660>
   11dd6:	9b07      	ldr	r3, [sp, #28]
   11dd8:	b343      	cbz	r3, 11e2c <_dtoa_r+0x4fc>
   11dda:	9b01      	ldr	r3, [sp, #4]
   11ddc:	2b01      	cmp	r3, #1
   11dde:	f340 8276 	ble.w	122ce <_dtoa_r+0x99e>
   11de2:	9b08      	ldr	r3, [sp, #32]
   11de4:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   11de8:	4553      	cmp	r3, sl
   11dea:	f280 823f 	bge.w	1226c <_dtoa_r+0x93c>
   11dee:	9b08      	ldr	r3, [sp, #32]
   11df0:	f8cd a020 	str.w	sl, [sp, #32]
   11df4:	ebaa 0203 	sub.w	r2, sl, r3
   11df8:	4417      	add	r7, r2
   11dfa:	f04f 0a00 	mov.w	sl, #0
   11dfe:	f1b9 0f00 	cmp.w	r9, #0
   11e02:	f2c0 8325 	blt.w	12450 <_dtoa_r+0xb20>
   11e06:	9b06      	ldr	r3, [sp, #24]
   11e08:	9309      	str	r3, [sp, #36]	; 0x24
   11e0a:	444b      	add	r3, r9
   11e0c:	44c8      	add	r8, r9
   11e0e:	9306      	str	r3, [sp, #24]
   11e10:	2101      	movs	r1, #1
   11e12:	4620      	mov	r0, r4
   11e14:	f7fe ff88 	bl	10d28 <__i2b>
   11e18:	4606      	mov	r6, r0
   11e1a:	e00c      	b.n	11e36 <_dtoa_r+0x506>
   11e1c:	4b7d      	ldr	r3, [pc, #500]	; (12014 <_dtoa_r+0x6e4>)
   11e1e:	9300      	str	r3, [sp, #0]
   11e20:	9800      	ldr	r0, [sp, #0]
   11e22:	b00f      	add	sp, #60	; 0x3c
   11e24:	ecbd 8b02 	vpop	{d8}
   11e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e2c:	9b06      	ldr	r3, [sp, #24]
   11e2e:	f8dd a020 	ldr.w	sl, [sp, #32]
   11e32:	9e07      	ldr	r6, [sp, #28]
   11e34:	9309      	str	r3, [sp, #36]	; 0x24
   11e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e38:	b16b      	cbz	r3, 11e56 <_dtoa_r+0x526>
   11e3a:	f1b8 0f00 	cmp.w	r8, #0
   11e3e:	dd0a      	ble.n	11e56 <_dtoa_r+0x526>
   11e40:	4543      	cmp	r3, r8
   11e42:	9906      	ldr	r1, [sp, #24]
   11e44:	461a      	mov	r2, r3
   11e46:	bfa8      	it	ge
   11e48:	4642      	movge	r2, r8
   11e4a:	1a89      	subs	r1, r1, r2
   11e4c:	1a9b      	subs	r3, r3, r2
   11e4e:	9106      	str	r1, [sp, #24]
   11e50:	9309      	str	r3, [sp, #36]	; 0x24
   11e52:	eba8 0802 	sub.w	r8, r8, r2
   11e56:	9b08      	ldr	r3, [sp, #32]
   11e58:	b163      	cbz	r3, 11e74 <_dtoa_r+0x544>
   11e5a:	9b07      	ldr	r3, [sp, #28]
   11e5c:	2b00      	cmp	r3, #0
   11e5e:	f000 82a7 	beq.w	123b0 <_dtoa_r+0xa80>
   11e62:	f1ba 0f00 	cmp.w	sl, #0
   11e66:	f300 8204 	bgt.w	12272 <_dtoa_r+0x942>
   11e6a:	9b08      	ldr	r3, [sp, #32]
   11e6c:	ebb3 020a 	subs.w	r2, r3, sl
   11e70:	f040 82ff 	bne.w	12472 <_dtoa_r+0xb42>
   11e74:	2101      	movs	r1, #1
   11e76:	4620      	mov	r0, r4
   11e78:	f7fe ff56 	bl	10d28 <__i2b>
   11e7c:	2f00      	cmp	r7, #0
   11e7e:	4682      	mov	sl, r0
   11e80:	f300 80af 	bgt.w	11fe2 <_dtoa_r+0x6b2>
   11e84:	9b01      	ldr	r3, [sp, #4]
   11e86:	2b01      	cmp	r3, #1
   11e88:	f340 8187 	ble.w	1219a <_dtoa_r+0x86a>
   11e8c:	2300      	movs	r3, #0
   11e8e:	9308      	str	r3, [sp, #32]
   11e90:	2001      	movs	r0, #1
   11e92:	2f00      	cmp	r7, #0
   11e94:	f040 80b1 	bne.w	11ffa <_dtoa_r+0x6ca>
   11e98:	4440      	add	r0, r8
   11e9a:	f010 001f 	ands.w	r0, r0, #31
   11e9e:	f000 817a 	beq.w	12196 <_dtoa_r+0x866>
   11ea2:	f1c0 0220 	rsb	r2, r0, #32
   11ea6:	2a04      	cmp	r2, #4
   11ea8:	f300 8088 	bgt.w	11fbc <_dtoa_r+0x68c>
   11eac:	f040 81f6 	bne.w	1229c <_dtoa_r+0x96c>
   11eb0:	9b06      	ldr	r3, [sp, #24]
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	dd05      	ble.n	11ec2 <_dtoa_r+0x592>
   11eb6:	4629      	mov	r1, r5
   11eb8:	461a      	mov	r2, r3
   11eba:	4620      	mov	r0, r4
   11ebc:	f7ff f870 	bl	10fa0 <__lshift>
   11ec0:	4605      	mov	r5, r0
   11ec2:	f1b8 0f00 	cmp.w	r8, #0
   11ec6:	dd05      	ble.n	11ed4 <_dtoa_r+0x5a4>
   11ec8:	4651      	mov	r1, sl
   11eca:	4642      	mov	r2, r8
   11ecc:	4620      	mov	r0, r4
   11ece:	f7ff f867 	bl	10fa0 <__lshift>
   11ed2:	4682      	mov	sl, r0
   11ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ed6:	2b00      	cmp	r3, #0
   11ed8:	f040 813f 	bne.w	1215a <_dtoa_r+0x82a>
   11edc:	f1b9 0f00 	cmp.w	r9, #0
   11ee0:	f340 8125 	ble.w	1212e <_dtoa_r+0x7fe>
   11ee4:	9b07      	ldr	r3, [sp, #28]
   11ee6:	2b00      	cmp	r3, #0
   11ee8:	f040 80a3 	bne.w	12032 <_dtoa_r+0x702>
   11eec:	9b04      	ldr	r3, [sp, #16]
   11eee:	3301      	adds	r3, #1
   11ef0:	9304      	str	r3, [sp, #16]
   11ef2:	f8dd 8000 	ldr.w	r8, [sp]
   11ef6:	2701      	movs	r7, #1
   11ef8:	e007      	b.n	11f0a <_dtoa_r+0x5da>
   11efa:	4629      	mov	r1, r5
   11efc:	2300      	movs	r3, #0
   11efe:	220a      	movs	r2, #10
   11f00:	4620      	mov	r0, r4
   11f02:	f7fe fe6f 	bl	10be4 <__multadd>
   11f06:	3701      	adds	r7, #1
   11f08:	4605      	mov	r5, r0
   11f0a:	4651      	mov	r1, sl
   11f0c:	4628      	mov	r0, r5
   11f0e:	f7ff fc7b 	bl	11808 <quorem>
   11f12:	45b9      	cmp	r9, r7
   11f14:	f100 0030 	add.w	r0, r0, #48	; 0x30
   11f18:	f808 0b01 	strb.w	r0, [r8], #1
   11f1c:	dced      	bgt.n	11efa <_dtoa_r+0x5ca>
   11f1e:	f1b9 0f00 	cmp.w	r9, #0
   11f22:	9a00      	ldr	r2, [sp, #0]
   11f24:	bfcc      	ite	gt
   11f26:	46cb      	movgt	fp, r9
   11f28:	f04f 0b01 	movle.w	fp, #1
   11f2c:	4603      	mov	r3, r0
   11f2e:	4493      	add	fp, r2
   11f30:	2700      	movs	r7, #0
   11f32:	4629      	mov	r1, r5
   11f34:	2201      	movs	r2, #1
   11f36:	4620      	mov	r0, r4
   11f38:	9301      	str	r3, [sp, #4]
   11f3a:	f7ff f831 	bl	10fa0 <__lshift>
   11f3e:	4651      	mov	r1, sl
   11f40:	4605      	mov	r5, r0
   11f42:	f7ff f8a5 	bl	11090 <__mcmp>
   11f46:	2800      	cmp	r0, #0
   11f48:	f340 81af 	ble.w	122aa <_dtoa_r+0x97a>
   11f4c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11f50:	9a00      	ldr	r2, [sp, #0]
   11f52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   11f56:	e004      	b.n	11f62 <_dtoa_r+0x632>
   11f58:	455a      	cmp	r2, fp
   11f5a:	f000 81b1 	beq.w	122c0 <_dtoa_r+0x990>
   11f5e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11f62:	2b39      	cmp	r3, #57	; 0x39
   11f64:	f10b 0901 	add.w	r9, fp, #1
   11f68:	d0f6      	beq.n	11f58 <_dtoa_r+0x628>
   11f6a:	3301      	adds	r3, #1
   11f6c:	f88b 3000 	strb.w	r3, [fp]
   11f70:	4651      	mov	r1, sl
   11f72:	4620      	mov	r0, r4
   11f74:	f7fe fe2c 	bl	10bd0 <_Bfree>
   11f78:	b156      	cbz	r6, 11f90 <_dtoa_r+0x660>
   11f7a:	b12f      	cbz	r7, 11f88 <_dtoa_r+0x658>
   11f7c:	42b7      	cmp	r7, r6
   11f7e:	d003      	beq.n	11f88 <_dtoa_r+0x658>
   11f80:	4639      	mov	r1, r7
   11f82:	4620      	mov	r0, r4
   11f84:	f7fe fe24 	bl	10bd0 <_Bfree>
   11f88:	4631      	mov	r1, r6
   11f8a:	4620      	mov	r0, r4
   11f8c:	f7fe fe20 	bl	10bd0 <_Bfree>
   11f90:	4629      	mov	r1, r5
   11f92:	4620      	mov	r0, r4
   11f94:	f7fe fe1c 	bl	10bd0 <_Bfree>
   11f98:	2300      	movs	r3, #0
   11f9a:	f889 3000 	strb.w	r3, [r9]
   11f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11fa2:	601a      	str	r2, [r3, #0]
   11fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11fa6:	2b00      	cmp	r3, #0
   11fa8:	f43f acfe 	beq.w	119a8 <_dtoa_r+0x78>
   11fac:	9800      	ldr	r0, [sp, #0]
   11fae:	f8c3 9000 	str.w	r9, [r3]
   11fb2:	b00f      	add	sp, #60	; 0x3c
   11fb4:	ecbd 8b02 	vpop	{d8}
   11fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fbc:	f1c0 001c 	rsb	r0, r0, #28
   11fc0:	9b06      	ldr	r3, [sp, #24]
   11fc2:	4403      	add	r3, r0
   11fc4:	9306      	str	r3, [sp, #24]
   11fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11fc8:	4403      	add	r3, r0
   11fca:	9309      	str	r3, [sp, #36]	; 0x24
   11fcc:	4480      	add	r8, r0
   11fce:	e76f      	b.n	11eb0 <_dtoa_r+0x580>
   11fd0:	f1c2 0220 	rsb	r2, r2, #32
   11fd4:	fa06 f202 	lsl.w	r2, r6, r2
   11fd8:	ee07 2a10 	vmov	s14, r2
   11fdc:	e509      	b.n	119f2 <_dtoa_r+0xc2>
   11fde:	2601      	movs	r6, #1
   11fe0:	e563      	b.n	11aaa <_dtoa_r+0x17a>
   11fe2:	4601      	mov	r1, r0
   11fe4:	463a      	mov	r2, r7
   11fe6:	4620      	mov	r0, r4
   11fe8:	f7fe ff7a 	bl	10ee0 <__pow5mult>
   11fec:	9b01      	ldr	r3, [sp, #4]
   11fee:	2b01      	cmp	r3, #1
   11ff0:	4682      	mov	sl, r0
   11ff2:	f340 81c5 	ble.w	12380 <_dtoa_r+0xa50>
   11ff6:	2300      	movs	r3, #0
   11ff8:	9308      	str	r3, [sp, #32]
   11ffa:	f8da 2010 	ldr.w	r2, [sl, #16]
   11ffe:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   12002:	6910      	ldr	r0, [r2, #16]
   12004:	f7fe fe40 	bl	10c88 <__hi0bits>
   12008:	f1c0 0020 	rsb	r0, r0, #32
   1200c:	e744      	b.n	11e98 <_dtoa_r+0x568>
   1200e:	bf00      	nop
   12010:	20000328 	.word	0x20000328
   12014:	20002654 	.word	0x20002654
   12018:	4631      	mov	r1, r6
   1201a:	2300      	movs	r3, #0
   1201c:	220a      	movs	r2, #10
   1201e:	4620      	mov	r0, r4
   12020:	f7fe fde0 	bl	10be4 <__multadd>
   12024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12026:	2b00      	cmp	r3, #0
   12028:	4606      	mov	r6, r0
   1202a:	f340 82ce 	ble.w	125ca <_dtoa_r+0xc9a>
   1202e:	9704      	str	r7, [sp, #16]
   12030:	4699      	mov	r9, r3
   12032:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12034:	2b00      	cmp	r3, #0
   12036:	dd05      	ble.n	12044 <_dtoa_r+0x714>
   12038:	4631      	mov	r1, r6
   1203a:	461a      	mov	r2, r3
   1203c:	4620      	mov	r0, r4
   1203e:	f7fe ffaf 	bl	10fa0 <__lshift>
   12042:	4606      	mov	r6, r0
   12044:	9b08      	ldr	r3, [sp, #32]
   12046:	2b00      	cmp	r3, #0
   12048:	f040 81eb 	bne.w	12422 <_dtoa_r+0xaf2>
   1204c:	46b0      	mov	r8, r6
   1204e:	9b02      	ldr	r3, [sp, #8]
   12050:	9f00      	ldr	r7, [sp, #0]
   12052:	f003 0201 	and.w	r2, r3, #1
   12056:	1e7b      	subs	r3, r7, #1
   12058:	444b      	add	r3, r9
   1205a:	9308      	str	r3, [sp, #32]
   1205c:	9b01      	ldr	r3, [sp, #4]
   1205e:	920a      	str	r2, [sp, #40]	; 0x28
   12060:	4313      	orrs	r3, r2
   12062:	9309      	str	r3, [sp, #36]	; 0x24
   12064:	4651      	mov	r1, sl
   12066:	4628      	mov	r0, r5
   12068:	f7ff fbce 	bl	11808 <quorem>
   1206c:	4631      	mov	r1, r6
   1206e:	4683      	mov	fp, r0
   12070:	4628      	mov	r0, r5
   12072:	f7ff f80d 	bl	11090 <__mcmp>
   12076:	4642      	mov	r2, r8
   12078:	4651      	mov	r1, sl
   1207a:	4681      	mov	r9, r0
   1207c:	4620      	mov	r0, r4
   1207e:	f7ff f829 	bl	110d4 <__mdiff>
   12082:	68c2      	ldr	r2, [r0, #12]
   12084:	4601      	mov	r1, r0
   12086:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1208a:	2a00      	cmp	r2, #0
   1208c:	d142      	bne.n	12114 <_dtoa_r+0x7e4>
   1208e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   12092:	4628      	mov	r0, r5
   12094:	f7fe fffc 	bl	11090 <__mcmp>
   12098:	9906      	ldr	r1, [sp, #24]
   1209a:	9002      	str	r0, [sp, #8]
   1209c:	4620      	mov	r0, r4
   1209e:	f7fe fd97 	bl	10bd0 <_Bfree>
   120a2:	9a02      	ldr	r2, [sp, #8]
   120a4:	9b07      	ldr	r3, [sp, #28]
   120a6:	b91a      	cbnz	r2, 120b0 <_dtoa_r+0x780>
   120a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   120aa:	2900      	cmp	r1, #0
   120ac:	f000 827e 	beq.w	125ac <_dtoa_r+0xc7c>
   120b0:	f1b9 0f00 	cmp.w	r9, #0
   120b4:	f2c0 8183 	blt.w	123be <_dtoa_r+0xa8e>
   120b8:	9901      	ldr	r1, [sp, #4]
   120ba:	ea49 0901 	orr.w	r9, r9, r1
   120be:	990a      	ldr	r1, [sp, #40]	; 0x28
   120c0:	ea51 0909 	orrs.w	r9, r1, r9
   120c4:	f000 817b 	beq.w	123be <_dtoa_r+0xa8e>
   120c8:	2a00      	cmp	r2, #0
   120ca:	f300 81c6 	bgt.w	1245a <_dtoa_r+0xb2a>
   120ce:	9a08      	ldr	r2, [sp, #32]
   120d0:	703b      	strb	r3, [r7, #0]
   120d2:	f107 0901 	add.w	r9, r7, #1
   120d6:	4297      	cmp	r7, r2
   120d8:	46cb      	mov	fp, r9
   120da:	f000 81c4 	beq.w	12466 <_dtoa_r+0xb36>
   120de:	4629      	mov	r1, r5
   120e0:	2300      	movs	r3, #0
   120e2:	220a      	movs	r2, #10
   120e4:	4620      	mov	r0, r4
   120e6:	f7fe fd7d 	bl	10be4 <__multadd>
   120ea:	4546      	cmp	r6, r8
   120ec:	4605      	mov	r5, r0
   120ee:	4631      	mov	r1, r6
   120f0:	f04f 0300 	mov.w	r3, #0
   120f4:	f04f 020a 	mov.w	r2, #10
   120f8:	4620      	mov	r0, r4
   120fa:	d012      	beq.n	12122 <_dtoa_r+0x7f2>
   120fc:	f7fe fd72 	bl	10be4 <__multadd>
   12100:	4641      	mov	r1, r8
   12102:	4606      	mov	r6, r0
   12104:	2300      	movs	r3, #0
   12106:	220a      	movs	r2, #10
   12108:	4620      	mov	r0, r4
   1210a:	f7fe fd6b 	bl	10be4 <__multadd>
   1210e:	464f      	mov	r7, r9
   12110:	4680      	mov	r8, r0
   12112:	e7a7      	b.n	12064 <_dtoa_r+0x734>
   12114:	4620      	mov	r0, r4
   12116:	9302      	str	r3, [sp, #8]
   12118:	f7fe fd5a 	bl	10bd0 <_Bfree>
   1211c:	9b02      	ldr	r3, [sp, #8]
   1211e:	2201      	movs	r2, #1
   12120:	e7c6      	b.n	120b0 <_dtoa_r+0x780>
   12122:	f7fe fd5f 	bl	10be4 <__multadd>
   12126:	464f      	mov	r7, r9
   12128:	4606      	mov	r6, r0
   1212a:	4680      	mov	r8, r0
   1212c:	e79a      	b.n	12064 <_dtoa_r+0x734>
   1212e:	9b01      	ldr	r3, [sp, #4]
   12130:	2b02      	cmp	r3, #2
   12132:	dc71      	bgt.n	12218 <_dtoa_r+0x8e8>
   12134:	9b07      	ldr	r3, [sp, #28]
   12136:	2b00      	cmp	r3, #0
   12138:	f47f af7b 	bne.w	12032 <_dtoa_r+0x702>
   1213c:	9b04      	ldr	r3, [sp, #16]
   1213e:	4651      	mov	r1, sl
   12140:	3301      	adds	r3, #1
   12142:	4628      	mov	r0, r5
   12144:	9304      	str	r3, [sp, #16]
   12146:	f7ff fb5f 	bl	11808 <quorem>
   1214a:	f8dd b000 	ldr.w	fp, [sp]
   1214e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   12152:	f80b 3b01 	strb.w	r3, [fp], #1
   12156:	2700      	movs	r7, #0
   12158:	e6eb      	b.n	11f32 <_dtoa_r+0x602>
   1215a:	4651      	mov	r1, sl
   1215c:	4628      	mov	r0, r5
   1215e:	f7fe ff97 	bl	11090 <__mcmp>
   12162:	2800      	cmp	r0, #0
   12164:	f6bf aeba 	bge.w	11edc <_dtoa_r+0x5ac>
   12168:	4629      	mov	r1, r5
   1216a:	2300      	movs	r3, #0
   1216c:	220a      	movs	r2, #10
   1216e:	4620      	mov	r0, r4
   12170:	f7fe fd38 	bl	10be4 <__multadd>
   12174:	9b04      	ldr	r3, [sp, #16]
   12176:	1e5f      	subs	r7, r3, #1
   12178:	9b07      	ldr	r3, [sp, #28]
   1217a:	4605      	mov	r5, r0
   1217c:	2b00      	cmp	r3, #0
   1217e:	f47f af4b 	bne.w	12018 <_dtoa_r+0x6e8>
   12182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12184:	2b00      	cmp	r3, #0
   12186:	f340 8218 	ble.w	125ba <_dtoa_r+0xc8a>
   1218a:	4699      	mov	r9, r3
   1218c:	e6b1      	b.n	11ef2 <_dtoa_r+0x5c2>
   1218e:	4bbc      	ldr	r3, [pc, #752]	; (12480 <_dtoa_r+0xb50>)
   12190:	9300      	str	r3, [sp, #0]
   12192:	3303      	adds	r3, #3
   12194:	e4a4      	b.n	11ae0 <_dtoa_r+0x1b0>
   12196:	201c      	movs	r0, #28
   12198:	e712      	b.n	11fc0 <_dtoa_r+0x690>
   1219a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1219e:	2800      	cmp	r0, #0
   121a0:	f47f ae74 	bne.w	11e8c <_dtoa_r+0x55c>
   121a4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   121a8:	2a00      	cmp	r2, #0
   121aa:	f000 80f4 	beq.w	12396 <_dtoa_r+0xa66>
   121ae:	9b02      	ldr	r3, [sp, #8]
   121b0:	9308      	str	r3, [sp, #32]
   121b2:	e66d      	b.n	11e90 <_dtoa_r+0x560>
   121b4:	2301      	movs	r3, #1
   121b6:	9307      	str	r3, [sp, #28]
   121b8:	9b04      	ldr	r3, [sp, #16]
   121ba:	445b      	add	r3, fp
   121bc:	f103 0901 	add.w	r9, r3, #1
   121c0:	f1b9 0f01 	cmp.w	r9, #1
   121c4:	46cc      	mov	ip, r9
   121c6:	930b      	str	r3, [sp, #44]	; 0x2c
   121c8:	bfb8      	it	lt
   121ca:	f04f 0c01 	movlt.w	ip, #1
   121ce:	2100      	movs	r1, #0
   121d0:	f1bc 0f17 	cmp.w	ip, #23
   121d4:	63e1      	str	r1, [r4, #60]	; 0x3c
   121d6:	f77f acbc 	ble.w	11b52 <_dtoa_r+0x222>
   121da:	2001      	movs	r0, #1
   121dc:	2204      	movs	r2, #4
   121de:	0052      	lsls	r2, r2, #1
   121e0:	f102 0314 	add.w	r3, r2, #20
   121e4:	4563      	cmp	r3, ip
   121e6:	4601      	mov	r1, r0
   121e8:	f100 0001 	add.w	r0, r0, #1
   121ec:	d9f7      	bls.n	121de <_dtoa_r+0x8ae>
   121ee:	63e1      	str	r1, [r4, #60]	; 0x3c
   121f0:	e4af      	b.n	11b52 <_dtoa_r+0x222>
   121f2:	2301      	movs	r3, #1
   121f4:	9307      	str	r3, [sp, #28]
   121f6:	f1bb 0f00 	cmp.w	fp, #0
   121fa:	dd52      	ble.n	122a2 <_dtoa_r+0x972>
   121fc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   12200:	46d9      	mov	r9, fp
   12202:	46dc      	mov	ip, fp
   12204:	e7e3      	b.n	121ce <_dtoa_r+0x89e>
   12206:	2300      	movs	r3, #0
   12208:	9307      	str	r3, [sp, #28]
   1220a:	e7d5      	b.n	121b8 <_dtoa_r+0x888>
   1220c:	2300      	movs	r3, #0
   1220e:	9307      	str	r3, [sp, #28]
   12210:	e7f1      	b.n	121f6 <_dtoa_r+0x8c6>
   12212:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   12216:	9704      	str	r7, [sp, #16]
   12218:	f1b9 0f00 	cmp.w	r9, #0
   1221c:	f47f ada1 	bne.w	11d62 <_dtoa_r+0x432>
   12220:	4651      	mov	r1, sl
   12222:	464b      	mov	r3, r9
   12224:	2205      	movs	r2, #5
   12226:	4620      	mov	r0, r4
   12228:	f7fe fcdc 	bl	10be4 <__multadd>
   1222c:	4601      	mov	r1, r0
   1222e:	4682      	mov	sl, r0
   12230:	4628      	mov	r0, r5
   12232:	f7fe ff2d 	bl	11090 <__mcmp>
   12236:	2800      	cmp	r0, #0
   12238:	f77f ad93 	ble.w	11d62 <_dtoa_r+0x432>
   1223c:	9b04      	ldr	r3, [sp, #16]
   1223e:	f103 0b01 	add.w	fp, r3, #1
   12242:	9b00      	ldr	r3, [sp, #0]
   12244:	2231      	movs	r2, #49	; 0x31
   12246:	4698      	mov	r8, r3
   12248:	f803 2b01 	strb.w	r2, [r3], #1
   1224c:	9300      	str	r3, [sp, #0]
   1224e:	4651      	mov	r1, sl
   12250:	4620      	mov	r0, r4
   12252:	f7fe fcbd 	bl	10bd0 <_Bfree>
   12256:	f10b 0301 	add.w	r3, fp, #1
   1225a:	f8dd 9000 	ldr.w	r9, [sp]
   1225e:	9304      	str	r3, [sp, #16]
   12260:	f8cd 8000 	str.w	r8, [sp]
   12264:	2e00      	cmp	r6, #0
   12266:	f47f ae8f 	bne.w	11f88 <_dtoa_r+0x658>
   1226a:	e691      	b.n	11f90 <_dtoa_r+0x660>
   1226c:	eba3 0a0a 	sub.w	sl, r3, sl
   12270:	e5c5      	b.n	11dfe <_dtoa_r+0x4ce>
   12272:	4631      	mov	r1, r6
   12274:	4652      	mov	r2, sl
   12276:	4620      	mov	r0, r4
   12278:	f7fe fe32 	bl	10ee0 <__pow5mult>
   1227c:	462a      	mov	r2, r5
   1227e:	4601      	mov	r1, r0
   12280:	4606      	mov	r6, r0
   12282:	4620      	mov	r0, r4
   12284:	f7fe fd7e 	bl	10d84 <__multiply>
   12288:	4629      	mov	r1, r5
   1228a:	4605      	mov	r5, r0
   1228c:	4620      	mov	r0, r4
   1228e:	f7fe fc9f 	bl	10bd0 <_Bfree>
   12292:	e5ea      	b.n	11e6a <_dtoa_r+0x53a>
   12294:	2002      	movs	r0, #2
   12296:	eeb0 5b48 	vmov.f64	d5, d8
   1229a:	e481      	b.n	11ba0 <_dtoa_r+0x270>
   1229c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   122a0:	e68e      	b.n	11fc0 <_dtoa_r+0x690>
   122a2:	f04f 0b01 	mov.w	fp, #1
   122a6:	46d9      	mov	r9, fp
   122a8:	e44f      	b.n	11b4a <_dtoa_r+0x21a>
   122aa:	d103      	bne.n	122b4 <_dtoa_r+0x984>
   122ac:	9b01      	ldr	r3, [sp, #4]
   122ae:	07db      	lsls	r3, r3, #31
   122b0:	f53f ae4c 	bmi.w	11f4c <_dtoa_r+0x61c>
   122b4:	46d9      	mov	r9, fp
   122b6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   122ba:	2b30      	cmp	r3, #48	; 0x30
   122bc:	d0fa      	beq.n	122b4 <_dtoa_r+0x984>
   122be:	e657      	b.n	11f70 <_dtoa_r+0x640>
   122c0:	9b04      	ldr	r3, [sp, #16]
   122c2:	9a00      	ldr	r2, [sp, #0]
   122c4:	3301      	adds	r3, #1
   122c6:	9304      	str	r3, [sp, #16]
   122c8:	2331      	movs	r3, #49	; 0x31
   122ca:	7013      	strb	r3, [r2, #0]
   122cc:	e650      	b.n	11f70 <_dtoa_r+0x640>
   122ce:	f1ba 0f00 	cmp.w	sl, #0
   122d2:	f000 8123 	beq.w	1251c <_dtoa_r+0xbec>
   122d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   122da:	9b06      	ldr	r3, [sp, #24]
   122dc:	9309      	str	r3, [sp, #36]	; 0x24
   122de:	4413      	add	r3, r2
   122e0:	f8dd a020 	ldr.w	sl, [sp, #32]
   122e4:	9306      	str	r3, [sp, #24]
   122e6:	4490      	add	r8, r2
   122e8:	e592      	b.n	11e10 <_dtoa_r+0x4e0>
   122ea:	ee07 0a90 	vmov	s15, r0
   122ee:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   122f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   122f6:	eea6 5b07 	vfma.f64	d5, d6, d7
   122fa:	ee15 2a90 	vmov	r2, s11
   122fe:	ec51 0b15 	vmov	r0, r1, d5
   12302:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   12306:	ec41 0b15 	vmov	d5, r0, r1
   1230a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1230e:	ee36 7b47 	vsub.f64	d7, d6, d7
   12312:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1231a:	f300 8137 	bgt.w	1258c <_dtoa_r+0xc5c>
   1231e:	eeb1 5b45 	vneg.f64	d5, d5
   12322:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1232a:	f57f acfb 	bpl.w	11d24 <_dtoa_r+0x3f4>
   1232e:	f04f 0a00 	mov.w	sl, #0
   12332:	4656      	mov	r6, sl
   12334:	e515      	b.n	11d62 <_dtoa_r+0x432>
   12336:	f000 80f5 	beq.w	12524 <_dtoa_r+0xbf4>
   1233a:	9b04      	ldr	r3, [sp, #16]
   1233c:	4951      	ldr	r1, [pc, #324]	; (12484 <_dtoa_r+0xb54>)
   1233e:	425a      	negs	r2, r3
   12340:	f002 000f 	and.w	r0, r2, #15
   12344:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12348:	ed91 6b00 	vldr	d6, [r1]
   1234c:	1112      	asrs	r2, r2, #4
   1234e:	ee28 6b06 	vmul.f64	d6, d8, d6
   12352:	f000 8142 	beq.w	125da <_dtoa_r+0xcaa>
   12356:	eeb0 7b46 	vmov.f64	d7, d6
   1235a:	494b      	ldr	r1, [pc, #300]	; (12488 <_dtoa_r+0xb58>)
   1235c:	2600      	movs	r6, #0
   1235e:	2002      	movs	r0, #2
   12360:	07d3      	lsls	r3, r2, #31
   12362:	d505      	bpl.n	12370 <_dtoa_r+0xa40>
   12364:	ed91 5b00 	vldr	d5, [r1]
   12368:	3001      	adds	r0, #1
   1236a:	2601      	movs	r6, #1
   1236c:	ee27 7b05 	vmul.f64	d7, d7, d5
   12370:	1052      	asrs	r2, r2, #1
   12372:	f101 0108 	add.w	r1, r1, #8
   12376:	d1f3      	bne.n	12360 <_dtoa_r+0xa30>
   12378:	2e00      	cmp	r6, #0
   1237a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   1237e:	e41e      	b.n	11bbe <_dtoa_r+0x28e>
   12380:	9b02      	ldr	r3, [sp, #8]
   12382:	2b00      	cmp	r3, #0
   12384:	f47f ae37 	bne.w	11ff6 <_dtoa_r+0x6c6>
   12388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1238c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12390:	2a00      	cmp	r2, #0
   12392:	f040 8137 	bne.w	12604 <_dtoa_r+0xcd4>
   12396:	4a3d      	ldr	r2, [pc, #244]	; (1248c <_dtoa_r+0xb5c>)
   12398:	400a      	ands	r2, r1
   1239a:	2a00      	cmp	r2, #0
   1239c:	f000 80fa 	beq.w	12594 <_dtoa_r+0xc64>
   123a0:	9b06      	ldr	r3, [sp, #24]
   123a2:	3301      	adds	r3, #1
   123a4:	9306      	str	r3, [sp, #24]
   123a6:	2301      	movs	r3, #1
   123a8:	f108 0801 	add.w	r8, r8, #1
   123ac:	9308      	str	r3, [sp, #32]
   123ae:	e56f      	b.n	11e90 <_dtoa_r+0x560>
   123b0:	4629      	mov	r1, r5
   123b2:	9a08      	ldr	r2, [sp, #32]
   123b4:	4620      	mov	r0, r4
   123b6:	f7fe fd93 	bl	10ee0 <__pow5mult>
   123ba:	4605      	mov	r5, r0
   123bc:	e55a      	b.n	11e74 <_dtoa_r+0x544>
   123be:	2a00      	cmp	r2, #0
   123c0:	dd12      	ble.n	123e8 <_dtoa_r+0xab8>
   123c2:	4629      	mov	r1, r5
   123c4:	2201      	movs	r2, #1
   123c6:	4620      	mov	r0, r4
   123c8:	9301      	str	r3, [sp, #4]
   123ca:	f7fe fde9 	bl	10fa0 <__lshift>
   123ce:	4651      	mov	r1, sl
   123d0:	4605      	mov	r5, r0
   123d2:	f7fe fe5d 	bl	11090 <__mcmp>
   123d6:	2800      	cmp	r0, #0
   123d8:	9b01      	ldr	r3, [sp, #4]
   123da:	f340 80e1 	ble.w	125a0 <_dtoa_r+0xc70>
   123de:	2b39      	cmp	r3, #57	; 0x39
   123e0:	f000 80ca 	beq.w	12578 <_dtoa_r+0xc48>
   123e4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   123e8:	46b9      	mov	r9, r7
   123ea:	f809 3b01 	strb.w	r3, [r9], #1
   123ee:	9b04      	ldr	r3, [sp, #16]
   123f0:	3301      	adds	r3, #1
   123f2:	4637      	mov	r7, r6
   123f4:	9304      	str	r3, [sp, #16]
   123f6:	4646      	mov	r6, r8
   123f8:	e5ba      	b.n	11f70 <_dtoa_r+0x640>
   123fa:	ee38 8b08 	vadd.f64	d8, d8, d8
   123fe:	eeb4 8bc6 	vcmpe.f64	d8, d6
   12402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12406:	dc0a      	bgt.n	1241e <_dtoa_r+0xaee>
   12408:	eeb4 8b46 	vcmp.f64	d8, d6
   1240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12410:	f47f acdc 	bne.w	11dcc <_dtoa_r+0x49c>
   12414:	ee17 3a10 	vmov	r3, s14
   12418:	07d8      	lsls	r0, r3, #31
   1241a:	f57f acd7 	bpl.w	11dcc <_dtoa_r+0x49c>
   1241e:	9a00      	ldr	r2, [sp, #0]
   12420:	e454      	b.n	11ccc <_dtoa_r+0x39c>
   12422:	6871      	ldr	r1, [r6, #4]
   12424:	4620      	mov	r0, r4
   12426:	f7fe fbad 	bl	10b84 <_Balloc>
   1242a:	4607      	mov	r7, r0
   1242c:	2800      	cmp	r0, #0
   1242e:	f000 80de 	beq.w	125ee <_dtoa_r+0xcbe>
   12432:	6933      	ldr	r3, [r6, #16]
   12434:	3302      	adds	r3, #2
   12436:	009a      	lsls	r2, r3, #2
   12438:	f106 010c 	add.w	r1, r6, #12
   1243c:	300c      	adds	r0, #12
   1243e:	f7f9 fd2f 	bl	bea0 <memcpy>
   12442:	4639      	mov	r1, r7
   12444:	2201      	movs	r2, #1
   12446:	4620      	mov	r0, r4
   12448:	f7fe fdaa 	bl	10fa0 <__lshift>
   1244c:	4680      	mov	r8, r0
   1244e:	e5fe      	b.n	1204e <_dtoa_r+0x71e>
   12450:	9b06      	ldr	r3, [sp, #24]
   12452:	eba3 0309 	sub.w	r3, r3, r9
   12456:	9309      	str	r3, [sp, #36]	; 0x24
   12458:	e4da      	b.n	11e10 <_dtoa_r+0x4e0>
   1245a:	2b39      	cmp	r3, #57	; 0x39
   1245c:	f000 808c 	beq.w	12578 <_dtoa_r+0xc48>
   12460:	46b9      	mov	r9, r7
   12462:	3301      	adds	r3, #1
   12464:	e7c1      	b.n	123ea <_dtoa_r+0xaba>
   12466:	9a04      	ldr	r2, [sp, #16]
   12468:	3201      	adds	r2, #1
   1246a:	4637      	mov	r7, r6
   1246c:	9204      	str	r2, [sp, #16]
   1246e:	4646      	mov	r6, r8
   12470:	e55f      	b.n	11f32 <_dtoa_r+0x602>
   12472:	4629      	mov	r1, r5
   12474:	4620      	mov	r0, r4
   12476:	f7fe fd33 	bl	10ee0 <__pow5mult>
   1247a:	4605      	mov	r5, r0
   1247c:	e4fa      	b.n	11e74 <_dtoa_r+0x544>
   1247e:	bf00      	nop
   12480:	200025ac 	.word	0x200025ac
   12484:	20000328 	.word	0x20000328
   12488:	20000300 	.word	0x20000300
   1248c:	7ff00000 	.word	0x7ff00000
   12490:	4b5e      	ldr	r3, [pc, #376]	; (1260c <_dtoa_r+0xcdc>)
   12492:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   12496:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   1249a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   1249e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   124a2:	ee36 7b47 	vsub.f64	d7, d6, d7
   124a6:	ec41 0b16 	vmov	d6, r0, r1
   124aa:	ee15 1a90 	vmov	r1, s11
   124ae:	ee23 3b06 	vmul.f64	d3, d3, d6
   124b2:	9800      	ldr	r0, [sp, #0]
   124b4:	3130      	adds	r1, #48	; 0x30
   124b6:	2a01      	cmp	r2, #1
   124b8:	f800 1b01 	strb.w	r1, [r0], #1
   124bc:	f000 8083 	beq.w	125c6 <_dtoa_r+0xc96>
   124c0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   124c4:	9b00      	ldr	r3, [sp, #0]
   124c6:	1899      	adds	r1, r3, r2
   124c8:	ee27 7b04 	vmul.f64	d7, d7, d4
   124cc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   124d0:	ee16 3a90 	vmov	r3, s13
   124d4:	3330      	adds	r3, #48	; 0x30
   124d6:	f800 3b01 	strb.w	r3, [r0], #1
   124da:	4281      	cmp	r1, r0
   124dc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   124e0:	ee37 7b45 	vsub.f64	d7, d7, d5
   124e4:	d1f0      	bne.n	124c8 <_dtoa_r+0xb98>
   124e6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   124ea:	ee33 5b06 	vadd.f64	d5, d3, d6
   124ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
   124f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124f6:	f53f abe3 	bmi.w	11cc0 <_dtoa_r+0x390>
   124fa:	ee36 6b43 	vsub.f64	d6, d6, d3
   124fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
   12502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12506:	f77f ac0d 	ble.w	11d24 <_dtoa_r+0x3f4>
   1250a:	4689      	mov	r9, r1
   1250c:	3901      	subs	r1, #1
   1250e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   12512:	2b30      	cmp	r3, #48	; 0x30
   12514:	d0f9      	beq.n	1250a <_dtoa_r+0xbda>
   12516:	1c73      	adds	r3, r6, #1
   12518:	9304      	str	r3, [sp, #16]
   1251a:	e539      	b.n	11f90 <_dtoa_r+0x660>
   1251c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1251e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   12522:	e6da      	b.n	122da <_dtoa_r+0x9aa>
   12524:	2002      	movs	r0, #2
   12526:	eeb0 6b48 	vmov.f64	d6, d8
   1252a:	f7ff bb48 	b.w	11bbe <_dtoa_r+0x28e>
   1252e:	f1b9 0f00 	cmp.w	r9, #0
   12532:	f43f aeda 	beq.w	122ea <_dtoa_r+0x9ba>
   12536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12538:	2a00      	cmp	r2, #0
   1253a:	f77f abf3 	ble.w	11d24 <_dtoa_r+0x3f4>
   1253e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12542:	ee26 6b04 	vmul.f64	d6, d6, d4
   12546:	3001      	adds	r0, #1
   12548:	ee07 0a90 	vmov	s15, r0
   1254c:	9b04      	ldr	r3, [sp, #16]
   1254e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   12552:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   12556:	eea6 7b05 	vfma.f64	d7, d6, d5
   1255a:	ee17 ca90 	vmov	ip, s15
   1255e:	ec51 0b17 	vmov	r0, r1, d7
   12562:	1e5e      	subs	r6, r3, #1
   12564:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   12568:	f7ff bb47 	b.w	11bfa <_dtoa_r+0x2ca>
   1256c:	9b04      	ldr	r3, [sp, #16]
   1256e:	3301      	adds	r3, #1
   12570:	9304      	str	r3, [sp, #16]
   12572:	2331      	movs	r3, #49	; 0x31
   12574:	f7ff bbb1 	b.w	11cda <_dtoa_r+0x3aa>
   12578:	9b04      	ldr	r3, [sp, #16]
   1257a:	46bb      	mov	fp, r7
   1257c:	3301      	adds	r3, #1
   1257e:	9304      	str	r3, [sp, #16]
   12580:	2339      	movs	r3, #57	; 0x39
   12582:	4637      	mov	r7, r6
   12584:	f80b 3b01 	strb.w	r3, [fp], #1
   12588:	4646      	mov	r6, r8
   1258a:	e4e1      	b.n	11f50 <_dtoa_r+0x620>
   1258c:	f04f 0a00 	mov.w	sl, #0
   12590:	4656      	mov	r6, sl
   12592:	e653      	b.n	1223c <_dtoa_r+0x90c>
   12594:	9208      	str	r2, [sp, #32]
   12596:	e47b      	b.n	11e90 <_dtoa_r+0x560>
   12598:	1c73      	adds	r3, r6, #1
   1259a:	9304      	str	r3, [sp, #16]
   1259c:	4689      	mov	r9, r1
   1259e:	e4f7      	b.n	11f90 <_dtoa_r+0x660>
   125a0:	f47f af22 	bne.w	123e8 <_dtoa_r+0xab8>
   125a4:	07da      	lsls	r2, r3, #31
   125a6:	f57f af1f 	bpl.w	123e8 <_dtoa_r+0xab8>
   125aa:	e718      	b.n	123de <_dtoa_r+0xaae>
   125ac:	2b39      	cmp	r3, #57	; 0x39
   125ae:	d0e3      	beq.n	12578 <_dtoa_r+0xc48>
   125b0:	f1b9 0f00 	cmp.w	r9, #0
   125b4:	f73f af16 	bgt.w	123e4 <_dtoa_r+0xab4>
   125b8:	e716      	b.n	123e8 <_dtoa_r+0xab8>
   125ba:	9b01      	ldr	r3, [sp, #4]
   125bc:	2b02      	cmp	r3, #2
   125be:	f73f ae28 	bgt.w	12212 <_dtoa_r+0x8e2>
   125c2:	9704      	str	r7, [sp, #16]
   125c4:	e5ba      	b.n	1213c <_dtoa_r+0x80c>
   125c6:	4601      	mov	r1, r0
   125c8:	e78d      	b.n	124e6 <_dtoa_r+0xbb6>
   125ca:	9b01      	ldr	r3, [sp, #4]
   125cc:	2b02      	cmp	r3, #2
   125ce:	f73f ae20 	bgt.w	12212 <_dtoa_r+0x8e2>
   125d2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   125d6:	9704      	str	r7, [sp, #16]
   125d8:	e52b      	b.n	12032 <_dtoa_r+0x702>
   125da:	2002      	movs	r0, #2
   125dc:	f7ff baef 	b.w	11bbe <_dtoa_r+0x28e>
   125e0:	4b0b      	ldr	r3, [pc, #44]	; (12610 <_dtoa_r+0xce0>)
   125e2:	480c      	ldr	r0, [pc, #48]	; (12614 <_dtoa_r+0xce4>)
   125e4:	2200      	movs	r2, #0
   125e6:	f240 11af 	movw	r1, #431	; 0x1af
   125ea:	f7ff f8b1 	bl	11750 <__assert_func>
   125ee:	4b08      	ldr	r3, [pc, #32]	; (12610 <_dtoa_r+0xce0>)
   125f0:	4808      	ldr	r0, [pc, #32]	; (12614 <_dtoa_r+0xce4>)
   125f2:	463a      	mov	r2, r7
   125f4:	f240 21ef 	movw	r1, #751	; 0x2ef
   125f8:	f7ff f8aa 	bl	11750 <__assert_func>
   125fc:	4b06      	ldr	r3, [pc, #24]	; (12618 <_dtoa_r+0xce8>)
   125fe:	9300      	str	r3, [sp, #0]
   12600:	f7ff b9d2 	b.w	119a8 <_dtoa_r+0x78>
   12604:	9b02      	ldr	r3, [sp, #8]
   12606:	9308      	str	r3, [sp, #32]
   12608:	e4f7      	b.n	11ffa <_dtoa_r+0x6ca>
   1260a:	bf00      	nop
   1260c:	20000328 	.word	0x20000328
   12610:	20002424 	.word	0x20002424
   12614:	200025b0 	.word	0x200025b0
   12618:	200025a0 	.word	0x200025a0

0001261c <fiprintf>:
   1261c:	b40e      	push	{r1, r2, r3}
   1261e:	b510      	push	{r4, lr}
   12620:	b083      	sub	sp, #12
   12622:	ab05      	add	r3, sp, #20
   12624:	4c06      	ldr	r4, [pc, #24]	; (12640 <fiprintf+0x24>)
   12626:	f853 2b04 	ldr.w	r2, [r3], #4
   1262a:	9301      	str	r3, [sp, #4]
   1262c:	4601      	mov	r1, r0
   1262e:	6820      	ldr	r0, [r4, #0]
   12630:	f000 f8c4 	bl	127bc <_vfiprintf_r>
   12634:	b003      	add	sp, #12
   12636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1263a:	b003      	add	sp, #12
   1263c:	4770      	bx	lr
   1263e:	bf00      	nop
   12640:	200034c0 	.word	0x200034c0

00012644 <__ssprint_r>:
   12644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12648:	6893      	ldr	r3, [r2, #8]
   1264a:	6817      	ldr	r7, [r2, #0]
   1264c:	b083      	sub	sp, #12
   1264e:	4692      	mov	sl, r2
   12650:	2b00      	cmp	r3, #0
   12652:	d070      	beq.n	12736 <__ssprint_r+0xf2>
   12654:	4681      	mov	r9, r0
   12656:	688a      	ldr	r2, [r1, #8]
   12658:	6808      	ldr	r0, [r1, #0]
   1265a:	460c      	mov	r4, r1
   1265c:	3708      	adds	r7, #8
   1265e:	e043      	b.n	126e8 <__ssprint_r+0xa4>
   12660:	89a3      	ldrh	r3, [r4, #12]
   12662:	f413 6f90 	tst.w	r3, #1152	; 0x480
   12666:	d02e      	beq.n	126c6 <__ssprint_r+0x82>
   12668:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   1266c:	eba0 0801 	sub.w	r8, r0, r1
   12670:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12674:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   12678:	f108 0001 	add.w	r0, r8, #1
   1267c:	1076      	asrs	r6, r6, #1
   1267e:	4428      	add	r0, r5
   12680:	42b0      	cmp	r0, r6
   12682:	4632      	mov	r2, r6
   12684:	bf84      	itt	hi
   12686:	4606      	movhi	r6, r0
   12688:	4632      	movhi	r2, r6
   1268a:	055b      	lsls	r3, r3, #21
   1268c:	d537      	bpl.n	126fe <__ssprint_r+0xba>
   1268e:	4611      	mov	r1, r2
   12690:	4648      	mov	r0, r9
   12692:	f7fb f919 	bl	d8c8 <_malloc_r>
   12696:	9001      	str	r0, [sp, #4]
   12698:	2800      	cmp	r0, #0
   1269a:	d03a      	beq.n	12712 <__ssprint_r+0xce>
   1269c:	4642      	mov	r2, r8
   1269e:	6921      	ldr	r1, [r4, #16]
   126a0:	f7f9 fbfe 	bl	bea0 <memcpy>
   126a4:	89a2      	ldrh	r2, [r4, #12]
   126a6:	9b01      	ldr	r3, [sp, #4]
   126a8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   126ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   126b0:	81a2      	strh	r2, [r4, #12]
   126b2:	eba6 0208 	sub.w	r2, r6, r8
   126b6:	eb03 0008 	add.w	r0, r3, r8
   126ba:	6166      	str	r6, [r4, #20]
   126bc:	60a2      	str	r2, [r4, #8]
   126be:	6123      	str	r3, [r4, #16]
   126c0:	6020      	str	r0, [r4, #0]
   126c2:	462e      	mov	r6, r5
   126c4:	46a8      	mov	r8, r5
   126c6:	4642      	mov	r2, r8
   126c8:	4659      	mov	r1, fp
   126ca:	f7fb feed 	bl	e4a8 <memmove>
   126ce:	f8da 3008 	ldr.w	r3, [sl, #8]
   126d2:	68a2      	ldr	r2, [r4, #8]
   126d4:	6820      	ldr	r0, [r4, #0]
   126d6:	1b92      	subs	r2, r2, r6
   126d8:	4440      	add	r0, r8
   126da:	1b5b      	subs	r3, r3, r5
   126dc:	60a2      	str	r2, [r4, #8]
   126de:	6020      	str	r0, [r4, #0]
   126e0:	f8ca 3008 	str.w	r3, [sl, #8]
   126e4:	b33b      	cbz	r3, 12736 <__ssprint_r+0xf2>
   126e6:	3708      	adds	r7, #8
   126e8:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   126ec:	2d00      	cmp	r5, #0
   126ee:	d0fa      	beq.n	126e6 <__ssprint_r+0xa2>
   126f0:	42aa      	cmp	r2, r5
   126f2:	4616      	mov	r6, r2
   126f4:	4690      	mov	r8, r2
   126f6:	d9b3      	bls.n	12660 <__ssprint_r+0x1c>
   126f8:	462e      	mov	r6, r5
   126fa:	46a8      	mov	r8, r5
   126fc:	e7e3      	b.n	126c6 <__ssprint_r+0x82>
   126fe:	4648      	mov	r0, r9
   12700:	f7fb fb9e 	bl	de40 <_realloc_r>
   12704:	4603      	mov	r3, r0
   12706:	2800      	cmp	r0, #0
   12708:	d1d3      	bne.n	126b2 <__ssprint_r+0x6e>
   1270a:	6921      	ldr	r1, [r4, #16]
   1270c:	4648      	mov	r0, r9
   1270e:	f7fc fb79 	bl	ee04 <_free_r>
   12712:	89a3      	ldrh	r3, [r4, #12]
   12714:	220c      	movs	r2, #12
   12716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1271a:	f8c9 2000 	str.w	r2, [r9]
   1271e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12722:	81a3      	strh	r3, [r4, #12]
   12724:	2200      	movs	r2, #0
   12726:	2300      	movs	r3, #0
   12728:	f8ca 2008 	str.w	r2, [sl, #8]
   1272c:	f8ca 3004 	str.w	r3, [sl, #4]
   12730:	b003      	add	sp, #12
   12732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12736:	2000      	movs	r0, #0
   12738:	2300      	movs	r3, #0
   1273a:	f8ca 3004 	str.w	r3, [sl, #4]
   1273e:	b003      	add	sp, #12
   12740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012744 <__sprint_r.part.0>:
   12744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12748:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1274a:	049c      	lsls	r4, r3, #18
   1274c:	4690      	mov	r8, r2
   1274e:	d52d      	bpl.n	127ac <__sprint_r.part.0+0x68>
   12750:	6893      	ldr	r3, [r2, #8]
   12752:	6812      	ldr	r2, [r2, #0]
   12754:	b343      	cbz	r3, 127a8 <__sprint_r.part.0+0x64>
   12756:	468b      	mov	fp, r1
   12758:	4606      	mov	r6, r0
   1275a:	f102 0908 	add.w	r9, r2, #8
   1275e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12762:	ea5f 079a 	movs.w	r7, sl, lsr #2
   12766:	d015      	beq.n	12794 <__sprint_r.part.0+0x50>
   12768:	3d04      	subs	r5, #4
   1276a:	2400      	movs	r4, #0
   1276c:	e001      	b.n	12772 <__sprint_r.part.0+0x2e>
   1276e:	42a7      	cmp	r7, r4
   12770:	d00e      	beq.n	12790 <__sprint_r.part.0+0x4c>
   12772:	f855 1f04 	ldr.w	r1, [r5, #4]!
   12776:	465a      	mov	r2, fp
   12778:	4630      	mov	r0, r6
   1277a:	f001 fa5b 	bl	13c34 <_fputwc_r>
   1277e:	1c43      	adds	r3, r0, #1
   12780:	f104 0401 	add.w	r4, r4, #1
   12784:	d1f3      	bne.n	1276e <__sprint_r.part.0+0x2a>
   12786:	2300      	movs	r3, #0
   12788:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1278c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12790:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12794:	f02a 0a03 	bic.w	sl, sl, #3
   12798:	eba3 030a 	sub.w	r3, r3, sl
   1279c:	f8c8 3008 	str.w	r3, [r8, #8]
   127a0:	f109 0908 	add.w	r9, r9, #8
   127a4:	2b00      	cmp	r3, #0
   127a6:	d1da      	bne.n	1275e <__sprint_r.part.0+0x1a>
   127a8:	2000      	movs	r0, #0
   127aa:	e7ec      	b.n	12786 <__sprint_r.part.0+0x42>
   127ac:	f001 f80c 	bl	137c8 <__sfvwrite_r>
   127b0:	2300      	movs	r3, #0
   127b2:	e9c8 3301 	strd	r3, r3, [r8, #4]
   127b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ba:	bf00      	nop

000127bc <_vfiprintf_r>:
   127bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c0:	ed2d 8b02 	vpush	{d8}
   127c4:	b0c5      	sub	sp, #276	; 0x114
   127c6:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   127ca:	4683      	mov	fp, r0
   127cc:	ee08 1a10 	vmov	s16, r1
   127d0:	4616      	mov	r6, r2
   127d2:	2100      	movs	r1, #0
   127d4:	2208      	movs	r2, #8
   127d6:	4650      	mov	r0, sl
   127d8:	461c      	mov	r4, r3
   127da:	9307      	str	r3, [sp, #28]
   127dc:	f7fb fee0 	bl	e5a0 <memset>
   127e0:	f1bb 0f00 	cmp.w	fp, #0
   127e4:	d004      	beq.n	127f0 <_vfiprintf_r+0x34>
   127e6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   127ea:	2b00      	cmp	r3, #0
   127ec:	f000 86a0 	beq.w	13530 <_vfiprintf_r+0xd74>
   127f0:	ee18 2a10 	vmov	r2, s16
   127f4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   127f6:	07db      	lsls	r3, r3, #31
   127f8:	f140 8513 	bpl.w	13222 <_vfiprintf_r+0xa66>
   127fc:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12800:	b28a      	uxth	r2, r1
   12802:	0495      	lsls	r5, r2, #18
   12804:	d40b      	bmi.n	1281e <_vfiprintf_r+0x62>
   12806:	ee18 3a10 	vmov	r3, s16
   1280a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1280e:	8199      	strh	r1, [r3, #12]
   12810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12812:	b28a      	uxth	r2, r1
   12814:	ee18 1a10 	vmov	r1, s16
   12818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1281c:	664b      	str	r3, [r1, #100]	; 0x64
   1281e:	0710      	lsls	r0, r2, #28
   12820:	f140 8105 	bpl.w	12a2e <_vfiprintf_r+0x272>
   12824:	ee18 3a10 	vmov	r3, s16
   12828:	691b      	ldr	r3, [r3, #16]
   1282a:	2b00      	cmp	r3, #0
   1282c:	f000 80ff 	beq.w	12a2e <_vfiprintf_r+0x272>
   12830:	f002 031a 	and.w	r3, r2, #26
   12834:	2b0a      	cmp	r3, #10
   12836:	f000 810a 	beq.w	12a4e <_vfiprintf_r+0x292>
   1283a:	2300      	movs	r3, #0
   1283c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12840:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12844:	aa1b      	add	r2, sp, #108	; 0x6c
   12846:	930c      	str	r3, [sp, #48]	; 0x30
   12848:	9218      	str	r2, [sp, #96]	; 0x60
   1284a:	4691      	mov	r9, r2
   1284c:	930b      	str	r3, [sp, #44]	; 0x2c
   1284e:	9305      	str	r3, [sp, #20]
   12850:	46b0      	mov	r8, r6
   12852:	4644      	mov	r4, r8
   12854:	4ba8      	ldr	r3, [pc, #672]	; (12af8 <_vfiprintf_r+0x33c>)
   12856:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1285a:	f7fb ff9d 	bl	e798 <__locale_mb_cur_max>
   1285e:	4622      	mov	r2, r4
   12860:	4603      	mov	r3, r0
   12862:	a912      	add	r1, sp, #72	; 0x48
   12864:	f8cd a000 	str.w	sl, [sp]
   12868:	4658      	mov	r0, fp
   1286a:	47a8      	blx	r5
   1286c:	2800      	cmp	r0, #0
   1286e:	f000 8145 	beq.w	12afc <_vfiprintf_r+0x340>
   12872:	f2c0 8139 	blt.w	12ae8 <_vfiprintf_r+0x32c>
   12876:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12878:	2a25      	cmp	r2, #37	; 0x25
   1287a:	4603      	mov	r3, r0
   1287c:	d001      	beq.n	12882 <_vfiprintf_r+0xc6>
   1287e:	441c      	add	r4, r3
   12880:	e7e8      	b.n	12854 <_vfiprintf_r+0x98>
   12882:	ebb4 0608 	subs.w	r6, r4, r8
   12886:	4605      	mov	r5, r0
   12888:	f040 813c 	bne.w	12b04 <_vfiprintf_r+0x348>
   1288c:	2300      	movs	r3, #0
   1288e:	7861      	ldrb	r1, [r4, #1]
   12890:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12894:	f104 0801 	add.w	r8, r4, #1
   12898:	9306      	str	r3, [sp, #24]
   1289a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1289e:	461e      	mov	r6, r3
   128a0:	242b      	movs	r4, #43	; 0x2b
   128a2:	f108 0801 	add.w	r8, r8, #1
   128a6:	f1a1 0320 	sub.w	r3, r1, #32
   128aa:	2b5a      	cmp	r3, #90	; 0x5a
   128ac:	f200 8178 	bhi.w	12ba0 <_vfiprintf_r+0x3e4>
   128b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   128b4:	017602b5 	.word	0x017602b5
   128b8:	02b00176 	.word	0x02b00176
   128bc:	01760176 	.word	0x01760176
   128c0:	006a0176 	.word	0x006a0176
   128c4:	01760176 	.word	0x01760176
   128c8:	028d027d 	.word	0x028d027d
   128cc:	02880176 	.word	0x02880176
   128d0:	01760297 	.word	0x01760297
   128d4:	005b0292 	.word	0x005b0292
   128d8:	005b005b 	.word	0x005b005b
   128dc:	005b005b 	.word	0x005b005b
   128e0:	005b005b 	.word	0x005b005b
   128e4:	005b005b 	.word	0x005b005b
   128e8:	01760176 	.word	0x01760176
   128ec:	01760176 	.word	0x01760176
   128f0:	01760176 	.word	0x01760176
   128f4:	01760176 	.word	0x01760176
   128f8:	025c0176 	.word	0x025c0176
   128fc:	01760084 	.word	0x01760084
   12900:	01760176 	.word	0x01760176
   12904:	01760176 	.word	0x01760176
   12908:	01760176 	.word	0x01760176
   1290c:	01760176 	.word	0x01760176
   12910:	00e80176 	.word	0x00e80176
   12914:	01760176 	.word	0x01760176
   12918:	02330176 	.word	0x02330176
   1291c:	02da0176 	.word	0x02da0176
   12920:	01760176 	.word	0x01760176
   12924:	0176058b 	.word	0x0176058b
   12928:	01760176 	.word	0x01760176
   1292c:	01760176 	.word	0x01760176
   12930:	01760176 	.word	0x01760176
   12934:	01760176 	.word	0x01760176
   12938:	025c0176 	.word	0x025c0176
   1293c:	01760086 	.word	0x01760086
   12940:	01760176 	.word	0x01760176
   12944:	008602cd 	.word	0x008602cd
   12948:	0176007f 	.word	0x0176007f
   1294c:	017602c0 	.word	0x017602c0
   12950:	00ea02fd 	.word	0x00ea02fd
   12954:	007f02ed 	.word	0x007f02ed
   12958:	02330176 	.word	0x02330176
   1295c:	0569007c 	.word	0x0569007c
   12960:	01760176 	.word	0x01760176
   12964:	0176056b 	.word	0x0176056b
   12968:	007c      	.short	0x007c
   1296a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1296e:	2200      	movs	r2, #0
   12970:	f818 1b01 	ldrb.w	r1, [r8], #1
   12974:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12978:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1297c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12980:	2b09      	cmp	r3, #9
   12982:	d9f5      	bls.n	12970 <_vfiprintf_r+0x1b4>
   12984:	9206      	str	r2, [sp, #24]
   12986:	e78e      	b.n	128a6 <_vfiprintf_r+0xea>
   12988:	4658      	mov	r0, fp
   1298a:	f7fe fe31 	bl	115f0 <_localeconv_r>
   1298e:	6843      	ldr	r3, [r0, #4]
   12990:	930d      	str	r3, [sp, #52]	; 0x34
   12992:	4618      	mov	r0, r3
   12994:	f7fc f934 	bl	ec00 <strlen>
   12998:	900e      	str	r0, [sp, #56]	; 0x38
   1299a:	4605      	mov	r5, r0
   1299c:	4658      	mov	r0, fp
   1299e:	f7fe fe27 	bl	115f0 <_localeconv_r>
   129a2:	6883      	ldr	r3, [r0, #8]
   129a4:	930b      	str	r3, [sp, #44]	; 0x2c
   129a6:	2d00      	cmp	r5, #0
   129a8:	f040 84d6 	bne.w	13358 <_vfiprintf_r+0xb9c>
   129ac:	f898 1000 	ldrb.w	r1, [r8]
   129b0:	e777      	b.n	128a2 <_vfiprintf_r+0xe6>
   129b2:	f898 1000 	ldrb.w	r1, [r8]
   129b6:	f046 0620 	orr.w	r6, r6, #32
   129ba:	e772      	b.n	128a2 <_vfiprintf_r+0xe6>
   129bc:	f046 0610 	orr.w	r6, r6, #16
   129c0:	06b4      	lsls	r4, r6, #26
   129c2:	f140 818e 	bpl.w	12ce2 <_vfiprintf_r+0x526>
   129c6:	9b07      	ldr	r3, [sp, #28]
   129c8:	3307      	adds	r3, #7
   129ca:	f023 0307 	bic.w	r3, r3, #7
   129ce:	461a      	mov	r2, r3
   129d0:	6859      	ldr	r1, [r3, #4]
   129d2:	f852 3b08 	ldr.w	r3, [r2], #8
   129d6:	9207      	str	r2, [sp, #28]
   129d8:	460a      	mov	r2, r1
   129da:	2900      	cmp	r1, #0
   129dc:	f2c0 8470 	blt.w	132c0 <_vfiprintf_r+0xb04>
   129e0:	1c79      	adds	r1, r7, #1
   129e2:	f000 85a2 	beq.w	1352a <_vfiprintf_r+0xd6e>
   129e6:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   129ea:	9103      	str	r1, [sp, #12]
   129ec:	ea53 0102 	orrs.w	r1, r3, r2
   129f0:	f000 843f 	beq.w	13272 <_vfiprintf_r+0xab6>
   129f4:	2b0a      	cmp	r3, #10
   129f6:	f172 0100 	sbcs.w	r1, r2, #0
   129fa:	f080 8541 	bcs.w	13480 <_vfiprintf_r+0xcc4>
   129fe:	3330      	adds	r3, #48	; 0x30
   12a00:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12a04:	9e03      	ldr	r6, [sp, #12]
   12a06:	2301      	movs	r3, #1
   12a08:	9304      	str	r3, [sp, #16]
   12a0a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12a0e:	9b04      	ldr	r3, [sp, #16]
   12a10:	42bb      	cmp	r3, r7
   12a12:	bfb8      	it	lt
   12a14:	463b      	movlt	r3, r7
   12a16:	9303      	str	r3, [sp, #12]
   12a18:	2300      	movs	r3, #0
   12a1a:	9308      	str	r3, [sp, #32]
   12a1c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12a20:	2b00      	cmp	r3, #0
   12a22:	f000 80cb 	beq.w	12bbc <_vfiprintf_r+0x400>
   12a26:	9b03      	ldr	r3, [sp, #12]
   12a28:	3301      	adds	r3, #1
   12a2a:	9303      	str	r3, [sp, #12]
   12a2c:	e0c6      	b.n	12bbc <_vfiprintf_r+0x400>
   12a2e:	ee18 1a10 	vmov	r1, s16
   12a32:	4658      	mov	r0, fp
   12a34:	ee18 5a10 	vmov	r5, s16
   12a38:	f001 f840 	bl	13abc <__swsetup_r>
   12a3c:	2800      	cmp	r0, #0
   12a3e:	f040 8652 	bne.w	136e6 <_vfiprintf_r+0xf2a>
   12a42:	89aa      	ldrh	r2, [r5, #12]
   12a44:	f002 031a 	and.w	r3, r2, #26
   12a48:	2b0a      	cmp	r3, #10
   12a4a:	f47f aef6 	bne.w	1283a <_vfiprintf_r+0x7e>
   12a4e:	ee18 1a10 	vmov	r1, s16
   12a52:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12a56:	2b00      	cmp	r3, #0
   12a58:	f6ff aeef 	blt.w	1283a <_vfiprintf_r+0x7e>
   12a5c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12a5e:	07db      	lsls	r3, r3, #31
   12a60:	d402      	bmi.n	12a68 <_vfiprintf_r+0x2ac>
   12a62:	0597      	lsls	r7, r2, #22
   12a64:	f140 8612 	bpl.w	1368c <_vfiprintf_r+0xed0>
   12a68:	ee18 1a10 	vmov	r1, s16
   12a6c:	4623      	mov	r3, r4
   12a6e:	4632      	mov	r2, r6
   12a70:	4658      	mov	r0, fp
   12a72:	f000 fe69 	bl	13748 <__sbprintf>
   12a76:	9005      	str	r0, [sp, #20]
   12a78:	9805      	ldr	r0, [sp, #20]
   12a7a:	b045      	add	sp, #276	; 0x114
   12a7c:	ecbd 8b02 	vpop	{d8}
   12a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a84:	f046 0610 	orr.w	r6, r6, #16
   12a88:	f016 0220 	ands.w	r2, r6, #32
   12a8c:	f000 8136 	beq.w	12cfc <_vfiprintf_r+0x540>
   12a90:	9b07      	ldr	r3, [sp, #28]
   12a92:	3307      	adds	r3, #7
   12a94:	f023 0307 	bic.w	r3, r3, #7
   12a98:	4619      	mov	r1, r3
   12a9a:	685a      	ldr	r2, [r3, #4]
   12a9c:	f851 3b08 	ldr.w	r3, [r1], #8
   12aa0:	9107      	str	r1, [sp, #28]
   12aa2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12aa6:	9103      	str	r1, [sp, #12]
   12aa8:	2100      	movs	r1, #0
   12aaa:	2000      	movs	r0, #0
   12aac:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12ab0:	1c78      	adds	r0, r7, #1
   12ab2:	f000 8210 	beq.w	12ed6 <_vfiprintf_r+0x71a>
   12ab6:	9803      	ldr	r0, [sp, #12]
   12ab8:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12abc:	ea53 0002 	orrs.w	r0, r3, r2
   12ac0:	f040 8208 	bne.w	12ed4 <_vfiprintf_r+0x718>
   12ac4:	2f00      	cmp	r7, #0
   12ac6:	f040 8538 	bne.w	1353a <_vfiprintf_r+0xd7e>
   12aca:	2900      	cmp	r1, #0
   12acc:	f040 83d5 	bne.w	1327a <_vfiprintf_r+0xabe>
   12ad0:	9b03      	ldr	r3, [sp, #12]
   12ad2:	f013 0301 	ands.w	r3, r3, #1
   12ad6:	9304      	str	r3, [sp, #16]
   12ad8:	f000 8411 	beq.w	132fe <_vfiprintf_r+0xb42>
   12adc:	2330      	movs	r3, #48	; 0x30
   12ade:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12ae2:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12ae6:	e792      	b.n	12a0e <_vfiprintf_r+0x252>
   12ae8:	2208      	movs	r2, #8
   12aea:	2100      	movs	r1, #0
   12aec:	4650      	mov	r0, sl
   12aee:	f7fb fd57 	bl	e5a0 <memset>
   12af2:	2301      	movs	r3, #1
   12af4:	441c      	add	r4, r3
   12af6:	e6ad      	b.n	12854 <_vfiprintf_r+0x98>
   12af8:	20002f38 	.word	0x20002f38
   12afc:	ebb4 0608 	subs.w	r6, r4, r8
   12b00:	4605      	mov	r5, r0
   12b02:	d01b      	beq.n	12b3c <_vfiprintf_r+0x380>
   12b04:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12b06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12b08:	3301      	adds	r3, #1
   12b0a:	4432      	add	r2, r6
   12b0c:	2b07      	cmp	r3, #7
   12b0e:	e9c9 8600 	strd	r8, r6, [r9]
   12b12:	921a      	str	r2, [sp, #104]	; 0x68
   12b14:	9319      	str	r3, [sp, #100]	; 0x64
   12b16:	dd1c      	ble.n	12b52 <_vfiprintf_r+0x396>
   12b18:	2a00      	cmp	r2, #0
   12b1a:	f000 83a6 	beq.w	1326a <_vfiprintf_r+0xaae>
   12b1e:	ee18 1a10 	vmov	r1, s16
   12b22:	aa18      	add	r2, sp, #96	; 0x60
   12b24:	4658      	mov	r0, fp
   12b26:	f7ff fe0d 	bl	12744 <__sprint_r.part.0>
   12b2a:	bb20      	cbnz	r0, 12b76 <_vfiprintf_r+0x3ba>
   12b2c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b30:	9b05      	ldr	r3, [sp, #20]
   12b32:	4433      	add	r3, r6
   12b34:	9305      	str	r3, [sp, #20]
   12b36:	2d00      	cmp	r5, #0
   12b38:	f47f aea8 	bne.w	1288c <_vfiprintf_r+0xd0>
   12b3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12b3e:	2b00      	cmp	r3, #0
   12b40:	f040 85c1 	bne.w	136c6 <_vfiprintf_r+0xf0a>
   12b44:	ee18 3a10 	vmov	r3, s16
   12b48:	2200      	movs	r2, #0
   12b4a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12b4e:	9219      	str	r2, [sp, #100]	; 0x64
   12b50:	e015      	b.n	12b7e <_vfiprintf_r+0x3c2>
   12b52:	f109 0908 	add.w	r9, r9, #8
   12b56:	e7eb      	b.n	12b30 <_vfiprintf_r+0x374>
   12b58:	ee18 1a10 	vmov	r1, s16
   12b5c:	aa18      	add	r2, sp, #96	; 0x60
   12b5e:	4658      	mov	r0, fp
   12b60:	f7ff fdf0 	bl	12744 <__sprint_r.part.0>
   12b64:	2800      	cmp	r0, #0
   12b66:	f000 80a6 	beq.w	12cb6 <_vfiprintf_r+0x4fa>
   12b6a:	9b08      	ldr	r3, [sp, #32]
   12b6c:	b11b      	cbz	r3, 12b76 <_vfiprintf_r+0x3ba>
   12b6e:	9908      	ldr	r1, [sp, #32]
   12b70:	4658      	mov	r0, fp
   12b72:	f7fc f947 	bl	ee04 <_free_r>
   12b76:	ee18 3a10 	vmov	r3, s16
   12b7a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12b7e:	ee18 2a10 	vmov	r2, s16
   12b82:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12b84:	f012 0f01 	tst.w	r2, #1
   12b88:	b29a      	uxth	r2, r3
   12b8a:	f000 80a0 	beq.w	12cce <_vfiprintf_r+0x512>
   12b8e:	0650      	lsls	r0, r2, #25
   12b90:	f100 85b2 	bmi.w	136f8 <_vfiprintf_r+0xf3c>
   12b94:	9805      	ldr	r0, [sp, #20]
   12b96:	b045      	add	sp, #276	; 0x114
   12b98:	ecbd 8b02 	vpop	{d8}
   12b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba0:	2900      	cmp	r1, #0
   12ba2:	d0cb      	beq.n	12b3c <_vfiprintf_r+0x380>
   12ba4:	2300      	movs	r3, #0
   12ba6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12baa:	2301      	movs	r3, #1
   12bac:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12bb0:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12bb4:	ac2b      	add	r4, sp, #172	; 0xac
   12bb6:	2300      	movs	r3, #0
   12bb8:	9308      	str	r3, [sp, #32]
   12bba:	461f      	mov	r7, r3
   12bbc:	f016 0302 	ands.w	r3, r6, #2
   12bc0:	9309      	str	r3, [sp, #36]	; 0x24
   12bc2:	d002      	beq.n	12bca <_vfiprintf_r+0x40e>
   12bc4:	9b03      	ldr	r3, [sp, #12]
   12bc6:	3302      	adds	r3, #2
   12bc8:	9303      	str	r3, [sp, #12]
   12bca:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12bce:	930a      	str	r3, [sp, #40]	; 0x28
   12bd0:	d105      	bne.n	12bde <_vfiprintf_r+0x422>
   12bd2:	9b06      	ldr	r3, [sp, #24]
   12bd4:	9a03      	ldr	r2, [sp, #12]
   12bd6:	1a9d      	subs	r5, r3, r2
   12bd8:	2d00      	cmp	r5, #0
   12bda:	f300 827b 	bgt.w	130d4 <_vfiprintf_r+0x918>
   12bde:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12be2:	1c41      	adds	r1, r0, #1
   12be4:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12be8:	b182      	cbz	r2, 12c0c <_vfiprintf_r+0x450>
   12bea:	2201      	movs	r2, #1
   12bec:	3301      	adds	r3, #1
   12bee:	f8c9 2004 	str.w	r2, [r9, #4]
   12bf2:	2907      	cmp	r1, #7
   12bf4:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12bf8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12bfc:	f8c9 2000 	str.w	r2, [r9]
   12c00:	f300 824a 	bgt.w	13098 <_vfiprintf_r+0x8dc>
   12c04:	4608      	mov	r0, r1
   12c06:	f109 0908 	add.w	r9, r9, #8
   12c0a:	3101      	adds	r1, #1
   12c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c0e:	b1e2      	cbz	r2, 12c4a <_vfiprintf_r+0x48e>
   12c10:	aa11      	add	r2, sp, #68	; 0x44
   12c12:	3302      	adds	r3, #2
   12c14:	f8c9 2000 	str.w	r2, [r9]
   12c18:	2907      	cmp	r1, #7
   12c1a:	f04f 0202 	mov.w	r2, #2
   12c1e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12c22:	f8c9 2004 	str.w	r2, [r9, #4]
   12c26:	f340 8250 	ble.w	130ca <_vfiprintf_r+0x90e>
   12c2a:	2b00      	cmp	r3, #0
   12c2c:	f000 8343 	beq.w	132b6 <_vfiprintf_r+0xafa>
   12c30:	ee18 1a10 	vmov	r1, s16
   12c34:	aa18      	add	r2, sp, #96	; 0x60
   12c36:	4658      	mov	r0, fp
   12c38:	f7ff fd84 	bl	12744 <__sprint_r.part.0>
   12c3c:	2800      	cmp	r0, #0
   12c3e:	d194      	bne.n	12b6a <_vfiprintf_r+0x3ae>
   12c40:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c44:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c48:	1c41      	adds	r1, r0, #1
   12c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12c4c:	2a80      	cmp	r2, #128	; 0x80
   12c4e:	f000 8184 	beq.w	12f5a <_vfiprintf_r+0x79e>
   12c52:	9a04      	ldr	r2, [sp, #16]
   12c54:	1abd      	subs	r5, r7, r2
   12c56:	2d00      	cmp	r5, #0
   12c58:	f300 81d7 	bgt.w	1300a <_vfiprintf_r+0x84e>
   12c5c:	9a04      	ldr	r2, [sp, #16]
   12c5e:	f8c9 4000 	str.w	r4, [r9]
   12c62:	4413      	add	r3, r2
   12c64:	2907      	cmp	r1, #7
   12c66:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12c6a:	f8c9 2004 	str.w	r2, [r9, #4]
   12c6e:	f340 816e 	ble.w	12f4e <_vfiprintf_r+0x792>
   12c72:	2b00      	cmp	r3, #0
   12c74:	f000 8275 	beq.w	13162 <_vfiprintf_r+0x9a6>
   12c78:	ee18 1a10 	vmov	r1, s16
   12c7c:	aa18      	add	r2, sp, #96	; 0x60
   12c7e:	4658      	mov	r0, fp
   12c80:	f7ff fd60 	bl	12744 <__sprint_r.part.0>
   12c84:	2800      	cmp	r0, #0
   12c86:	f47f af70 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   12c8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12c8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c90:	0775      	lsls	r5, r6, #29
   12c92:	d505      	bpl.n	12ca0 <_vfiprintf_r+0x4e4>
   12c94:	9a06      	ldr	r2, [sp, #24]
   12c96:	9903      	ldr	r1, [sp, #12]
   12c98:	1a54      	subs	r4, r2, r1
   12c9a:	2c00      	cmp	r4, #0
   12c9c:	f300 826b 	bgt.w	13176 <_vfiprintf_r+0x9ba>
   12ca0:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12ca4:	9803      	ldr	r0, [sp, #12]
   12ca6:	4281      	cmp	r1, r0
   12ca8:	bfac      	ite	ge
   12caa:	1852      	addge	r2, r2, r1
   12cac:	1812      	addlt	r2, r2, r0
   12cae:	9205      	str	r2, [sp, #20]
   12cb0:	2b00      	cmp	r3, #0
   12cb2:	f47f af51 	bne.w	12b58 <_vfiprintf_r+0x39c>
   12cb6:	9908      	ldr	r1, [sp, #32]
   12cb8:	2300      	movs	r3, #0
   12cba:	9319      	str	r3, [sp, #100]	; 0x64
   12cbc:	2900      	cmp	r1, #0
   12cbe:	f000 8149 	beq.w	12f54 <_vfiprintf_r+0x798>
   12cc2:	4658      	mov	r0, fp
   12cc4:	f7fc f89e 	bl	ee04 <_free_r>
   12cc8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ccc:	e5c1      	b.n	12852 <_vfiprintf_r+0x96>
   12cce:	059c      	lsls	r4, r3, #22
   12cd0:	f53f af5d 	bmi.w	12b8e <_vfiprintf_r+0x3d2>
   12cd4:	ee18 4a10 	vmov	r4, s16
   12cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12cda:	f7fb ff39 	bl	eb50 <__retarget_lock_release_recursive>
   12cde:	89a2      	ldrh	r2, [r4, #12]
   12ce0:	e755      	b.n	12b8e <_vfiprintf_r+0x3d2>
   12ce2:	06f0      	lsls	r0, r6, #27
   12ce4:	9a07      	ldr	r2, [sp, #28]
   12ce6:	f100 831f 	bmi.w	13328 <_vfiprintf_r+0xb6c>
   12cea:	0671      	lsls	r1, r6, #25
   12cec:	f140 8319 	bpl.w	13322 <_vfiprintf_r+0xb66>
   12cf0:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12cf4:	9207      	str	r2, [sp, #28]
   12cf6:	17da      	asrs	r2, r3, #31
   12cf8:	4611      	mov	r1, r2
   12cfa:	e66e      	b.n	129da <_vfiprintf_r+0x21e>
   12cfc:	f016 0310 	ands.w	r3, r6, #16
   12d00:	9907      	ldr	r1, [sp, #28]
   12d02:	f040 8309 	bne.w	13318 <_vfiprintf_r+0xb5c>
   12d06:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12d0a:	f000 8301 	beq.w	13310 <_vfiprintf_r+0xb54>
   12d0e:	461a      	mov	r2, r3
   12d10:	f851 3b04 	ldr.w	r3, [r1], #4
   12d14:	9107      	str	r1, [sp, #28]
   12d16:	b29b      	uxth	r3, r3
   12d18:	e6c3      	b.n	12aa2 <_vfiprintf_r+0x2e6>
   12d1a:	9b07      	ldr	r3, [sp, #28]
   12d1c:	461a      	mov	r2, r3
   12d1e:	2300      	movs	r3, #0
   12d20:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12d24:	4613      	mov	r3, r2
   12d26:	f853 4b04 	ldr.w	r4, [r3], #4
   12d2a:	9303      	str	r3, [sp, #12]
   12d2c:	2c00      	cmp	r4, #0
   12d2e:	f000 8412 	beq.w	13556 <_vfiprintf_r+0xd9a>
   12d32:	2953      	cmp	r1, #83	; 0x53
   12d34:	f000 8365 	beq.w	13402 <_vfiprintf_r+0xc46>
   12d38:	f016 0510 	ands.w	r5, r6, #16
   12d3c:	f040 8361 	bne.w	13402 <_vfiprintf_r+0xc46>
   12d40:	1c7b      	adds	r3, r7, #1
   12d42:	f000 84b3 	beq.w	136ac <_vfiprintf_r+0xef0>
   12d46:	463a      	mov	r2, r7
   12d48:	4629      	mov	r1, r5
   12d4a:	4620      	mov	r0, r4
   12d4c:	f7fb ff08 	bl	eb60 <memchr>
   12d50:	9008      	str	r0, [sp, #32]
   12d52:	2800      	cmp	r0, #0
   12d54:	f000 849f 	beq.w	13696 <_vfiprintf_r+0xeda>
   12d58:	1b03      	subs	r3, r0, r4
   12d5a:	9a03      	ldr	r2, [sp, #12]
   12d5c:	9304      	str	r3, [sp, #16]
   12d5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12d62:	462f      	mov	r7, r5
   12d64:	9207      	str	r2, [sp, #28]
   12d66:	9303      	str	r3, [sp, #12]
   12d68:	9508      	str	r5, [sp, #32]
   12d6a:	e657      	b.n	12a1c <_vfiprintf_r+0x260>
   12d6c:	2943      	cmp	r1, #67	; 0x43
   12d6e:	d002      	beq.n	12d76 <_vfiprintf_r+0x5ba>
   12d70:	06f5      	lsls	r5, r6, #27
   12d72:	f140 832d 	bpl.w	133d0 <_vfiprintf_r+0xc14>
   12d76:	9d07      	ldr	r5, [sp, #28]
   12d78:	2208      	movs	r2, #8
   12d7a:	2100      	movs	r1, #0
   12d7c:	a816      	add	r0, sp, #88	; 0x58
   12d7e:	ac2b      	add	r4, sp, #172	; 0xac
   12d80:	f7fb fc0e 	bl	e5a0 <memset>
   12d84:	ab16      	add	r3, sp, #88	; 0x58
   12d86:	f855 2b04 	ldr.w	r2, [r5], #4
   12d8a:	4621      	mov	r1, r4
   12d8c:	4658      	mov	r0, fp
   12d8e:	f7fe fc71 	bl	11674 <_wcrtomb_r>
   12d92:	4603      	mov	r3, r0
   12d94:	3301      	adds	r3, #1
   12d96:	9004      	str	r0, [sp, #16]
   12d98:	f000 84b3 	beq.w	13702 <_vfiprintf_r+0xf46>
   12d9c:	9b04      	ldr	r3, [sp, #16]
   12d9e:	9507      	str	r5, [sp, #28]
   12da0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12da4:	9303      	str	r3, [sp, #12]
   12da6:	2300      	movs	r3, #0
   12da8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12dac:	e703      	b.n	12bb6 <_vfiprintf_r+0x3fa>
   12dae:	9b07      	ldr	r3, [sp, #28]
   12db0:	f853 2b04 	ldr.w	r2, [r3], #4
   12db4:	9206      	str	r2, [sp, #24]
   12db6:	2a00      	cmp	r2, #0
   12db8:	f280 829c 	bge.w	132f4 <_vfiprintf_r+0xb38>
   12dbc:	9a06      	ldr	r2, [sp, #24]
   12dbe:	4252      	negs	r2, r2
   12dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12dc4:	f898 1000 	ldrb.w	r1, [r8]
   12dc8:	f046 0604 	orr.w	r6, r6, #4
   12dcc:	e569      	b.n	128a2 <_vfiprintf_r+0xe6>
   12dce:	f898 1000 	ldrb.w	r1, [r8]
   12dd2:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12dd6:	e564      	b.n	128a2 <_vfiprintf_r+0xe6>
   12dd8:	f898 1000 	ldrb.w	r1, [r8]
   12ddc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12de0:	e55f      	b.n	128a2 <_vfiprintf_r+0xe6>
   12de2:	4642      	mov	r2, r8
   12de4:	f812 1b01 	ldrb.w	r1, [r2], #1
   12de8:	292a      	cmp	r1, #42	; 0x2a
   12dea:	f000 8496 	beq.w	1371a <_vfiprintf_r+0xf5e>
   12dee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12df2:	2b09      	cmp	r3, #9
   12df4:	4690      	mov	r8, r2
   12df6:	f04f 0700 	mov.w	r7, #0
   12dfa:	f63f ad54 	bhi.w	128a6 <_vfiprintf_r+0xea>
   12dfe:	f818 1b01 	ldrb.w	r1, [r8], #1
   12e02:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12e06:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12e0a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12e0e:	2b09      	cmp	r3, #9
   12e10:	d9f5      	bls.n	12dfe <_vfiprintf_r+0x642>
   12e12:	e548      	b.n	128a6 <_vfiprintf_r+0xea>
   12e14:	f898 1000 	ldrb.w	r1, [r8]
   12e18:	f046 0601 	orr.w	r6, r6, #1
   12e1c:	e541      	b.n	128a2 <_vfiprintf_r+0xe6>
   12e1e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12e22:	2b00      	cmp	r3, #0
   12e24:	f47f adc2 	bne.w	129ac <_vfiprintf_r+0x1f0>
   12e28:	2320      	movs	r3, #32
   12e2a:	f898 1000 	ldrb.w	r1, [r8]
   12e2e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e32:	e536      	b.n	128a2 <_vfiprintf_r+0xe6>
   12e34:	f898 1000 	ldrb.w	r1, [r8]
   12e38:	296c      	cmp	r1, #108	; 0x6c
   12e3a:	bf03      	ittte	eq
   12e3c:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12e40:	f046 0620 	orreq.w	r6, r6, #32
   12e44:	f108 0801 	addeq.w	r8, r8, #1
   12e48:	f046 0610 	orrne.w	r6, r6, #16
   12e4c:	e529      	b.n	128a2 <_vfiprintf_r+0xe6>
   12e4e:	f898 1000 	ldrb.w	r1, [r8]
   12e52:	2968      	cmp	r1, #104	; 0x68
   12e54:	bf03      	ittte	eq
   12e56:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12e5a:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12e5e:	f108 0801 	addeq.w	r8, r8, #1
   12e62:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12e66:	e51c      	b.n	128a2 <_vfiprintf_r+0xe6>
   12e68:	f046 0310 	orr.w	r3, r6, #16
   12e6c:	9303      	str	r3, [sp, #12]
   12e6e:	9b03      	ldr	r3, [sp, #12]
   12e70:	f013 0220 	ands.w	r2, r3, #32
   12e74:	f000 8206 	beq.w	13284 <_vfiprintf_r+0xac8>
   12e78:	9b07      	ldr	r3, [sp, #28]
   12e7a:	3307      	adds	r3, #7
   12e7c:	f023 0307 	bic.w	r3, r3, #7
   12e80:	4619      	mov	r1, r3
   12e82:	685a      	ldr	r2, [r3, #4]
   12e84:	f851 3b08 	ldr.w	r3, [r1], #8
   12e88:	9107      	str	r1, [sp, #28]
   12e8a:	2101      	movs	r1, #1
   12e8c:	e60d      	b.n	12aaa <_vfiprintf_r+0x2ee>
   12e8e:	9a07      	ldr	r2, [sp, #28]
   12e90:	f046 0302 	orr.w	r3, r6, #2
   12e94:	9303      	str	r3, [sp, #12]
   12e96:	f852 3b04 	ldr.w	r3, [r2], #4
   12e9a:	9207      	str	r2, [sp, #28]
   12e9c:	f647 0230 	movw	r2, #30768	; 0x7830
   12ea0:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12ea4:	4ab8      	ldr	r2, [pc, #736]	; (13188 <_vfiprintf_r+0x9cc>)
   12ea6:	920c      	str	r2, [sp, #48]	; 0x30
   12ea8:	2102      	movs	r1, #2
   12eaa:	2200      	movs	r2, #0
   12eac:	e5fd      	b.n	12aaa <_vfiprintf_r+0x2ee>
   12eae:	06b7      	lsls	r7, r6, #26
   12eb0:	f100 8248 	bmi.w	13344 <_vfiprintf_r+0xb88>
   12eb4:	06f5      	lsls	r5, r6, #27
   12eb6:	f100 8346 	bmi.w	13546 <_vfiprintf_r+0xd8a>
   12eba:	0674      	lsls	r4, r6, #25
   12ebc:	f100 83d5 	bmi.w	1366a <_vfiprintf_r+0xeae>
   12ec0:	05b0      	lsls	r0, r6, #22
   12ec2:	f140 8340 	bpl.w	13546 <_vfiprintf_r+0xd8a>
   12ec6:	9b07      	ldr	r3, [sp, #28]
   12ec8:	9905      	ldr	r1, [sp, #20]
   12eca:	f853 2b04 	ldr.w	r2, [r3], #4
   12ece:	9307      	str	r3, [sp, #28]
   12ed0:	7011      	strb	r1, [r2, #0]
   12ed2:	e4be      	b.n	12852 <_vfiprintf_r+0x96>
   12ed4:	9603      	str	r6, [sp, #12]
   12ed6:	2901      	cmp	r1, #1
   12ed8:	f43f ad8c 	beq.w	129f4 <_vfiprintf_r+0x238>
   12edc:	2902      	cmp	r1, #2
   12ede:	ac44      	add	r4, sp, #272	; 0x110
   12ee0:	d111      	bne.n	12f06 <_vfiprintf_r+0x74a>
   12ee2:	980c      	ldr	r0, [sp, #48]	; 0x30
   12ee4:	f003 010f 	and.w	r1, r3, #15
   12ee8:	091b      	lsrs	r3, r3, #4
   12eea:	5c41      	ldrb	r1, [r0, r1]
   12eec:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12ef0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12ef4:	0912      	lsrs	r2, r2, #4
   12ef6:	ea53 0102 	orrs.w	r1, r3, r2
   12efa:	d1f3      	bne.n	12ee4 <_vfiprintf_r+0x728>
   12efc:	9e03      	ldr	r6, [sp, #12]
   12efe:	ab44      	add	r3, sp, #272	; 0x110
   12f00:	1b1b      	subs	r3, r3, r4
   12f02:	9304      	str	r3, [sp, #16]
   12f04:	e583      	b.n	12a0e <_vfiprintf_r+0x252>
   12f06:	f003 0107 	and.w	r1, r3, #7
   12f0a:	08db      	lsrs	r3, r3, #3
   12f0c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12f10:	08d2      	lsrs	r2, r2, #3
   12f12:	3130      	adds	r1, #48	; 0x30
   12f14:	ea53 0502 	orrs.w	r5, r3, r2
   12f18:	4620      	mov	r0, r4
   12f1a:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12f1e:	d1f2      	bne.n	12f06 <_vfiprintf_r+0x74a>
   12f20:	9e03      	ldr	r6, [sp, #12]
   12f22:	07f3      	lsls	r3, r6, #31
   12f24:	d5eb      	bpl.n	12efe <_vfiprintf_r+0x742>
   12f26:	2930      	cmp	r1, #48	; 0x30
   12f28:	d0e8      	beq.n	12efc <_vfiprintf_r+0x740>
   12f2a:	2330      	movs	r3, #48	; 0x30
   12f2c:	3802      	subs	r0, #2
   12f2e:	f804 3c01 	strb.w	r3, [r4, #-1]
   12f32:	ab44      	add	r3, sp, #272	; 0x110
   12f34:	1a1b      	subs	r3, r3, r0
   12f36:	9e03      	ldr	r6, [sp, #12]
   12f38:	9304      	str	r3, [sp, #16]
   12f3a:	4604      	mov	r4, r0
   12f3c:	e567      	b.n	12a0e <_vfiprintf_r+0x252>
   12f3e:	9b04      	ldr	r3, [sp, #16]
   12f40:	941b      	str	r4, [sp, #108]	; 0x6c
   12f42:	2201      	movs	r2, #1
   12f44:	931c      	str	r3, [sp, #112]	; 0x70
   12f46:	931a      	str	r3, [sp, #104]	; 0x68
   12f48:	9219      	str	r2, [sp, #100]	; 0x64
   12f4a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f4e:	f109 0908 	add.w	r9, r9, #8
   12f52:	e69d      	b.n	12c90 <_vfiprintf_r+0x4d4>
   12f54:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f58:	e47b      	b.n	12852 <_vfiprintf_r+0x96>
   12f5a:	9a06      	ldr	r2, [sp, #24]
   12f5c:	9d03      	ldr	r5, [sp, #12]
   12f5e:	1b55      	subs	r5, r2, r5
   12f60:	2d00      	cmp	r5, #0
   12f62:	f77f ae76 	ble.w	12c52 <_vfiprintf_r+0x496>
   12f66:	2d10      	cmp	r5, #16
   12f68:	f340 83bb 	ble.w	136e2 <_vfiprintf_r+0xf26>
   12f6c:	9409      	str	r4, [sp, #36]	; 0x24
   12f6e:	ee18 4a10 	vmov	r4, s16
   12f72:	e007      	b.n	12f84 <_vfiprintf_r+0x7c8>
   12f74:	f100 0c02 	add.w	ip, r0, #2
   12f78:	f109 0908 	add.w	r9, r9, #8
   12f7c:	4610      	mov	r0, r2
   12f7e:	3d10      	subs	r5, #16
   12f80:	2d10      	cmp	r5, #16
   12f82:	dd1e      	ble.n	12fc2 <_vfiprintf_r+0x806>
   12f84:	4981      	ldr	r1, [pc, #516]	; (1318c <_vfiprintf_r+0x9d0>)
   12f86:	f8c9 1000 	str.w	r1, [r9]
   12f8a:	1c42      	adds	r2, r0, #1
   12f8c:	3310      	adds	r3, #16
   12f8e:	2110      	movs	r1, #16
   12f90:	2a07      	cmp	r2, #7
   12f92:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12f96:	f8c9 1004 	str.w	r1, [r9, #4]
   12f9a:	ddeb      	ble.n	12f74 <_vfiprintf_r+0x7b8>
   12f9c:	aa18      	add	r2, sp, #96	; 0x60
   12f9e:	2b00      	cmp	r3, #0
   12fa0:	d074      	beq.n	1308c <_vfiprintf_r+0x8d0>
   12fa2:	4621      	mov	r1, r4
   12fa4:	4658      	mov	r0, fp
   12fa6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12faa:	f7ff fbcb 	bl	12744 <__sprint_r.part.0>
   12fae:	2800      	cmp	r0, #0
   12fb0:	f47f addb 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   12fb4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12fb8:	3d10      	subs	r5, #16
   12fba:	2d10      	cmp	r5, #16
   12fbc:	f100 0c01 	add.w	ip, r0, #1
   12fc0:	dce0      	bgt.n	12f84 <_vfiprintf_r+0x7c8>
   12fc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12fc4:	4a71      	ldr	r2, [pc, #452]	; (1318c <_vfiprintf_r+0x9d0>)
   12fc6:	f8c9 5004 	str.w	r5, [r9, #4]
   12fca:	442b      	add	r3, r5
   12fcc:	f1bc 0f07 	cmp.w	ip, #7
   12fd0:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   12fd4:	f8c9 2000 	str.w	r2, [r9]
   12fd8:	f340 8194 	ble.w	13304 <_vfiprintf_r+0xb48>
   12fdc:	2b00      	cmp	r3, #0
   12fde:	f000 831f 	beq.w	13620 <_vfiprintf_r+0xe64>
   12fe2:	ee18 1a10 	vmov	r1, s16
   12fe6:	aa18      	add	r2, sp, #96	; 0x60
   12fe8:	4658      	mov	r0, fp
   12fea:	f7ff fbab 	bl	12744 <__sprint_r.part.0>
   12fee:	2800      	cmp	r0, #0
   12ff0:	f47f adbb 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   12ff4:	9a04      	ldr	r2, [sp, #16]
   12ff6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12ffa:	1abd      	subs	r5, r7, r2
   12ffc:	2d00      	cmp	r5, #0
   12ffe:	f100 0101 	add.w	r1, r0, #1
   13002:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13006:	f77f ae29 	ble.w	12c5c <_vfiprintf_r+0x4a0>
   1300a:	2d10      	cmp	r5, #16
   1300c:	dd29      	ble.n	13062 <_vfiprintf_r+0x8a6>
   1300e:	9409      	str	r4, [sp, #36]	; 0x24
   13010:	2710      	movs	r7, #16
   13012:	ee18 4a10 	vmov	r4, s16
   13016:	e007      	b.n	13028 <_vfiprintf_r+0x86c>
   13018:	f100 0c02 	add.w	ip, r0, #2
   1301c:	f109 0908 	add.w	r9, r9, #8
   13020:	4610      	mov	r0, r2
   13022:	3d10      	subs	r5, #16
   13024:	2d10      	cmp	r5, #16
   13026:	dd1a      	ble.n	1305e <_vfiprintf_r+0x8a2>
   13028:	1c42      	adds	r2, r0, #1
   1302a:	4958      	ldr	r1, [pc, #352]	; (1318c <_vfiprintf_r+0x9d0>)
   1302c:	3310      	adds	r3, #16
   1302e:	2a07      	cmp	r2, #7
   13030:	e9c9 1700 	strd	r1, r7, [r9]
   13034:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13038:	ddee      	ble.n	13018 <_vfiprintf_r+0x85c>
   1303a:	aa18      	add	r2, sp, #96	; 0x60
   1303c:	b303      	cbz	r3, 13080 <_vfiprintf_r+0x8c4>
   1303e:	4621      	mov	r1, r4
   13040:	4658      	mov	r0, fp
   13042:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13046:	f7ff fb7d 	bl	12744 <__sprint_r.part.0>
   1304a:	2800      	cmp	r0, #0
   1304c:	f47f ad8d 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   13050:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13054:	3d10      	subs	r5, #16
   13056:	2d10      	cmp	r5, #16
   13058:	f100 0c01 	add.w	ip, r0, #1
   1305c:	dce4      	bgt.n	13028 <_vfiprintf_r+0x86c>
   1305e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13060:	4661      	mov	r1, ip
   13062:	4a4a      	ldr	r2, [pc, #296]	; (1318c <_vfiprintf_r+0x9d0>)
   13064:	f8c9 5004 	str.w	r5, [r9, #4]
   13068:	442b      	add	r3, r5
   1306a:	2907      	cmp	r1, #7
   1306c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13070:	f8c9 2000 	str.w	r2, [r9]
   13074:	f300 80e7 	bgt.w	13246 <_vfiprintf_r+0xa8a>
   13078:	f109 0908 	add.w	r9, r9, #8
   1307c:	3101      	adds	r1, #1
   1307e:	e5ed      	b.n	12c5c <_vfiprintf_r+0x4a0>
   13080:	f04f 0c01 	mov.w	ip, #1
   13084:	4618      	mov	r0, r3
   13086:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1308a:	e7ca      	b.n	13022 <_vfiprintf_r+0x866>
   1308c:	f04f 0c01 	mov.w	ip, #1
   13090:	4618      	mov	r0, r3
   13092:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13096:	e772      	b.n	12f7e <_vfiprintf_r+0x7c2>
   13098:	2b00      	cmp	r3, #0
   1309a:	f000 8104 	beq.w	132a6 <_vfiprintf_r+0xaea>
   1309e:	ee18 1a10 	vmov	r1, s16
   130a2:	aa18      	add	r2, sp, #96	; 0x60
   130a4:	4658      	mov	r0, fp
   130a6:	f7ff fb4d 	bl	12744 <__sprint_r.part.0>
   130aa:	2800      	cmp	r0, #0
   130ac:	f47f ad5d 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   130b0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   130b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130b8:	1c41      	adds	r1, r0, #1
   130ba:	e5a7      	b.n	12c0c <_vfiprintf_r+0x450>
   130bc:	2302      	movs	r3, #2
   130be:	aa11      	add	r2, sp, #68	; 0x44
   130c0:	931c      	str	r3, [sp, #112]	; 0x70
   130c2:	921b      	str	r2, [sp, #108]	; 0x6c
   130c4:	2101      	movs	r1, #1
   130c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130ca:	4608      	mov	r0, r1
   130cc:	f109 0908 	add.w	r9, r9, #8
   130d0:	1c41      	adds	r1, r0, #1
   130d2:	e5ba      	b.n	12c4a <_vfiprintf_r+0x48e>
   130d4:	2d10      	cmp	r5, #16
   130d6:	f340 82e5 	ble.w	136a4 <_vfiprintf_r+0xee8>
   130da:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   130de:	940f      	str	r4, [sp, #60]	; 0x3c
   130e0:	4608      	mov	r0, r1
   130e2:	ee18 4a10 	vmov	r4, s16
   130e6:	e007      	b.n	130f8 <_vfiprintf_r+0x93c>
   130e8:	f100 0c02 	add.w	ip, r0, #2
   130ec:	f109 0908 	add.w	r9, r9, #8
   130f0:	4610      	mov	r0, r2
   130f2:	3d10      	subs	r5, #16
   130f4:	2d10      	cmp	r5, #16
   130f6:	dd1d      	ble.n	13134 <_vfiprintf_r+0x978>
   130f8:	4925      	ldr	r1, [pc, #148]	; (13190 <_vfiprintf_r+0x9d4>)
   130fa:	f8c9 1000 	str.w	r1, [r9]
   130fe:	1c42      	adds	r2, r0, #1
   13100:	3310      	adds	r3, #16
   13102:	2110      	movs	r1, #16
   13104:	2a07      	cmp	r2, #7
   13106:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1310a:	f8c9 1004 	str.w	r1, [r9, #4]
   1310e:	ddeb      	ble.n	130e8 <_vfiprintf_r+0x92c>
   13110:	aa18      	add	r2, sp, #96	; 0x60
   13112:	b303      	cbz	r3, 13156 <_vfiprintf_r+0x99a>
   13114:	4621      	mov	r1, r4
   13116:	4658      	mov	r0, fp
   13118:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1311c:	f7ff fb12 	bl	12744 <__sprint_r.part.0>
   13120:	2800      	cmp	r0, #0
   13122:	f47f ad22 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   13126:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1312a:	3d10      	subs	r5, #16
   1312c:	2d10      	cmp	r5, #16
   1312e:	f100 0c01 	add.w	ip, r0, #1
   13132:	dce1      	bgt.n	130f8 <_vfiprintf_r+0x93c>
   13134:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   13136:	4660      	mov	r0, ip
   13138:	4a15      	ldr	r2, [pc, #84]	; (13190 <_vfiprintf_r+0x9d4>)
   1313a:	f8c9 5004 	str.w	r5, [r9, #4]
   1313e:	442b      	add	r3, r5
   13140:	2807      	cmp	r0, #7
   13142:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   13146:	f8c9 2000 	str.w	r2, [r9]
   1314a:	f300 80c1 	bgt.w	132d0 <_vfiprintf_r+0xb14>
   1314e:	f109 0908 	add.w	r9, r9, #8
   13152:	1c41      	adds	r1, r0, #1
   13154:	e546      	b.n	12be4 <_vfiprintf_r+0x428>
   13156:	4618      	mov	r0, r3
   13158:	f04f 0c01 	mov.w	ip, #1
   1315c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13160:	e7c7      	b.n	130f2 <_vfiprintf_r+0x936>
   13162:	0776      	lsls	r6, r6, #29
   13164:	9319      	str	r3, [sp, #100]	; 0x64
   13166:	d553      	bpl.n	13210 <_vfiprintf_r+0xa54>
   13168:	9a06      	ldr	r2, [sp, #24]
   1316a:	9903      	ldr	r1, [sp, #12]
   1316c:	1a54      	subs	r4, r2, r1
   1316e:	2c00      	cmp	r4, #0
   13170:	dd4e      	ble.n	13210 <_vfiprintf_r+0xa54>
   13172:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13176:	2c10      	cmp	r4, #16
   13178:	f340 82b0 	ble.w	136dc <_vfiprintf_r+0xf20>
   1317c:	9919      	ldr	r1, [sp, #100]	; 0x64
   1317e:	ee18 6a10 	vmov	r6, s16
   13182:	2510      	movs	r5, #16
   13184:	e00d      	b.n	131a2 <_vfiprintf_r+0x9e6>
   13186:	bf00      	nop
   13188:	20002624 	.word	0x20002624
   1318c:	200029c4 	.word	0x200029c4
   13190:	20002668 	.word	0x20002668
   13194:	1c88      	adds	r0, r1, #2
   13196:	f109 0908 	add.w	r9, r9, #8
   1319a:	4611      	mov	r1, r2
   1319c:	3c10      	subs	r4, #16
   1319e:	2c10      	cmp	r4, #16
   131a0:	dd1a      	ble.n	131d8 <_vfiprintf_r+0xa1c>
   131a2:	1c4a      	adds	r2, r1, #1
   131a4:	48b3      	ldr	r0, [pc, #716]	; (13474 <_vfiprintf_r+0xcb8>)
   131a6:	3310      	adds	r3, #16
   131a8:	2a07      	cmp	r2, #7
   131aa:	e9c9 0500 	strd	r0, r5, [r9]
   131ae:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   131b2:	ddef      	ble.n	13194 <_vfiprintf_r+0x9d8>
   131b4:	aa18      	add	r2, sp, #96	; 0x60
   131b6:	b333      	cbz	r3, 13206 <_vfiprintf_r+0xa4a>
   131b8:	4631      	mov	r1, r6
   131ba:	4658      	mov	r0, fp
   131bc:	f7ff fac2 	bl	12744 <__sprint_r.part.0>
   131c0:	2800      	cmp	r0, #0
   131c2:	f47f acd2 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   131c6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   131ca:	3c10      	subs	r4, #16
   131cc:	2c10      	cmp	r4, #16
   131ce:	f101 0001 	add.w	r0, r1, #1
   131d2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131d6:	dce4      	bgt.n	131a2 <_vfiprintf_r+0x9e6>
   131d8:	4aa6      	ldr	r2, [pc, #664]	; (13474 <_vfiprintf_r+0xcb8>)
   131da:	f8c9 4004 	str.w	r4, [r9, #4]
   131de:	4423      	add	r3, r4
   131e0:	2807      	cmp	r0, #7
   131e2:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   131e6:	f8c9 2000 	str.w	r2, [r9]
   131ea:	f77f ad59 	ble.w	12ca0 <_vfiprintf_r+0x4e4>
   131ee:	b17b      	cbz	r3, 13210 <_vfiprintf_r+0xa54>
   131f0:	ee18 1a10 	vmov	r1, s16
   131f4:	aa18      	add	r2, sp, #96	; 0x60
   131f6:	4658      	mov	r0, fp
   131f8:	f7ff faa4 	bl	12744 <__sprint_r.part.0>
   131fc:	2800      	cmp	r0, #0
   131fe:	f47f acb4 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   13202:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13204:	e54c      	b.n	12ca0 <_vfiprintf_r+0x4e4>
   13206:	2001      	movs	r0, #1
   13208:	4619      	mov	r1, r3
   1320a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1320e:	e7c5      	b.n	1319c <_vfiprintf_r+0x9e0>
   13210:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13214:	9903      	ldr	r1, [sp, #12]
   13216:	428a      	cmp	r2, r1
   13218:	bfac      	ite	ge
   1321a:	189b      	addge	r3, r3, r2
   1321c:	185b      	addlt	r3, r3, r1
   1321e:	9305      	str	r3, [sp, #20]
   13220:	e549      	b.n	12cb6 <_vfiprintf_r+0x4fa>
   13222:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   13226:	058f      	lsls	r7, r1, #22
   13228:	ee18 3a10 	vmov	r3, s16
   1322c:	b28a      	uxth	r2, r1
   1322e:	f53f aae8 	bmi.w	12802 <_vfiprintf_r+0x46>
   13232:	ee18 5a10 	vmov	r5, s16
   13236:	6d98      	ldr	r0, [r3, #88]	; 0x58
   13238:	f7fb fc88 	bl	eb4c <__retarget_lock_acquire_recursive>
   1323c:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13240:	b28a      	uxth	r2, r1
   13242:	f7ff bade 	b.w	12802 <_vfiprintf_r+0x46>
   13246:	2b00      	cmp	r3, #0
   13248:	f43f ae79 	beq.w	12f3e <_vfiprintf_r+0x782>
   1324c:	ee18 1a10 	vmov	r1, s16
   13250:	aa18      	add	r2, sp, #96	; 0x60
   13252:	4658      	mov	r0, fp
   13254:	f7ff fa76 	bl	12744 <__sprint_r.part.0>
   13258:	2800      	cmp	r0, #0
   1325a:	f47f ac86 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   1325e:	9919      	ldr	r1, [sp, #100]	; 0x64
   13260:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13262:	3101      	adds	r1, #1
   13264:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13268:	e4f8      	b.n	12c5c <_vfiprintf_r+0x4a0>
   1326a:	9219      	str	r2, [sp, #100]	; 0x64
   1326c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13270:	e45e      	b.n	12b30 <_vfiprintf_r+0x374>
   13272:	2f00      	cmp	r7, #0
   13274:	f47f abc3 	bne.w	129fe <_vfiprintf_r+0x242>
   13278:	9e03      	ldr	r6, [sp, #12]
   1327a:	2700      	movs	r7, #0
   1327c:	9704      	str	r7, [sp, #16]
   1327e:	ac44      	add	r4, sp, #272	; 0x110
   13280:	f7ff bbc5 	b.w	12a0e <_vfiprintf_r+0x252>
   13284:	9b03      	ldr	r3, [sp, #12]
   13286:	f013 0310 	ands.w	r3, r3, #16
   1328a:	d154      	bne.n	13336 <_vfiprintf_r+0xb7a>
   1328c:	9a03      	ldr	r2, [sp, #12]
   1328e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13292:	f000 816b 	beq.w	1356c <_vfiprintf_r+0xdb0>
   13296:	9907      	ldr	r1, [sp, #28]
   13298:	461a      	mov	r2, r3
   1329a:	f851 3b04 	ldr.w	r3, [r1], #4
   1329e:	9107      	str	r1, [sp, #28]
   132a0:	b29b      	uxth	r3, r3
   132a2:	2101      	movs	r1, #1
   132a4:	e401      	b.n	12aaa <_vfiprintf_r+0x2ee>
   132a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   132a8:	2a00      	cmp	r2, #0
   132aa:	d164      	bne.n	13376 <_vfiprintf_r+0xbba>
   132ac:	4618      	mov	r0, r3
   132ae:	2101      	movs	r1, #1
   132b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132b4:	e4c9      	b.n	12c4a <_vfiprintf_r+0x48e>
   132b6:	2101      	movs	r1, #1
   132b8:	4618      	mov	r0, r3
   132ba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132be:	e4c4      	b.n	12c4a <_vfiprintf_r+0x48e>
   132c0:	425b      	negs	r3, r3
   132c2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   132c6:	9603      	str	r6, [sp, #12]
   132c8:	202d      	movs	r0, #45	; 0x2d
   132ca:	2101      	movs	r1, #1
   132cc:	f7ff bbee 	b.w	12aac <_vfiprintf_r+0x2f0>
   132d0:	2b00      	cmp	r3, #0
   132d2:	f000 8088 	beq.w	133e6 <_vfiprintf_r+0xc2a>
   132d6:	ee18 1a10 	vmov	r1, s16
   132da:	aa18      	add	r2, sp, #96	; 0x60
   132dc:	4658      	mov	r0, fp
   132de:	f7ff fa31 	bl	12744 <__sprint_r.part.0>
   132e2:	2800      	cmp	r0, #0
   132e4:	f47f ac41 	bne.w	12b6a <_vfiprintf_r+0x3ae>
   132e8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   132ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132f0:	1c41      	adds	r1, r0, #1
   132f2:	e477      	b.n	12be4 <_vfiprintf_r+0x428>
   132f4:	f898 1000 	ldrb.w	r1, [r8]
   132f8:	9307      	str	r3, [sp, #28]
   132fa:	f7ff bad2 	b.w	128a2 <_vfiprintf_r+0xe6>
   132fe:	ac44      	add	r4, sp, #272	; 0x110
   13300:	f7ff bb85 	b.w	12a0e <_vfiprintf_r+0x252>
   13304:	f109 0908 	add.w	r9, r9, #8
   13308:	f10c 0101 	add.w	r1, ip, #1
   1330c:	4660      	mov	r0, ip
   1330e:	e4a0      	b.n	12c52 <_vfiprintf_r+0x496>
   13310:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13314:	f040 8197 	bne.w	13646 <_vfiprintf_r+0xe8a>
   13318:	f851 3b04 	ldr.w	r3, [r1], #4
   1331c:	9107      	str	r1, [sp, #28]
   1331e:	f7ff bbc0 	b.w	12aa2 <_vfiprintf_r+0x2e6>
   13322:	05b3      	lsls	r3, r6, #22
   13324:	f100 8188 	bmi.w	13638 <_vfiprintf_r+0xe7c>
   13328:	f852 3b04 	ldr.w	r3, [r2], #4
   1332c:	9207      	str	r2, [sp, #28]
   1332e:	17da      	asrs	r2, r3, #31
   13330:	4611      	mov	r1, r2
   13332:	f7ff bb52 	b.w	129da <_vfiprintf_r+0x21e>
   13336:	9907      	ldr	r1, [sp, #28]
   13338:	f851 3b04 	ldr.w	r3, [r1], #4
   1333c:	9107      	str	r1, [sp, #28]
   1333e:	2101      	movs	r1, #1
   13340:	f7ff bbb3 	b.w	12aaa <_vfiprintf_r+0x2ee>
   13344:	9b07      	ldr	r3, [sp, #28]
   13346:	9805      	ldr	r0, [sp, #20]
   13348:	f853 1b04 	ldr.w	r1, [r3], #4
   1334c:	9307      	str	r3, [sp, #28]
   1334e:	17c2      	asrs	r2, r0, #31
   13350:	e9c1 0200 	strd	r0, r2, [r1]
   13354:	f7ff ba7d 	b.w	12852 <_vfiprintf_r+0x96>
   13358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1335a:	2b00      	cmp	r3, #0
   1335c:	f43f ab26 	beq.w	129ac <_vfiprintf_r+0x1f0>
   13360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13362:	781b      	ldrb	r3, [r3, #0]
   13364:	2b00      	cmp	r3, #0
   13366:	f43f ab21 	beq.w	129ac <_vfiprintf_r+0x1f0>
   1336a:	f898 1000 	ldrb.w	r1, [r8]
   1336e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13372:	f7ff ba96 	b.w	128a2 <_vfiprintf_r+0xe6>
   13376:	2302      	movs	r3, #2
   13378:	aa11      	add	r2, sp, #68	; 0x44
   1337a:	931c      	str	r3, [sp, #112]	; 0x70
   1337c:	921b      	str	r2, [sp, #108]	; 0x6c
   1337e:	2001      	movs	r0, #1
   13380:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13384:	e6a2      	b.n	130cc <_vfiprintf_r+0x910>
   13386:	9603      	str	r6, [sp, #12]
   13388:	e571      	b.n	12e6e <_vfiprintf_r+0x6b2>
   1338a:	4b3b      	ldr	r3, [pc, #236]	; (13478 <_vfiprintf_r+0xcbc>)
   1338c:	930c      	str	r3, [sp, #48]	; 0x30
   1338e:	f016 0220 	ands.w	r2, r6, #32
   13392:	d059      	beq.n	13448 <_vfiprintf_r+0xc8c>
   13394:	9b07      	ldr	r3, [sp, #28]
   13396:	3307      	adds	r3, #7
   13398:	f023 0307 	bic.w	r3, r3, #7
   1339c:	4618      	mov	r0, r3
   1339e:	685a      	ldr	r2, [r3, #4]
   133a0:	f850 3b08 	ldr.w	r3, [r0], #8
   133a4:	9007      	str	r0, [sp, #28]
   133a6:	07f4      	lsls	r4, r6, #31
   133a8:	d509      	bpl.n	133be <_vfiprintf_r+0xc02>
   133aa:	ea53 0002 	orrs.w	r0, r3, r2
   133ae:	d006      	beq.n	133be <_vfiprintf_r+0xc02>
   133b0:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   133b4:	2130      	movs	r1, #48	; 0x30
   133b6:	f046 0602 	orr.w	r6, r6, #2
   133ba:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   133be:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   133c2:	9103      	str	r1, [sp, #12]
   133c4:	2102      	movs	r1, #2
   133c6:	f7ff bb70 	b.w	12aaa <_vfiprintf_r+0x2ee>
   133ca:	4b2c      	ldr	r3, [pc, #176]	; (1347c <_vfiprintf_r+0xcc0>)
   133cc:	930c      	str	r3, [sp, #48]	; 0x30
   133ce:	e7de      	b.n	1338e <_vfiprintf_r+0xbd2>
   133d0:	9b07      	ldr	r3, [sp, #28]
   133d2:	2101      	movs	r1, #1
   133d4:	f853 2b04 	ldr.w	r2, [r3], #4
   133d8:	9103      	str	r1, [sp, #12]
   133da:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   133de:	9307      	str	r3, [sp, #28]
   133e0:	9104      	str	r1, [sp, #16]
   133e2:	ac2b      	add	r4, sp, #172	; 0xac
   133e4:	e4df      	b.n	12da6 <_vfiprintf_r+0x5ea>
   133e6:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   133ea:	2a00      	cmp	r2, #0
   133ec:	f040 8132 	bne.w	13654 <_vfiprintf_r+0xe98>
   133f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   133f2:	2a00      	cmp	r2, #0
   133f4:	f47f ae62 	bne.w	130bc <_vfiprintf_r+0x900>
   133f8:	4618      	mov	r0, r3
   133fa:	2101      	movs	r1, #1
   133fc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13400:	e427      	b.n	12c52 <_vfiprintf_r+0x496>
   13402:	2100      	movs	r1, #0
   13404:	2208      	movs	r2, #8
   13406:	a816      	add	r0, sp, #88	; 0x58
   13408:	9413      	str	r4, [sp, #76]	; 0x4c
   1340a:	f7fb f8c9 	bl	e5a0 <memset>
   1340e:	1c79      	adds	r1, r7, #1
   13410:	f000 80bc 	beq.w	1358c <_vfiprintf_r+0xdd0>
   13414:	2500      	movs	r5, #0
   13416:	9407      	str	r4, [sp, #28]
   13418:	462c      	mov	r4, r5
   1341a:	e00c      	b.n	13436 <_vfiprintf_r+0xc7a>
   1341c:	a92b      	add	r1, sp, #172	; 0xac
   1341e:	4658      	mov	r0, fp
   13420:	f7fe f928 	bl	11674 <_wcrtomb_r>
   13424:	1c42      	adds	r2, r0, #1
   13426:	4420      	add	r0, r4
   13428:	f000 816b 	beq.w	13702 <_vfiprintf_r+0xf46>
   1342c:	42b8      	cmp	r0, r7
   1342e:	dc08      	bgt.n	13442 <_vfiprintf_r+0xc86>
   13430:	f000 8170 	beq.w	13714 <_vfiprintf_r+0xf58>
   13434:	4604      	mov	r4, r0
   13436:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13438:	5952      	ldr	r2, [r2, r5]
   1343a:	ab16      	add	r3, sp, #88	; 0x58
   1343c:	3504      	adds	r5, #4
   1343e:	2a00      	cmp	r2, #0
   13440:	d1ec      	bne.n	1341c <_vfiprintf_r+0xc60>
   13442:	9404      	str	r4, [sp, #16]
   13444:	9c07      	ldr	r4, [sp, #28]
   13446:	e0af      	b.n	135a8 <_vfiprintf_r+0xdec>
   13448:	f016 0310 	ands.w	r3, r6, #16
   1344c:	9807      	ldr	r0, [sp, #28]
   1344e:	d10c      	bne.n	1346a <_vfiprintf_r+0xcae>
   13450:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13454:	d005      	beq.n	13462 <_vfiprintf_r+0xca6>
   13456:	461a      	mov	r2, r3
   13458:	f850 3b04 	ldr.w	r3, [r0], #4
   1345c:	9007      	str	r0, [sp, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	e7a1      	b.n	133a6 <_vfiprintf_r+0xbea>
   13462:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13466:	f040 80e1 	bne.w	1362c <_vfiprintf_r+0xe70>
   1346a:	f850 3b04 	ldr.w	r3, [r0], #4
   1346e:	9007      	str	r0, [sp, #28]
   13470:	e799      	b.n	133a6 <_vfiprintf_r+0xbea>
   13472:	bf00      	nop
   13474:	20002668 	.word	0x20002668
   13478:	20002624 	.word	0x20002624
   1347c:	20002638 	.word	0x20002638
   13480:	9903      	ldr	r1, [sp, #12]
   13482:	9704      	str	r7, [sp, #16]
   13484:	ac44      	add	r4, sp, #272	; 0x110
   13486:	469e      	mov	lr, r3
   13488:	ee08 ba90 	vmov	s17, fp
   1348c:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13490:	f04f 0c00 	mov.w	ip, #0
   13494:	4623      	mov	r3, r4
   13496:	e006      	b.n	134a6 <_vfiprintf_r+0xcea>
   13498:	f1be 0f0a 	cmp.w	lr, #10
   1349c:	f172 0200 	sbcs.w	r2, r2, #0
   134a0:	d339      	bcc.n	13516 <_vfiprintf_r+0xd5a>
   134a2:	46a6      	mov	lr, r4
   134a4:	462a      	mov	r2, r5
   134a6:	49a6      	ldr	r1, [pc, #664]	; (13740 <_vfiprintf_r+0xf84>)
   134a8:	eb1e 0002 	adds.w	r0, lr, r2
   134ac:	f140 0000 	adc.w	r0, r0, #0
   134b0:	460f      	mov	r7, r1
   134b2:	fba1 1400 	umull	r1, r4, r1, r0
   134b6:	f024 0103 	bic.w	r1, r4, #3
   134ba:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   134be:	1a40      	subs	r0, r0, r1
   134c0:	ebbe 0100 	subs.w	r1, lr, r0
   134c4:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   134c8:	f162 0400 	sbc.w	r4, r2, #0
   134cc:	fb05 f501 	mul.w	r5, r5, r1
   134d0:	fb07 5504 	mla	r5, r7, r4, r5
   134d4:	fba1 4107 	umull	r4, r1, r1, r7
   134d8:	440d      	add	r5, r1
   134da:	2705      	movs	r7, #5
   134dc:	f004 0101 	and.w	r1, r4, #1
   134e0:	fba1 1b07 	umull	r1, fp, r1, r7
   134e4:	1809      	adds	r1, r1, r0
   134e6:	0864      	lsrs	r4, r4, #1
   134e8:	3130      	adds	r1, #48	; 0x30
   134ea:	f803 1c01 	strb.w	r1, [r3, #-1]
   134ee:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   134f2:	f10c 0c01 	add.w	ip, ip, #1
   134f6:	3b01      	subs	r3, #1
   134f8:	086d      	lsrs	r5, r5, #1
   134fa:	2e00      	cmp	r6, #0
   134fc:	d0cc      	beq.n	13498 <_vfiprintf_r+0xcdc>
   134fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13500:	7809      	ldrb	r1, [r1, #0]
   13502:	4561      	cmp	r1, ip
   13504:	d1c8      	bne.n	13498 <_vfiprintf_r+0xcdc>
   13506:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1350a:	d0c5      	beq.n	13498 <_vfiprintf_r+0xcdc>
   1350c:	f1be 0f0a 	cmp.w	lr, #10
   13510:	f172 0200 	sbcs.w	r2, r2, #0
   13514:	d26c      	bcs.n	135f0 <_vfiprintf_r+0xe34>
   13516:	461c      	mov	r4, r3
   13518:	ab44      	add	r3, sp, #272	; 0x110
   1351a:	1b1b      	subs	r3, r3, r4
   1351c:	9f04      	ldr	r7, [sp, #16]
   1351e:	9e03      	ldr	r6, [sp, #12]
   13520:	9304      	str	r3, [sp, #16]
   13522:	ee18 ba90 	vmov	fp, s17
   13526:	f7ff ba72 	b.w	12a0e <_vfiprintf_r+0x252>
   1352a:	9603      	str	r6, [sp, #12]
   1352c:	f7ff ba62 	b.w	129f4 <_vfiprintf_r+0x238>
   13530:	4658      	mov	r0, fp
   13532:	f7fa ff07 	bl	e344 <__sinit>
   13536:	f7ff b95b 	b.w	127f0 <_vfiprintf_r+0x34>
   1353a:	2901      	cmp	r1, #1
   1353c:	9603      	str	r6, [sp, #12]
   1353e:	f47f accd 	bne.w	12edc <_vfiprintf_r+0x720>
   13542:	f7ff ba5c 	b.w	129fe <_vfiprintf_r+0x242>
   13546:	9b07      	ldr	r3, [sp, #28]
   13548:	9905      	ldr	r1, [sp, #20]
   1354a:	f853 2b04 	ldr.w	r2, [r3], #4
   1354e:	6011      	str	r1, [r2, #0]
   13550:	9307      	str	r3, [sp, #28]
   13552:	f7ff b97e 	b.w	12852 <_vfiprintf_r+0x96>
   13556:	2f06      	cmp	r7, #6
   13558:	463b      	mov	r3, r7
   1355a:	9a03      	ldr	r2, [sp, #12]
   1355c:	4c79      	ldr	r4, [pc, #484]	; (13744 <_vfiprintf_r+0xf88>)
   1355e:	9207      	str	r2, [sp, #28]
   13560:	bf28      	it	cs
   13562:	2306      	movcs	r3, #6
   13564:	9304      	str	r3, [sp, #16]
   13566:	9303      	str	r3, [sp, #12]
   13568:	f7ff bb25 	b.w	12bb6 <_vfiprintf_r+0x3fa>
   1356c:	9b03      	ldr	r3, [sp, #12]
   1356e:	9907      	ldr	r1, [sp, #28]
   13570:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13574:	bf14      	ite	ne
   13576:	f851 3b04 	ldrne.w	r3, [r1], #4
   1357a:	f851 3b04 	ldreq.w	r3, [r1], #4
   1357e:	9107      	str	r1, [sp, #28]
   13580:	bf1c      	itt	ne
   13582:	4602      	movne	r2, r0
   13584:	b2db      	uxtbne	r3, r3
   13586:	2101      	movs	r1, #1
   13588:	f7ff ba8f 	b.w	12aaa <_vfiprintf_r+0x2ee>
   1358c:	ab16      	add	r3, sp, #88	; 0x58
   1358e:	9300      	str	r3, [sp, #0]
   13590:	2300      	movs	r3, #0
   13592:	4619      	mov	r1, r3
   13594:	aa13      	add	r2, sp, #76	; 0x4c
   13596:	4658      	mov	r0, fp
   13598:	f7fe f892 	bl	116c0 <_wcsrtombs_r>
   1359c:	4603      	mov	r3, r0
   1359e:	3301      	adds	r3, #1
   135a0:	9004      	str	r0, [sp, #16]
   135a2:	f000 80ae 	beq.w	13702 <_vfiprintf_r+0xf46>
   135a6:	9413      	str	r4, [sp, #76]	; 0x4c
   135a8:	9b04      	ldr	r3, [sp, #16]
   135aa:	2b00      	cmp	r3, #0
   135ac:	d030      	beq.n	13610 <_vfiprintf_r+0xe54>
   135ae:	2b63      	cmp	r3, #99	; 0x63
   135b0:	dc63      	bgt.n	1367a <_vfiprintf_r+0xebe>
   135b2:	2300      	movs	r3, #0
   135b4:	9308      	str	r3, [sp, #32]
   135b6:	ac2b      	add	r4, sp, #172	; 0xac
   135b8:	2208      	movs	r2, #8
   135ba:	2100      	movs	r1, #0
   135bc:	a816      	add	r0, sp, #88	; 0x58
   135be:	f7fa ffef 	bl	e5a0 <memset>
   135c2:	9d04      	ldr	r5, [sp, #16]
   135c4:	ab16      	add	r3, sp, #88	; 0x58
   135c6:	9300      	str	r3, [sp, #0]
   135c8:	aa13      	add	r2, sp, #76	; 0x4c
   135ca:	462b      	mov	r3, r5
   135cc:	4621      	mov	r1, r4
   135ce:	4658      	mov	r0, fp
   135d0:	f7fe f876 	bl	116c0 <_wcsrtombs_r>
   135d4:	4285      	cmp	r5, r0
   135d6:	f040 80ab 	bne.w	13730 <_vfiprintf_r+0xf74>
   135da:	9b03      	ldr	r3, [sp, #12]
   135dc:	9a04      	ldr	r2, [sp, #16]
   135de:	9307      	str	r3, [sp, #28]
   135e0:	2300      	movs	r3, #0
   135e2:	54a3      	strb	r3, [r4, r2]
   135e4:	461f      	mov	r7, r3
   135e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   135ea:	9303      	str	r3, [sp, #12]
   135ec:	f7ff ba16 	b.w	12a1c <_vfiprintf_r+0x260>
   135f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   135f2:	990d      	ldr	r1, [sp, #52]	; 0x34
   135f4:	1a9b      	subs	r3, r3, r2
   135f6:	4618      	mov	r0, r3
   135f8:	9308      	str	r3, [sp, #32]
   135fa:	f7fb f869 	bl	e6d0 <strncpy>
   135fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13600:	9b08      	ldr	r3, [sp, #32]
   13602:	784a      	ldrb	r2, [r1, #1]
   13604:	b10a      	cbz	r2, 1360a <_vfiprintf_r+0xe4e>
   13606:	3101      	adds	r1, #1
   13608:	910b      	str	r1, [sp, #44]	; 0x2c
   1360a:	f04f 0c00 	mov.w	ip, #0
   1360e:	e748      	b.n	134a2 <_vfiprintf_r+0xce6>
   13610:	9b03      	ldr	r3, [sp, #12]
   13612:	9307      	str	r3, [sp, #28]
   13614:	9b04      	ldr	r3, [sp, #16]
   13616:	9303      	str	r3, [sp, #12]
   13618:	461f      	mov	r7, r3
   1361a:	9308      	str	r3, [sp, #32]
   1361c:	f7ff b9fe 	b.w	12a1c <_vfiprintf_r+0x260>
   13620:	2101      	movs	r1, #1
   13622:	4618      	mov	r0, r3
   13624:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13628:	f7ff bb13 	b.w	12c52 <_vfiprintf_r+0x496>
   1362c:	f850 3b04 	ldr.w	r3, [r0], #4
   13630:	9007      	str	r0, [sp, #28]
   13632:	4622      	mov	r2, r4
   13634:	b2db      	uxtb	r3, r3
   13636:	e6b6      	b.n	133a6 <_vfiprintf_r+0xbea>
   13638:	f912 3b04 	ldrsb.w	r3, [r2], #4
   1363c:	9207      	str	r2, [sp, #28]
   1363e:	17da      	asrs	r2, r3, #31
   13640:	4611      	mov	r1, r2
   13642:	f7ff b9ca 	b.w	129da <_vfiprintf_r+0x21e>
   13646:	f851 3b04 	ldr.w	r3, [r1], #4
   1364a:	9107      	str	r1, [sp, #28]
   1364c:	4602      	mov	r2, r0
   1364e:	b2db      	uxtb	r3, r3
   13650:	f7ff ba27 	b.w	12aa2 <_vfiprintf_r+0x2e6>
   13654:	2301      	movs	r3, #1
   13656:	931c      	str	r3, [sp, #112]	; 0x70
   13658:	2101      	movs	r1, #1
   1365a:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   1365e:	931b      	str	r3, [sp, #108]	; 0x6c
   13660:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13664:	460b      	mov	r3, r1
   13666:	f7ff bacd 	b.w	12c04 <_vfiprintf_r+0x448>
   1366a:	9b07      	ldr	r3, [sp, #28]
   1366c:	9905      	ldr	r1, [sp, #20]
   1366e:	f853 2b04 	ldr.w	r2, [r3], #4
   13672:	9307      	str	r3, [sp, #28]
   13674:	8011      	strh	r1, [r2, #0]
   13676:	f7ff b8ec 	b.w	12852 <_vfiprintf_r+0x96>
   1367a:	1c59      	adds	r1, r3, #1
   1367c:	4658      	mov	r0, fp
   1367e:	f7fa f923 	bl	d8c8 <_malloc_r>
   13682:	4604      	mov	r4, r0
   13684:	2800      	cmp	r0, #0
   13686:	d03c      	beq.n	13702 <_vfiprintf_r+0xf46>
   13688:	9008      	str	r0, [sp, #32]
   1368a:	e795      	b.n	135b8 <_vfiprintf_r+0xdfc>
   1368c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1368e:	f7fb fa5f 	bl	eb50 <__retarget_lock_release_recursive>
   13692:	f7ff b9e9 	b.w	12a68 <_vfiprintf_r+0x2ac>
   13696:	9b03      	ldr	r3, [sp, #12]
   13698:	9307      	str	r3, [sp, #28]
   1369a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1369e:	9f08      	ldr	r7, [sp, #32]
   136a0:	f7ff b9bc 	b.w	12a1c <_vfiprintf_r+0x260>
   136a4:	9819      	ldr	r0, [sp, #100]	; 0x64
   136a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   136a8:	3001      	adds	r0, #1
   136aa:	e545      	b.n	13138 <_vfiprintf_r+0x97c>
   136ac:	9b03      	ldr	r3, [sp, #12]
   136ae:	9307      	str	r3, [sp, #28]
   136b0:	4620      	mov	r0, r4
   136b2:	f7fb faa5 	bl	ec00 <strlen>
   136b6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   136ba:	462f      	mov	r7, r5
   136bc:	9004      	str	r0, [sp, #16]
   136be:	9303      	str	r3, [sp, #12]
   136c0:	9508      	str	r5, [sp, #32]
   136c2:	f7ff b9ab 	b.w	12a1c <_vfiprintf_r+0x260>
   136c6:	ee18 1a10 	vmov	r1, s16
   136ca:	aa18      	add	r2, sp, #96	; 0x60
   136cc:	4658      	mov	r0, fp
   136ce:	f7ff f839 	bl	12744 <__sprint_r.part.0>
   136d2:	2800      	cmp	r0, #0
   136d4:	f43f aa36 	beq.w	12b44 <_vfiprintf_r+0x388>
   136d8:	f7ff ba4d 	b.w	12b76 <_vfiprintf_r+0x3ba>
   136dc:	9819      	ldr	r0, [sp, #100]	; 0x64
   136de:	3001      	adds	r0, #1
   136e0:	e57a      	b.n	131d8 <_vfiprintf_r+0xa1c>
   136e2:	468c      	mov	ip, r1
   136e4:	e46e      	b.n	12fc4 <_vfiprintf_r+0x808>
   136e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   136e8:	07d9      	lsls	r1, r3, #31
   136ea:	d405      	bmi.n	136f8 <_vfiprintf_r+0xf3c>
   136ec:	89ab      	ldrh	r3, [r5, #12]
   136ee:	059a      	lsls	r2, r3, #22
   136f0:	d402      	bmi.n	136f8 <_vfiprintf_r+0xf3c>
   136f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   136f4:	f7fb fa2c 	bl	eb50 <__retarget_lock_release_recursive>
   136f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136fc:	9305      	str	r3, [sp, #20]
   136fe:	f7ff ba49 	b.w	12b94 <_vfiprintf_r+0x3d8>
   13702:	ee18 2a10 	vmov	r2, s16
   13706:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1370a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1370e:	8193      	strh	r3, [r2, #12]
   13710:	f7ff ba35 	b.w	12b7e <_vfiprintf_r+0x3c2>
   13714:	9c07      	ldr	r4, [sp, #28]
   13716:	9704      	str	r7, [sp, #16]
   13718:	e746      	b.n	135a8 <_vfiprintf_r+0xdec>
   1371a:	9b07      	ldr	r3, [sp, #28]
   1371c:	f898 1001 	ldrb.w	r1, [r8, #1]
   13720:	f853 7b04 	ldr.w	r7, [r3], #4
   13724:	9307      	str	r3, [sp, #28]
   13726:	4690      	mov	r8, r2
   13728:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   1372c:	f7ff b8b9 	b.w	128a2 <_vfiprintf_r+0xe6>
   13730:	ee18 2a10 	vmov	r2, s16
   13734:	8993      	ldrh	r3, [r2, #12]
   13736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1373a:	8193      	strh	r3, [r2, #12]
   1373c:	f7ff ba15 	b.w	12b6a <_vfiprintf_r+0x3ae>
   13740:	cccccccd 	.word	0xcccccccd
   13744:	2000264c 	.word	0x2000264c

00013748 <__sbprintf>:
   13748:	b570      	push	{r4, r5, r6, lr}
   1374a:	460c      	mov	r4, r1
   1374c:	8989      	ldrh	r1, [r1, #12]
   1374e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13752:	f021 0102 	bic.w	r1, r1, #2
   13756:	f8ad 1014 	strh.w	r1, [sp, #20]
   1375a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1375c:	911b      	str	r1, [sp, #108]	; 0x6c
   1375e:	89e1      	ldrh	r1, [r4, #14]
   13760:	f8ad 1016 	strh.w	r1, [sp, #22]
   13764:	69e1      	ldr	r1, [r4, #28]
   13766:	9109      	str	r1, [sp, #36]	; 0x24
   13768:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1376a:	910b      	str	r1, [sp, #44]	; 0x2c
   1376c:	a91c      	add	r1, sp, #112	; 0x70
   1376e:	9102      	str	r1, [sp, #8]
   13770:	9106      	str	r1, [sp, #24]
   13772:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13776:	4606      	mov	r6, r0
   13778:	9104      	str	r1, [sp, #16]
   1377a:	9107      	str	r1, [sp, #28]
   1377c:	a818      	add	r0, sp, #96	; 0x60
   1377e:	2100      	movs	r1, #0
   13780:	e9cd 3200 	strd	r3, r2, [sp]
   13784:	9108      	str	r1, [sp, #32]
   13786:	f7fb f9dd 	bl	eb44 <__retarget_lock_init_recursive>
   1378a:	e9dd 3200 	ldrd	r3, r2, [sp]
   1378e:	a902      	add	r1, sp, #8
   13790:	4630      	mov	r0, r6
   13792:	f7ff f813 	bl	127bc <_vfiprintf_r>
   13796:	1e05      	subs	r5, r0, #0
   13798:	db07      	blt.n	137aa <__sbprintf+0x62>
   1379a:	a902      	add	r1, sp, #8
   1379c:	4630      	mov	r0, r6
   1379e:	f7fd fea9 	bl	114f4 <_fflush_r>
   137a2:	2800      	cmp	r0, #0
   137a4:	bf18      	it	ne
   137a6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   137aa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   137ae:	065b      	lsls	r3, r3, #25
   137b0:	d503      	bpl.n	137ba <__sbprintf+0x72>
   137b2:	89a3      	ldrh	r3, [r4, #12]
   137b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   137b8:	81a3      	strh	r3, [r4, #12]
   137ba:	9818      	ldr	r0, [sp, #96]	; 0x60
   137bc:	f7fb f9c4 	bl	eb48 <__retarget_lock_close_recursive>
   137c0:	4628      	mov	r0, r5
   137c2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   137c6:	bd70      	pop	{r4, r5, r6, pc}

000137c8 <__sfvwrite_r>:
   137c8:	6893      	ldr	r3, [r2, #8]
   137ca:	2b00      	cmp	r3, #0
   137cc:	f000 8085 	beq.w	138da <__sfvwrite_r+0x112>
   137d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137d4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   137d8:	460c      	mov	r4, r1
   137da:	0719      	lsls	r1, r3, #28
   137dc:	4680      	mov	r8, r0
   137de:	b083      	sub	sp, #12
   137e0:	4617      	mov	r7, r2
   137e2:	b298      	uxth	r0, r3
   137e4:	d525      	bpl.n	13832 <__sfvwrite_r+0x6a>
   137e6:	6923      	ldr	r3, [r4, #16]
   137e8:	b31b      	cbz	r3, 13832 <__sfvwrite_r+0x6a>
   137ea:	f010 0302 	ands.w	r3, r0, #2
   137ee:	683d      	ldr	r5, [r7, #0]
   137f0:	d02d      	beq.n	1384e <__sfvwrite_r+0x86>
   137f2:	f04f 0a00 	mov.w	sl, #0
   137f6:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13ab8 <__sfvwrite_r+0x2f0>
   137fa:	4656      	mov	r6, sl
   137fc:	46b9      	mov	r9, r7
   137fe:	455e      	cmp	r6, fp
   13800:	4633      	mov	r3, r6
   13802:	4652      	mov	r2, sl
   13804:	bf28      	it	cs
   13806:	465b      	movcs	r3, fp
   13808:	4640      	mov	r0, r8
   1380a:	2e00      	cmp	r6, #0
   1380c:	d052      	beq.n	138b4 <__sfvwrite_r+0xec>
   1380e:	69e1      	ldr	r1, [r4, #28]
   13810:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13812:	47b8      	blx	r7
   13814:	2800      	cmp	r0, #0
   13816:	dd56      	ble.n	138c6 <__sfvwrite_r+0xfe>
   13818:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1381c:	1a1b      	subs	r3, r3, r0
   1381e:	4482      	add	sl, r0
   13820:	1a36      	subs	r6, r6, r0
   13822:	f8c9 3008 	str.w	r3, [r9, #8]
   13826:	2b00      	cmp	r3, #0
   13828:	d1e9      	bne.n	137fe <__sfvwrite_r+0x36>
   1382a:	2000      	movs	r0, #0
   1382c:	b003      	add	sp, #12
   1382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13832:	4621      	mov	r1, r4
   13834:	4640      	mov	r0, r8
   13836:	f000 f941 	bl	13abc <__swsetup_r>
   1383a:	2800      	cmp	r0, #0
   1383c:	f040 8138 	bne.w	13ab0 <__sfvwrite_r+0x2e8>
   13840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13844:	683d      	ldr	r5, [r7, #0]
   13846:	b298      	uxth	r0, r3
   13848:	f010 0302 	ands.w	r3, r0, #2
   1384c:	d1d1      	bne.n	137f2 <__sfvwrite_r+0x2a>
   1384e:	f010 0901 	ands.w	r9, r0, #1
   13852:	d144      	bne.n	138de <__sfvwrite_r+0x116>
   13854:	464e      	mov	r6, r9
   13856:	9700      	str	r7, [sp, #0]
   13858:	b346      	cbz	r6, 138ac <__sfvwrite_r+0xe4>
   1385a:	0582      	lsls	r2, r0, #22
   1385c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   13860:	f140 8085 	bpl.w	1396e <__sfvwrite_r+0x1a6>
   13864:	45b3      	cmp	fp, r6
   13866:	465a      	mov	r2, fp
   13868:	f200 80b4 	bhi.w	139d4 <__sfvwrite_r+0x20c>
   1386c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13870:	f040 80c1 	bne.w	139f6 <__sfvwrite_r+0x22e>
   13874:	6820      	ldr	r0, [r4, #0]
   13876:	9201      	str	r2, [sp, #4]
   13878:	4649      	mov	r1, r9
   1387a:	f7fa fe15 	bl	e4a8 <memmove>
   1387e:	68a3      	ldr	r3, [r4, #8]
   13880:	9a01      	ldr	r2, [sp, #4]
   13882:	eba3 010b 	sub.w	r1, r3, fp
   13886:	6823      	ldr	r3, [r4, #0]
   13888:	60a1      	str	r1, [r4, #8]
   1388a:	4413      	add	r3, r2
   1388c:	46b2      	mov	sl, r6
   1388e:	6023      	str	r3, [r4, #0]
   13890:	2600      	movs	r6, #0
   13892:	9a00      	ldr	r2, [sp, #0]
   13894:	6893      	ldr	r3, [r2, #8]
   13896:	eba3 030a 	sub.w	r3, r3, sl
   1389a:	44d1      	add	r9, sl
   1389c:	6093      	str	r3, [r2, #8]
   1389e:	2b00      	cmp	r3, #0
   138a0:	d0c3      	beq.n	1382a <__sfvwrite_r+0x62>
   138a2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   138a6:	b280      	uxth	r0, r0
   138a8:	2e00      	cmp	r6, #0
   138aa:	d1d6      	bne.n	1385a <__sfvwrite_r+0x92>
   138ac:	e9d5 9600 	ldrd	r9, r6, [r5]
   138b0:	3508      	adds	r5, #8
   138b2:	e7d1      	b.n	13858 <__sfvwrite_r+0x90>
   138b4:	e9d5 a600 	ldrd	sl, r6, [r5]
   138b8:	3508      	adds	r5, #8
   138ba:	e7a0      	b.n	137fe <__sfvwrite_r+0x36>
   138bc:	4621      	mov	r1, r4
   138be:	4640      	mov	r0, r8
   138c0:	f7fd fe18 	bl	114f4 <_fflush_r>
   138c4:	b388      	cbz	r0, 1392a <__sfvwrite_r+0x162>
   138c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   138ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   138d2:	81a3      	strh	r3, [r4, #12]
   138d4:	b003      	add	sp, #12
   138d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138da:	2000      	movs	r0, #0
   138dc:	4770      	bx	lr
   138de:	461e      	mov	r6, r3
   138e0:	46ba      	mov	sl, r7
   138e2:	4699      	mov	r9, r3
   138e4:	4618      	mov	r0, r3
   138e6:	9500      	str	r5, [sp, #0]
   138e8:	461f      	mov	r7, r3
   138ea:	b366      	cbz	r6, 13946 <__sfvwrite_r+0x17e>
   138ec:	2800      	cmp	r0, #0
   138ee:	d032      	beq.n	13956 <__sfvwrite_r+0x18e>
   138f0:	464a      	mov	r2, r9
   138f2:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   138f6:	6820      	ldr	r0, [r4, #0]
   138f8:	68a5      	ldr	r5, [r4, #8]
   138fa:	42b2      	cmp	r2, r6
   138fc:	bf28      	it	cs
   138fe:	4632      	movcs	r2, r6
   13900:	4288      	cmp	r0, r1
   13902:	d904      	bls.n	1390e <__sfvwrite_r+0x146>
   13904:	eb05 0b03 	add.w	fp, r5, r3
   13908:	455a      	cmp	r2, fp
   1390a:	f300 80a7 	bgt.w	13a5c <__sfvwrite_r+0x294>
   1390e:	4293      	cmp	r3, r2
   13910:	dc64      	bgt.n	139dc <__sfvwrite_r+0x214>
   13912:	69e1      	ldr	r1, [r4, #28]
   13914:	6a65      	ldr	r5, [r4, #36]	; 0x24
   13916:	463a      	mov	r2, r7
   13918:	4640      	mov	r0, r8
   1391a:	47a8      	blx	r5
   1391c:	f1b0 0b00 	subs.w	fp, r0, #0
   13920:	ddd1      	ble.n	138c6 <__sfvwrite_r+0xfe>
   13922:	ebb9 090b 	subs.w	r9, r9, fp
   13926:	d0c9      	beq.n	138bc <__sfvwrite_r+0xf4>
   13928:	2001      	movs	r0, #1
   1392a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1392e:	eba3 030b 	sub.w	r3, r3, fp
   13932:	445f      	add	r7, fp
   13934:	eba6 060b 	sub.w	r6, r6, fp
   13938:	f8ca 3008 	str.w	r3, [sl, #8]
   1393c:	2b00      	cmp	r3, #0
   1393e:	f43f af74 	beq.w	1382a <__sfvwrite_r+0x62>
   13942:	2e00      	cmp	r6, #0
   13944:	d1d2      	bne.n	138ec <__sfvwrite_r+0x124>
   13946:	9a00      	ldr	r2, [sp, #0]
   13948:	6856      	ldr	r6, [r2, #4]
   1394a:	4613      	mov	r3, r2
   1394c:	3208      	adds	r2, #8
   1394e:	9200      	str	r2, [sp, #0]
   13950:	2e00      	cmp	r6, #0
   13952:	d0f8      	beq.n	13946 <__sfvwrite_r+0x17e>
   13954:	681f      	ldr	r7, [r3, #0]
   13956:	4632      	mov	r2, r6
   13958:	210a      	movs	r1, #10
   1395a:	4638      	mov	r0, r7
   1395c:	f7fb f900 	bl	eb60 <memchr>
   13960:	2800      	cmp	r0, #0
   13962:	f000 809c 	beq.w	13a9e <__sfvwrite_r+0x2d6>
   13966:	3001      	adds	r0, #1
   13968:	eba0 0907 	sub.w	r9, r0, r7
   1396c:	e7c0      	b.n	138f0 <__sfvwrite_r+0x128>
   1396e:	6820      	ldr	r0, [r4, #0]
   13970:	6923      	ldr	r3, [r4, #16]
   13972:	4298      	cmp	r0, r3
   13974:	d816      	bhi.n	139a4 <__sfvwrite_r+0x1dc>
   13976:	6962      	ldr	r2, [r4, #20]
   13978:	42b2      	cmp	r2, r6
   1397a:	d813      	bhi.n	139a4 <__sfvwrite_r+0x1dc>
   1397c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13980:	42b3      	cmp	r3, r6
   13982:	bf28      	it	cs
   13984:	4633      	movcs	r3, r6
   13986:	69e1      	ldr	r1, [r4, #28]
   13988:	fb93 f3f2 	sdiv	r3, r3, r2
   1398c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1398e:	fb02 f303 	mul.w	r3, r2, r3
   13992:	4640      	mov	r0, r8
   13994:	464a      	mov	r2, r9
   13996:	47b8      	blx	r7
   13998:	f1b0 0a00 	subs.w	sl, r0, #0
   1399c:	dd93      	ble.n	138c6 <__sfvwrite_r+0xfe>
   1399e:	eba6 060a 	sub.w	r6, r6, sl
   139a2:	e776      	b.n	13892 <__sfvwrite_r+0xca>
   139a4:	45b3      	cmp	fp, r6
   139a6:	46da      	mov	sl, fp
   139a8:	bf28      	it	cs
   139aa:	46b2      	movcs	sl, r6
   139ac:	4652      	mov	r2, sl
   139ae:	4649      	mov	r1, r9
   139b0:	f7fa fd7a 	bl	e4a8 <memmove>
   139b4:	68a3      	ldr	r3, [r4, #8]
   139b6:	6822      	ldr	r2, [r4, #0]
   139b8:	eba3 030a 	sub.w	r3, r3, sl
   139bc:	4452      	add	r2, sl
   139be:	60a3      	str	r3, [r4, #8]
   139c0:	6022      	str	r2, [r4, #0]
   139c2:	2b00      	cmp	r3, #0
   139c4:	d1eb      	bne.n	1399e <__sfvwrite_r+0x1d6>
   139c6:	4621      	mov	r1, r4
   139c8:	4640      	mov	r0, r8
   139ca:	f7fd fd93 	bl	114f4 <_fflush_r>
   139ce:	2800      	cmp	r0, #0
   139d0:	d0e5      	beq.n	1399e <__sfvwrite_r+0x1d6>
   139d2:	e778      	b.n	138c6 <__sfvwrite_r+0xfe>
   139d4:	6820      	ldr	r0, [r4, #0]
   139d6:	46b3      	mov	fp, r6
   139d8:	4632      	mov	r2, r6
   139da:	e74c      	b.n	13876 <__sfvwrite_r+0xae>
   139dc:	4639      	mov	r1, r7
   139de:	9201      	str	r2, [sp, #4]
   139e0:	f7fa fd62 	bl	e4a8 <memmove>
   139e4:	9a01      	ldr	r2, [sp, #4]
   139e6:	68a3      	ldr	r3, [r4, #8]
   139e8:	1a9b      	subs	r3, r3, r2
   139ea:	60a3      	str	r3, [r4, #8]
   139ec:	6823      	ldr	r3, [r4, #0]
   139ee:	4413      	add	r3, r2
   139f0:	6023      	str	r3, [r4, #0]
   139f2:	4693      	mov	fp, r2
   139f4:	e795      	b.n	13922 <__sfvwrite_r+0x15a>
   139f6:	6823      	ldr	r3, [r4, #0]
   139f8:	6921      	ldr	r1, [r4, #16]
   139fa:	eba3 0b01 	sub.w	fp, r3, r1
   139fe:	6963      	ldr	r3, [r4, #20]
   13a00:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13a04:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13a08:	f10b 0301 	add.w	r3, fp, #1
   13a0c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13a10:	4433      	add	r3, r6
   13a12:	4553      	cmp	r3, sl
   13a14:	4652      	mov	r2, sl
   13a16:	bf84      	itt	hi
   13a18:	469a      	movhi	sl, r3
   13a1a:	4652      	movhi	r2, sl
   13a1c:	0543      	lsls	r3, r0, #21
   13a1e:	d52c      	bpl.n	13a7a <__sfvwrite_r+0x2b2>
   13a20:	4611      	mov	r1, r2
   13a22:	4640      	mov	r0, r8
   13a24:	f7f9 ff50 	bl	d8c8 <_malloc_r>
   13a28:	2800      	cmp	r0, #0
   13a2a:	d03b      	beq.n	13aa4 <__sfvwrite_r+0x2dc>
   13a2c:	465a      	mov	r2, fp
   13a2e:	6921      	ldr	r1, [r4, #16]
   13a30:	9001      	str	r0, [sp, #4]
   13a32:	f7f8 fa35 	bl	bea0 <memcpy>
   13a36:	89a2      	ldrh	r2, [r4, #12]
   13a38:	9b01      	ldr	r3, [sp, #4]
   13a3a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13a3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13a42:	81a2      	strh	r2, [r4, #12]
   13a44:	eb03 000b 	add.w	r0, r3, fp
   13a48:	6123      	str	r3, [r4, #16]
   13a4a:	ebaa 030b 	sub.w	r3, sl, fp
   13a4e:	f8c4 a014 	str.w	sl, [r4, #20]
   13a52:	60a3      	str	r3, [r4, #8]
   13a54:	6020      	str	r0, [r4, #0]
   13a56:	46b3      	mov	fp, r6
   13a58:	4632      	mov	r2, r6
   13a5a:	e70c      	b.n	13876 <__sfvwrite_r+0xae>
   13a5c:	4639      	mov	r1, r7
   13a5e:	465a      	mov	r2, fp
   13a60:	f7fa fd22 	bl	e4a8 <memmove>
   13a64:	6823      	ldr	r3, [r4, #0]
   13a66:	445b      	add	r3, fp
   13a68:	6023      	str	r3, [r4, #0]
   13a6a:	4621      	mov	r1, r4
   13a6c:	4640      	mov	r0, r8
   13a6e:	f7fd fd41 	bl	114f4 <_fflush_r>
   13a72:	2800      	cmp	r0, #0
   13a74:	f43f af55 	beq.w	13922 <__sfvwrite_r+0x15a>
   13a78:	e725      	b.n	138c6 <__sfvwrite_r+0xfe>
   13a7a:	4640      	mov	r0, r8
   13a7c:	f7fa f9e0 	bl	de40 <_realloc_r>
   13a80:	4603      	mov	r3, r0
   13a82:	2800      	cmp	r0, #0
   13a84:	d1de      	bne.n	13a44 <__sfvwrite_r+0x27c>
   13a86:	6921      	ldr	r1, [r4, #16]
   13a88:	4640      	mov	r0, r8
   13a8a:	f7fb f9bb 	bl	ee04 <_free_r>
   13a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a92:	220c      	movs	r2, #12
   13a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13a98:	f8c8 2000 	str.w	r2, [r8]
   13a9c:	e715      	b.n	138ca <__sfvwrite_r+0x102>
   13a9e:	1c72      	adds	r2, r6, #1
   13aa0:	4691      	mov	r9, r2
   13aa2:	e726      	b.n	138f2 <__sfvwrite_r+0x12a>
   13aa4:	220c      	movs	r2, #12
   13aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13aaa:	f8c8 2000 	str.w	r2, [r8]
   13aae:	e70c      	b.n	138ca <__sfvwrite_r+0x102>
   13ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ab4:	e6ba      	b.n	1382c <__sfvwrite_r+0x64>
   13ab6:	bf00      	nop
   13ab8:	7ffffc00 	.word	0x7ffffc00

00013abc <__swsetup_r>:
   13abc:	b538      	push	{r3, r4, r5, lr}
   13abe:	4b31      	ldr	r3, [pc, #196]	; (13b84 <__swsetup_r+0xc8>)
   13ac0:	681b      	ldr	r3, [r3, #0]
   13ac2:	4605      	mov	r5, r0
   13ac4:	460c      	mov	r4, r1
   13ac6:	b113      	cbz	r3, 13ace <__swsetup_r+0x12>
   13ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13aca:	2a00      	cmp	r2, #0
   13acc:	d04e      	beq.n	13b6c <__swsetup_r+0xb0>
   13ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ad2:	0718      	lsls	r0, r3, #28
   13ad4:	b29a      	uxth	r2, r3
   13ad6:	d51c      	bpl.n	13b12 <__swsetup_r+0x56>
   13ad8:	6921      	ldr	r1, [r4, #16]
   13ada:	b329      	cbz	r1, 13b28 <__swsetup_r+0x6c>
   13adc:	f012 0001 	ands.w	r0, r2, #1
   13ae0:	d007      	beq.n	13af2 <__swsetup_r+0x36>
   13ae2:	2000      	movs	r0, #0
   13ae4:	60a0      	str	r0, [r4, #8]
   13ae6:	6960      	ldr	r0, [r4, #20]
   13ae8:	4240      	negs	r0, r0
   13aea:	61a0      	str	r0, [r4, #24]
   13aec:	b139      	cbz	r1, 13afe <__swsetup_r+0x42>
   13aee:	2000      	movs	r0, #0
   13af0:	bd38      	pop	{r3, r4, r5, pc}
   13af2:	0795      	lsls	r5, r2, #30
   13af4:	bf58      	it	pl
   13af6:	6960      	ldrpl	r0, [r4, #20]
   13af8:	60a0      	str	r0, [r4, #8]
   13afa:	2900      	cmp	r1, #0
   13afc:	d1f7      	bne.n	13aee <__swsetup_r+0x32>
   13afe:	0612      	lsls	r2, r2, #24
   13b00:	bf58      	it	pl
   13b02:	4608      	movpl	r0, r1
   13b04:	d5f4      	bpl.n	13af0 <__swsetup_r+0x34>
   13b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b0a:	81a3      	strh	r3, [r4, #12]
   13b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b10:	bd38      	pop	{r3, r4, r5, pc}
   13b12:	06d1      	lsls	r1, r2, #27
   13b14:	d52e      	bpl.n	13b74 <__swsetup_r+0xb8>
   13b16:	0752      	lsls	r2, r2, #29
   13b18:	d414      	bmi.n	13b44 <__swsetup_r+0x88>
   13b1a:	6921      	ldr	r1, [r4, #16]
   13b1c:	f043 0308 	orr.w	r3, r3, #8
   13b20:	81a3      	strh	r3, [r4, #12]
   13b22:	b29a      	uxth	r2, r3
   13b24:	2900      	cmp	r1, #0
   13b26:	d1d9      	bne.n	13adc <__swsetup_r+0x20>
   13b28:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13b2c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13b30:	d0d4      	beq.n	13adc <__swsetup_r+0x20>
   13b32:	4621      	mov	r1, r4
   13b34:	4628      	mov	r0, r5
   13b36:	f000 f947 	bl	13dc8 <__smakebuf_r>
   13b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b3e:	6921      	ldr	r1, [r4, #16]
   13b40:	b29a      	uxth	r2, r3
   13b42:	e7cb      	b.n	13adc <__swsetup_r+0x20>
   13b44:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13b46:	b151      	cbz	r1, 13b5e <__swsetup_r+0xa2>
   13b48:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13b4c:	4291      	cmp	r1, r2
   13b4e:	d004      	beq.n	13b5a <__swsetup_r+0x9e>
   13b50:	4628      	mov	r0, r5
   13b52:	f7fb f957 	bl	ee04 <_free_r>
   13b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b5a:	2200      	movs	r2, #0
   13b5c:	6322      	str	r2, [r4, #48]	; 0x30
   13b5e:	6921      	ldr	r1, [r4, #16]
   13b60:	2200      	movs	r2, #0
   13b62:	e9c4 1200 	strd	r1, r2, [r4]
   13b66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13b6a:	e7d7      	b.n	13b1c <__swsetup_r+0x60>
   13b6c:	4618      	mov	r0, r3
   13b6e:	f7fa fbe9 	bl	e344 <__sinit>
   13b72:	e7ac      	b.n	13ace <__swsetup_r+0x12>
   13b74:	2209      	movs	r2, #9
   13b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b7a:	602a      	str	r2, [r5, #0]
   13b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b80:	81a3      	strh	r3, [r4, #12]
   13b82:	bd38      	pop	{r3, r4, r5, pc}
   13b84:	200034c0 	.word	0x200034c0

00013b88 <__fputwc>:
   13b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b8c:	b082      	sub	sp, #8
   13b8e:	4682      	mov	sl, r0
   13b90:	4688      	mov	r8, r1
   13b92:	4614      	mov	r4, r2
   13b94:	f7fa fe00 	bl	e798 <__locale_mb_cur_max>
   13b98:	2801      	cmp	r0, #1
   13b9a:	d103      	bne.n	13ba4 <__fputwc+0x1c>
   13b9c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   13ba0:	2bfe      	cmp	r3, #254	; 0xfe
   13ba2:	d936      	bls.n	13c12 <__fputwc+0x8a>
   13ba4:	f10d 0904 	add.w	r9, sp, #4
   13ba8:	4642      	mov	r2, r8
   13baa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13bae:	4649      	mov	r1, r9
   13bb0:	4650      	mov	r0, sl
   13bb2:	f7fd fd5f 	bl	11674 <_wcrtomb_r>
   13bb6:	1c42      	adds	r2, r0, #1
   13bb8:	4606      	mov	r6, r0
   13bba:	d032      	beq.n	13c22 <__fputwc+0x9a>
   13bbc:	b320      	cbz	r0, 13c08 <__fputwc+0x80>
   13bbe:	f89d c004 	ldrb.w	ip, [sp, #4]
   13bc2:	2500      	movs	r5, #0
   13bc4:	e009      	b.n	13bda <__fputwc+0x52>
   13bc6:	6823      	ldr	r3, [r4, #0]
   13bc8:	1c5a      	adds	r2, r3, #1
   13bca:	6022      	str	r2, [r4, #0]
   13bcc:	f883 c000 	strb.w	ip, [r3]
   13bd0:	3501      	adds	r5, #1
   13bd2:	42b5      	cmp	r5, r6
   13bd4:	d218      	bcs.n	13c08 <__fputwc+0x80>
   13bd6:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13bda:	68a3      	ldr	r3, [r4, #8]
   13bdc:	3b01      	subs	r3, #1
   13bde:	2b00      	cmp	r3, #0
   13be0:	60a3      	str	r3, [r4, #8]
   13be2:	daf0      	bge.n	13bc6 <__fputwc+0x3e>
   13be4:	69a7      	ldr	r7, [r4, #24]
   13be6:	42bb      	cmp	r3, r7
   13be8:	4661      	mov	r1, ip
   13bea:	4622      	mov	r2, r4
   13bec:	4650      	mov	r0, sl
   13bee:	db02      	blt.n	13bf6 <__fputwc+0x6e>
   13bf0:	f1bc 0f0a 	cmp.w	ip, #10
   13bf4:	d1e7      	bne.n	13bc6 <__fputwc+0x3e>
   13bf6:	f000 f953 	bl	13ea0 <__swbuf_r>
   13bfa:	1c43      	adds	r3, r0, #1
   13bfc:	d1e8      	bne.n	13bd0 <__fputwc+0x48>
   13bfe:	4606      	mov	r6, r0
   13c00:	4630      	mov	r0, r6
   13c02:	b002      	add	sp, #8
   13c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c08:	4646      	mov	r6, r8
   13c0a:	4630      	mov	r0, r6
   13c0c:	b002      	add	sp, #8
   13c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c12:	fa5f fc88 	uxtb.w	ip, r8
   13c16:	f88d c004 	strb.w	ip, [sp, #4]
   13c1a:	4606      	mov	r6, r0
   13c1c:	f10d 0904 	add.w	r9, sp, #4
   13c20:	e7cf      	b.n	13bc2 <__fputwc+0x3a>
   13c22:	89a3      	ldrh	r3, [r4, #12]
   13c24:	4630      	mov	r0, r6
   13c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c2a:	81a3      	strh	r3, [r4, #12]
   13c2c:	b002      	add	sp, #8
   13c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c32:	bf00      	nop

00013c34 <_fputwc_r>:
   13c34:	b530      	push	{r4, r5, lr}
   13c36:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13c38:	f013 0f01 	tst.w	r3, #1
   13c3c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13c40:	4614      	mov	r4, r2
   13c42:	b083      	sub	sp, #12
   13c44:	4605      	mov	r5, r0
   13c46:	b29a      	uxth	r2, r3
   13c48:	d101      	bne.n	13c4e <_fputwc_r+0x1a>
   13c4a:	0598      	lsls	r0, r3, #22
   13c4c:	d51c      	bpl.n	13c88 <_fputwc_r+0x54>
   13c4e:	0490      	lsls	r0, r2, #18
   13c50:	d406      	bmi.n	13c60 <_fputwc_r+0x2c>
   13c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13c5c:	81a3      	strh	r3, [r4, #12]
   13c5e:	6662      	str	r2, [r4, #100]	; 0x64
   13c60:	4622      	mov	r2, r4
   13c62:	4628      	mov	r0, r5
   13c64:	f7ff ff90 	bl	13b88 <__fputwc>
   13c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13c6a:	07da      	lsls	r2, r3, #31
   13c6c:	4605      	mov	r5, r0
   13c6e:	d402      	bmi.n	13c76 <_fputwc_r+0x42>
   13c70:	89a3      	ldrh	r3, [r4, #12]
   13c72:	059b      	lsls	r3, r3, #22
   13c74:	d502      	bpl.n	13c7c <_fputwc_r+0x48>
   13c76:	4628      	mov	r0, r5
   13c78:	b003      	add	sp, #12
   13c7a:	bd30      	pop	{r4, r5, pc}
   13c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13c7e:	f7fa ff67 	bl	eb50 <__retarget_lock_release_recursive>
   13c82:	4628      	mov	r0, r5
   13c84:	b003      	add	sp, #12
   13c86:	bd30      	pop	{r4, r5, pc}
   13c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13c8a:	9101      	str	r1, [sp, #4]
   13c8c:	f7fa ff5e 	bl	eb4c <__retarget_lock_acquire_recursive>
   13c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c94:	9901      	ldr	r1, [sp, #4]
   13c96:	b29a      	uxth	r2, r3
   13c98:	e7d9      	b.n	13c4e <_fputwc_r+0x1a>
   13c9a:	bf00      	nop

00013c9c <_wcsnrtombs_l>:
   13c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ca0:	b08b      	sub	sp, #44	; 0x2c
   13ca2:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13ca6:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13ca8:	9103      	str	r1, [sp, #12]
   13caa:	4681      	mov	r9, r0
   13cac:	9205      	str	r2, [sp, #20]
   13cae:	461e      	mov	r6, r3
   13cb0:	f1b8 0f00 	cmp.w	r8, #0
   13cb4:	d05c      	beq.n	13d70 <_wcsnrtombs_l+0xd4>
   13cb6:	9b03      	ldr	r3, [sp, #12]
   13cb8:	2b00      	cmp	r3, #0
   13cba:	d05e      	beq.n	13d7a <_wcsnrtombs_l+0xde>
   13cbc:	9b05      	ldr	r3, [sp, #20]
   13cbe:	681d      	ldr	r5, [r3, #0]
   13cc0:	2f00      	cmp	r7, #0
   13cc2:	d06a      	beq.n	13d9a <_wcsnrtombs_l+0xfe>
   13cc4:	1e74      	subs	r4, r6, #1
   13cc6:	b34e      	cbz	r6, 13d1c <_wcsnrtombs_l+0x80>
   13cc8:	9b03      	ldr	r3, [sp, #12]
   13cca:	9304      	str	r3, [sp, #16]
   13ccc:	3d04      	subs	r5, #4
   13cce:	2600      	movs	r6, #0
   13cd0:	9501      	str	r5, [sp, #4]
   13cd2:	e00b      	b.n	13cec <_wcsnrtombs_l+0x50>
   13cd4:	9b03      	ldr	r3, [sp, #12]
   13cd6:	bb2b      	cbnz	r3, 13d24 <_wcsnrtombs_l+0x88>
   13cd8:	9b01      	ldr	r3, [sp, #4]
   13cda:	681a      	ldr	r2, [r3, #0]
   13cdc:	2a00      	cmp	r2, #0
   13cde:	d03a      	beq.n	13d56 <_wcsnrtombs_l+0xba>
   13ce0:	45bc      	cmp	ip, r7
   13ce2:	d25c      	bcs.n	13d9e <_wcsnrtombs_l+0x102>
   13ce4:	3c01      	subs	r4, #1
   13ce6:	1c63      	adds	r3, r4, #1
   13ce8:	4666      	mov	r6, ip
   13cea:	d017      	beq.n	13d1c <_wcsnrtombs_l+0x80>
   13cec:	f8d8 3000 	ldr.w	r3, [r8]
   13cf0:	9302      	str	r3, [sp, #8]
   13cf2:	9b01      	ldr	r3, [sp, #4]
   13cf4:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13cf8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13cfc:	9301      	str	r3, [sp, #4]
   13cfe:	a907      	add	r1, sp, #28
   13d00:	4643      	mov	r3, r8
   13d02:	4648      	mov	r0, r9
   13d04:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13d08:	47a8      	blx	r5
   13d0a:	1c42      	adds	r2, r0, #1
   13d0c:	d03a      	beq.n	13d84 <_wcsnrtombs_l+0xe8>
   13d0e:	eb00 0c06 	add.w	ip, r0, r6
   13d12:	45bc      	cmp	ip, r7
   13d14:	d9de      	bls.n	13cd4 <_wcsnrtombs_l+0x38>
   13d16:	9b02      	ldr	r3, [sp, #8]
   13d18:	e9c8 3b00 	strd	r3, fp, [r8]
   13d1c:	4630      	mov	r0, r6
   13d1e:	b00b      	add	sp, #44	; 0x2c
   13d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d24:	2800      	cmp	r0, #0
   13d26:	dd0e      	ble.n	13d46 <_wcsnrtombs_l+0xaa>
   13d28:	9b04      	ldr	r3, [sp, #16]
   13d2a:	9d01      	ldr	r5, [sp, #4]
   13d2c:	4418      	add	r0, r3
   13d2e:	1e5a      	subs	r2, r3, #1
   13d30:	a907      	add	r1, sp, #28
   13d32:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   13d36:	f811 3b01 	ldrb.w	r3, [r1], #1
   13d3a:	f802 3f01 	strb.w	r3, [r2, #1]!
   13d3e:	4572      	cmp	r2, lr
   13d40:	d1f9      	bne.n	13d36 <_wcsnrtombs_l+0x9a>
   13d42:	9501      	str	r5, [sp, #4]
   13d44:	9004      	str	r0, [sp, #16]
   13d46:	9b05      	ldr	r3, [sp, #20]
   13d48:	681a      	ldr	r2, [r3, #0]
   13d4a:	3204      	adds	r2, #4
   13d4c:	601a      	str	r2, [r3, #0]
   13d4e:	9b01      	ldr	r3, [sp, #4]
   13d50:	681a      	ldr	r2, [r3, #0]
   13d52:	2a00      	cmp	r2, #0
   13d54:	d1c4      	bne.n	13ce0 <_wcsnrtombs_l+0x44>
   13d56:	9b03      	ldr	r3, [sp, #12]
   13d58:	b10b      	cbz	r3, 13d5e <_wcsnrtombs_l+0xc2>
   13d5a:	9b05      	ldr	r3, [sp, #20]
   13d5c:	601a      	str	r2, [r3, #0]
   13d5e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   13d62:	2200      	movs	r2, #0
   13d64:	4630      	mov	r0, r6
   13d66:	f8c8 2000 	str.w	r2, [r8]
   13d6a:	b00b      	add	sp, #44	; 0x2c
   13d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d70:	9b03      	ldr	r3, [sp, #12]
   13d72:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13d76:	2b00      	cmp	r3, #0
   13d78:	d1a0      	bne.n	13cbc <_wcsnrtombs_l+0x20>
   13d7a:	9b05      	ldr	r3, [sp, #20]
   13d7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13d80:	681d      	ldr	r5, [r3, #0]
   13d82:	e79f      	b.n	13cc4 <_wcsnrtombs_l+0x28>
   13d84:	4606      	mov	r6, r0
   13d86:	218a      	movs	r1, #138	; 0x8a
   13d88:	2200      	movs	r2, #0
   13d8a:	4630      	mov	r0, r6
   13d8c:	f8c9 1000 	str.w	r1, [r9]
   13d90:	f8c8 2000 	str.w	r2, [r8]
   13d94:	b00b      	add	sp, #44	; 0x2c
   13d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d9a:	463e      	mov	r6, r7
   13d9c:	e7be      	b.n	13d1c <_wcsnrtombs_l+0x80>
   13d9e:	4666      	mov	r6, ip
   13da0:	e7bc      	b.n	13d1c <_wcsnrtombs_l+0x80>
   13da2:	bf00      	nop

00013da4 <_wcsnrtombs_r>:
   13da4:	b510      	push	{r4, lr}
   13da6:	b084      	sub	sp, #16
   13da8:	4c05      	ldr	r4, [pc, #20]	; (13dc0 <_wcsnrtombs_r+0x1c>)
   13daa:	9806      	ldr	r0, [sp, #24]
   13dac:	9000      	str	r0, [sp, #0]
   13dae:	9807      	ldr	r0, [sp, #28]
   13db0:	9001      	str	r0, [sp, #4]
   13db2:	4804      	ldr	r0, [pc, #16]	; (13dc4 <_wcsnrtombs_r+0x20>)
   13db4:	6800      	ldr	r0, [r0, #0]
   13db6:	9402      	str	r4, [sp, #8]
   13db8:	f7ff ff70 	bl	13c9c <_wcsnrtombs_l>
   13dbc:	b004      	add	sp, #16
   13dbe:	bd10      	pop	{r4, pc}
   13dc0:	20002f38 	.word	0x20002f38
   13dc4:	200034c0 	.word	0x200034c0

00013dc8 <__smakebuf_r>:
   13dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13dcc:	898b      	ldrh	r3, [r1, #12]
   13dce:	460c      	mov	r4, r1
   13dd0:	0799      	lsls	r1, r3, #30
   13dd2:	b096      	sub	sp, #88	; 0x58
   13dd4:	d508      	bpl.n	13de8 <__smakebuf_r+0x20>
   13dd6:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13dda:	2201      	movs	r2, #1
   13ddc:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13de0:	6023      	str	r3, [r4, #0]
   13de2:	b016      	add	sp, #88	; 0x58
   13de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13dec:	2900      	cmp	r1, #0
   13dee:	4606      	mov	r6, r0
   13df0:	db25      	blt.n	13e3e <__smakebuf_r+0x76>
   13df2:	466a      	mov	r2, sp
   13df4:	f000 f8ac 	bl	13f50 <_fstat_r>
   13df8:	2800      	cmp	r0, #0
   13dfa:	db1f      	blt.n	13e3c <__smakebuf_r+0x74>
   13dfc:	9d01      	ldr	r5, [sp, #4]
   13dfe:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13e02:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13e06:	fab5 f585 	clz	r5, r5
   13e0a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13e0e:	096d      	lsrs	r5, r5, #5
   13e10:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13e14:	4641      	mov	r1, r8
   13e16:	4630      	mov	r0, r6
   13e18:	f7f9 fd56 	bl	d8c8 <_malloc_r>
   13e1c:	b1e0      	cbz	r0, 13e58 <__smakebuf_r+0x90>
   13e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e22:	f8c4 8014 	str.w	r8, [r4, #20]
   13e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13e2a:	6020      	str	r0, [r4, #0]
   13e2c:	6120      	str	r0, [r4, #16]
   13e2e:	81a3      	strh	r3, [r4, #12]
   13e30:	bb35      	cbnz	r5, 13e80 <__smakebuf_r+0xb8>
   13e32:	433b      	orrs	r3, r7
   13e34:	81a3      	strh	r3, [r4, #12]
   13e36:	b016      	add	sp, #88	; 0x58
   13e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e3c:	89a3      	ldrh	r3, [r4, #12]
   13e3e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13e42:	d019      	beq.n	13e78 <__smakebuf_r+0xb0>
   13e44:	f04f 0840 	mov.w	r8, #64	; 0x40
   13e48:	2500      	movs	r5, #0
   13e4a:	4641      	mov	r1, r8
   13e4c:	4630      	mov	r0, r6
   13e4e:	462f      	mov	r7, r5
   13e50:	f7f9 fd3a 	bl	d8c8 <_malloc_r>
   13e54:	2800      	cmp	r0, #0
   13e56:	d1e2      	bne.n	13e1e <__smakebuf_r+0x56>
   13e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e5c:	059a      	lsls	r2, r3, #22
   13e5e:	d4c0      	bmi.n	13de2 <__smakebuf_r+0x1a>
   13e60:	f023 0303 	bic.w	r3, r3, #3
   13e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13e68:	f043 0302 	orr.w	r3, r3, #2
   13e6c:	2101      	movs	r1, #1
   13e6e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13e72:	81a3      	strh	r3, [r4, #12]
   13e74:	6022      	str	r2, [r4, #0]
   13e76:	e7b4      	b.n	13de2 <__smakebuf_r+0x1a>
   13e78:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13e7c:	462f      	mov	r7, r5
   13e7e:	e7c9      	b.n	13e14 <__smakebuf_r+0x4c>
   13e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13e84:	4630      	mov	r0, r6
   13e86:	f000 f879 	bl	13f7c <_isatty_r>
   13e8a:	b910      	cbnz	r0, 13e92 <__smakebuf_r+0xca>
   13e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e90:	e7cf      	b.n	13e32 <__smakebuf_r+0x6a>
   13e92:	89a3      	ldrh	r3, [r4, #12]
   13e94:	f023 0303 	bic.w	r3, r3, #3
   13e98:	f043 0301 	orr.w	r3, r3, #1
   13e9c:	b21b      	sxth	r3, r3
   13e9e:	e7c8      	b.n	13e32 <__smakebuf_r+0x6a>

00013ea0 <__swbuf_r>:
   13ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ea2:	460d      	mov	r5, r1
   13ea4:	4614      	mov	r4, r2
   13ea6:	4606      	mov	r6, r0
   13ea8:	b110      	cbz	r0, 13eb0 <__swbuf_r+0x10>
   13eaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13eac:	2b00      	cmp	r3, #0
   13eae:	d04c      	beq.n	13f4a <__swbuf_r+0xaa>
   13eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13eb4:	69a3      	ldr	r3, [r4, #24]
   13eb6:	60a3      	str	r3, [r4, #8]
   13eb8:	0717      	lsls	r7, r2, #28
   13eba:	b290      	uxth	r0, r2
   13ebc:	d51b      	bpl.n	13ef6 <__swbuf_r+0x56>
   13ebe:	6923      	ldr	r3, [r4, #16]
   13ec0:	b1cb      	cbz	r3, 13ef6 <__swbuf_r+0x56>
   13ec2:	b2ed      	uxtb	r5, r5
   13ec4:	0481      	lsls	r1, r0, #18
   13ec6:	462f      	mov	r7, r5
   13ec8:	d522      	bpl.n	13f10 <__swbuf_r+0x70>
   13eca:	6822      	ldr	r2, [r4, #0]
   13ecc:	6961      	ldr	r1, [r4, #20]
   13ece:	1ad3      	subs	r3, r2, r3
   13ed0:	4299      	cmp	r1, r3
   13ed2:	dd29      	ble.n	13f28 <__swbuf_r+0x88>
   13ed4:	3301      	adds	r3, #1
   13ed6:	68a1      	ldr	r1, [r4, #8]
   13ed8:	3901      	subs	r1, #1
   13eda:	60a1      	str	r1, [r4, #8]
   13edc:	1c51      	adds	r1, r2, #1
   13ede:	6021      	str	r1, [r4, #0]
   13ee0:	7015      	strb	r5, [r2, #0]
   13ee2:	6962      	ldr	r2, [r4, #20]
   13ee4:	429a      	cmp	r2, r3
   13ee6:	d027      	beq.n	13f38 <__swbuf_r+0x98>
   13ee8:	89a3      	ldrh	r3, [r4, #12]
   13eea:	07db      	lsls	r3, r3, #31
   13eec:	d501      	bpl.n	13ef2 <__swbuf_r+0x52>
   13eee:	2d0a      	cmp	r5, #10
   13ef0:	d022      	beq.n	13f38 <__swbuf_r+0x98>
   13ef2:	4638      	mov	r0, r7
   13ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ef6:	4621      	mov	r1, r4
   13ef8:	4630      	mov	r0, r6
   13efa:	f7ff fddf 	bl	13abc <__swsetup_r>
   13efe:	bb08      	cbnz	r0, 13f44 <__swbuf_r+0xa4>
   13f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13f04:	6923      	ldr	r3, [r4, #16]
   13f06:	b290      	uxth	r0, r2
   13f08:	b2ed      	uxtb	r5, r5
   13f0a:	0481      	lsls	r1, r0, #18
   13f0c:	462f      	mov	r7, r5
   13f0e:	d4dc      	bmi.n	13eca <__swbuf_r+0x2a>
   13f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13f14:	81a2      	strh	r2, [r4, #12]
   13f16:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13f18:	6961      	ldr	r1, [r4, #20]
   13f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13f1e:	6662      	str	r2, [r4, #100]	; 0x64
   13f20:	6822      	ldr	r2, [r4, #0]
   13f22:	1ad3      	subs	r3, r2, r3
   13f24:	4299      	cmp	r1, r3
   13f26:	dcd5      	bgt.n	13ed4 <__swbuf_r+0x34>
   13f28:	4621      	mov	r1, r4
   13f2a:	4630      	mov	r0, r6
   13f2c:	f7fd fae2 	bl	114f4 <_fflush_r>
   13f30:	b940      	cbnz	r0, 13f44 <__swbuf_r+0xa4>
   13f32:	6822      	ldr	r2, [r4, #0]
   13f34:	2301      	movs	r3, #1
   13f36:	e7ce      	b.n	13ed6 <__swbuf_r+0x36>
   13f38:	4621      	mov	r1, r4
   13f3a:	4630      	mov	r0, r6
   13f3c:	f7fd fada 	bl	114f4 <_fflush_r>
   13f40:	2800      	cmp	r0, #0
   13f42:	d0d6      	beq.n	13ef2 <__swbuf_r+0x52>
   13f44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13f48:	e7d3      	b.n	13ef2 <__swbuf_r+0x52>
   13f4a:	f7fa f9fb 	bl	e344 <__sinit>
   13f4e:	e7af      	b.n	13eb0 <__swbuf_r+0x10>

00013f50 <_fstat_r>:
   13f50:	b570      	push	{r4, r5, r6, lr}
   13f52:	460c      	mov	r4, r1
   13f54:	4d08      	ldr	r5, [pc, #32]	; (13f78 <_fstat_r+0x28>)
   13f56:	4603      	mov	r3, r0
   13f58:	2600      	movs	r6, #0
   13f5a:	4620      	mov	r0, r4
   13f5c:	4611      	mov	r1, r2
   13f5e:	461c      	mov	r4, r3
   13f60:	602e      	str	r6, [r5, #0]
   13f62:	f7f8 fa1d 	bl	c3a0 <_fstat>
   13f66:	1c43      	adds	r3, r0, #1
   13f68:	d000      	beq.n	13f6c <_fstat_r+0x1c>
   13f6a:	bd70      	pop	{r4, r5, r6, pc}
   13f6c:	682b      	ldr	r3, [r5, #0]
   13f6e:	2b00      	cmp	r3, #0
   13f70:	d0fb      	beq.n	13f6a <_fstat_r+0x1a>
   13f72:	6023      	str	r3, [r4, #0]
   13f74:	bd70      	pop	{r4, r5, r6, pc}
   13f76:	bf00      	nop
   13f78:	200077c0 	.word	0x200077c0

00013f7c <_isatty_r>:
   13f7c:	b538      	push	{r3, r4, r5, lr}
   13f7e:	4d07      	ldr	r5, [pc, #28]	; (13f9c <_isatty_r+0x20>)
   13f80:	2200      	movs	r2, #0
   13f82:	4604      	mov	r4, r0
   13f84:	4608      	mov	r0, r1
   13f86:	602a      	str	r2, [r5, #0]
   13f88:	f7f8 fa10 	bl	c3ac <_isatty>
   13f8c:	1c43      	adds	r3, r0, #1
   13f8e:	d000      	beq.n	13f92 <_isatty_r+0x16>
   13f90:	bd38      	pop	{r3, r4, r5, pc}
   13f92:	682b      	ldr	r3, [r5, #0]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d0fb      	beq.n	13f90 <_isatty_r+0x14>
   13f98:	6023      	str	r3, [r4, #0]
   13f9a:	bd38      	pop	{r3, r4, r5, pc}
   13f9c:	200077c0 	.word	0x200077c0

00013fa0 <___Z14set_audioClockilmb_veneer>:
   13fa0:	f85f f000 	ldr.w	pc, [pc]	; 13fa4 <___Z14set_audioClockilmb_veneer+0x4>
   13fa4:	60001671 	.word	0x60001671

00013fa8 <___reboot_Teensyduino__veneer>:
   13fa8:	f85f f000 	ldr.w	pc, [pc]	; 13fac <___reboot_Teensyduino__veneer+0x4>
   13fac:	60001ccd 	.word	0x60001ccd

00013fb0 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   13fb0:	f85f f000 	ldr.w	pc, [pc]	; 13fb4 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   13fb4:	60001841 	.word	0x60001841

00013fb8 <___init_veneer>:
   13fb8:	f85f f000 	ldr.w	pc, [pc]	; 13fbc <___init_veneer+0x4>
   13fbc:	60001d75 	.word	0x60001d75

00013fc0 <___ZN7TwoWire5beginEv_veneer>:
   13fc0:	f85f f000 	ldr.w	pc, [pc]	; 13fc4 <___ZN7TwoWire5beginEv_veneer+0x4>
   13fc4:	600017d9 	.word	0x600017d9
	...

Disassembly of section .fini:

00013fd0 <_fini>:
   13fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13fd2:	bf00      	nop
